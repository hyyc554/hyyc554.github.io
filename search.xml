<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>Go分布式锁</title>
      <link href="2021/04/20/locks/"/>
      <url>2021/04/20/locks/</url>
      
        <content type="html"><![CDATA[<h2 id="分布式锁基础"><a href="#分布式锁基础" class="headerlink" title="分布式锁基础"></a>分布式锁基础</h2><p>在分布式系统中，为了实现对互斥资源的安全访问（独占），必须要用到分布式锁。另外在工作中，还有一个应用场景是，在分布式的后台服务中，某些服务只允许单个实例（机器或 Docker）运行，其他的备份机器作为 BackUps 备份节点（比如在笔者的项目中，负责数据同步的逻辑同一时刻只能有一台机器进程来执行），当正在运行的单实例机器（进程）故障后，在线的 BackUps 按照排队顺序，争抢到分布式锁，继续执行，这样也保证了单实例场景的高可用性。</p><p>分布式锁应具备以下特点：</p><ul><li>互斥性：任意时刻，同一个锁，只有一个进程能持有</li><li>安全性：避免死锁，当进程没有主动释放锁（进程崩溃退出），保证其他进程能够加锁</li><li>可用性：当提供锁的服务节点故障（宕机）时，热备节点能够接替故障的节点继续提供服务，并保证自身持有的数据与故障节点一致</li><li>对称性：对同一个锁，加锁和解锁必须是同一个进程，即某进程不能把其他进程持有的锁给释放了</li></ul><p>可以 基于数据库 / 缓存 / 中间件等实现分布式锁，当下比较主流的是使用 Redis、Etcd 或 ZooKeeper 等开源项目来构建 。</p><h2 id="分布式锁的实现方案"><a href="#分布式锁的实现方案" class="headerlink" title="分布式锁的实现方案"></a>分布式锁的实现方案</h2><p>要实现分布式锁，核心在两点，一是如何达成共识、二是状态同步。目前的实现方式一般会借助于 Redis/ZooKeeper/Etcd 来实现：</p><ol><li>采用 Redis 的 <code>SETNX</code> 命令 + Lua 原子脚本来实现（单 Redis 实例），存在单点的风险</li><li>对 <code>1</code> 的改进版是采用 Redis Master 集群的 <a href="http://stor.51cto.com/art/201901/590874.htm" target="_blank" rel="noopener">Redlock</a> 改进算法</li><li><a href="https://juejin.im/post/5c01532ef265da61362232ed" target="_blank" rel="noopener">基于 ZooKeeper 实现的分布式锁</a></li><li>基于 Etcd 实现的分布式锁：<a href="https://gitbook.cn/books/5bb037728f7d8b7e900ff2d7/index.html" target="_blank" rel="noopener">分布式锁的最佳实践之：基于 Etcd 的分布式锁</a></li></ol><p>接下来我将主要展示一下，golang基于这些开源库的分布式锁的实现</p><h2 id="Redis实现"><a href="#Redis实现" class="headerlink" title="Redis实现"></a>Redis实现</h2><p>redis的实现已经有了很多成熟的开源库，比如<code>github.com/bsm/redislock</code>，以下是实现：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"context"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"log"</span><br><span class="hljs-string">"time"</span><br><br><span class="hljs-string">"github.com/bsm/redislock"</span><br><span class="hljs-string">"github.com/go-redis/redis/v8"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// Connect to redis.</span><br>client := redis.NewClient(&amp;redis.Options&#123;<br>Network: <span class="hljs-string">"tcp"</span>,<br>Addr:    <span class="hljs-string">"127.0.0.1:6379"</span>,<br>&#125;)<br><span class="hljs-keyword">defer</span> client.Close()<br><br><span class="hljs-comment">// Create a new lock client.</span><br>locker := redislock.New(client)<br><br>ctx := context.Background()<br><br><span class="hljs-comment">// Try to obtain lock.</span><br>lock, err := locker.Obtain(ctx, <span class="hljs-string">"my-key"</span>, <span class="hljs-number">5</span>*time.Second, <span class="hljs-literal">nil</span>)<br><span class="hljs-keyword">if</span> err == redislock.ErrNotObtained &#123;<br>fmt.Println(<span class="hljs-string">"Could not obtain lock!"</span>)<br><span class="hljs-keyword">return</span><br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br><span class="hljs-comment">// Don't forget to defer Release.</span><br><span class="hljs-keyword">defer</span> lock.Release(ctx)<br>fmt.Println(<span class="hljs-string">"I have a lock!"</span>)<br><br><span class="hljs-comment">// Sleep and check the remaining TTL.</span><br>time.Sleep(<span class="hljs-number">50</span> * time.Millisecond)<br><span class="hljs-keyword">if</span> ttl, err := lock.TTL(ctx); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ttl &gt; <span class="hljs-number">0</span> &#123;<br>fmt.Println(<span class="hljs-string">"Yay, I still have my lock!"</span>)<br>&#125;<br><br><span class="hljs-comment">// Extend my lock.</span><br><span class="hljs-keyword">if</span> err := lock.Refresh(ctx, <span class="hljs-number">10</span>*time.Second, <span class="hljs-literal">nil</span>); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125;<br><br><span class="hljs-comment">// Sleep a little longer, then check.</span><br>time.Sleep(<span class="hljs-number">11</span> * time.Second)<br><span class="hljs-keyword">if</span> ttl, err := lock.TTL(ctx); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatalln(err)<br>&#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> ttl == <span class="hljs-number">0</span> &#123;<br>fmt.Println(<span class="hljs-string">"Now, my lock has expired!"</span>)<br>&#125;<br><br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ETCD实现"><a href="#ETCD实现" class="headerlink" title="ETCD实现"></a>ETCD实现</h2><p>这些年，随着 <a href="https://raft.github.io/" target="_blank" rel="noopener">Raft 协议</a> 的广泛应用，涌现出很多的基于此协议实现的高可用分布式系统，比较知名的有 <a href="https://github.com/etcd-io/etcd" target="_blank" rel="noopener">Etcd</a>、<a href="https://github.com/hashicorp/consul" target="_blank" rel="noopener">Consul</a> 等，由于其内部实现了 <a href="https://zh.wikipedia.org/wiki/CAP定理" target="_blank" rel="noopener">分布式一致性</a>，所以非常适合做分布式锁。本片文章就以 Etcd 为例，来介绍下构建分布式锁的方法。值得注意的是，Etcd 分布式锁的实现是在客户端做的。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"context"</span><br><span class="hljs-string">"flag"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"github.com/coreos/etcd/clientv3"</span><br><span class="hljs-string">"github.com/coreos/etcd/clientv3/concurrency"</span><br><span class="hljs-string">"log"</span><br><span class="hljs-string">"time"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">var</span> name = flag.String(<span class="hljs-string">"name"</span>, <span class="hljs-string">""</span>, <span class="hljs-string">"give a name"</span>)<br>flag.Parse()<br><span class="hljs-comment">// Create a etcd client</span><br>cli, err := clientv3.New(clientv3.Config&#123;Endpoints: []<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">"localhost:2379"</span>&#125;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br><span class="hljs-keyword">defer</span> cli.Close()<br><span class="hljs-comment">// create a sessions to aqcuire a lock</span><br>s, _ := concurrency.NewSession(cli)<br><span class="hljs-keyword">defer</span> s.Close()<br>l := concurrency.NewMutex(s, <span class="hljs-string">"/distributed-lock/"</span>)<br>ctx := context.Background()<br><span class="hljs-comment">// acquire lock (or wait to have it)</span><br><span class="hljs-keyword">if</span> err := l.Lock(ctx); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">"acquired lock for "</span>, *name)<br>fmt.Println(<span class="hljs-string">"Do some work in"</span>, *name)<br>time.Sleep(<span class="hljs-number">50</span> * time.Second)<br><span class="hljs-keyword">if</span> err := l.Unlock(ctx); err != <span class="hljs-literal">nil</span> &#123;<br>log.Fatal(err)<br>&#125;<br>fmt.Println(<span class="hljs-string">"released lock for "</span>, *name)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="ZooKeeper实现"><a href="#ZooKeeper实现" class="headerlink" title="ZooKeeper实现"></a>ZooKeeper实现</h2><p>基于ZooKeeper的锁与基于Redis的锁的不同之处在于Lock成功之前会一直阻塞，这与我们单机场景中的<code>mutex.Lock</code>很相似。</p><p>其原理也是基于临时Sequence节点和watch API，例如我们这里使用的是<code>/lock</code>节点。Lock会在该节点下的节点列表中插入自己的值，只要节点下的子节点发生变化，就会通知所有watch该节点的程序。这时候程序会检查当前节点下最小的子节点的id是否与自己的一致。如果一致，说明加锁成功了。</p><p>这种分布式的阻塞锁比较适合分布式任务调度场景，但不适合高频次持锁时间短的抢锁场景。按照Google的Chubby论文里的阐述，基于强一致协议的锁适用于<code>粗粒度</code>的加锁操作。这里的粗粒度指锁占用时间较长。我们在使用时也应思考在自己的业务场景中使用是否合适。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">"time"</span><br><br>    <span class="hljs-string">"github.com/samuel/go-zookeeper/zk"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    c, _, err := zk.Connect([]<span class="hljs-keyword">string</span>&#123;<span class="hljs-string">"127.0.0.1"</span>&#125;, time.Second) <span class="hljs-comment">//*10)</span><br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    l := zk.NewLock(c, <span class="hljs-string">"/lock"</span>, zk.WorldACL(zk.PermAll))<br>    err = l.Lock()<br>    <span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>        <span class="hljs-built_in">panic</span>(err)<br>    &#125;<br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">"lock succ, do your business logic"</span>)<br><br>    time.Sleep(time.Second * <span class="hljs-number">10</span>)<br><br>    <span class="hljs-comment">// do some thing</span><br>    l.Unlock()<br>    <span class="hljs-built_in">println</span>(<span class="hljs-string">"unlock succ, finish business logic"</span>)<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="如何选择合适的锁"><a href="#如何选择合适的锁" class="headerlink" title="如何选择合适的锁"></a>如何选择合适的锁</h2><p>业务还在单机就可以搞定的量级时，那么按照需求使用任意的单机锁方案就可以。</p><p>如果发展到了分布式服务阶段，但业务规模不大，qps很小的情况下，使用哪种锁方案都差不多。如果公司内已有可以使用的ZooKeeper、etcd或者Redis集群，那么就尽量在不引入新的技术栈的情况下满足业务需求。</p><p>业务发展到一定量级的话，就需要从多方面来考虑了。首先是你的锁是否在任何恶劣的条件下都不允许数据丢失，如果不允许，那么就不要使用Redis的<code>setnx</code>的简单锁。</p><p>对锁数据的可靠性要求极高的话，那只能使用etcd或者ZooKeeper这种通过一致性协议保证数据可靠性的锁方案。但可靠的背面往往都是较低的吞吐量和较高的延迟。需要根据业务的量级对其进行压力测试，以确保分布式锁所使用的etcd或ZooKeeper集群可以承受得住实际的业务请求压力。需要注意的是，etcd和Zookeeper集群是没有办法通过增加节点来提高其性能的。要对其进行横向扩展，只能增加搭建多个集群来支持更多的请求。这会进一步提高对运维和监控的要求。多个集群可能需要引入proxy，没有proxy那就需要业务去根据某个业务id来做分片。如果业务已经上线的情况下做扩展，还要考虑数据的动态迁移。这些都不是容易的事情。</p><p>在选择具体的方案时，还是需要多加思考，对风险早做预估。</p>]]></content>
      
      
      
        <tags>
            
            <tag> go </tag>
            
            <tag> 分布式 </tag>
            
            <tag> redis </tag>
            
            <tag> etcd </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>深入Kubernetes——01项目本质</title>
      <link href="2021/04/14/%E6%B7%B1%E5%85%A5Kubernetes%E2%80%94%E2%80%9401%E9%A1%B9%E7%9B%AE%E6%9C%AC%E8%B4%A8/"/>
      <url>2021/04/14/%E6%B7%B1%E5%85%A5Kubernetes%E2%80%94%E2%80%9401%E9%A1%B9%E7%9B%AE%E6%9C%AC%E8%B4%A8/</url>
      
        <content type="html"><![CDATA[<p>Kubernetes 项目的本质，是为用户提供一个具有普遍意义的容器编排工具。</p><p>Kubernetes 项目为用户提供的不仅限于一个工具。它真正的价值，在于提供了一套基于容器构建分布式系统的基础依赖。</p><p>全局架构：</p><p><a href="https://imgtu.com/i/cgS5kV" target="_blank" rel="noopener"><img src="https://z3.ax1x.com/2021/04/14/cgS5kV.png" alt="cgS5kV.png"></a></p><p>功能全景图：</p><p><img src="https://z3.ax1x.com/2021/04/14/cgpwjJ.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
            <tag> K8S </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2021书单</title>
      <link href="2021/01/05/booklist/"/>
      <url>2021/01/05/booklist/</url>
      
        <content type="html"><![CDATA[<ul><li>人类简史</li><li>自卑与超越</li><li>财富自由之路</li><li>放大</li><li>浪潮之巅</li><li>麦田里的守望者</li><li>老人与海</li><li>地球上最孤单的动物</li><li>how to</li><li>洞见</li></ul><p>后面补上书评。。。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>sentry部署</title>
      <link href="2020/12/26/sentry_init/"/>
      <url>2020/12/26/sentry_init/</url>
      
        <content type="html"><![CDATA[<p>Sentry 是一个日志收集和统计平台, 由客户端和服务端组成，目前支持大部分主流的编程语言，并提供 SDK，当程序出现异常就向服务端发送消息，服务端将消息记录到数据库中并提供一个 Web 端显示。</p><p><a href="https://imgchr.com/i/rhz878" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/26/rhz878.png" alt="rhz878.png"></a></p><h2 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h2><p>前置条件</p><ul><li>Docker 19.03.6+</li><li>Compose 1.24.1+</li></ul><p>硬件最低要求：</p><ul><li>2G+内存</li></ul><h2 id="部署流程"><a href="#部署流程" class="headerlink" title="部署流程"></a>部署流程</h2><h3 id="拉取源码"><a href="#拉取源码" class="headerlink" title="拉取源码"></a>拉取源码</h3><p>做完了准备工作，就可以开始搭建 sentry 了。</p><p>从 GitHub 上面获取最新的 sentry</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">git <span class="hljs-built_in">clone</span> https://github.com/getsentry/onpremise.git<br></code></pre></div></td></tr></table></figure><h3 id="自定义配置"><a href="#自定义配置" class="headerlink" title="自定义配置"></a>自定义配置</h3><p>个性化配置：</p><ul><li><code>config.yml</code></li><li><code>sentry.conf.py</code></li><li><code>.env</code> w/ environment variables</li><li><code>sentry.requirements.example.txt</code></li></ul><p>预先添加一个企业微信的插件，在<code>sentry.requirements.example.txt</code>写入：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">sentry-wxwork</span><br></code></pre></div></td></tr></table></figure><p>邮件相关配置：</p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">###############<br># Mail Server #<br>###############<br><br>mail.backend: <span class="hljs-string">'smtp'</span>  # Use dummy <span class="hljs-keyword">if</span> you want to disable email entirely<br>mail.host: <span class="hljs-string">'smtp.qq.com'</span><br>mail.port: <span class="hljs-number">25</span><br>mail.username: <span class="hljs-string">'1415940604@qq.com'</span><br>mail.password: <span class="hljs-string">'XXXXXXXXXXXX'</span><br># mail.use-tls: fals/e<br># The email address to send on behalf <span class="hljs-keyword">of</span><br>mail.<span class="hljs-keyword">from</span>: <span class="hljs-string">'1415940604@qq.com'</span><br></code></pre></div></td></tr></table></figure><h3 id="启动"><a href="#启动" class="headerlink" title="启动"></a>启动</h3><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">./install.<span class="hljs-keyword">sh</span><br>docker-compose <span class="hljs-keyword">up</span> -d<br></code></pre></div></td></tr></table></figure><h3 id="访问"><a href="#访问" class="headerlink" title="访问"></a>访问</h3><p>127.0.0.1:9000</p><p><a href="https://imgchr.com/i/rhxNsx" target="_blank" rel="noopener"><img src="https://s3.ax1x.com/2020/12/26/rhxNsx.png" alt="rhxNsx.png"></a></p>]]></content>
      
      
      
        <tags>
            
            <tag> sentry </tag>
            
            <tag> 日志 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MongoDB——TTL索引</title>
      <link href="2020/12/15/mongo_ttl/"/>
      <url>2020/12/15/mongo_ttl/</url>
      
        <content type="html"><![CDATA[<p>MongoDB 有几种很实用的特殊索引，在特定场景中可以达到事半功倍的效果，TTL 索引即其中之一。</p><p>过期特定数据是一种常见场景，对 IoT 设备日志、网站 session 等数据而言，我们一般只关心一定时间内的数据，过期数据需要及时删除，TTL 索引很适合用于该场景。</p><h2 id="索引创建"><a href="#索引创建" class="headerlink" title="索引创建"></a>索引创建</h2><p>TTL 索引是特殊的 <strong>单字段</strong> 索引，且字段类型必须是：</p><ul><li>BSON <a href="https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date" target="_blank" rel="noopener">date</a>，或时间戳</li><li>BSON date 数组</li></ul><p>创建时指定 <code>expireAfterSeconds</code> 属性即可：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">createIndex(</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">"lastModifiedDate":</span> <span class="hljs-number">1</span> <span class="hljs-string">&#125;,</span> <span class="hljs-string">&#123;</span> <span class="hljs-attr">expireAfterSeconds:</span> <span class="hljs-number">60</span> <span class="hljs-string">*</span> <span class="hljs-number">60</span> <span class="hljs-string">&#125;</span> <span class="hljs-string">)</span><br></code></pre></div></td></tr></table></figure><ul><li><code>lastModifiedDate</code> 类型为 BSON <a href="https://docs.mongodb.com/manual/reference/bson-types/#document-bson-type-date" target="_blank" rel="noopener">date</a>；</li><li><code>lastModifiedDate</code> 单位为秒；</li></ul><p>每个文档的 <code>lastModifiedDate</code> 时间点加 <code>expireAfterSeconds</code> 指定的时间段即为该文档的 <strong>过期时间点</strong>，到达该时间点后，TTL 索引将文档标记为过期，并由专用的后台 TTL 线程定期检查、删除（默认 60s 运行一次）。</p><p>若 TTL 索引字段为 date 数组，则 MongoDB 选择其中 <strong>最早</strong> 的时间来计算过期时间。</p><p>注意以下场景中，文档永远无法过期：</p><ul><li>TTL 字段不是 date/date 数组；</li><li>某文档不包含 TTL 字段；</li></ul><h2 id="文档删除"><a href="#文档删除" class="headerlink" title="文档删除"></a>文档删除</h2><p>索引创建方式会影响 TTL 线程删除过期文档的时间：</p><ul><li>后台方式（<code>{background: true}</code>）：创建过程中，即开始删除；</li><li>前台方式（<code>{background: false}</code>）：创建完成后，才开始删除；</li></ul><p>TTL 线程每 60s 执行一次删除动作，并且删除动作耗时受 MongoDB 实例负载影响，因此文档过期与文档被删除之间存在 <strong>不定时延</strong>，可能立即被删除，也可能超过 60s 后才被删除。</p><p>若 MongoDB 以复制集方式部署，则 TTL 线程仅在 <a href="https://docs.mongodb.com/manual/reference/glossary/#term-primary" target="_blank" rel="noopener">主节点</a> 上运行删除任务，<a href="https://docs.mongodb.com/manual/reference/glossary/#term-secondary" target="_blank" rel="noopener">复制节点</a> 通过 <strong>复制</strong> 主节点的删除操作完成删除。</p><h2 id="注意事项"><a href="#注意事项" class="headerlink" title="注意事项"></a>注意事项</h2><ul><li>TTL 索引是单字段索引，复合索引将 <strong>忽略</strong> <code>expireAfterSeconds</code> 属性；</li><li><code>_id</code> 字段不支持 TTL 索引；</li><li>MongoDB 无法删除 <a href="https://docs.mongodb.com/manual/core/capped-collections/" target="_blank" rel="noopener">capped 集合</a> 中的文档，因此无法在 capped 集合上创建 TTL 索引；</li><li><a href="https://docs.mongodb.com/manual/reference/command/collMod/#dbcmd.collMod" target="_blank" rel="noopener">collMod</a> 命令加 <a href="https://docs.mongodb.com/manual/reference/command/collMod/#index" target="_blank" rel="noopener">index</a> 标志可以修改已有 TTL 索引的 <code>expireAfterSeconds</code> 属性值；</li><li>若字段 <code>A</code> 上已经有一个非 TTL 的索引，则只能先 drop 该索引，然后才能在 <code>A</code> 上创建 TTL 索引；</li></ul><hr><p>参考：</p><ul><li><a href="https://docs.mongodb.com/manual/core/index-ttl/" target="_blank" rel="noopener">MongoDB TTL index 文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> mongodb </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>S3协议入门</title>
      <link href="2020/12/12/S3%E5%89%8D%E8%A8%80/"/>
      <url>2020/12/12/S3%E5%89%8D%E8%A8%80/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>S3是AWS服务最早推出的几项服务之一，也是使用最为频繁的几个AWS服务之一。官网文档以及网上文章零零散散看了不少,实际使用中也用过S3的大多数功能，但“纸上得来终觉浅，绝知此事要躬行”，决定给自己挖个坑，结合已读资料和实际使用经验，系统地来梳理一下S3的已有功能。</p><h3 id="S3-是什么"><a href="#S3-是什么" class="headerlink" title="S3 是什么"></a>S3 是什么</h3><ul><li>Amazon Simple Storage Service(简称S3)，是亚马逊AWS服务在2006年第一个正式对外推出的云计算服务。</li><li>Amazon S3 是互联网存储解决方案。该服务旨在降低开发人员进行网络规模级计算的难度。<br>Amazon S3 提供了一个简单 Web 服务接口，可用于随时在 Web 上的任何位置存储和检索任何数量的数据。此服务让所有开发人员都能访问同一个具备高扩展性、可靠性、安全性和快速价廉的数据存储基础设施， Amazon 用它来运行其全球的网站网络。此服务旨在为开发人员带来最大化的规模效益。</li><li>对象存储<ul><li>数据(包括文件/视频/图片)以及相关的源数据都是以对象(objects)的方式来存储的</li><li>不能以S3来当做操作系统的文件系统</li><li>对象（object）最大支持5TB</li></ul></li><li>高耐用<ul><li>Object 提供11个9，99.999999999%的持久性<ul><li>意味着每一亿个object才会丢失一个object</li><li>S3存储的对象会在同一个Region的多个AZ中保存多份拷贝</li></ul></li></ul></li><li>高可用<ul><li>提供99.99%的可用性</li></ul></li><li>高扩展<ul><li>提供无限的存储空间</li></ul></li><li>基于WEB<ul><li>上传和下载数据基于HTTP/HTTPS请求</li></ul></li><li>安全性<ul><li>可以选择多种方式来加密数据</li></ul></li><li>计费模式<ul><li>Pay as you go - Pay only for what you use</li></ul></li></ul><h3 id="S3-能用来做什么"><a href="#S3-能用来做什么" class="headerlink" title="S3 能用来做什么"></a>S3 能用来做什么</h3><ul><li>备份</li><li>存储内容</li><li>大数据分析</li><li>挂载静态网站</li><li>灾难恢复</li></ul><h3 id="S3桶-Bucket"><a href="#S3桶-Bucket" class="headerlink" title="S3桶(Bucket)"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UsingBucket.html" target="_blank" rel="noopener">S3桶(Bucket)</a></h3><ul><li>Bucket就是用来存储对象（object）的一个集合<ul><li>Bucket和Object都是资源(resources), 也就是aws能操作的一个实体(entity)</li></ul></li><li>可以容纳无限的Object</li><li>默认一个账户可以创建100个bucket，这个上限是软性限制，可以通过向AWS提交case来提高上限</li><li>Bucket需要归属于某个Region，不是Global的。虽然S3的web console页面是Global的。</li><li>Bucket由附属的子资源(subresources)来定义bucket的配置</li></ul><h3 id="S3-命名空间-Namespace"><a href="#S3-命名空间-Namespace" class="headerlink" title="S3 命名空间(Namespace)"></a>S3 命名空间(Namespace)</h3><ul><li>S3需要唯一的命名空间<ul><li>Bucket名字必须在AWS的整个S3生态中是唯一的,而不仅仅是只在Region中唯一。</li><li>访问Bucket的方式<ul><li>Virtual<ul><li><a href="https://bucket.s3.amazonaws.com/" target="_blank" rel="noopener">https://bucket.s3.amazonaws.com</a></li><li><a href="https://bucket.s3-aws-region.amazonaws.com/" target="_blank" rel="noopener">https://bucket.s3-aws-region.amazonaws.com</a></li></ul></li><li>Path<ul><li><a href="https://s3-aws-region.amazonaws.com/bucket" target="_blank" rel="noopener">https://s3-aws-region.amazonaws.com/bucket</a></li></ul></li><li>Bucket名字必须要全局唯一的原因就是因为Bucket名字也会是域名的一部分</li></ul></li></ul></li></ul><h3 id="区域-Region"><a href="#区域-Region" class="headerlink" title="区域(Region)"></a>区域(Region)</h3><ul><li>Region就是bucket实际存放的位置</li><li>存放在某个Region的Object永远不会离开这个Region，除非你显式地将它传输出去</li><li>选取Bucket的Region的时候，需要考虑延迟，费用等因素。因为建造和运营成本不同，AWS各个Region的S3费用并不相同。而一般来说，选择最近的Region，延迟就越小。</li></ul><h3 id="对象Object"><a href="#对象Object" class="headerlink" title="对象Object"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UsingObjects.html" target="_blank" rel="noopener">对象Object</a></h3><ul><li>S3是一个可以存储近似无限数量Object的Key-Value存储系统</li><li>Object包括如下元素<ul><li>Key - object的名字</li><li>Value - 存储的数据，大小范围是0~5TB</li><li>Version ID - 当versioning功能开启后，每个Object都会拥有一个Version ID，用来区分有相同Key的不同的Object<ul><li>Bucket + Key + Version ID 三要素唯一定义了S3中的一个Object</li></ul></li><li>Metadata - 用来存储Object其他相关信息的Name-value键值对</li><li>Subresources - 定义了一个Object的额外的资源</li><li>Access Control Information - 控制每个对象的访问策略</li></ul></li></ul><h3 id="Object名字"><a href="#Object名字" class="headerlink" title="Object名字"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/UsingMetadata.html" target="_blank" rel="noopener">Object名字</a></h3><ul><li>S3是平面结构的<ul><li>和文件系统不同，S3没有目录</li><li>可以通过使用<strong>prefixed</strong>来模拟目录</li><li>Object的键的名称是一序列的 Unicode 字符，它的 UTF-8 编码长度最大为 1024 个字节</li><li>强烈建议Object的命名要符合DNS命名要求，采用如下字符集<ul><li>字母数字字符 [0-9a-zA-Z]和特殊字符 !、-、_、.、*、’、( 以及 )</li></ul></li></ul></li></ul><h3 id="对象标签-Object-Tagging"><a href="#对象标签-Object-Tagging" class="headerlink" title="对象标签(Object Tagging)"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/object-tagging.html" target="_blank" rel="noopener">对象标签(Object Tagging)</a></h3><ul><li>利用对象标签，您可以对存储进行分类。每个标签都是一个键-值对<ul><li>例如<ul><li>Department=Development</li><li>DeployEnv=demo</li></ul></li><li>好处<ul><li>可以支持精细的访问控制</li><li>可以支持精细的生命周期管理(Lifecycle management)</li><li>使用S3 Analytics时，可以使用tag来配置筛选条件</li><li>可以自定义Amazon CloudWatch和CloudTrail的筛选条件</li></ul></li></ul></li></ul><h3 id="子资源-Subresources"><a href="#子资源-Subresources" class="headerlink" title="子资源(Subresources)"></a>子资源(Subresources)</h3><ul><li>子资源<ul><li>S3子资源提供了存储和管理Bucket配置信息的支持</li><li>S3子资源只能依附于某一个确定的bucket或者object</li><li>bucket和object可以有一组关联的子资源</li><li>S3子资源必须归属于某个Bucket或者Object，而不能独立存在</li><li>Bucket和Object分别提供了不同的子资源</li></ul></li><li>Bucket提供的子资源<ul><li>位置(Location)</li><li>策略(Policy)和访问控制列表(ACL)</li><li>跨资源共享(CORS)</li><li>静态网站托管(Static Website Hosting)</li><li>日志记录(Logging)</li><li>时间通知(Event Notification)</li><li>版本控制(Versioning)</li><li>生命周期(Lifecycle)</li><li>跨区域复制(Cross-Region Replication)</li><li>标记(Tagging)</li><li>下载人员付费(RequestPayment)</li><li>传输加速(Transfer Acceleration)</li></ul></li><li>Object提供的子资源<ul><li>访问控制列表(ACL)</li><li>torrent (用于支持BitTorrent协议)</li></ul></li></ul><h3 id="一致性模型-Consistency-Model"><a href="#一致性模型-Consistency-Model" class="headerlink" title="一致性模型(Consistency Model)"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/Introduction.html#ConsistencyModel" target="_blank" rel="noopener">一致性模型(Consistency Model)</a></h3><ul><li>对put的新object，S3提供了read-after-write的一致性<ul><li>read-after-write: 只有在对象成功写入所有的设备，返回成功的返回值后，对象才能被读取</li></ul></li><li>对更新和删除操作，S3提供了最终一致性(eventual consistency)<ul><li>正在更新时，此时请求对象，旧数据可能会被返回</li><li>在删除旧数据时，此时请求对象，旧数据仍然可能会被返回</li></ul></li><li>最终一致性（Eventual consistency）提供了低延迟和高吞吐的性能</li><li>S3不提供锁的机制<ul><li>如果两个写操作并发，结果最终会以最后一个为准</li><li>如果需要类似锁的机制，那只能在使用S3的Application层进行控制</li></ul></li></ul><h3 id="存储类别-Storage-Classes-Tiers"><a href="#存储类别-Storage-Classes-Tiers" class="headerlink" title="存储类别(Storage Classes/Tiers)"></a><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/storage-class-intro.html" target="_blank" rel="noopener">存储类别(Storage Classes/Tiers)</a></h3><ul><li>S3提供了如下几种存储类型<ul><li>S3 Standard: 默认的存储类型，提供99.99%可用性，99.999999999%持久性。数据文件会冗余地存储在多个设施的多个设备中。设计目的是可以支持同时两个设施损坏。适合性能敏感的使用案例和需要经常访问的数据。</li><li>S3 Standard - Infrequent Access: 提供99.99%可用性，99.999999999%持久性。 针对需要长期储存且不常访问, 但是需要立即能够访问到的数据 (例如备份以及访问频率已减少的较旧数据) 进行了优化。存储费用比S3 Standard要低，但是每个访问请求的费用要远高于S3 Standard。</li><li>Reduced Redundancy Storage(RRS): 提供99.99%可用性和99.99%的持久性。适用于能再次生成的数据，比如图片的缩略图等。</li><li>Glacier: 最便宜的存储方案，但是没法实时访问数据，必须要先恢复数据后才能进行访问。不适用于需要经常访问的数据。</li></ul></li><li>S3 提供了生命管理周期（Lifecycle Management）的机制，可以将Object从S3 Standard转换到S3 Standard-Infrequent Access，再到Glacier。也可以在设定的时间过后自动删除object。但需要注意的是，不是一到达设定的时间后就立马开始转换，设定Lifecycle Management后，S3会将需要转换的object标记上转换时间，实际转换时间一般会延后。</li><li><a href="https://aws.amazon.com/cn/s3/storage-classes/" target="_blank" rel="noopener">存储类别之间额比较如下</a>:<br><a href="https://www.jibing57.com/images/AWS/S3/Master/s3-storage-class.png" target="_blank" rel="noopener"><img src="https://www.jibing57.com/images/AWS/S3/Master/s3-storage-class.png" alt="s3-storage-class"></a></li></ul><h3 id="安全性"><a href="#安全性" class="headerlink" title="安全性"></a>安全性</h3><ul><li>S3提供了11个9的持久性和99.99%的可用性<ul><li>提供数据的checksums机制，如果数据有损坏，可以使用冗余数据来修复</li><li>跨域复制(Cross-Region replication)提供了更强的数据保护措施</li></ul></li><li>版本控制(Versioning)，可以提供额外的保护。开启Versioning后，提供了存储在S3中每个Object的每个版本的恢复能力，即使Object已经被删除。</li><li>S3的Object默认是私有的，只有Bucket和object的拥有者才能访问他们创建的资源<ul><li>可以通过Policies和ACL来授予访问objects和buckets的权限</li></ul></li><li>S3提供了服务端加密和传输加密的功能</li><li>所有访问S3 resources的请求都可被记录，用于审计</li></ul><h3 id="发送请求的方式"><a href="#发送请求的方式" class="headerlink" title="发送请求的方式"></a>发送请求的方式</h3><ul><li>S3是一个RESTful的web service<ul><li>提供http&amp;https的交互方式</li><li>通过REST API来发送请求</li></ul></li><li>可以通过以下几种方式来操作S3<ul><li>AWS Management console</li><li>AWS CLI (Command Line Interface)</li><li>AWS SDK’s (Software Development Kits)</li></ul></li><li>操作方式<ul><li>GET 对等于 Download/Read</li><li>PUT 对等于 Upload/Write</li><li>DELETE 对等于 Delete</li></ul></li></ul><h3 id="计费"><a href="#计费" class="headerlink" title="计费"></a>计费</h3><ul><li>使用多少就计费多少的原则</li><li>计费项目<ul><li>存储（Storage）</li><li>请求（Requests）</li><li>数据传输费用（Data Transfer Pricing）</li><li>数据传输加速（Transfer Acceleration）</li><li>管理功能（Management Functions）<ul><li>Metrics</li><li>存储类别分析（Storage Class Analysis）</li><li>S3存储清单(S3 Inventory)</li></ul></li></ul></li></ul><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ul><li><a href="https://www.jibing57.com/2017/12/20/expired-of-S3-RRS/" target="_blank" rel="noopener">S3 RRS价格注意点</a></li><li><a href="https://www.jibing57.com/2018/04/21/aws-s3-master-permission/" target="_blank" rel="noopener">S3进阶系列(二) ——权限管理</a></li></ul><h3 id="小故事"><a href="#小故事" class="headerlink" title="小故事"></a>小故事</h3><p>2017-03-01当天，AWS的一个程序员在调试系统时，输错了一个字母，导致US-EAST-1 region的大量S3服务器被误删除，导致大半个互联网将近瘫痪了4个小时。</p><p>问题发生后，AWS的<a href="http://status.aws.amazon.com/" target="_blank" rel="noopener">SERVICE HEALTH DASHBOARD</a>却显示Service一切正常。听说是因为Dashboard本身也是依赖于US-EAST-1的S3的, S3出了问题导致Dashboard也出问题了。</p><p>从这个小事故中可以看出AWS S3服务应用的普遍程度。</p><h3 id="Reference"><a href="#Reference" class="headerlink" title="Reference"></a>Reference</h3><ul><li><a href="https://docs.aws.amazon.com/zh_cn/AmazonS3/latest/dev/Welcome.html" target="_blank" rel="noopener">S3官方文档</a></li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 云计算 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>使用 Go 客户端控制 Kubernetes</title>
      <link href="2020/09/24/k8s20/"/>
      <url>2020/09/24/k8s20/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/09/24/0pR3gx.png" alt="0pR3gx.png"></p><p>早期我已经在本地搭建了一个两台机器的k3s集群，并部署了<em>Crawlab</em>（ 一个使用Golang 开发的分布式爬虫管理平台），实现了本地的分布式集群服务环境的搭建。服务起来以后，动态的控制容器节点，监控容器运行状态，实现即使的扩容，这都需要我们Kubernetes进行控制。幸运的是Kubernetes直接提供了python、golang的客户端，可以方便的实现Kubernetes API 操作。所以接下来我们一起熟悉一下，基于golng客户端Kubernetes控制。</p><h2 id="起步"><a href="#起步" class="headerlink" title="起步"></a>起步</h2><h3 id="访问-API-和查看列表"><a href="#访问-API-和查看列表" class="headerlink" title="访问 API 和查看列表"></a>访问 API 和查看列表</h3><p>在了解 Kubernetes 的基本架构和提供 API 的方式后，接下来我们需要知道 Kubernetes 到底提供了哪些 API。为了方便调试，首先我们需要在本地运行 <code>kubectl proxy</code> 命令，kube-apiserver 就会在本地的 8001 端口上进行监听，也就是提供了一个 Kubernetes API 服务的 HTTP 代理。</p><p>这个时候我们可以访问：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl https://127.0.0.1:6443/api/v1</span><br></code></pre></div></td></tr></table></figure><p>查看所提供的对应 API‘s：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&#123;<br>  "kind": "APIResourceList",<br>  "groupVersion": "v1",<br>  "resources": [<br>    &#123;<br>      "name": "bindings",<br>      "singularName": "",<br>      "namespaced": true,<br>      "kind": "Binding",<br>      "verbs": [<br>        "create"<br>      ]<br>    &#125;,<br>    &#123;<br>      "name": "componentstatuses",<br>      "singularName": "",<br>      "namespaced": false,<br>      "kind": "ComponentStatus",<br>      "verbs": [<br>        "get",<br>        "list"<br>      ],<br>      "shortNames": [<br>        "cs"<br>      ]<br>    &#125;,<br>    ...<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>访问 <code>api/v1/pods</code> 路径，获取所有 Pods</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> curl https://127.0.0.1:6443/api/v1/pods</span><br></code></pre></div></td></tr></table></figure><p>访问结果：</p><figure class="highlight clojure"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">&#123;<br>  <span class="hljs-string">"kind"</span>: <span class="hljs-string">"PodList"</span>,<br>  <span class="hljs-string">"apiVersion"</span>: <span class="hljs-string">"v1"</span>,<br>  <span class="hljs-string">"metadata"</span>: &#123;<br>    <span class="hljs-string">"selfLink"</span>: <span class="hljs-string">"/api/v1/pods"</span>,<br>    <span class="hljs-string">"resourceVersion"</span>: <span class="hljs-string">"614376"</span><br>  &#125;,<br>  <span class="hljs-string">"items"</span>: [<br>    &#123;<br>      <span class="hljs-string">"metadata"</span>: &#123;<br>        <span class="hljs-string">"name"</span>: <span class="hljs-string">"awesome-project-76788db95b-7ztwr"</span>,<br>        <span class="hljs-string">"generateName"</span>: <span class="hljs-string">"awesome-project-76788db95b-"</span>,<br>        <span class="hljs-string">"namespace"</span>: <span class="hljs-string">"default"</span>,<br>        <span class="hljs-string">"selfLink"</span>: <span class="hljs-string">"/api/v1/namespaces/default/pods/awesome-project-76788db95b-7ztwr"</span>,<br>        <span class="hljs-string">"uid"</span>: <span class="hljs-string">"4fdb6661-edbd-4fc6-bf71-1d2dadb3ffc1"</span>,<br>        <span class="hljs-string">"resourceVersion"</span>: <span class="hljs-string">"608545"</span>,<br>        <span class="hljs-string">"creationTimestamp"</span>: <span class="hljs-string">"2020-05-03T02:29:32Z"</span>,<br>        <span class="hljs-string">"labels"</span>: &#123;<br>          <span class="hljs-string">"app"</span>: <span class="hljs-string">"awesome-project"</span>,<br>          <span class="hljs-string">"pod-template-hash"</span>: <span class="hljs-string">"76788db95b"</span><br>        &#125;,<br>        ...<br>        ]<br>      &#125;,<br>    ]<br></code></pre></div></td></tr></table></figure><p>更多的 API 列表和介绍可查看<a href="https://kubernetes.io/docs/reference/generated/kubernetes-api/v1.15/" target="_blank" rel="noopener">官方文档</a>。</p><p>Kubernetes 官方提供了 Go 语言的 Client SDK，也就是<a href="https://github.com/kubernetes/client-go" target="_blank" rel="noopener">client-go</a></p><h2 id="SDK集群外访问："><a href="#SDK集群外访问：" class="headerlink" title="SDK集群外访问："></a>SDK集群外访问：</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"context"</span><br><span class="hljs-string">"flag"</span><br><span class="hljs-string">"fmt"</span><br>metav1 <span class="hljs-string">"k8s.io/apimachinery/pkg/apis/meta/v1"</span><br><span class="hljs-string">"k8s.io/client-go/kubernetes"</span><br><span class="hljs-string">"k8s.io/client-go/tools/clientcmd"</span><br><span class="hljs-string">"os"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 配置 k8s 集群外 kubeconfig 配置文件</span><br><span class="hljs-keyword">var</span> kubeconfig *<span class="hljs-keyword">string</span><br>kubeconfig = flag.String(<span class="hljs-string">"kubeconfig"</span>, <span class="hljs-string">"/etc/rancher/k3s/k3s.yaml"</span>, <span class="hljs-string">"absolute path to the kubeconfig file"</span>)<br>flag.Parse()<br><br><span class="hljs-comment">//在 kubeconfig 中使用当前上下文环境，config 获取支持 url 和 path 方式</span><br>config, err := clientcmd.BuildConfigFromFlags(<span class="hljs-string">""</span>, *kubeconfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><br><span class="hljs-comment">// 根据指定的 config 创建一个新的 clientset</span><br>clientset, err := kubernetes.NewForConfig(config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><br><span class="hljs-comment">// 通过实现 clientset 的 CoreV1Interface 接口列表中的 PodsGetter 接口方法 Pods(namespace string)返回 PodInterface</span><br><span class="hljs-comment">// PodInterface 接口拥有操作 Pod 资源的方法，例如 Create、Update、Get、List 等方法</span><br><span class="hljs-comment">// 注意：Pods() 方法中 namespace 不指定则获取 Cluster 所有 Pod 列表</span><br>pods, err := clientset.CoreV1().Pods(<span class="hljs-string">""</span>).List(context.TODO(),metav1.ListOptions&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"There are %d pods in the k8s cluster\n"</span>, <span class="hljs-built_in">len</span>(pods.Items))<br>fmt.Println(clientset.CoreV1().Namespaces().List(context.TODO(),metav1.ListOptions&#123;&#125;))<br><br><span class="hljs-comment">// 获取指定 namespace 中的 Pod 列表信息</span><br>namespace := <span class="hljs-string">"default"</span><br>pods, err = clientset.CoreV1().Pods(namespace).List(context.TODO(),metav1.ListOptions&#123;&#125;)<br><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">"\nThere are %d pods in namespaces %s\n"</span>, <span class="hljs-built_in">len</span>(pods.Items), namespace)<br><br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>kubeconfig默认是在<code>/etc/kubernetes/admin.conf</code>，由于我装的是K3s这里的路径是<code>/etc/rancher/k3s/k3s.yaml</code></li></ul><p>执行程序</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">There are <span class="hljs-number">15</span> pods in the k8s cluster<br><br>There are <span class="hljs-number">5</span> pods in namespaces crawlab<br></code></pre></div></td></tr></table></figure><h2 id="SDK集群内访问"><a href="#SDK集群内访问" class="headerlink" title="SDK集群内访问"></a>SDK集群内访问</h2><p>除以上方法外，还可以在 k8s 集群内运行客户端操作资源类型。既然是在 k8s 集群内运行，那么就需要将编写的代码放到镜像内，然后在 k8s 集群内以 Pod 方式运行该镜像容器。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"># cat main2.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"time"</span><br>metav1 <span class="hljs-string">"k8s.io/apimachinery/pkg/apis/meta/v1"</span><br><span class="hljs-string">"k8s.io/client-go/kubernetes"</span><br><span class="hljs-string">"k8s.io/client-go/rest"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 通过集群内部配置创建 k8s 配置信息，通过 KUBERNETES_SERVICE_HOST 和 KUBERNETES_SERVICE_PORT 环境变量方式获取</span><br><span class="hljs-comment">// 若集群使用 TLS 认证方式，则默认读取集群内部 tokenFile 和 CAFile</span><br><span class="hljs-comment">// tokenFile  = "/var/run/secrets/kubernetes.io/serviceaccount/token"</span><br><span class="hljs-comment">// rootCAFile = "/var/run/secrets/kubernetes.io/serviceaccount/ca.crt"</span><br>config, err := rest.InClusterConfig()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><br><span class="hljs-comment">// 根据指定的 config 创建一个新的 clientset</span><br>clientset, err := kubernetes.NewForConfig(config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br><span class="hljs-keyword">for</span> &#123;<br><span class="hljs-comment">// 通过实现 clientset 的 CoreV1Interface 接口列表中的 PodsGetter 接口方法 Pods(namespace string)返回 PodInterface</span><br><span class="hljs-comment">// PodInterface 接口拥有操作 Pod 资源的方法，例如 Create、Update、Get、List 等方法</span><br><span class="hljs-comment">// 注意：Pods() 方法中 namespace 不指定则获取 Cluster 所有 Pod 列表</span><br>pods, err := clientset.CoreV1().Pods(<span class="hljs-string">""</span>).List(metav1.ListOptions&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err.Error())<br>&#125;<br>fmt.Printf(<span class="hljs-string">"There are %d pods in the k8s cluster\n"</span>, <span class="hljs-built_in">len</span>(pods.Items))<br><br><span class="hljs-comment">// 获取指定 namespace 中的 Pod 列表信息</span><br>namespce := <span class="hljs-string">"default"</span><br>pods, err = clientset.CoreV1().Pods(namespce).List(metav1.ListOptions&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">"\nThere are %d pods in namespaces %s\n"</span>, <span class="hljs-built_in">len</span>(pods.Items), namespce)<br><span class="hljs-keyword">for</span> _, pod := <span class="hljs-keyword">range</span> pods.Items &#123;<br>fmt.Printf(<span class="hljs-string">"Name: %s, Status: %s, CreateTime: %s\n"</span>, pod.ObjectMeta.Name, pod.Status.Phase, pod.ObjectMeta.CreationTimestamp)<br>&#125;<br><br><span class="hljs-comment">// 获取所有的 Namespaces 列表信息</span><br>ns, err := clientset.CoreV1().Namespaces().List(metav1.ListOptions&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>nss := ns.Items<br>fmt.Printf(<span class="hljs-string">"\nThere are %d namespaces in cluster\n"</span>, <span class="hljs-built_in">len</span>(nss))<br><span class="hljs-keyword">for</span> _, ns := <span class="hljs-keyword">range</span> nss &#123;<br>fmt.Printf(<span class="hljs-string">"Name: %s, Status: %s, CreateTime: %s\n"</span>, ns.ObjectMeta.Name, ns.Status.Phase, ns.CreationTimestamp)<br>&#125;<br><br>time.Sleep(<span class="hljs-number">10</span> * time.Second)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>该示例主要演示如何在 k8s 集群内操作 Pod 和 Namespaces 资源类型，包括获取集群所有 Pod 列表数量，获取指定 Namespace 中的 Pod 列表信息，获取集群内所有 Namespace 列表信息。这里，该方式获取 k8s 集群配置的方式跟上边方式不同，它通过集群内部创建的 k8s 配置信息，通过 KUBERNETES_SERVICE_HOST 和 KUBERNETES_SERVICE_PORT 环境变量方式获取，来跟 k8s 建立连接，进而来操作其各个资源类型。如果 k8s 开启了 TLS 认证方式，那么默认读取集群内部指定位置的 tokenFile 和 CAFile。</p><p>编译一下，看下是否通过。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"># <span class="hljs-keyword">go</span> build main2.<span class="hljs-keyword">go</span><br># ls<br>main2  main2.<span class="hljs-keyword">go</span><br></code></pre></div></td></tr></table></figure><p>接下来，在同级目录创建一个 Dockerfile 文件如下</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">FROM debian<br>COPY ./main2 /opt<br>ENTRYPOINT /opt/main2<br></code></pre></div></td></tr></table></figure><p>构建docker镜像</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta"># ls</span><br>Dockerfile  main2<br><br><span class="hljs-meta"># docker build -t client-go/in-cluster:1.0 .</span><br></code></pre></div></td></tr></table></figure><p>因为本机 k8s 默认开启了 RBAC 认证的，所以需要创建一个 clusterrolebinding 来赋予 default 账户 view 权限。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ kubectl create clusterrolebinding default-view <span class="hljs-attribute">--clusterrole</span>=view <span class="hljs-attribute">--serviceaccount</span>=default:default<br>clusterrolebinding.rbac.authorization.k8s.io <span class="hljs-string">"default-view"</span> created<br></code></pre></div></td></tr></table></figure><p>最后，在 Pod 中运行该镜像即可，可以使用 yaml 方式或运行 kubectl run 命令来创建。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"># kubectl run --rm -i client-<span class="hljs-keyword">go</span>-in-cluster-demo --image=client-<span class="hljs-keyword">go</span>/in-cluster:<span class="hljs-number">1.0</span> --image-pull-policy=Never<br><br>There are <span class="hljs-number">3</span> pods in namespaces <span class="hljs-keyword">default</span><br>Name: client-<span class="hljs-keyword">go</span>-in-cluster-demo<span class="hljs-number">-58</span>d9b5bd79<span class="hljs-number">-7</span>w5ds, Status: Running, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-02</span><span class="hljs-number">-13</span> <span class="hljs-number">14</span>:<span class="hljs-number">25</span>:<span class="hljs-number">38</span> +<span class="hljs-number">0000</span> UTC<br>Name: podinfo<span class="hljs-number">-7</span>b8c9bc5c9<span class="hljs-number">-64</span>g8k, Status: Running, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span>:<span class="hljs-number">40</span>:<span class="hljs-number">18</span> +<span class="hljs-number">0000</span> UTC<br>Name: podinfo<span class="hljs-number">-7</span>b8c9bc5c9-bx7ml, Status: Running, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span> <span class="hljs-number">14</span>:<span class="hljs-number">40</span>:<span class="hljs-number">18</span> +<span class="hljs-number">0000</span> UTC<br><br>There are <span class="hljs-number">5</span> namespaces in cluster<br>Name: custom-metrics, Status: Active, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-10</span> <span class="hljs-number">09</span>:<span class="hljs-number">01</span>:<span class="hljs-number">52</span> +<span class="hljs-number">0000</span> UTC<br>Name: <span class="hljs-keyword">default</span>, Status: Active, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">09</span>:<span class="hljs-number">18</span>:<span class="hljs-number">02</span> +<span class="hljs-number">0000</span> UTC<br>Name: kube-public, Status: Active, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">09</span>:<span class="hljs-number">18</span>:<span class="hljs-number">02</span> +<span class="hljs-number">0000</span> UTC<br>Name: kube-system, Status: Active, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-05</span> <span class="hljs-number">09</span>:<span class="hljs-number">18</span>:<span class="hljs-number">02</span> +<span class="hljs-number">0000</span> UTC<br>Name: monitoring, Status: Active, CreateTime: <span class="hljs-number">2019</span><span class="hljs-number">-01</span><span class="hljs-number">-08</span> <span class="hljs-number">15</span>:<span class="hljs-number">00</span>:<span class="hljs-number">41</span> +<span class="hljs-number">0000</span> UTC<br>There are <span class="hljs-number">16</span> pods in the k8s cluster<br></code></pre></div></td></tr></table></figure><p>运行正常，简单验证一下吧！</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># kubectl get pods -n <span class="hljs-section">default</span><br>NAME                                         READY   STATUS    RESTARTS   AGE<br>client-go-in-cluster-demo<span class="hljs-number">-58</span>d9b5bd79<span class="hljs-number">-7</span>w5ds   <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">0</span>          <span class="hljs-number">10</span>m<br>podinfo<span class="hljs-number">-7</span>b8c9bc5c9<span class="hljs-number">-64</span>g8k                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br>podinfo<span class="hljs-number">-7</span>b8c9bc5c9-bx7ml                     <span class="hljs-number">1</span>/<span class="hljs-number">1</span>     Running   <span class="hljs-number">1</span>          <span class="hljs-number">33</span>d<br></code></pre></div></td></tr></table></figure><h2 id="SDK对k8s各资源对象操作"><a href="#SDK对k8s各资源对象操作" class="headerlink" title="SDK对k8s各资源对象操作"></a>SDK对k8s各资源对象操作</h2><p>上边演示了，在 k8s 集群内外运行客户端操作资源类型，但是仅仅是 Read 相关读取操作，接下来简单演示下如何进行 Create、Update、Delete 操作。创建 main.go 文件如下：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"># cat main3.<span class="hljs-keyword">go</span><br><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"flag"</span><br><span class="hljs-string">"fmt"</span><br>apiv1 <span class="hljs-string">"k8s.io/api/core/v1"</span><br>metav1 <span class="hljs-string">"k8s.io/apimachinery/pkg/apis/meta/v1"</span><br><span class="hljs-string">"k8s.io/client-go/kubernetes"</span><br><span class="hljs-string">"k8s.io/client-go/tools/clientcmd"</span><br>)<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-comment">// 配置 k8s 集群外 kubeconfig 配置文件</span><br><span class="hljs-keyword">var</span> kubeconfig *<span class="hljs-keyword">string</span><br>    kubeconfig = flag.String(<span class="hljs-string">"kubeconfig"</span>, <span class="hljs-string">"/etc/rancher/k3s/k3s.yaml"</span>, <span class="hljs-string">"absolute path to the kubeconfig file"</span>)<br>flag.Parse()<br><br><span class="hljs-comment">//在 kubeconfig 中使用当前上下文环境，config 获取支持 url 和 path 方式</span><br>config, err := clientcmd.BuildConfigFromFlags(<span class="hljs-string">""</span>, *kubeconfig)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 根据指定的 config 创建一个新的 clientset</span><br>clientset, err := kubernetes.NewForConfig(config)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br><br><span class="hljs-comment">// 通过实现 clientset 的 CoreV1Interface 接口列表中的 NamespacesGetter 接口方法 Namespaces 返回 NamespaceInterface</span><br><span class="hljs-comment">// NamespaceInterface 接口拥有操作 Namespace 资源的方法，例如 Create、Update、Get、List 等方法</span><br>name := <span class="hljs-string">"client-go-test"</span><br>namespacesClient := clientset.CoreV1().Namespaces()<br>namespace := &amp;apiv1.Namespace&#123;<br>ObjectMeta: metav1.ObjectMeta&#123;<br>Name: name,<br>&#125;,<br>Status: apiv1.NamespaceStatus&#123;<br>Phase: apiv1.NamespaceActive,<br>&#125;,<br>&#125;<br><br><span class="hljs-comment">// 创建一个新的 Namespaces</span><br>fmt.Println(<span class="hljs-string">"Creating Namespaces..."</span>)<br>result, err := namespacesClient.Create(namespace)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">"Created Namespaces %s on %s\n"</span>, result.ObjectMeta.Name, result.ObjectMeta.CreationTimestamp)<br><br><span class="hljs-comment">// 获取指定名称的 Namespaces 信息</span><br>fmt.Println(<span class="hljs-string">"Getting Namespaces..."</span>)<br>result, err = namespacesClient.Get(name, metav1.GetOptions&#123;&#125;)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">"Name: %s, Status: %s, selfLink: %s, uid: %s\n"</span>,<br>result.ObjectMeta.Name, result.Status.Phase, result.ObjectMeta.SelfLink, result.ObjectMeta.UID)<br><br><span class="hljs-comment">// 删除指定名称的 Namespaces 信息</span><br>fmt.Println(<span class="hljs-string">"Deleting Namespaces..."</span>)<br>deletePolicy := metav1.DeletePropagationForeground<br><span class="hljs-keyword">if</span> err := namespacesClient.Delete(name, &amp;metav1.DeleteOptions&#123;<br>PropagationPolicy: &amp;deletePolicy,<br>&#125;); err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(err)<br>&#125;<br>fmt.Printf(<span class="hljs-string">"Deleted Namespaces %s\n"</span>, name)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>执行程序</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"># <span class="hljs-keyword">go</span> run main3.<span class="hljs-keyword">go</span><br>Creating Namespaces...<br>Created Namespaces client-<span class="hljs-keyword">go</span>-test on <span class="hljs-number">2019</span><span class="hljs-number">-02</span><span class="hljs-number">-13</span> <span class="hljs-number">21</span>:<span class="hljs-number">44</span>:<span class="hljs-number">52</span> +<span class="hljs-number">0800</span> CST<br>Getting Namespaces...<br>Name: client-<span class="hljs-keyword">go</span>-test, Status: Active, selfLink: /api/v1/namespaces/client-<span class="hljs-keyword">go</span>-test, uid: <span class="hljs-number">8</span>a2de86e<span class="hljs-number">-2</span>f95<span class="hljs-number">-11e9</span>-b2e0-a0369f3f0404<br>Deleting Namespaces...<br>Deleted Namespaces client-<span class="hljs-keyword">go</span>-test<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>K3S本地测试环境搭建</title>
      <link href="2020/09/24/k8s19/"/>
      <url>2020/09/24/k8s19/</url>
      
        <content type="html"><![CDATA[<p>迫于家里没有矿，又想尝试在本地搭建一个真实的K8s集群，于是翻出了闲置许久的学生机和目前手上的一台开发机组成了本地K3s集群。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>参考K3s官网给出的快速安装指南：</p><h3 id="主节点"><a href="#主节点" class="headerlink" title="主节点"></a>主节点</h3><p>1.执行安装指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn sh -<br></code></pre></div></td></tr></table></figure><p>2.获取密钥</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">cat /var/lib/rancher/k3s/server/node-token<br></code></pre></div></td></tr></table></figure><h3 id="工作节点"><a href="#工作节点" class="headerlink" title="工作节点"></a>工作节点</h3><p>1.执行安装指令：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">curl -sfL http://rancher-mirror.cnrancher.com/k3s/k3s-install.sh | INSTALL_K3S_MIRROR=cn K3S_URL=https://myserver:6443 K3S_TOKEN=mynodetoken sh -<br></code></pre></div></td></tr></table></figure><p>设置<code>K3S_URL</code>参数会使 K3s 以 worker 模式运行。K3s agent 将在所提供的 URL 上向监听的 K3s 服务器注册。<code>K3S_TOKEN</code>使用的值存储在你的服务器节点上的<code>/var/lib/rancher/k3s/server/node-token</code></p><h2 id="Rancher"><a href="#Rancher" class="headerlink" title="Rancher"></a>Rancher</h2><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-builtin-name">run</span> -d <span class="hljs-attribute">--restart</span>=unless-stopped \<br>    -p 10080:80 -p 10443:443 \<br>    rancher/rancher:latest<br></code></pre></div></td></tr></table></figure><p>一切完成！</p><p>我们来查看集群效果：</p><p><img src="https://s1.ax1x.com/2020/09/24/0pghwQ.png" alt="0pghwQ.png"></p><p>两台主机：</p><p><img src="https://s1.ax1x.com/2020/09/24/0pg4oj.png" alt="0pg4oj.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groupcache源码阅读(三)——防止缓存惊群效应</title>
      <link href="2020/09/12/%E7%BC%93%E5%AD%98%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/"/>
      <url>2020/09/12/%E7%BC%93%E5%AD%98%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/25/t9CtxI.jpg" alt></p><h2 id="缓存惊群效应"><a href="#缓存惊群效应" class="headerlink" title="缓存惊群效应"></a>缓存惊群效应</h2><p>惊群效应问题有时被称为缓存击穿，穿透或者雪崩效果。从本质上讲，就像是使系统不堪重负的大量请求。</p><blockquote><p><strong>缓存雪崩</strong>：缓存在同一时刻全部失效，造成瞬时DB请求量大、压力骤增，引起雪崩。缓存雪崩通常因为缓存服务器宕机、缓存的 key 设置了相同的过期时间等引起。</p></blockquote><blockquote><p><strong>缓存击穿</strong>：一个存在的key，在缓存过期的一刻，同时有大量的请求，这些请求都会击穿到 DB ，造成瞬时DB请求量大、压力骤增。</p></blockquote><blockquote><p><strong>缓存穿透</strong>：查询一个不存在的数据，因为不存在则不会写到缓存中，所以每次都会去请求 DB，如果瞬间流量过大，穿透到 DB，导致宕机。</p></blockquote><h2 id="singleflight解析"><a href="#singleflight解析" class="headerlink" title="singleflight解析"></a>singleflight解析</h2><p>groupcache 中的<code>singleflight</code>模块就是用来专门解决缓存惊群效应的，话不多说我们来看看源代码的实现逻辑。</p><h3 id="Group"><a href="#Group" class="headerlink" title="Group"></a>Group</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Group represents a class of work and forms a namespace in which</span><br><span class="hljs-comment">// units of work can be executed with duplicate suppression.</span><br><span class="hljs-comment">// Group 是 singleflight 的最主要的数据结构，管理不同 key 的请求(call)，</span><br><span class="hljs-comment">// 保证在上一次缓存结果没有关系前，本地不会发送更多的请求</span><br><span class="hljs-keyword">type</span> Group <span class="hljs-keyword">struct</span> &#123;<br>mu sync.Mutex       <span class="hljs-comment">// protects m 一个互斥锁，用来保护m</span><br>m  <span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*call <span class="hljs-comment">// lazily initialized 一个懒加载的字典，存储需要被访问的key与其对应的单个访问器</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>Group</code> 是<code>singleflight</code>的最主要的数据结构，管理不同 key 的请求(call)，保证在上一次缓存结果没有关系前，本地不会发送更多的请求。当然也可以理解为，是本地的访问任务调度中心。</p><h3 id="call"><a href="#call" class="headerlink" title="call"></a><strong>call</strong></h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// call is an in-flight or completed Do call</span><br><span class="hljs-comment">// 正在进行中，或已经结束的请求</span><br><span class="hljs-keyword">type</span> call <span class="hljs-keyword">struct</span> &#123;<br>wg  sync.WaitGroup  <span class="hljs-comment">// 等待多个协程完成,避免重入</span><br>val <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-comment">// 请求得到的正常结果</span><br>err error<span class="hljs-comment">// 请求得到的异常结果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>call是每个key从远端节点获取数据的正在进行中，或已经结束的请求。使用 <code>sync.WaitGroup</code> 锁避免重入。</p><h3 id="Do"><a href="#Do" class="headerlink" title="Do"></a><strong>Do</strong></h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Do executes and returns the results of the given function, making</span><br><span class="hljs-comment">// sure that only one execution is in-flight for a given key at a</span><br><span class="hljs-comment">// time. If a duplicate comes in, the duplicate caller waits for the</span><br><span class="hljs-comment">// original to complete and receives the same results.</span><br><span class="hljs-comment">// Do 方法，接收 2 个参数，第一个参数是 key，第二个参数是一个函数 fn。</span><br><span class="hljs-comment">// Do 的作用就是，针对相同的 key，无论 Do 被调用多少次，函数 fn 都只会被调用一次，</span><br><span class="hljs-comment">// 等待 fn 调用结束了，返回返回值或错误</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Group)</span> <span class="hljs-title">Do</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, fn <span class="hljs-keyword">func</span>()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span>) <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;<br>g.mu.Lock() <span class="hljs-comment">// 上锁，防止其他协程进来修改m，干扰接下来的工作</span><br><span class="hljs-keyword">if</span> g.m == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-comment">// 就是所谓的懒加载，</span><br><span class="hljs-comment">// 第一次先创建一个创建一个保存key请就任务的字典</span><br>g.m = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">string</span>]*call) <br>&#125;<br><span class="hljs-comment">// 获取到key的执行实例</span><br><span class="hljs-keyword">if</span> c, ok := g.m[key]; ok &#123; <span class="hljs-comment">//如果存在说明这个key有正在请求的call</span><br><span class="hljs-comment">// key的执行实例已经拿到了，先把整个Group的锁解开，</span><br><span class="hljs-comment">// 这里没有IO，预计所不会阻塞其他协程操作其他key太久</span><br>g.mu.Unlock()<br>c.wg.Wait() <span class="hljs-comment">// 如果之前已经有人发起了这个缓存的请求正在进行中，则等待</span><br><span class="hljs-keyword">return</span> c.val, c.err <span class="hljs-comment">// 等待完毕就返回别人请求到的缓存结果</span><br>&#125;<br><span class="hljs-comment">// 代码走到这里，说明目前当前没有其他协程，在请求这个缓存</span><br>c := <span class="hljs-built_in">new</span>(call)  <span class="hljs-comment">// 发起一个请求</span><br>c.wg.Add(<span class="hljs-number">1</span>)  <span class="hljs-comment">// 准备开始开始工作，这个Group中的其他协程将等待我的请求结果</span><br>g.m[key] = c <span class="hljs-comment">// 注册一下这个key的请求任务</span><br>g.mu.Unlock() <span class="hljs-comment">// m 缓存的请求注册中心，操作完毕，交出锁</span><br><br>c.val, c.err = fn() <span class="hljs-comment">// 执行key的远端请求任务，io部分</span><br>c.wg.Done() <span class="hljs-comment">// 请求完毕，通知其他协程，可以那我的结果了</span><br><br>g.mu.Lock()  <span class="hljs-comment">// 给注册中心上个锁，准备删除掉本次请求</span><br><span class="hljs-built_in">delete</span>(g.m, key) <span class="hljs-comment">//删删删</span><br>g.mu.Unlock() <span class="hljs-comment">// m 缓存的请求注册中心，操作完毕，交出锁</span><br><br><span class="hljs-keyword">return</span> c.val, c.err <span class="hljs-comment">// 返回结果</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过Do方法的调用，就是实现group内多个协程并发的请求的限制，有效的防止了高并发情况下，本出现内多个协程，同时对同一个key想远端节点发起大量不必要的请求。</p><h2 id="singleflight总结"><a href="#singleflight总结" class="headerlink" title="singleflight总结"></a>singleflight总结</h2><p>现在读完一遍源码，我们再来审视<code>singleflight</code>这个命名的含义——singleflight（单次航班）——言下之意，针对相同的货物（key缓存数据）运输请求，我们将只发起一次飞行计划（HTTP的远端节点访问）。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Yance的技能树(2020)</title>
      <link href="2020/07/23/2020%E5%B9%B4%E4%B8%AD%E6%8A%80%E8%83%BD%E6%A0%91/"/>
      <url>2020/07/23/2020%E5%B9%B4%E4%B8%AD%E6%8A%80%E8%83%BD%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<p>前几个月准备面试整理的技能树，还没有画完已经拿到了满意的offer，未来继续扩充。<br><a id="more"></a><br><img src="https://i.loli.net/2020/07/23/ZRxekG4uNolFzpQ.png" alt></p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python使用协程库aiokafka操作Kafka</title>
      <link href="2020/06/08/pykafka/"/>
      <url>2020/06/08/pykafka/</url>
      
        <content type="html"><![CDATA[<p><img src="https://i.loli.net/2020/06/08/LeswCYIqFoD5BMh.png" alt="pyka"><br><a id="more"></a></p><h2 id="测试环境"><a href="#测试环境" class="headerlink" title="测试环境"></a>测试环境</h2><p>由于是本地测试，我这里使用的是自己的专门用来测试的云服务器，参考我早前的博客<a href="https://huangyongchi.com/2019/10/31/docker-kafka/" target="_blank" rel="noopener">Docker快速搭建Kafka开发环境</a> 。</p><p>大概的情况如下：</p><p><img src="https://i.loli.net/2020/06/08/mtEF6sYTD5ydH4I.png" alt="image-20200608195421050"></p><p>负载情况：</p><p>服务器上暂时没有跑其他的服务,基本跑起来一个zookeeper和两个kafka的节点，已经占去了1.5G的内存。。。所以一般也是用完就给关了</p><p><img src="https://i.loli.net/2020/06/08/QtlPxbAgDn5U8XY.png" alt="image-20200608195319788"></p><h2 id="aiokafka"><a href="#aiokafka" class="headerlink" title="aiokafka"></a>aiokafka</h2><p>安装：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip3 install aiokafka<br></code></pre></div></td></tr></table></figure><p>注意：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">aiokafka 需要 kafka-python 库.<br></code></pre></div></td></tr></table></figure><h2 id="快速开始"><a href="#快速开始" class="headerlink" title="快速开始"></a>快速开始</h2><p>消费者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> aiokafka <span class="hljs-keyword">import</span> AIOKafkaConsumer<br><span class="hljs-keyword">import</span> asyncio<br><br>loop = asyncio.get_event_loop()<br><br>KAFKAIP = <span class="hljs-string">"106.53.201.23"</span><br>KAFKAPORT = <span class="hljs-number">32775</span><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">consume</span><span class="hljs-params">()</span>:</span><br>    consumer = AIOKafkaConsumer(<br>        <span class="hljs-string">'my_topic'</span>, <span class="hljs-string">'my_other_topic'</span>,<br>        loop=loop, bootstrap_servers=<span class="hljs-string">f'<span class="hljs-subst">&#123;KAFKAIP&#125;</span>:<span class="hljs-subst">&#123;KAFKAPORT&#125;</span>'</span>,<br>        group_id=<span class="hljs-string">"my-group"</span>)<br>    <span class="hljs-comment"># Get cluster layout and join group `my-group`</span><br>    <span class="hljs-keyword">await</span> consumer.start()<br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-comment"># Consume messages</span><br>        <span class="hljs-keyword">async</span> <span class="hljs-keyword">for</span> msg <span class="hljs-keyword">in</span> consumer:<br>            print(<span class="hljs-string">"consumed: "</span>, msg.topic, msg.partition, msg.offset,<br>                  msg.key, msg.value, msg.timestamp)<br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># Will leave consumer group; perform autocommit if enabled.</span><br>        <span class="hljs-keyword">await</span> consumer.stop()<br><br>loop.run_until_complete(consume())<br></code></pre></div></td></tr></table></figure><p>生产者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> aiokafka <span class="hljs-keyword">import</span> AIOKafkaProducer<br><span class="hljs-keyword">import</span> asyncio<br><span class="hljs-keyword">import</span> time<br><br>loop = asyncio.get_event_loop()<br><br>KAFKAIP = <span class="hljs-string">"106.53.201.23"</span><br>KAFKAPORT = <span class="hljs-number">32775</span><br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sender</span><span class="hljs-params">(producer: AIOKafkaProducer<span class="hljs-params">()</span>)</span>:</span><br>    <span class="hljs-keyword">await</span> producer.send(<span class="hljs-string">"my_topic"</span>, <span class="hljs-string">b"Super message"</span>)<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_one</span><span class="hljs-params">()</span>:</span><br>    producer = AIOKafkaProducer(<br>        loop=loop, bootstrap_servers=<span class="hljs-string">f'<span class="hljs-subst">&#123;KAFKAIP&#125;</span>:<span class="hljs-subst">&#123;KAFKAPORT&#125;</span>'</span>)<br><br>    <span class="hljs-comment"># Get cluster layout and initial topic/partition leadership information</span><br>    <span class="hljs-keyword">await</span> producer.start()<br>    <span class="hljs-keyword">try</span>:<br>        task_list = []<br>        s_time = time.time()<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1000</span>):<br>            <span class="hljs-comment"># Produce message</span><br><br>            task_list.append(loop.create_task(sender(producer), ))<br><br>        <span class="hljs-keyword">await</span> asyncio.wait(task_list)<br>        c_time = time.time()<br><br>        print(c_time - s_time)  <span class="hljs-comment"># 耗时0.0579991340637207</span><br>    <span class="hljs-keyword">finally</span>:<br>        <span class="hljs-comment"># Wait for all pending messages to be delivered or expire.</span><br>        <span class="hljs-keyword">await</span> producer.stop()<br><br><br>loop.run_until_complete(send_one())<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>leetcode136-Single Number</title>
      <link href="2020/06/06/leetcode136/"/>
      <url>2020/06/06/leetcode136/</url>
      
        <content type="html"><![CDATA[<h2 id="Description"><a href="#Description" class="headerlink" title="Description"></a>Description</h2><p>Given a <strong>non-empty</strong> array of integers, every element appears <em>twice</em> except for one. Find that single one.</p><p><strong>Note:</strong></p><p>Your algorithm should have a linear runtime complexity. Could you implement it without using extra memory?</p><p><strong>Example 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">Input:</span> <span class="hljs-string">[2,2,1]</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p><strong>Example 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">Input:</span> <span class="hljs-string">[4,1,2,1,2]</span><br><span class="hljs-attr">Output:</span> <span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><a id="more"></a><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>First of all, need to recognize follow things:</p><ul><li><p>XOR</p><p>XOR is a binary operation, it stands for “exclusive or”, that is to say the resulting bit evaluates to one if only exactly <em>one</em> of the bits is set.</p><p>This is its function table:</p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">a | b | a ^ b<br>--|---|------<br><span class="hljs-number">0</span> | <span class="hljs-number">0</span> | <span class="hljs-number">0</span><br><span class="hljs-number">0</span> | <span class="hljs-number">1</span> | <span class="hljs-number">1</span><br><span class="hljs-number">1</span> | <span class="hljs-number">0</span> | <span class="hljs-number">1</span><br><span class="hljs-number">1</span> | <span class="hljs-number">1</span> | <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>This operation is performed between every two corresponding bits of a number.</p><p>Example: <code>7 ^ 10</code><br>In binary: <code>0111 ^ 1010</code></p><figure class="highlight py"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs py">  <span class="hljs-number">0111</span><br>^ <span class="hljs-number">1010</span><br>======<br>  <span class="hljs-number">1101</span> = <span class="hljs-number">13</span><br></code></pre></div></td></tr></table></figure><p><strong>Properties:</strong> The operation is commutative, associative and self-inverse.</p></li><li><p>XOR rules</p><ul><li>any number XOR to itself return 0</li><li>any number XOR to 0 return itself </li></ul></li></ul><p>python code:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(self, nums: List[int])</span> -&gt; int:</span><br>        single_number = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">for</span> num <span class="hljs-keyword">in</span> nums:<br>            single_number ^= num<br>        <span class="hljs-keyword">return</span> single_number<br></code></pre></div></td></tr></table></figure><p>Golang code:</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">singleNumber</span><span class="hljs-params">(nums []<span class="hljs-keyword">int</span>)</span> <span class="hljs-title">int</span></span> &#123;<br>    s_num := <span class="hljs-number">0</span><br>    <span class="hljs-keyword">for</span> _,num := <span class="hljs-keyword">range</span> nums&#123;<br>        s_num ^= num<br>    &#125;<br>    <span class="hljs-keyword">return</span> s_num<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>groupcache源码阅读(二）——缓存并发控制</title>
      <link href="2020/05/24/groupcache2/"/>
      <url>2020/05/24/groupcache2/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2020/05/25/t9CtxI.jpg" alt="t9CtxI.jpg"></p><h2 id="互斥锁——sync-Mutex"><a href="#互斥锁——sync-Mutex" class="headerlink" title="互斥锁——sync.Mutex"></a>互斥锁——sync.Mutex</h2><p>多个协程(goroutine)同时读写同一个变量，在并发度较高的情况下，会发生冲突。确保一次只有一个协程(goroutine)可以访问该变量以避免冲突，这称之为<code>互斥</code>，互斥锁可以解决这个问题。</p><blockquote><p>sync.Mutex 是一个互斥锁，可以由不同的协程加锁和解锁。</p></blockquote><p><code>sync.Mutex</code> 是 Go 语言标准库提供的一个互斥锁，当一个协程(goroutine)获得了这个锁的拥有权后，其它请求锁的协程(goroutine) 就会阻塞在 <code>Lock()</code> 方法的调用上，直到调用 <code>Unlock()</code> 锁被释放。</p><h2 id="Groupcache的并发数据对象"><a href="#Groupcache的并发数据对象" class="headerlink" title="Groupcache的并发数据对象"></a>Groupcache的并发数据对象</h2><h3 id="ByteView"><a href="#ByteView" class="headerlink" title="ByteView"></a><code>ByteView</code></h3><p>对于Groupcache这种key、value的缓存，value再上一篇文章中显示了是一个空接口。而这里用<code>ByteView</code> 明确了，value的具体含义。</p><p>只读数据结构 <code>ByteView</code> 用来表示缓存值，是 GeeCache 主要的数据结构之一</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// A ByteView holds an immutable view of bytes.</span><br><span class="hljs-comment">// Internally it wraps either a []byte or a string,</span><br><span class="hljs-comment">// but that detail is invisible to callers.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// A ByteView is meant to be used as a value type, not</span><br><span class="hljs-comment">// a pointer (like a time.Time).</span><br><span class="hljs-comment">// 一个抽象的制度数据结构，用来保存缓存值</span><br><span class="hljs-comment">// ByteView 有两个数据成员，</span><br><span class="hljs-comment">// - b []byte，b 将会存储真实的缓存值。选择 byte 类型是为了能够支持任意的数据类型的存储，例如图片、视频等。</span><br><span class="hljs-comment">// - s string .s将会用来直接保存字符串</span><br><span class="hljs-keyword">type</span> ByteView <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// If b is non-nil, b is used, else s is used.</span><br>b []<span class="hljs-keyword">byte</span><br>s <span class="hljs-keyword">string</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>ByteView对象配套的增删改查</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// ByteSlice returns a copy of the data as a byte slice.</span><br><span class="hljs-comment">// b 是只读的，使用 ByteSlice() 方法返回一个拷贝，防止缓存值被外部程序修改。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(v ByteView)</span> <span class="hljs-title">ByteSlice</span><span class="hljs-params">()</span> []<span class="hljs-title">byte</span></span> &#123;<br><span class="hljs-keyword">if</span> v.b != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> cloneBytes(v.b)<br>&#125;<br><span class="hljs-keyword">return</span> []<span class="hljs-keyword">byte</span>(v.s)<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="cache再度封装lru-Cache"><a href="#cache再度封装lru-Cache" class="headerlink" title="cache再度封装lru.Cache"></a>cache再度封装lru.Cache</h3><p>在<a href="https://github.com/hyyc554/groupcache-coderead/blob/master/groupcache.go" target="_blank" rel="noopener">groupcache.go</a>中定义的cache是对底层lur的并发封装</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// cache is a wrapper around an *lru.Cache that adds synchronization,</span><br><span class="hljs-comment">// makes values always be ByteView, and counts the size of all keys and</span><br><span class="hljs-comment">// values.</span><br><span class="hljs-comment">// 对lru.Cache进行并发控制</span><br><span class="hljs-keyword">type</span> cache <span class="hljs-keyword">struct</span> &#123;<br>mu         sync.RWMutex<br>nbytes     <span class="hljs-keyword">int64</span> <span class="hljs-comment">// of all keys and values</span><br>lru        *lru.Cache<br>nhit, nget <span class="hljs-keyword">int64</span><br>nevict     <span class="hljs-keyword">int64</span> <span class="hljs-comment">// number of evictions</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>对应的增删改查：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">/*<br>在 add 方法中，判断了 c.lru 是否为 nil，如果不等于 nil 再创建实例。<br>这种方法称之为延迟初始化(Lazy Initialization)，<br>一个对象的延迟初始化意味着该对象的创建将会延迟至第一次使用该对象时。<br>主要用于提高性能，并减少程序内存要求<br>*/</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cache)</span> <span class="hljs-title">add</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>, value ByteView)</span></span> &#123;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br><span class="hljs-keyword">if</span> c.lru == <span class="hljs-literal">nil</span> &#123;<br>c.lru = &amp;lru.Cache&#123;<br>OnEvicted: <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key lru.Key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br>val := value.(ByteView)<br>c.nbytes -= <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(key.(<span class="hljs-keyword">string</span>))) + <span class="hljs-keyword">int64</span>(val.Len())<br>c.nevict++<br>&#125;,<br>&#125;<br>&#125;<br>c.lru.Add(key, value)<br>c.nbytes += <span class="hljs-keyword">int64</span>(<span class="hljs-built_in">len</span>(key)) + <span class="hljs-keyword">int64</span>(value.Len())<br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *cache)</span> <span class="hljs-title">get</span><span class="hljs-params">(key <span class="hljs-keyword">string</span>)</span> <span class="hljs-params">(value ByteView, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;<br>c.mu.Lock()<br><span class="hljs-keyword">defer</span> c.mu.Unlock()<br>c.nget++<br><span class="hljs-keyword">if</span> c.lru == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>vi, ok := c.lru.Get(key)<br><span class="hljs-keyword">if</span> !ok &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>c.nhit++<br><span class="hljs-keyword">return</span> vi.(ByteView), <span class="hljs-literal">true</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="主体结构-Group"><a href="#主体结构-Group" class="headerlink" title="主体结构 Group"></a>主体结构 Group</h3><p>Group 是 GroupCache 最核心的数据结构，负责与用户的交互，并且控制缓存值存储和获取的流程。</p><p>具体流程如下：</p><p><img src="https://s1.ax1x.com/2020/05/23/YjjarR.png" alt></p><p>上述的过程均在group对象中完成，以下是group的结构体:</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// A Group is a cache namespace and associated data loaded spread over</span><br><span class="hljs-comment">// a group of 1 or more machines.</span><br><span class="hljs-keyword">type</span> Group <span class="hljs-keyword">struct</span> &#123;<br>name       <span class="hljs-keyword">string</span>  <span class="hljs-comment">// Group的名字</span><br><span class="hljs-comment">// 定义接口 Getter 和 回调函数 Get(key string)([]byte, error)，参数是 key，返回值是 []byte。</span><br><span class="hljs-comment">// getter相当于是group获取本地、远端数据的接口方法</span><br>getter     Getter <span class="hljs-comment">// 即缓存未命中时获取源数据的回调(callback)</span><br>peersOnce  sync.Once<span class="hljs-comment">// 单例化</span><br>peers      PeerPicker <span class="hljs-comment">// 节点选择方法</span><br>cacheBytes <span class="hljs-keyword">int64</span> <span class="hljs-comment">// limit for sum of mainCache and hotCache size</span><br><br><span class="hljs-comment">// mainCache is a cache of the keys for which this process</span><br><span class="hljs-comment">// (amongst its peers) is authoritative. That is, this cache</span><br><span class="hljs-comment">// contains keys which consistent hash on to this process's</span><br><span class="hljs-comment">// peer number.</span><br>mainCache cache <span class="hljs-comment">// 当前group维持的内存数据对象，并发缓存</span><br><br><span class="hljs-comment">// hotCache contains keys/values for which this peer is not</span><br><span class="hljs-comment">// authoritative (otherwise they would be in mainCache), but</span><br><span class="hljs-comment">// are popular enough to warrant mirroring in this process to</span><br><span class="hljs-comment">// avoid going over the network to fetch from a peer.  Having</span><br><span class="hljs-comment">// a hotCache avoids network hotspotting, where a peer's</span><br><span class="hljs-comment">// network card could become the bottleneck on a popular key.</span><br><span class="hljs-comment">// This cache is used sparingly to maximize the total number</span><br><span class="hljs-comment">// of key/value pairs that can be stored globally.</span><br>hotCache cache <span class="hljs-comment">// 简而言之就是，对不在本节点的热点数据，进行本地缓存，以免大量的网络io</span><br><br><span class="hljs-comment">// loadGroup ensures that each key is only fetched once</span><br><span class="hljs-comment">// (either locally or remotely), regardless of the number of</span><br><span class="hljs-comment">// concurrent callers.</span><br>loadGroup flightGroup <span class="hljs-comment">//处理惊群效应</span><br><br>_ <span class="hljs-keyword">int32</span> <span class="hljs-comment">// force Stats to be 8-byte aligned on 32-bit platforms</span><br><br><span class="hljs-comment">// Stats are statistics on the group.</span><br>Stats Stats <span class="hljs-comment">// group状态维持情况</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>对Group的实例化：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// NewGroup creates a coordinated group-aware Getter from a Getter.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The returned Getter tries (but does not guarantee) to run only one</span><br><span class="hljs-comment">// Get call at once for a given key across an entire set of peer</span><br><span class="hljs-comment">// processes. Concurrent callers both in the local process and in</span><br><span class="hljs-comment">// other processes receive copies of the answer once the original Get</span><br><span class="hljs-comment">// completes.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// The group name must be unique for each getter.</span><br><span class="hljs-comment">// 构建函数 NewGroup 用来实例化 Group，并且将 group 存储在全局变量 groups 中</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">NewGroup</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, cacheBytes <span class="hljs-keyword">int64</span>, getter Getter)</span> *<span class="hljs-title">Group</span></span> &#123;<br><span class="hljs-keyword">return</span> newGroup(name, cacheBytes, getter, <span class="hljs-literal">nil</span>)<br>&#125;<br><br><span class="hljs-comment">// If peers is nil, the peerPicker is called via a sync.Once to initialize it.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">newGroup</span><span class="hljs-params">(name <span class="hljs-keyword">string</span>, cacheBytes <span class="hljs-keyword">int64</span>, getter Getter, peers PeerPicker)</span> *<span class="hljs-title">Group</span></span> &#123;<br><span class="hljs-keyword">if</span> getter == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">"nil Getter"</span>)<br>&#125;<br>mu.Lock()<br><span class="hljs-keyword">defer</span> mu.Unlock()<br>initPeerServerOnce.Do(callInitPeerServer)<br><span class="hljs-keyword">if</span> _, dup := groups[name]; dup &#123;<br><span class="hljs-built_in">panic</span>(<span class="hljs-string">"duplicate registration of group "</span> + name)<br>&#125;<br>g := &amp;Group&#123;<br>name:       name,<br>getter:     getter,<br>peers:      peers,<br>cacheBytes: cacheBytes,<br>loadGroup:  &amp;singleflight.Group&#123;&#125;,<br>&#125;<br><span class="hljs-keyword">if</span> fn := newGroupHook; fn != <span class="hljs-literal">nil</span> &#123;<br>fn(g)<br>&#125;<br>groups[name] = g<br><span class="hljs-keyword">return</span> g<br>&#125;<br></code></pre></div></td></tr></table></figure><p>Group 的 Get 方法</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// load loads key either by invoking the getter locally or by sending it to another machine.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Group)</span> <span class="hljs-title">load</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>, dest Sink)</span> <span class="hljs-params">(value ByteView, destPopulated <span class="hljs-keyword">bool</span>, err error)</span></span> &#123;<br>g.Stats.Loads.Add(<span class="hljs-number">1</span>)<br>viewi, err := g.loadGroup.Do(key, <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span> <span class="hljs-params">(<span class="hljs-keyword">interface</span>&#123;&#125;, error)</span></span> &#123;<br><span class="hljs-comment">// Check the cache again because singleflight can only dedup calls</span><br><span class="hljs-comment">// that overlap concurrently.  It's possible for 2 concurrent</span><br><span class="hljs-comment">// requests to miss the cache, resulting in 2 load() calls.  An</span><br><span class="hljs-comment">// unfortunate goroutine scheduling would result in this callback</span><br><span class="hljs-comment">// being run twice, serially.  If we don't check the cache again,</span><br><span class="hljs-comment">// cache.nbytes would be incremented below even though there will</span><br><span class="hljs-comment">// be only one entry for this key.</span><br><span class="hljs-comment">//</span><br><span class="hljs-comment">// Consider the following serialized event ordering for two</span><br><span class="hljs-comment">// goroutines in which this callback gets called twice for the</span><br><span class="hljs-comment">// same key:</span><br><span class="hljs-comment">// 1: Get("key")</span><br><span class="hljs-comment">// 2: Get("key")</span><br><span class="hljs-comment">// 1: lookupCache("key")</span><br><span class="hljs-comment">// 2: lookupCache("key")</span><br><span class="hljs-comment">// 1: load("key")</span><br><span class="hljs-comment">// 2: load("key")</span><br><span class="hljs-comment">// 1: loadGroup.Do("key", fn)</span><br><span class="hljs-comment">// 1: fn()</span><br><span class="hljs-comment">// 2: loadGroup.Do("key", fn)</span><br><span class="hljs-comment">// 2: fn()</span><br><span class="hljs-keyword">if</span> value, cacheHit := g.lookupCache(key); cacheHit &#123;<br>g.Stats.CacheHits.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> value, <span class="hljs-literal">nil</span><br>&#125;<br>g.Stats.LoadsDeduped.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">var</span> value ByteView<br><span class="hljs-keyword">var</span> err error<br><span class="hljs-comment">// 进行节点选择，是读取本地数据，还是从远端节点获取数据</span><br><span class="hljs-keyword">if</span> peer, ok := g.peers.PickPeer(key); ok &#123;<br>value, err = g.getFromPeer(ctx, peer, key)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>g.Stats.PeerLoads.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> value, <span class="hljs-literal">nil</span><br>&#125;<br>g.Stats.PeerErrors.Add(<span class="hljs-number">1</span>)<br><span class="hljs-comment">// TODO(bradfitz): log the peer's error? keep</span><br><span class="hljs-comment">// log of the past few for /groupcachez?  It's</span><br><span class="hljs-comment">// probably boring (normal task movement), so not</span><br><span class="hljs-comment">// worth logging I imagine.</span><br>&#125;<br>value, err = g.getLocally(ctx, key, dest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br>g.Stats.LocalLoadErrs.Add(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>g.Stats.LocalLoads.Add(<span class="hljs-number">1</span>)<br>destPopulated = <span class="hljs-literal">true</span> <span class="hljs-comment">// only one caller of load gets this return value</span><br>g.populateCache(key, value, &amp;g.mainCache)<br><span class="hljs-keyword">return</span> value, <span class="hljs-literal">nil</span><br>&#125;)<br><span class="hljs-keyword">if</span> err == <span class="hljs-literal">nil</span> &#123;<br>value = viewi.(ByteView)<br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(g *Group)</span> <span class="hljs-title">getLocally</span><span class="hljs-params">(ctx context.Context, key <span class="hljs-keyword">string</span>, dest Sink)</span> <span class="hljs-params">(ByteView, error)</span></span> &#123;<br>err := g.getter.Get(ctx, key, dest)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> ByteView&#123;&#125;, err<br>&#125;<br><span class="hljs-keyword">return</span> dest.view()<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>Get 方法实现了上述所说的流程 。</li><li>流程 1：从 mainCache 中查找缓存，如果存在则返回缓存值。</li><li>流程 2：节点选择，判断是本地还是远端节点</li><li>流程 3：缓存不存在，则调用 load 方法，load 调用 getLocally（分布式场景下会调用 getFromPeer 从其他节点获取），getLocally 调用用户回调函数 <code>g.getter.Get()</code> 获取源数据，并且将源数据添加到缓存 mainCache 中（通过 populateCache 方法）</li></ul><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>通过上面的代码已经可以看出Group单节点内，对于并发请求缓存数据，实际上就是加入了一个互斥锁，已经对缓存数据进行只读拷贝，确保读取的安全。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Groupcache源码阅读（一）——LRU淘汰策略实现</title>
      <link href="2020/05/23/groupcache/"/>
      <url>2020/05/23/groupcache/</url>
      
        <content type="html"><![CDATA[<p>这里是Groupcache源码阅读计划的第一步，首先我们熟悉一下这个项目的代码结构。<br><a id="more"></a></p><h2 id="源代码结构树"><a href="#源代码结构树" class="headerlink" title="源代码结构树"></a>源代码结构树</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini">groupcache-master<br> ├── byteview.go<br> ├── byteview_test.go<br> ├── consistenthash<br> │   ├── consistenthash.go<br> │   └── consistenthash_test.go<br> ├── groupcache.go<br> ├── groupcachepb<br> │   ├── groupcache.pb.go<br> │   └── groupcache.proto<br> ├── groupcache_test.go<br> ├── http.go<br> ├── http_test.go<br> ├── LICENSE<br> ├── lru<br> │   ├── lru.go<br> │   └── lru_test.go<br> ├── peers.go<br> ├── README.md<br> ├── singleflight<br> │   ├── singleflight.go<br> │   └── singleflight_test.go<br> ├── sinks.go<br> └── testpb<br>     ├── test.pb.go<br>     └── test.proto<br></code></pre></div></td></tr></table></figure><h2 id="工作流程"><a href="#工作流程" class="headerlink" title="工作流程"></a>工作流程</h2><p><img src="https://s1.ax1x.com/2020/05/23/YjjarR.png" alt="YjjarR.png"></p><h2 id="Groupcache的缓存淘汰策略"><a href="#Groupcache的缓存淘汰策略" class="headerlink" title="Groupcache的缓存淘汰策略"></a>Groupcache的缓存淘汰策略</h2><p>涉及到缓存，那么缓存的淘汰策略必须是要首先考虑的，下面介绍一下几种常见的缓存淘汰策略：</p><h3 id="FIFO-First-In-First-Out"><a href="#FIFO-First-In-First-Out" class="headerlink" title="FIFO(First In First Out)"></a>FIFO(First In First Out)</h3><p>先进先出，也就是淘汰缓存中最老(最早添加)的记录。FIFO 认为，最早添加的记录，其不再被使用的可能性比刚添加的可能性大。这种算法的实现也非常简单，创建一个队列，新增记录添加到队尾，每次内存不够时，淘汰队首。但是很多场景下，部分记录虽然是最早添加但也最常被访问，而不得不因为呆的时间太长而被淘汰。这类数据会被频繁地添加进缓存，又被淘汰出去，导致缓存命中率降低。</p><h3 id="LFU-Least-Frequently-Used"><a href="#LFU-Least-Frequently-Used" class="headerlink" title="LFU(Least Frequently Used)"></a>LFU(Least Frequently Used)</h3><p>最少使用，也就是淘汰缓存中访问频率最低的记录。LFU 认为，如果数据过去被访问多次，那么将来被访问的频率也更高。LFU 的实现需要维护一个按照访问次数排序的队列，每次访问，访问次数加1，队列重新排序，淘汰时选择访问次数最少的即可。LFU 算法的命中率是比较高的，但缺点也非常明显，维护每个记录的访问次数，对内存的消耗是很高的；另外，如果数据的访问模式发生变化，LFU 需要较长的时间去适应，也就是说 LFU 算法受历史数据的影响比较大。例如某个数据历史上访问次数奇高，但在某个时间点之后几乎不再被访问，但因为历史访问次数过高，而迟迟不能被淘汰。</p><h3 id="LRU-Least-Recently-Used"><a href="#LRU-Least-Recently-Used" class="headerlink" title="LRU(Least Recently Used)"></a>LRU(Least Recently Used)</h3><p>最近最少使用，相对于仅考虑时间因素的 FIFO 和仅考虑访问频率的 LFU，LRU 算法可以认为是相对平衡的一种淘汰算法。LRU 认为，如果数据最近被访问过，那么将来被访问的概率也会更高。LRU 算法的实现非常简单，维护一个队列，如果某条记录被访问了，则移动到队尾，那么队首则是最近最少访问的数据，淘汰该条记录即可。</p><p>具体实现原理如下</p><p><a href="https://imgchr.com/i/Yv8RZd" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2020/05/23/Yv8RZd.png" alt="Yv8RZd.png"></a></p><h3 id="Groupcache中的LRU实现"><a href="#Groupcache中的LRU实现" class="headerlink" title="Groupcache中的LRU实现"></a><code>Groupcache</code>中的LRU实现</h3><p><img src="https://s1.ax1x.com/2020/05/23/Yvp338.jpg" alt="Yvp338.jpg"></p><p>这张图很好地表示了 LRU 算法最核心的 2 个数据结构</p><ul><li>蓝色的是字典(map)，存储键和值的映射关系。这样根据某个键(key)查找对应的值(value)的复杂是<code>O(1)</code>，在字典中插入一条记录的复杂度也是<code>O(1)</code>。</li><li>红色的是双向链表(double linked list)实现的队列。将所有的值放到双向链表中，这样，当访问到某个值时，将其移动到队尾的复杂度是<code>O(1)</code>，在队尾新增一条记录以及删除一条记录的复杂度均为<code>O(1)</code>。</li></ul><h3 id="核心数据结构："><a href="#核心数据结构：" class="headerlink" title="核心数据结构："></a>核心数据结构：</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> lru<br><br><span class="hljs-keyword">import</span> <span class="hljs-string">"container/list"</span><br><br><span class="hljs-comment">// Cache is an LRU cache. It is not safe for concurrent access.</span><br><span class="hljs-comment">// groupcache的核心数据结构</span><br><span class="hljs-keyword">type</span> Cache <span class="hljs-keyword">struct</span> &#123;<br><span class="hljs-comment">// MaxEntries is the maximum number of cache entries before</span><br><span class="hljs-comment">// an item is evicted. Zero means no limit.</span><br><br>MaxEntries <span class="hljs-keyword">int</span> <span class="hljs-comment">// maxBytes 是允许使用的最大内存</span><br><br><span class="hljs-comment">// OnEvicted optionally specifies a callback function to be</span><br><span class="hljs-comment">// executed when an entry is purged from the cache.</span><br>OnEvicted <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">(key Key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span> //提供一个淘汰值时的钩子函数</span><br><br><br>ll    *list.List <span class="hljs-comment">// 用于实现LRU的双向链表</span><br>cache <span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*list.Element <span class="hljs-comment">// 键是空接口，值是双向链表中对应节点的指针。</span><br>&#125;<br><br><span class="hljs-comment">// A Key may be any value that is comparable. See http://golang.org/ref/spec#Comparison_operators</span><br><span class="hljs-keyword">type</span> Key <span class="hljs-keyword">interface</span>&#123;&#125; <span class="hljs-comment">//只要是可以用来作为比较的对象，均可以作为groupcache的key</span><br><br><span class="hljs-comment">// 键值对 entry 是双向链表节点的数据类型，在链表中仍保存每个值对应的 key 的好处在于，淘汰队首节点时，需要用 key 从字典中删除对应的映射</span><br><span class="hljs-keyword">type</span> entry <span class="hljs-keyword">struct</span> &#123;<br>key   Key<br>value <span class="hljs-keyword">interface</span>&#123;&#125;<br>&#125;<br><br><span class="hljs-comment">// New creates a new Cache.</span><br><span class="hljs-comment">// If maxEntries is zero, the cache has no limit and it's assumed</span><br><span class="hljs-comment">// that eviction is done by the caller.</span><br><span class="hljs-comment">// 方便实例化 Cache，实现 New() 函数</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">New</span><span class="hljs-params">(maxEntries <span class="hljs-keyword">int</span>)</span> *<span class="hljs-title">Cache</span></span> &#123;<br><span class="hljs-keyword">return</span> &amp;Cache&#123;<br>MaxEntries: maxEntries,<br>ll:         list.New(),<br>cache:      <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*list.Element),<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>后续就是对这个数据结构常规的增删改查：</p><h3 id="查找"><a href="#查找" class="headerlink" title="查找"></a>查找</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Get looks up a key's value from the cache.</span><br><span class="hljs-comment">// 第一步是从字典中找到对应的双向链表的节点，第二步，将该节点移动到队尾</span><br><span class="hljs-comment">// 如果键对应的链表节点存在，则将对应节点移动到队尾，并返回查找到的值。</span><br><span class="hljs-comment">// c.ll.MoveToFront(ele)，即将链表中的节点 ele 移动到队尾（双向链表作为队列，队首队尾是相对的，在这里约定 front 为队尾）</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">Get</span><span class="hljs-params">(key Key)</span> <span class="hljs-params">(value <span class="hljs-keyword">interface</span>&#123;&#125;, ok <span class="hljs-keyword">bool</span>)</span></span> &#123;<br><span class="hljs-keyword">if</span> c.cache == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> ele, hit := c.cache[key]; hit &#123;<br>c.ll.MoveToFront(ele)<br><span class="hljs-keyword">return</span> ele.Value.(*entry).value, <span class="hljs-literal">true</span><br>&#125;<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="增加-修改"><a href="#增加-修改" class="headerlink" title="增加/修改"></a>增加/修改</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Add adds a value to the cache.</span><br><span class="hljs-comment">//如果键存在，则更新对应节点的值，并将该节点移到队尾。</span><br><span class="hljs-comment">// 不存在则是新增场景，首先队尾添加新节点 &amp;entry&#123;key, value&#125;, 并字典中添加 key 和节点的映射关系。</span><br><span class="hljs-comment">// 更新 c.nbytes，如果超过了设定的最大值 c.maxBytes，则移除最少访问的节点。</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">Add</span><span class="hljs-params">(key Key, value <span class="hljs-keyword">interface</span>&#123;&#125;)</span></span> &#123;<br><span class="hljs-keyword">if</span> c.cache == <span class="hljs-literal">nil</span> &#123;<br>c.cache = <span class="hljs-built_in">make</span>(<span class="hljs-keyword">map</span>[<span class="hljs-keyword">interface</span>&#123;&#125;]*list.Element)<br>c.ll = list.New()<br>&#125;<br><span class="hljs-keyword">if</span> ee, ok := c.cache[key]; ok &#123;<br>c.ll.MoveToFront(ee)<br>ee.Value.(*entry).value = value<br><span class="hljs-keyword">return</span><br>&#125;<br>ele := c.ll.PushFront(&amp;entry&#123;key, value&#125;)<br>c.cache[key] = ele<br><span class="hljs-keyword">if</span> c.MaxEntries != <span class="hljs-number">0</span> &amp;&amp; c.ll.Len() &gt; c.MaxEntries &#123;<br>c.RemoveOldest()<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="删除"><a href="#删除" class="headerlink" title="删除"></a>删除</h3><ul><li>删除指定key</li></ul><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Remove removes the provided key from the cache.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">Remove</span><span class="hljs-params">(key Key)</span></span> &#123;<br><span class="hljs-keyword">if</span> c.cache == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">if</span> ele, hit := c.cache[key]; hit &#123;<br>c.removeElement(ele)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><ul><li>lru删除最近使用频率最低的key</li></ul><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// RemoveOldest removes the oldest item from the cache.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">RemoveOldest</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> c.cache == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span><br>&#125;<br>ele := c.ll.Back()<br><span class="hljs-keyword">if</span> ele != <span class="hljs-literal">nil</span> &#123;<br>c.removeElement(ele)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>移除元素</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">removeElement</span><span class="hljs-params">(e *list.Element)</span></span> &#123;<br>c.ll.Remove(e)<br>kv := e.Value.(*entry)<br><span class="hljs-built_in">delete</span>(c.cache, kv.key)<br><span class="hljs-keyword">if</span> c.OnEvicted != <span class="hljs-literal">nil</span> &#123;<br>c.OnEvicted(kv.key, kv.value)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="其它"><a href="#其它" class="headerlink" title="其它"></a>其它</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-comment">// Len returns the number of items in the cache.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">Len</span><span class="hljs-params">()</span> <span class="hljs-title">int</span></span> &#123;<br><span class="hljs-keyword">if</span> c.cache == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>&#125;<br><span class="hljs-keyword">return</span> c.ll.Len()<br>&#125;<br><br><span class="hljs-comment">// Clear purges all stored items from the cache.</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(c *Cache)</span> <span class="hljs-title">Clear</span><span class="hljs-params">()</span></span> &#123;<br><span class="hljs-keyword">if</span> c.OnEvicted != <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">for</span> _, e := <span class="hljs-keyword">range</span> c.cache &#123;<br>kv := e.Value.(*entry)<br>c.OnEvicted(kv.key, kv.value)<br>&#125;<br>&#125;<br>c.ll = <span class="hljs-literal">nil</span><br>c.cache = <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>源码注释链接：</p><p><a href="https://github.com/hyyc554/groupcache-coderead/blob/master/lru/lru.go" target="_blank" rel="noopener">源码注释</a></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://geektutu.com/post/geecache-day1.html" target="_blank" rel="noopener">https://geektutu.com/post/geecache-day1.html</a></p><p><a href="https://github.com/golang/groupcache" target="_blank" rel="noopener">https://github.com/golang/groupcache</a></p><p><a href="https://blog.csdn.net/zhu592665411/article/details/80617081" target="_blank" rel="noopener">https://blog.csdn.net/zhu592665411/article/details/80617081</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 缓存 </tag>
            
            <tag> LRU </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang应用部署到Docker</title>
      <link href="2020/05/23/golangindocker/"/>
      <url>2020/05/23/golangindocker/</url>
      
        <content type="html"><![CDATA[<p>Golang作为一门静态语言运行前必须完成编译，而Python这类动态语言只要在解释器环境下就可以直接运行，所以他们的docker部署的最佳实践方式会略有不同。<img src="https://i.loli.net/2020/05/23/dzCOVvEkItop5w4.png" alt><br><a id="more"></a></p><h2 id="Dockerfile-for-Golang"><a href="#Dockerfile-for-Golang" class="headerlink" title="Dockerfile for Golang"></a>Dockerfile for Golang</h2><p>这里我先直接给出Goalng的Dockerfile ：</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> golang:alpine AS builder<br><br><span class="hljs-comment"># Set necessary environmet variables needed for our image</span><br><span class="hljs-keyword">ENV</span> GO111MODULE=on \<br>    GOPROXY=https://goproxy.cn,direct \<br>    CGO_ENABLED=<span class="hljs-number">0</span> \<br>    GOOS=linux \<br>    GOARCH=amd64<br><br><span class="hljs-comment"># Move to working directory /build</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /build</span><br><br><span class="hljs-comment"># Copy and download dependency using go mod</span><br><span class="hljs-keyword">COPY</span><span class="bash"> go.mod .</span><br><span class="hljs-keyword">COPY</span><span class="bash"> go.sum .</span><br><span class="hljs-keyword">RUN</span><span class="bash"> go mod download</span><br><br><span class="hljs-comment"># Copy the code into the container</span><br><span class="hljs-keyword">COPY</span><span class="bash"> . .</span><br><br><span class="hljs-comment"># Run test</span><br><span class="hljs-comment">#RUN go test ./...</span><br><br><span class="hljs-comment"># Build the application</span><br><span class="hljs-keyword">RUN</span><span class="bash"> go build -o main .</span><br><br><span class="hljs-comment"># Move to /dist directory as the place for resulting binary folder</span><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /dist</span><br><br><span class="hljs-comment"># Copy binary from build to main folder</span><br><span class="hljs-keyword">RUN</span><span class="bash"> cp /build/main .</span><br><br><span class="hljs-comment">############################</span><br><span class="hljs-comment"># STEP 2 build a small image</span><br><span class="hljs-comment">############################</span><br><span class="hljs-keyword">FROM</span> scratch<br><br><span class="hljs-keyword">COPY</span><span class="bash"> --from=builder /dist/main /</span><br><span class="hljs-keyword">COPY</span><span class="bash"> ./env/demo.env /env/demo.env</span><br><span class="hljs-keyword">COPY</span><span class="bash"> ./logs /logs</span><br><br><span class="hljs-comment"># Command to run the executable</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="bash"> [<span class="hljs-string">"/main"</span>]</span><br></code></pre></div></td></tr></table></figure><h2 id="Dockerfile-for-Python"><a href="#Dockerfile-for-Python" class="headerlink" title="Dockerfile for Python"></a>Dockerfile for Python</h2><p>因而在我看到一些高star数的开源软件的Dockerfile中，Python程序一般直接在运行在<code>python:3.7-alpine</code>的基础镜像之上。比如:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">FROM python:<span class="hljs-number">3.7</span>-alpine<br><br>ENV PYTHONUNBUFFERED <span class="hljs-number">1</span><br><br>RUN apk update \<br>  <span class="hljs-comment"># psycopg2 dependencies</span><br>  &amp;&amp; apk add --virtual build-deps gcc python3-dev musl-dev \<br>  &amp;&amp; apk add postgresql-dev \<br>  <span class="hljs-comment"># Pillow dependencies</span><br>  &amp;&amp; apk add jpeg-dev zlib-dev freetype-dev lcms2-dev openjpeg-dev tiff-dev tk-dev tcl-dev \<br>  <span class="hljs-comment"># CFFI dependencies</span><br>  &amp;&amp; apk add libffi-dev py-cffi<br><br>RUN addgroup -S django \<br>    &amp;&amp; adduser -S -G django django<br><br><span class="hljs-comment"># Requirements are installed here to ensure they will be cached.</span><br>COPY ./requirements /requirements<br>RUN pip install --no-cache-dir -r /requirements/production.txt \<br>    &amp;&amp; rm -rf /requirements<br><br>COPY ./compose/production/django/entrypoint /entrypoint<br>RUN sed -i <span class="hljs-string">'s/\r$//g'</span> /entrypoint<br>RUN chmod +x /entrypoint<br>RUN chown django /entrypoint<br><br>COPY ./compose/production/django/start /start<br>RUN sed -i <span class="hljs-string">'s/\r$//g'</span> /start<br>RUN chmod +x /start<br>RUN chown django /start<br>COPY ./compose/production/django/celery/worker/start /start-celeryworker<br>RUN sed -i <span class="hljs-string">'s/\r$//g'</span> /start-celeryworker<br>RUN chmod +x /start-celeryworker<br>RUN chown django /start-celeryworker<br><br>COPY ./compose/production/django/celery/beat/start /start-celerybeat<br>RUN sed -i <span class="hljs-string">'s/\r$//g'</span> /start-celerybeat<br>RUN chmod +x /start-celerybeat<br>RUN chown django /start-celerybeat<br><br>COPY ./compose/production/django/celery/flower/start /start-flower<br>RUN sed -i <span class="hljs-string">'s/\r$//g'</span> /start-flower<br>RUN chmod +x /start-flower<br>COPY . /app<br><br>RUN chown -R django /app<br><br>USER django<br><br>WORKDIR /app<br><br>ENTRYPOINT [<span class="hljs-string">"/entrypoint"</span>]<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>上面可以看出python的应用一般直接跑在某个python版本的alpine基础环境下的，而Gloang则是在GO的alpine环境下完成编译与测试后，然后通过多阶段构建的策略，最后将编译完成Gloang程序运行在<code>scratch</code>镜像中，这样可以减小Golang程序最终的镜像大小，避免浪费资源。</p>]]></content>
      
      
      
        <tags>
            
            <tag> Docker </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django数据库查询优化</title>
      <link href="2020/05/12/djangopro/"/>
      <url>2020/05/12/djangopro/</url>
      
        <content type="html"><![CDATA[<h2 id="1-DBA-的建议"><a href="#1-DBA-的建议" class="headerlink" title="1. DBA 的建议"></a>1. DBA 的建议</h2><a id="more"></a><h3 id="1-1-表字段设计"><a href="#1-1-表字段设计" class="headerlink" title="1.1 表字段设计"></a>1.1 表字段设计</h3><ul><li>避免出现 null 值，null 值难以查询优化且占用额外的索引空间</li><li>尽量使用 INT 而非 BIGINT，尽可能准确描述字段</li><li>使用枚举或整数，替代字符串类型</li><li>使用 TIMESTAMP 替代 DATETIME</li><li>单表字段不要超过 20</li><li>使用整型存储 IP</li></ul><h3 id="1-2-索引"><a href="#1-2-索引" class="headerlink" title="1.2 索引"></a>1.2 索引</h3><ul><li>在 Where 和 Order By 操作上建立索引</li><li>值分布稀少的字段不适合建立索引</li><li>字符串最好不要作为主键</li><li>在应用层保证 UNIQUE 特性</li></ul><h3 id="1-3-SQL-查询"><a href="#1-3-SQL-查询" class="headerlink" title="1.3 SQL 查询"></a>1.3 SQL 查询</h3><ul><li>不要做列运算，可能导致表扫描</li><li>避免 %xxx 式查询</li><li>减少 JOIN 操作</li><li>使用 LIMIT 拿取分页数据，而不要拿全部</li></ul><h2 id="2-Django-Model-建议"><a href="#2-Django-Model-建议" class="headerlink" title="2. Django Model 建议"></a>2. Django Model 建议</h2><p>ORM 与 DB 的对应关系：</p><table><thead><tr><th style="text-align:center">ORM</th><th style="text-align:center">DB</th></tr></thead><tbody><tr><td style="text-align:center">类</td><td style="text-align:center">数据表</td></tr><tr><td style="text-align:center">对象</td><td style="text-align:center">数据行</td></tr><tr><td style="text-align:center">属性</td><td style="text-align:center">字段</td></tr></tbody></table><ul><li>字段索引</li></ul><p>使用 db_index=True 添加索引</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">title = models.CharField(max_length=<span class="hljs-number">255</span>, db_index=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><ul><li>联合索引</li></ul><p>利用组合在一起的字段名字建立索引</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>    index_together = [<span class="hljs-string">'field_name_1'</span>, <span class="hljs-string">'field_name_2'</span>]<br></code></pre></div></td></tr></table></figure><ul><li>联合唯一索引</li></ul><p>组合在一起的字段名称唯一，可以是多个元组，也可以是单个元组。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>    <span class="hljs-comment"># 多元组</span><br>    unique_together = ((<span class="hljs-string">'field_name_1'</span>, <span class="hljs-string">'field_name_2'</span>),)<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>    <span class="hljs-comment"># 单元组</span><br>    unique_together = (<span class="hljs-string">'field_name_1'</span>, <span class="hljs-string">'field_name_1'</span>)<br></code></pre></div></td></tr></table></figure><h2 id="3-查询建议"><a href="#3-查询建议" class="headerlink" title="3. 查询建议"></a>3. 查询建议</h2><p>善用<code>select_related</code>与<code>prefetch_related</code>，如果没有时间，请直接看这个例子：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelA</span><span class="hljs-params">(models.Model)</span>:</span><br>    <span class="hljs-keyword">pass</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ModelB</span><span class="hljs-params">(models.Model)</span>:</span><br>    a = ForeignKey(ModelA)<br><br>ModelB.objects.select_related(<span class="hljs-string">'a'</span>).all() <span class="hljs-comment"># Forward ForeignKey relationship</span><br>ModelA.objects.prefetch_related(<span class="hljs-string">'modelb_set'</span>).all() <span class="hljs-comment"># Reverse ForeignKey relationship</span><br></code></pre></div></td></tr></table></figure><p>下面是解释</p><h3 id="3-1-select-related-解决外键关系-N-1-查询"><a href="#3-1-select-related-解决外键关系-N-1-查询" class="headerlink" title="3.1 select_related 解决外键关系 N + 1 查询"></a>3.1 select_related 解决外键关系 N + 1 查询</h3><p><code>select_related</code> 通过多表 join 关联查询，一次性获取所有数据，减少查询次数。这样讲，可能还是不够明白，看看下面的例子：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Country</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__unicode__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> self.name<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">House</span><span class="hljs-params">(models.Model)</span>:</span><br>    country = models.ForeignKey(Country, related_name=<span class="hljs-string">'houses'</span>)<br></code></pre></div></td></tr></table></figure><p>如果需要查询某个 country 的房屋信息，然后序列化处理。通常情况，可能会这样写：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">houses = House.objects.filter(country=country)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> houses:<br>    <span class="hljs-comment"># 会产生新的数据库查询操作</span><br>    country_name = item.country.name<br>    ...<br></code></pre></div></td></tr></table></figure><p>由于 Django 的 Lazy 特性，在执行 filter 操作时，并不会将 country 的 name 字段取出，而是在使用时，实时查询。这样会产生大量的数据库查询操作。</p><p>使用 <code>select_related</code> 可以避免这种情况，一次性将外键值取出。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">houses = House.objects.filter(country=country).select_related(<span class="hljs-string">'country'</span>)<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> houses:<br>    <span class="hljs-comment"># 不会产生新的数据库查询操作</span><br>    country_name = item.country.name<br>    ...<br></code></pre></div></td></tr></table></figure><h3 id="3-2-prefetch-related-解决多对多关系-N-1-查询"><a href="#3-2-prefetch-related-解决多对多关系-N-1-查询" class="headerlink" title="3.2 prefetch_related 解决多对多关系 N + 1 查询"></a>3.2 prefetch_related 解决多对多关系 N + 1 查询</h3><p><code>prefetch_related</code> 主要针对一对多、多对多关系进行优化。看一个例子：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Tag</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Article</span><span class="hljs-params">(models.Model)</span>:</span><br>    title = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    tags = models.ManyToManyField(<br>        to=<span class="hljs-string">"Tag"</span>,<br>        through=<span class="hljs-string">'Article2Tag'</span>,<br>        through_fields=(<span class="hljs-string">'article'</span>, <span class="hljs-string">'tag'</span>),<br>    )<br></code></pre></div></td></tr></table></figure><p>如果需要查询指定 Article 的 Tag 信息，然后序列化处理。通常情况，可能会这样写：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">articles = Article.objects.filter(id__in=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> articles:<br>    <span class="hljs-comment"># 会产生新的数据库查询操作</span><br>    item.tags.all()<br></code></pre></div></td></tr></table></figure><p>同样，上面的查询会产生 N + 1 问题，导致大量 IO 消耗。如果使用 <code>prefetch_related</code>，可以避免在循环中持续进行数据库查询操作。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">articles = Article.objects.prefetch_related(<span class="hljs-string">"tags"</span>).filter(id__in=(<span class="hljs-number">1</span>,<span class="hljs-number">2</span>))<br><span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> articles:<br>    <span class="hljs-comment"># 不会产生新的数据库查询操作</span><br>    item.tags.all()<br></code></pre></div></td></tr></table></figure><h3 id="3-3-仅查询需要的数据"><a href="#3-3-仅查询需要的数据" class="headerlink" title="3.3 仅查询需要的数据"></a>3.3 仅查询需要的数据</h3><p>默认情况下， Django 查询时会提取 ORM 中的全部字段。但是在使用场景中，我们仅关注某些字段。为了节省查询多余字段的时间，可以使用 Django 提供的这两个函数：</p><ul><li>defer()，指定哪些字段不要立即加载</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Entry.objects.defer(<span class="hljs-string">'headline'</span>, <span class="hljs-string">'body'</span>)<br></code></pre></div></td></tr></table></figure><ul><li>only()，指定立即加载哪些字段，其他忽略</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Entry.objects.only(<span class="hljs-string">"body"</span>, <span class="hljs-string">"rating"</span>).only(<span class="hljs-string">"headline"</span>)<br></code></pre></div></td></tr></table></figure><p>defer 和 only 的使用很灵活，可以链式延时加载，也可以链式逐步加载，还可以混合使用。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p><a href="https://www.chenshaowen.com/blog/database-query-optimization-of-django-performance.html" target="_blank" rel="noopener">Django 性能之数据库查询优化</a></p><p><a href="https://stackoverflow.com/questions/31237042/whats-the-difference-between-select-related-and-prefetch-related-in-django-orm" target="_blank" rel="noopener">What’s the difference between select_related and prefetch_related in Django ORM?</a></p><p><a href="https://ses4j.github.io/2015/11/23/optimizing-slow-django-rest-framework-performance/" target="_blank" rel="noopener">Optimizing slow Django REST Framework performance</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>k8sbug</title>
      <link href="2020/05/04/k8sbug/"/>
      <url>2020/05/04/k8sbug/</url>
      
        <content type="html"><![CDATA[<h2 id="踩坑一：Kubernetes-is-starting"><a href="#踩坑一：Kubernetes-is-starting" class="headerlink" title="踩坑一：Kubernetes is starting"></a>踩坑一：Kubernetes is starting</h2><a id="more"></a><p>这样就大功告成了？往往事情并不会这么顺利。由于众所周知的原因，启动 Kubernetes 所需的镜像往往会下载失败，于是点击 <em>Apply</em> 后，该配置页面的右下角始终显示 <em>Kubernetes is starting</em>，无法正常启动。</p><p>然后确认一下 Docker Desktop 自带的 Kubernetes 的版本。点击 Docker 图标，选择 <em>About Docker Desktop</em>，看到如下界面：</p><p><img src="https://s1.ax1x.com/2020/05/04/YC1jVx.png" alt="YC1jVx.png"></p><p>可以看到 Kubernetes 的版本是 v1.15.5。</p><p><a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop" target="_blank" rel="noopener">k8s-for-docker-desktop</a>中对应的版本也应该是1.15.5.</p><p>确保文件中的 Kubernetes 版本号与 Docker Desktop 自带的 Kubernetes 版本号一致后，执行命令：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">./load_images.sh</span><br></code></pre></div></td></tr></table></figure><p>该命令会帮助我们拉取启动 Kubernetes 所需的所有镜像。命令执行完毕后，点击 Docker 图标，在 <em>Preferences.. &gt; Reset</em> 界面中点击 <em>Reset Kubernetes cluster</em>，重启 Kubernetes。大功告成！</p><h2 id="踩坑二：安装-Dashboard"><a href="#踩坑二：安装-Dashboard" class="headerlink" title="踩坑二：安装 Dashboard"></a>踩坑二：安装 Dashboard</h2><p><a href="https://github.com/kubernetes/dashboard" target="_blank" rel="noopener">Kubernetes Dashboard</a> 是 Kubernetes 集群可视化的仪表盘。</p><p>一般来说我们直接通过一行 kubectl 命令进行安装就好了：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>kubectl apply -f <span class="hljs-symbol">https:</span>/<span class="hljs-regexp">/raw.githubusercontent.com/kubernetes</span><span class="hljs-regexp">/dashboard/v</span>1.<span class="hljs-number">10.1</span>/src/deploy/recommended/kubernetes-dashboard.yaml<br>复制代码<br></code></pre></div></td></tr></table></figure><p>但由于众所周知的原因，镜像还是会下载失败，pod 始终显示 <em>ImagePullBackOff</em>。这需要我们手动拉取所需镜像。</p><h3 id="下载-yaml-文件"><a href="#下载-yaml-文件" class="headerlink" title="下载 yaml 文件"></a>下载 yaml 文件</h3><p>先把 yaml 配置文件下载下来：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ curl -O https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v1.10.1/</span>src<span class="hljs-regexp">/deploy/</span>recommended<span class="hljs-regexp">/kubernetes-dashboard.yaml</span><br></code></pre></div></td></tr></table></figure><h3 id="重新安装-Dashboard"><a href="#重新安装-Dashboard" class="headerlink" title="重新安装 Dashboard"></a>重新安装 Dashboard</h3><p>如果刚才你已经执行了：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ kubectl apply -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v1.10.1/</span>src<span class="hljs-regexp">/deploy/</span>recommended<span class="hljs-regexp">/kubernetes-dashboard.yaml</span><br></code></pre></div></td></tr></table></figure><p>那么先把这个启动的 pod 删除：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ kubectl <span class="hljs-keyword">delete</span> -f https:<span class="hljs-regexp">//</span>raw.githubusercontent.com<span class="hljs-regexp">/kubernetes/</span>dashboard<span class="hljs-regexp">/v1.10.1/</span>src<span class="hljs-regexp">/deploy/</span>recommended<span class="hljs-regexp">/kubernetes-dashboard.yaml</span><br></code></pre></div></td></tr></table></figure><p>接着使用我们修改过的配置文件重新安装 Dashboard：</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$</span> kubectl delete <span class="hljs-operator">-f</span> kubernetes<span class="hljs-literal">-dashboard</span>.yaml<br></code></pre></div></td></tr></table></figure><h3 id="启动-Dashboard-并访问"><a href="#启动-Dashboard-并访问" class="headerlink" title="启动 Dashboard 并访问"></a>启动 Dashboard 并访问</h3><p>使用 kubectl 命令启动 Dashboard：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>kubectl proxy<br></code></pre></div></td></tr></table></figure><p>启动成功后，可以通过该地址进行访问 Dashboard：</p><blockquote><p>作者：江不知<br>链接：<a href="https://juejin.im/post/5d87980f5188253f74438bb6" target="_blank" rel="noopener">https://juejin.im/post/5d87980f5188253f74438bb6</a><br>来源：掘金<br>著作权归作者所有。商业转载请联系作者获得授权，非商业转载请注明出处。</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>win10下的Kubernetes实践笔记（—）</title>
      <link href="2020/05/04/k8s1/"/>
      <url>2020/05/04/k8s1/</url>
      
        <content type="html"><![CDATA[<blockquote><p>转载自<a href="https://www.dongwm.com/post/use-kubernetes-1/" target="_blank" rel="noopener"><strong>小明明S À DOMICILE</strong></a></p><p>针对原文中mac环境下的执行流程，于win10环境下测试通过，并进行相应的修改</p></blockquote><h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>Kubernetes (音 kubə’netis) 这个名字来自希腊语，意思是「舵手」或「领航员」，它是一个起源于 Google 的开源项目，允许自动化部署、管理和扩容容器化应用，它现在已成为容器编排的事实标准。<br><a id="more"></a><br>其实 Kubernetes 的简称 k8s 存在感更强，这个简称缘由是单词中间刚好是 8 个字母，这是一种数字缩写 (Numeronym) 方式。类似的如<code>internationalization</code>(国际化) 叫做<code>i18n</code>、<code>accessibility</code>叫做<code>a11y</code>等。以下如无特别原因均使用它的简称 k8s。</p><p>接下来几篇文章将分享我学习和使用它的一些经验，今天是第一篇，先了解 k8s 的架构、核心概念和基本用法。</p><h3 id="在-WIN10-上安装-Kubernetes"><a href="#在-WIN10-上安装-Kubernetes" class="headerlink" title="在 WIN10 上安装 Kubernetes"></a>在 WIN10 上安装 Kubernetes</h3><p>首先需要安装 Kubernetes。</p><h4 id="k8s-for-docker-desktop"><a href="#k8s-for-docker-desktop" class="headerlink" title="k8s-for-docker-desktop"></a><a href="https://github.com/AliyunContainerService/k8s-for-docker-desktop" target="_blank" rel="noopener">k8s-for-docker-desktop</a></h4><p>根据上述指引可以搭建一个基于win10的Kubernetes 测试环境</p><p>现在 k8s 就安装完成啦。我们进入正题~</p><h3 id="Kubernetes-架构"><a href="#Kubernetes-架构" class="headerlink" title="Kubernetes 架构"></a>Kubernetes 架构</h3><p>典型 Kubernetes 集群包含一个 Master 和多个 Node，简单架构如下图所示 (未来 3 张图来源于延伸阅读链接 3)：</p><p><img src="https://user-images.githubusercontent.com/841395/67157622-1f0f8980-f361-11e9-9428-6a18ea11a95c.png" alt="img"></p><h4 id="Master-节点"><a href="#Master-节点" class="headerlink" title="Master 节点"></a>Master 节点</h4><p>Master 是集群的控制节点，它负责整个集群的管理和控制 (调度)。这个节点上运行着多个组件，核心的如下:</p><ul><li>API 服务器 (kube-apiserver)。API Server 对外暴露了 k8s API，提供 HTTP REST 服务。提供了认证、授权、访问控制、API 注册和发现等机制</li><li>etcd。是一个高可用的键值对存储系统，被用作 k8s 的后端存储，所有集群配置数据都存储在里面，用于服务发现和集群管理，可以说是存了整个集群的状态</li><li>控制管理器 (kube-controller-manager)。Controller 负责维护集群的状态，比如故障检测、自动扩展、滚动更新等</li><li>调度器 (kube-scheduler)。Scheduler 负责资源的调度，按照预定的调度策略将 Pod 调度到相应的机器上</li></ul><p>看一下 Mater 节点的组件架构效果图:</p><p><img src="https://user-images.githubusercontent.com/841395/67158628-453b2680-f36d-11e9-846a-e598c58b9756.png" alt="img"></p><p>Pod 是什么很快就说到了哈~</p><h4 id="Node"><a href="#Node" class="headerlink" title="Node"></a>Node</h4><p>Node 是集群的工作节点，它提供 CPU、内存和存储等资源。它上面运行哪些容器应用由 Master 节点分配。这个节点上也运行着多个组件，核心的如下:</p><ul><li>节点代理 (kubelet)。它和 Master 节点协作，实现 Pod 的创建、启动、监控、重启、销毁等集群管理工作</li><li>转发代理 (kube-proxy)。维护主机上的网络规则并执行连接转发，实现服务的负载均衡和反向代理</li><li>Docker。负责用于运行容器 (或者说 Pod)</li><li>fluentd。fluentd 是一个守护进程，它有助于提供集群层面日志 集群层面的日志。</li></ul><p>看一下 Node 节点的组件架构效果图:</p><p><img src="https://user-images.githubusercontent.com/841395/67158664-9519ed80-f36d-11e9-8801-3580200802fc.png" alt="img"></p><p>这个图里面还标了一些插件，如 CoreDNS、Dashboard 以及没有替到的 Ingress Controller 等，之后还会再说，内容太多，我们先了解基础部分。</p><p>通过下面的命令可以看到集群节点情况:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">❯ kubectl get nodes<br>NAME             STATUS   ROLES    AGE    VERSION<br>docker-desktop   Ready    master   2m    v1.14.6<br></code></pre></div></td></tr></table></figure><p>当然，我们这个是单节点集群环境，只有一个 Master 节点，但肩负了 Node 节点的作用。</p><h3 id="Pod"><a href="#Pod" class="headerlink" title="Pod"></a>Pod</h3><p>Pod 是 k8s 里面基本的部署调度单元，每个 Pod 可以由一个或多个容器组成，容器之间共享存储、网络等资源。Pod 这个词一眼看去是不是很懵？其实看一下它中文翻译「豆荚」的图就好理解了:</p><p><img src="https://user-images.githubusercontent.com/841395/67159729-60ad2e00-f37b-11e9-883f-489ff51bac75.jpg" alt="img"></p><p>豌豆被豌豆荚「包」了起来，这就是一个 Pod。所以可以把单个 Pod 理解成是运行独立应用的「逻辑主机」—— 其中运行着一个或者多个紧密耦合的应用容器。</p><p>在一开始学习基础概念阶段我会用一些非常简单的例子帮助大家消化 k8s 的知识。首先创建一个单独的目录来存放示例所需的文件，实现一个用 Nginx 访问静态文件的服务:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">❯ mkdir k8s-demo<br>❯ <span class="hljs-built_in">cd</span> k8s-demo<br>❯ <span class="hljs-built_in">echo</span> <span class="hljs-string">'&lt;h1&gt;Hello Docker!&lt;/h1&gt;'</span> &gt; index.html<br></code></pre></div></td></tr></table></figure><p>接着创建 Dockerfile 文件并构建镜像:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">❯ cat Dockerfile<br>FROM nginx:1.17.4-alpine<br>COPY index.html /usr/share/nginx/html<br>❯ docker build -t k8s-demo:0.1 .<br>...  <span class="hljs-comment"># 省略输出</span><br>Successfully built 1cdb5b879af0<br>Successfully tagged k8s-demo:0.1<br></code></pre></div></td></tr></table></figure><p>这样就在本地构建了一个叫做<code>k8s-demo</code>、标签 (版本) 为 0.1 的镜像。接着把它提交给 k8s 并部署，不过要注意，在 k8s 里面最小的部署单元不是容器而是 Pod，所以需要「转化」成 Pod 对象，再交由 k8s 创建。怎么做呢？</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># 1. 创建一个定义文件，比如这里叫做pod.yaml，当然用JSON格式也可以，不过我觉得YAML的表达能力和可读性更强</span><br>❯ cat pod.yaml<br>apiVersion: v1<br>kind: Pod<br>metadata:<br>  name: k8s-demo<br>  labels:<br>    app: k8s<br>spec:<br>  containers:<br>    - name: k8s-demo<br>      image: k8s-demo:0.1<br>      ports:<br>        - containerPort: 80<br><span class="hljs-comment"># 2. 使用「kubectl create -f YAML_FILE」创建Pod</span><br>❯ kubectl create -f pod.yaml<br>pod/k8s-demo created<br>❯ kubectl get pods  <span class="hljs-comment"># 查看Pod状态</span><br>NAME       READY   STATUS    RESTARTS   AGE<br>k8s-demo   1/1     Running   0          21s<br>❯ kubectl describe pods | grep Labels  <span class="hljs-comment"># 查看Pod标签</span><br>Labels:             app=k8s<br></code></pre></div></td></tr></table></figure><p>到这里，这个叫做 k8s-demo 的 Pod 就创建成功了，而且已经是运行状态了。在继续之前，非常有必要先说一下 k8s 的对象以及对象管理</p><h3 id="对象和对象管理"><a href="#对象和对象管理" class="headerlink" title="对象和对象管理"></a>对象和对象管理</h3><p>Pod 是一种 k8s 中对象 (Object) 中的一种，k8s 用各种对象来表示对应实体在集群中的状态。上面说的 Pod 就是一种对象，之后我们还会介绍非常多的实体，如 ReplicaSet、Deployment、Job、Service、CronJob、ConfigMap、Volume…</p><p>这些对象有 3 个显著的特点:</p><ul><li>被持久化的存储进 etcd</li><li>通过对象配置的方式管理</li><li>一旦创建对象，k8s 将持续工作以确保对象按照其配置期望的那样存在</li></ul><p>仔细的回味下 pod.yaml 这个配置文件的键值内容:</p><ul><li>apiVersion。API 版本号，这里的值是 v1，但是这个版本号需要根据我们安装的 k8s 版本和资源对象类型变化，不是固定的</li><li>kind。描述对象的类型，本例中它就是一个「Pod」，不同的对象类型肯定不一样 (如 Deployment、Service、Job、Ingress 等)</li><li>metadata。定义元数据，用于唯一识别对象的数据。常用的配置项如 name (名字)、namespace (命令空间)、labels (标签) 等</li><li>spec。规格声明，描述了某一个实体的期望状态，常用项如 containers、storage、volumes、template 等。在这里就是说用的容器名字为 <code>k8s-demo</code>，使用刚才构建的 <code>k8s-demo:0.1</code> 作为镜像，容器可被访问的端口是 80</li></ul><p>前三个键 (apiVersion、kind 和 metadata) 是所有对象都有的，而所有表示物理资源的对象，其状态可能与用户期望的意图不同时才可能有 spec 键。</p><p>P.S 上述配置项相关理解基于延伸阅读链接 5 里面的「API 约定文档」而来，建议阅读。</p><p>经过这段时间学习 k8s，非常喜欢它的最核心的对象配置方法:「命令式对象配置」和「声明式对象配置」</p><h4 id="命令式对象配置"><a href="#命令式对象配置" class="headerlink" title="命令式对象配置"></a>命令式对象配置</h4><p>前面的<code>kubectl create -f pod.yaml</code>就是命令式:<code>kubectl</code>命令指定操作 (创建，替换等)，需要接受至少一个文件名称。指定的文件必须包含对象的完整定义 (以 YAML 或 JSON 格式):</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl create -f nginx.yaml  <span class="hljs-comment"># 创建对象定义配置文件</span><br>kubectl delete -f nginx.yaml -f redis.yaml  <span class="hljs-comment"># 删除2个配置文件中定义的对象</span><br>kubectl replace -f nginx.yaml  <span class="hljs-comment"># 通过覆写实时配置更新配置文件中定义的对象</span><br></code></pre></div></td></tr></table></figure><p>要不然是基于 YAML 文件执行添加 / 删除操作，否则就是直接修改 YAML 文件内容实现对 k8s 中对象的修改。</p><p>它和传统的、把全部配置都作为参数写在一个命令里面的方式相比，非常节省命令长度，一切相关的配置都在 YAML 文件中表达，另外这样写的好处还有:</p><ul><li>方便把对象配置存储在源码控制系统 (如 Git) 中，且方便对比修改</li><li>表达能力极强，这样支持的配置项更丰富灵活，且能使用模板</li></ul><h4 id="声明式对象配置"><a href="#声明式对象配置" class="headerlink" title="声明式对象配置"></a>声明式对象配置</h4><p>通过声明式对象配置的用法，可以实现目录级别的对象管理，能自动检测实现对每个对象进行创建、更新和删除等操作:</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">kubectl apply -f configs/<br></code></pre></div></td></tr></table></figure><p>延伸阅读链接 7 中对于这部分概念讲的非常好，强烈建议阅读</p><h3 id="Service-服务"><a href="#Service-服务" class="headerlink" title="Service (服务)"></a>Service (服务)</h3><p>前面已经了解了 Pod，但是要注意 Pod 是不能从外部直接访问的 (除非用 kubectl port-forward 等方案)。要把服务暴露出来给用户访问，需要创建一个服务 (Service)。Service 的作用主要是做反向代理 (Reverse Proxy) 和负载均衡 (LB)，负责把请求分发给后面的 Pod。</p><p>首先要创建一个 Service 定义文件 svc.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">❯</span> <span class="hljs-string">cat</span> <span class="hljs-string">svc.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Service</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-demo-svc</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">app:</span> <span class="hljs-string">k8s</span><br>  <span class="hljs-attr">type:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attr">ports:</span><br>    <span class="hljs-bullet">-</span> <span class="hljs-attr">protocol:</span> <span class="hljs-string">TCP</span><br>      <span class="hljs-attr">port:</span> <span class="hljs-number">80</span><br>      <span class="hljs-attr">targetPort:</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><p>这个配置文件描述了如下内容:</p><ul><li>资源类型 kind 是 Service</li><li>服务名字 <code>k8s-demo-svc</code></li><li>spec.selector 指定请求会被发送给集群里的哪些 Pod，一般是用标签选择，<code>app:k8s</code> 在上面的 pod.yaml 里面指定了，所以这个服务会把流量发送给 <code>k8s-demo</code> 这个 Pod</li><li>spec.type 指定服务暴露方式，这里是 NodePort，Master 会从由启动参数配置的范围 (默认是 30000-32767) 中分配一个端口，然后每一个 Node 都会将这个端口代理到你的 Service。。其他还有 LoadBalancer、Ingress 等。</li><li>spec.ports 的设置表示访问节点的 9376 端口，会被转发到 Pod 的 80 端口</li></ul><p>创建并查看服务:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl create -f svc.yaml  # 创建服务<br>service/k8s-demo-svc created<br>❯ kubectl <span class="hljs-builtin-name">get</span> svc k8s-demo-svc<br>NAME          <span class="hljs-built_in"> TYPE </span>      CLUSTER-IP     EXTERNAL-IP   PORT(S)        AGE<br>k8s-demo-svc   NodePort   10.100.68.48   &lt;none&gt;        80:31404/TCP   6s<br></code></pre></div></td></tr></table></figure><p>PORT 项下面有个<code>80:31404</code>，就是说访问本机 (127.0.0.1) 的 31404 端口 (端口号是 k8s 分配的，你在使用时很可能不是这个端口号) 会被转发到这个服务的 80 端口，所以现在在浏览器输入<a href="http://127.0.0.1:31404/就可以看到「Hello" target="_blank" rel="noopener">http://127.0.0.1:31404/就可以看到「Hello</a> Docker!」了。</p><h3 id="ReplicaSet-副本"><a href="#ReplicaSet-副本" class="headerlink" title="ReplicaSet (副本)"></a>ReplicaSet (副本)</h3><p>假如现在有一个 Pod 正在提供线上的服务，设想出现如下问题时应该怎么办:</p><ul><li>某次广告投放或者运营活动引来大量用户，网站访问量突然暴增</li><li>运行当前 Pod 的节点发生故障了，Pod 不能正常提供服务了</li></ul><p>针对第一点，可以提前和运维打好招呼，按照预估提前多启动 N 个 Pod，结束后删掉，缺点是不能自动扩展造成资源浪费，给平台带来开发和运维成本；针对第二点，提前充分准备并演练好切换预案，运维 24 小时待命并及时关注上线服务报警，出现问题时快速切换节点。</p><p>这样的解决方案其实不算解决方案，因为的弊端很明显：纯靠人工！！！所以我们需要 k8s 这样的工具帮助我们实现 Pod 的自动扩展和「故障转移」。</p><p>在 k8s 资源对象中的 ReplicaSet (以下简称 RS，其实还有另外一种资源对象 Replication Controller，简称 RC，它已经被 ReplicaSet 取代) 就是做这件事的，它<strong>保证在任意时间运行 Pod 的副本数量</strong>，能够保证 Pod 总是可用的。也就是说如果实际的 Pod 数量比指定的多就结束掉多余的，反之亦然。如果 Pod 失败、被删除或者挂掉后 ReplicaSet 会重新创建 Pod，所以即使只有一个 Pod，也应该使用 RS 来管理我们的 Pod。</p><p>另外 RS 还能实现非常有用的「滚动升级」，实现了零停机的前提下部署新版本，马上会详细说到。</p><h3 id="Deployment"><a href="#Deployment" class="headerlink" title="Deployment"></a>Deployment</h3><p>实际上很少直接用 ReplicaSet 这个对象，一般用 Deployment 这个更加高层的资源对象代替。为什么呢？</p><p>RS 主要功能是确保 Pod 数量、健康度和滚动升级等，但 Deployment 除具备 RS 全部功能之外还有如下功能：</p><ul><li>事件和状态查看。可以查看 Deployment 的升级详细进度和状态</li><li>回滚。当升级 Pod 的时候如果出现问题，可以使用回滚操作回滚到之前的任一版本</li><li>版本记录。每一次对 Deployment 的操作，都能够保存下来，这也是保证可以回滚到任一版本的基础</li><li>暂停和启动。对于每一次升级都能够随时暂停和启动</li></ul><p>可以这样理解 Deployment、ReplicaSet 和 Pod 的关系:</p><blockquote><p>一个 Deployment 拥有多个 Replica Set，而一个 Replica Set 拥有一个或多个 Pod</p></blockquote><p>通过一个小例子完整的感受一下，先创建 deployment.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">❯</span> <span class="hljs-string">cat</span> <span class="hljs-string">deployment.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span> <span class="hljs-comment"># for versions before 1.6.0 use extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-demo-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">k8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-demo-pod</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">k8s-demo:0.1</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-string">❯</span> <span class="hljs-string">kubectl</span> <span class="hljs-string">create</span> <span class="hljs-string">-f</span> <span class="hljs-string">deployment.yaml</span><br><span class="hljs-string">deployment.apps/k8s-demo-deployment</span> <span class="hljs-string">created</span><br></code></pre></div></td></tr></table></figure><p>这次 YAML 文件和前面的 Pod 的有个和不同的地方:</p><ul><li>apiVersion 不同，且 k8s 版本不同值也不同</li><li>kind 是 Deployment</li><li>spec.replicas 指定了这个 deployment 要有 10 个 Pod</li></ul><p>注意：创建 Deployment 的命令还是一样的<code>kubectl create -f XXX.yaml</code>，一切都在配置文件中指定。</p><p>看一下现在的副本集情况 (有 10 个 Pod 在运行):</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl get rs  # READY=<span class="hljs-number">10</span>表示都可用<br>NAME                             DESIRED   CURRENT   READY   AGE<br>k8s-demo-deployment<span class="hljs-number">-7</span>f6d84f56b   <span class="hljs-number">10</span>        <span class="hljs-number">10</span>        <span class="hljs-number">10</span>      <span class="hljs-number">12</span>s<br><br>❯ kubectl get deployments  # 其实还可以直接看Deployment，AVAILABLE=<span class="hljs-number">10</span><br>NAME                  READY   UP-TO-DATE   AVAILABLE   AGE<br>k8s-demo-deployment   <span class="hljs-number">10</span>/<span class="hljs-number">10</span>   <span class="hljs-number">10</span>           <span class="hljs-number">10</span>          <span class="hljs-number">20</span>s<br><br>❯ kubectl get pods |grep k8s-demo-deployment | wc -l  # 可以看到Deployment维护了<span class="hljs-number">10</span>个Pod<br><span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>接着修改一下 k8s-demo 镜像:</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ echo <span class="hljs-string">'&lt;h1&gt;Hello Kubernetes!&lt;/h1&gt;'</span> &gt; index.html<br><br>❯ docker build -t k8s-<span class="hljs-string">demo:</span><span class="hljs-number">0.2</span> .<br>...<br>Successfully built <span class="hljs-number">068</span>ab5dbcf44<br>Successfully tagged k8s-<span class="hljs-string">demo:</span><span class="hljs-number">0.2</span><br></code></pre></div></td></tr></table></figure><p>接着要更新 deployment.yaml:</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">❯</span> <span class="hljs-string">cat</span> <span class="hljs-string">deployment.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1beta1</span> <span class="hljs-comment"># for versions before 1.6.0 use extensions/v1beta1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-demo-deployment</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">10</span><br>  <span class="hljs-attr">minReadySeconds:</span> <span class="hljs-number">3</span><br>  <span class="hljs-attr">strategy:</span><br>    <span class="hljs-attr">type:</span> <span class="hljs-string">RollingUpdate</span><br>    <span class="hljs-attr">rollingUpdate:</span><br>      <span class="hljs-attr">maxUnavailable:</span> <span class="hljs-number">1</span><br>      <span class="hljs-attr">maxSurge:</span> <span class="hljs-number">1</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">k8s</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">k8s-demo-pod</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">k8s-demo:0.2</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br></code></pre></div></td></tr></table></figure><p>和之前的 deployment.yaml 相比，改动如下:</p><ul><li>增加了 minReadySeconds，指在更新了一个 Pod 后，需要在它进入正常状态后 3 秒再更新下一个 Pod</li><li>增加 strategy，升级策略是滚动升级 (RollingUpdate)，<code>maxUnavailable: 1</code> 指同时处于不可用状态的 Pod 不能超过一个，<code>maxSurge: 1</code> 指多余的 Pod 不能超过一个</li><li>修改了 spec.containers.image (的标签)，因为要升级镜像了</li></ul><p>这样 k8s 就会逐个替换 Service 后面的 Pod 实现更新:</p><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl <span class="hljs-built_in">apply</span> -f deployment.yaml --<span class="hljs-built_in">record</span><br></code></pre></div></td></tr></table></figure><p>这次多了一个<code>--record</code>参数，这会让 k8s 把这行命令记到发布历史中备查。执行完上述命令可以马上执行如下命令显示发布的实时状态 (晚了就看不到了)：</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl rollout status deployment k8s-demo-deployment<br><span class="hljs-string">...</span>  <span class="hljs-comment"># 省略</span><br>Waiting for deployment <span class="hljs-string">"k8s-demo-deployment"</span> rollout to finish: 8 out of 10 new replicas have been updated.<span class="hljs-string">..</span><br>Waiting for rollout to finish: 1 old replicas are pending termination.<span class="hljs-string">..</span><br><span class="hljs-string">...</span>  <span class="hljs-comment"># 省略</span><br>deployment <span class="hljs-string">"k8s-demo-deployment"</span> successfully rolled out<br></code></pre></div></td></tr></table></figure><p>更新过程会先添加新的副本集，再删除旧的，所以过程中如果看<code>kubectl get pods |grep k8s-demo-deployment | wc -l</code>值会大于 10。</p><p>还可以查看发布历史 (正是由于 –record):</p><figure class="highlight maxima"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl rollout history deployment k8s-<span class="hljs-built_in">demo</span>-deployment<br>deployment.extensions/k8s-<span class="hljs-built_in">demo</span>-deployment<br>REVISION  CHANGE-CAUSE<br><span class="hljs-number">1</span>         &lt;none&gt;<br><span class="hljs-number">2</span>         kubectl <span class="hljs-built_in">apply</span> --filename=deployment.yaml --record=<span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>现在你刷新页面 (<a href="http://127.0.0.1:31404/)时可以看到文本已经成了「Hello" target="_blank" rel="noopener">http://127.0.0.1:31404/)时可以看到文本已经成了「Hello</a> Kubernetes!」</p><p>假设新版发布后发现有严重的 bug，需要马上回滚到上个版本，可以用下面命令完成:</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">❯ kubectl rollout undo deployment k8s-demo-deployment <span class="hljs-comment">--to-revision=1</span><br>deployment.extensions/k8s-demo-deployment rolled <span class="hljs-keyword">back</span><br></code></pre></div></td></tr></table></figure><p>其中<code>--to-revision</code>参数指定要回滚到那个位置，版本号 1 可以在上面<code>kubectl rollout history</code>的输出列表中找到。在回滚结束之后，刷新浏览器可以看到内容又改回了「Hello Docker!」，这种滚动升级是不是非常好用？</p><p><strong>Deployment 如其名，更适合生产环境的部署。</strong></p><p>P.S. 可以感受到前面用到的 Service、Deployment 和 Pod 的关系是解耦的: Service 用于暴露给外部访问、Deployment 用户部署方式、Pod 包装容器，让它们关联起来的唯一纽带是配置文件中的<code>app: k8s</code>，对 Deployment 的修改会影响到 Service 和 Pod。</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p>k8s 中要说的内容实在太多了，所以我会分成 2 篇来说。</p><h3 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h3><p>本文提到的全部源码可以在 <a href="https://github.com/dongweiming/mp/tree/master/2019-10-22/k8s-demo" target="_blank" rel="noopener">mp</a> 找到。</p><h3 id="延伸阅读"><a href="#延伸阅读" class="headerlink" title="延伸阅读"></a>延伸阅读</h3><ol><li><a href="https://www.docker.com/products/docker-desktop" target="_blank" rel="noopener">https://www.docker.com/products/docker-desktop</a></li><li><a href="https://docs.docker.com/docker-for-mac/troubleshoot/#check-the-logs" target="_blank" rel="noopener">https://docs.docker.com/docker-for-mac/troubleshoot/#check-the-logs</a></li><li><a href="https://thenewstack.io/kubernetes-an-overview/" target="_blank" rel="noopener">https://thenewstack.io/kubernetes-an-overview/</a></li><li><a href="https://1byte.io/developer-guide-to-docker-and-kubernetes/" target="_blank" rel="noopener">https://1byte.io/developer-guide-to-docker-and-kubernetes/</a></li><li><a href="https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md" target="_blank" rel="noopener">https://github.com/kubernetes/community/blob/master/contributors/devel/sig-architecture/api-conventions.md</a></li><li><a href="https://www.qikqiak.com/k8s-book/docs/14.Kubernetes初体验.html" target="_blank" rel="noopener">https://www.qikqiak.com/k8s-book/docs/14.Kubernetes%E5%88%9D%E4%BD%93%E9%AA%8C.html</a></li><li><a href="http://www.k8smeetup.com/article/VyaHa$XRm" target="_blank" rel="noopener">http://www.k8smeetup.com/article/VyaHa$XRm</a></li></ol>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> k8s </tag>
            
            <tag> docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang相比于Memcached和Redis的优越的缓存解决方案</title>
      <link href="2020/05/02/%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/"/>
      <url>2020/05/02/%E6%83%8A%E7%BE%A4%E6%95%88%E5%BA%94/</url>
      
        <content type="html"><![CDATA[<p>分布式缓存系统（例如redis和memcached客户端）通常以以下方式工作：</p><ol><li><strong>应用程序</strong>通过密钥向<strong>客户端</strong>请求缓存的数据。</li><li><strong>客户端</strong>对密钥执行一致的哈希，以确定哪个<strong>节点</strong>拥有数据</li><li><strong>客户端</strong>向<strong>节点</strong>发出网络请求<strong>。</strong></li><li>如果找到，<strong>节点</strong>将返回数据。</li><li><strong>应用程序</strong>检查是否返回了数据，否则从数据库渲染或获取数据。</li><li><strong>应用程序</strong>告诉<strong>客户端</strong>存储该密钥的数据。</li><li><strong>客户端</strong>对密钥执行一致的哈希，以确定哪个<strong>节点</strong>应拥有数据。</li><li><p><strong>客户端</strong>将数据存储在<strong>节点上。</strong></p><a id="more"></a><p>观察此流程，可以看出一些含义：</p></li><li><p>每个缓存请求都会导致<strong>节点</strong>往返，无论缓存是否命中。</p></li><li>您无法通过在本地缓存值来避免到<strong>节点</strong>的往返，因为远程<strong>节点</strong>可能在没有<strong>Apps</strong>知识的情况下随时使数据无效。</li></ol><p>尽管对于大多数应用程序而言，这些影响都不是特别麻烦，但数据库的额外往返行程可能会对高性能，低延迟的应用程序产生影响。但是，还有另一种可能不是立即显而易见的含义，即<strong>惊群</strong>！</p><h2 id="惊群效应"><a href="#惊群效应" class="headerlink" title="惊群效应"></a>惊群效应</h2><p>惊群效应问题有时被称为缓存踩踏，雪崩或斜线效果。从本质上讲，就像是使系统不堪重负的大量请求。</p><p>在此讨论中，我们的惊群效应是对高速缓存未命中的响应。例如，在正常操作中，只要数据保持高速缓存，应用程序就可以在高负载下保持响应。当缓存中没有数据时，应用程序的并发实例都会尝试同时渲染或访问数据。取决于您的应用程序和服务器场中并发实例/线程的数量，这种并发工作的浪潮可能会使系统不堪重负，并导致系统拥塞，并可能导致崩溃。</p><p>为了与并发工作作斗争，您需要一个系统来同步数据的获取或呈现。幸运的是，有一个名为<a href="https://github.com/mailgun/groupcache" target="_blank" rel="noopener">groupcache</a>的golang库，可用于解决惊群效应问题并改善上述远程缓存的含义。</p><h2 id="组缓存（GroupCache）"><a href="#组缓存（GroupCache）" class="headerlink" title="组缓存（GroupCache）"></a><strong>组缓存</strong>（GroupCache）</h2><p>GroupCache与redis和memcache不同，因为它直接与您的代码集成为<em>In Code Distributed Cache</em>（ICDC）。这意味着该<strong>应用程序的</strong>每个实例都是分布式缓存中的一个<strong>节点</strong>。作为分布式缓存的完整成员，每个应用程序实例不仅知道如何为节点存储数据，而且还知道如何在丢失数据时获取或呈现数据。</p><p>要了解为什么它优于redis或memcached，请在使用groupcache时通过分布式缓存流进行运行。仔细阅读流时，请记住<strong>GroupCache</strong>是应用程序使用的库，它还侦听来自使用<strong>GroupCache</strong>的应用程序其他实例的传入请求。</p><ol><li><strong>应用程序</strong>通过密钥向<strong>GroupCache</strong>询问数据。</li><li><strong>GroupCache</strong>检查内存中的热缓存中是否有数据，如果没有数据，请继续。</li><li><strong>GroupCache</strong>对键执行一致的哈希，以确定哪个<strong>GroupCache</strong>实例具有数据。</li><li><strong>GroupCache</strong>向具有数据的<strong>GroupCache</strong>实例发出网络请求</li><li>如果内存中存在数据，<strong>GroupCache</strong>将返回该数据；如果不存在，它将要求该<strong>应用程序</strong>呈现或获取数据。</li><li><strong>GroupCache</strong>将数据返回到发起请求的<strong>GroupCache</strong>实例。</li></ol><p>第5步在发生惊群事件的情况下非常重要，因为只有<strong>GroupCache</strong>实例之一将执行所请求数据的呈现或获取。还在从<strong>GroupCache</strong>实例中请求数据的应用程序的所有其他实例将阻塞，直到该应用程序的拥有实例成功呈现或获取数据为止。这为分布式系统中的数据访问创建了自然的同步点，并消除了惊群效应问题。</p><p>第2步也很重要，因为可以在内存中本地缓存数据，从而避免了网络往返的开销，从而提供了巨大的性能优势并降低了网络压力。由于<strong>GroupCache</strong>是应用程序的一部分，因此我们避免了<strong>GroupCache</strong>在不知道应用程序的情况下删除数据的可能性，因为任何此类删除事件都将由使用<strong>GroupCache</strong>的应用程序的所有实例共享<strong>。</strong></p><p>部署是一种公认的次要好处，但是我们中那些喜欢简单性的人可以欣赏到的好处。尽管将Redis和Memcached作为独立于应用程序的实体进行部署和保护并不是很困难，但是部署一个应用程序对于操作员来说是一件轻而易举的事情，可以使他们处理并保持最新和安全。</p><p>值得再次提及，因为它很容易被忽略。高速缓存实现在高速缓存未命中期间呈现或从数据库中获取数据的能力以及依赖于内存中的本地热高速缓存的能力，使GroupCache成为分布式高速缓存中的最佳选择。应用程序外部的任何分布式缓存都不能提供这些好处。</p><h2 id="Groupcache作为同步工具"><a href="#Groupcache作为同步工具" class="headerlink" title="Groupcache作为同步工具"></a><strong>Groupcache作为同步工具</strong></h2><p>因为groupcache提供了很好的同步语义，所以我们发现<strong>Groupcache</strong>在创建和管理唯一资源时是分布式或数据库级锁的替代方案。</p><p>例如，我们的内部分析引擎读取数千个事件，并动态添加具有已分配统计信息的标签。由于我们有许多正在运行的引擎实例，因此必须将看到的每个新标签都视为可能的新标签。通常，这将向我们的数据库生成不断更新请求的流。通过使用groupcache，每个实例都可以使用<code>account:tag</code>键查询缓存。如果标签已经存在，则返回标签上的最新数据。但是，如果标签不存在，groupcache会将请求中继到拥有的实例并创建标签。以这种方式，当系统遇到新标签时，仅将单个upsert发送到数据库。</p><p>同样，我们使用groupcache对唯一计数器进行计数，其中系统仅应记录一个计数器的单个实例。因为我们使用的是<strong>Groupcache，所以</strong>我们避免完全使用分布式锁定和死锁问题。当使用nosql数据库本身很少或没有锁定或同步语义时，这特别有用。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://www.mailgun.com/blog/golangs-superior-cache-solution-memcached-redis/" target="_blank" rel="noopener">https://www.mailgun.com/blog/golangs-superior-cache-solution-memcached-redis/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> 缓存 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题:leetcode106. 从中序与后序遍历序列构造二叉树</title>
      <link href="2020/05/02/106/"/>
      <url>2020/05/02/106/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>根据一棵树的中序遍历与后序遍历构造二叉树。<br><a id="more"></a><br><strong>注意:</strong><br>你可以假设树中没有重复的元素。</p><p>例如，给出</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">中序遍历 inorder = [<span class="hljs-number">9</span>,<span class="hljs-number">3</span>,<span class="hljs-number">15</span>,<span class="hljs-number">20</span>,<span class="hljs-number">7</span>]<br>后序遍历 postorder = [<span class="hljs-number">9</span>,<span class="hljs-number">15</span>,<span class="hljs-number">7</span>,<span class="hljs-number">20</span>,<span class="hljs-number">3</span>]<br></code></pre></div></td></tr></table></figure><p>返回如下的二叉树：</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">  <span class="hljs-number">3</span><br> / \<br><span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>  /  \<br> <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>后序遍历是<code>左右根</code>，因此postorder最后一个元素一定整个树的根。由于题目说明了没有重复元素，因此我们可以通过val去inorder找到根在inorder中的索引i。<br>而由于中序遍历是<code>左根右</code>，我们容易找到i左边的都是左子树，i右边都是右子树。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-comment"># @param inorder, a list of integers</span><br>    <span class="hljs-comment"># @param postorder, a list of integers</span><br>    <span class="hljs-comment"># @return a tree node</span><br>    <span class="hljs-comment"># 12:00</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(self, inorder, postorder)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> inorder <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> postorder:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br>        root = TreeNode(postorder.pop())<br>        inorderIndex = inorder.index(root.val)<br>        root.right = self.buildTree(inorder[inorderIndex + <span class="hljs-number">1</span>:], postorder)<br>        root.left = self.buildTree(inorder[:inorderIndex], postorder)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题:leetcode:100. 相同的树</title>
      <link href="2020/04/20/100leetcode/"/>
      <url>2020/04/20/100leetcode/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p><a href="https://leetcode-cn.com/problems/same-tree/" target="_blank" rel="noopener">每日一题:leetcode:100. 相同的树</a></p><p>给定两个二叉树，编写一个函数来检验它们是否相同。</p><p>如果两个树在结构上相同，并且节点具有相同的值，则认为它们是相同的。<br><a id="more"></a><br><strong>示例 1:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">输入:</span>       <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br>          <span class="hljs-string">/</span> <span class="hljs-string">\</span>       <span class="hljs-string">/</span> <span class="hljs-string">\</span><br>         <span class="hljs-number">2</span>   <span class="hljs-number">3</span>     <span class="hljs-number">2</span>   <span class="hljs-number">3</span><br><br>        <span class="hljs-string">[1,2,3],</span>   <span class="hljs-string">[1,2,3]</span><br><br><span class="hljs-string">输出:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">输入:</span>      <span class="hljs-number">1</span>          <span class="hljs-number">1</span><br>          <span class="hljs-string">/</span>           <span class="hljs-string">\</span><br>         <span class="hljs-number">2</span>             <span class="hljs-number">2</span><br><br>        <span class="hljs-string">[1,2],</span>     <span class="hljs-string">[1,null,2]</span><br><br><span class="hljs-string">输出:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 3:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">输入:</span>       <span class="hljs-number">1</span>         <span class="hljs-number">1</span><br>          <span class="hljs-string">/</span> <span class="hljs-string">\</span>       <span class="hljs-string">/</span> <span class="hljs-string">\</span><br>         <span class="hljs-number">2</span>   <span class="hljs-number">1</span>     <span class="hljs-number">1</span>   <span class="hljs-number">2</span><br><br>        <span class="hljs-string">[1,2,1],</span>   <span class="hljs-string">[1,1,2]</span><br><br><span class="hljs-string">输出:</span> <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure><h3 id="题解"><a href="#题解" class="headerlink" title="题解"></a>题解</h3><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-quote">&gt; 类型：DFSF分制</span><br><span class="hljs-quote">&gt; Time Complexity O(N)</span><br><span class="hljs-quote">&gt; Space Complexity O(h)</span><br></code></pre></div></td></tr></table></figure><p>在每一层先检查再递归，所以这是pre-order的思路。<br>比对相等的条件：</p><ol><li><code>p.val == q.val</code></li><li><code>if not p or not q: return p == q</code><br>如有不等，直接返回False，就不用继续递归了。最后左右孩子返回给Root：<code>return left and right</code></li></ol><p>p.s. 上面的第二个相等条件，检查了2种情况：<br>1.<code>if not p and not q: return True</code><br>2.<code>if not p or not q: return False</code></p><ol><li>递归</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(self, p, q)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> q: <span class="hljs-keyword">return</span> p == q<br>        <span class="hljs-keyword">if</span> p.val != q.val: <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        <br>        left = self.isSameTree(p.left, q.left)<br>        right = self.isSameTree(p.right, q.right)<br>        <span class="hljs-keyword">return</span> left <span class="hljs-keyword">and</span> right<br></code></pre></div></td></tr></table></figure><ol start="2"><li>stack(DFS iteratively)</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># DFS iteratively</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution2</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span><br>        stack = [(p, q)]<br>        <span class="hljs-keyword">while</span> stack:<br>            p, q = stack.pop()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> q:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> (<span class="hljs-keyword">not</span> q <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> p) <span class="hljs-keyword">or</span> (p.val != q.val):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            stack.extend([(q.right, p.right), (q.left, p.left)])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure><ol start="3"><li>queue(BFS iteratively)</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># BFS iteratively</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution3</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isSameTree</span><span class="hljs-params">(self, p: TreeNode, q: TreeNode)</span> -&gt; bool:</span><br>        queue = collections.deque([p, q])<br>        <span class="hljs-keyword">while</span> queue:<br>            p, q = queue.popleft()<br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> p <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> q:<br>                <span class="hljs-keyword">continue</span><br>            <span class="hljs-keyword">elif</span> (<span class="hljs-keyword">not</span> p <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> q) <span class="hljs-keyword">or</span> (p.val != q.val):<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>            queue.extend([(p.left, q.left), (p.right, q.right)])<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang的多平台编译</title>
      <link href="2020/04/04/go_build/"/>
      <url>2020/04/04/go_build/</url>
      
        <content type="html"><![CDATA[<p>Golang 支持在一个平台下生成另一个平台可执行程序的交叉编译功能。<br><a id="more"></a></p><h3 id="1-Mac"><a href="#1-Mac" class="headerlink" title="1.Mac"></a>1.Mac</h3><p>Mac下编译Linux, Windows平台的64位可执行程序：</p><p><code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 go build test.go</code><br><code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</code></p><h3 id="2-Linux"><a href="#2-Linux" class="headerlink" title="2.Linux"></a>2.Linux</h3><p>Linux下编译Mac, Windows平台的64位可执行程序：</p><p><code>CGO_ENABLED=0 GOOS=darwin GOARCH=amd64 go build test.go</code><br><code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 go build test.go</code></p><h3 id="3-Windows"><a href="#3-Windows" class="headerlink" title="3.Windows"></a>3.Windows</h3><p>Windows下编译Mac, Linux平台的64位可执行程序：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">CGO_ENABLED</span>=0<br><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">GOOS</span>=darwin3<br><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">GOARCH</span>=amd64<br>go build test.go<br></code></pre></div></td></tr></table></figure><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">CGO_ENABLED</span>=0<br><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">GOOS</span>=linux<br><span class="hljs-builtin-name">SET</span> <span class="hljs-attribute">GOARCH</span>=amd64<br>go build test.go<br></code></pre></div></td></tr></table></figure><p>GOOS：目标可执行程序运行操作系统，支持 darwin，freebsd，linux，windows<br>GOARCH：目标可执行程序操作系统构架，包括 386，amd64，arm</p><p>Golang version 1.5以前版本在首次交叉编译时还需要配置交叉编译环境：</p><p><code>CGO_ENABLED=0 GOOS=linux GOARCH=amd64 ./make.bash</code><br><code>CGO_ENABLED=0 GOOS=windows GOARCH=amd64 ./make.bash</code></p>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>读《挪威的森林》</title>
      <link href="2020/03/10/%E8%AF%BB%E3%80%8A%E6%8C%AA%E3%80%8B/"/>
      <url>2020/03/10/%E8%AF%BB%E3%80%8A%E6%8C%AA%E3%80%8B/</url>
      
        <content type="html"><![CDATA[<p>去年一个百无聊赖的晚上，一口气看完了许久前一个朋友送的《当我跑步时，我在想什么》，算是第一次接触村上春树的作品。那本书类似于半自传性质，以跑步为引子讲了很多自己的想法。<br><a id="more"></a></p><p>最近也是听伍佰的《挪威的森林》，想到村上的这本书，于是也下决心看看这本书。</p><p><img src="https://s2.ax1x.com/2020/03/10/8Fcjwn.jpg" alt="8Fcjwn.jpg"></p><p>如果《麦田里的守望者》是青春期少年的最佳读物，那么《挪威的森林》应该可以算得上是大学生的读物。</p><p>随着年纪的增长，孤独感愈发的强烈。</p><p>这本书也是传承了村上一贯的孤独感。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang的网络编程（三）：解决粘包问题</title>
      <link href="2020/02/05/Golang%E7%9A%84socket%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E5%8F%8A%E5%88%B6%E5%AE%9A%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/"/>
      <url>2020/02/05/Golang%E7%9A%84socket%E7%BC%96%E7%A8%8B%EF%BC%88%E5%9B%9B%EF%BC%89%EF%BC%9A%E8%A7%A3%E5%86%B3%E7%B2%98%E5%8C%85%E9%97%AE%E9%A2%98%E5%8F%8A%E5%88%B6%E5%AE%9A%E9%80%9A%E4%BF%A1%E5%8D%8F%E8%AE%AE/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a><strong>一、概述</strong></h2><p>前面已经完成了一个完美的多并发CS模型，但美中不足的是没有解决粘包问题。<br><a id="more"></a></p><h3 id="1-1-什么是粘包问题？"><a href="#1-1-什么是粘包问题？" class="headerlink" title="1.1 什么是粘包问题？"></a><strong>1.1 什么是粘包问题？</strong></h3><p>在网络传输中，数据都是通过数据流来传输的，也就是以比特来传输。传输的过程中我们可能会遇到各种各样的问题导致数据传输异常，最常见的就是网络发送时延。网络时延会导致服务端此时收到的数据的时间有偏差，然后就导致数据接收数据的时间不一致。</p><p>可以看一个例子，修改上篇的服务端和客户端为以下内容：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">for</span> &#123;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">2048</span>)<br>n, err := conn.Read(data)<br><span class="hljs-keyword">if</span> n == <span class="hljs-number">0</span>&#123;<br>fmt.Printf(<span class="hljs-string">"%s has disconnect"</span>, conn.RemoteAddr())<br><span class="hljs-keyword">break</span><br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br><span class="hljs-comment">//fmt.Printf("Receive data [%s] from [%s]", string(data[:n]), conn.RemoteAddr())</span><br><span class="hljs-comment">//修改上句为下面的</span><br>fmt.Printf(<span class="hljs-string">"Receive %d byte data : %s"</span>, n, <span class="hljs-keyword">string</span>(data[:n]))<br><span class="hljs-comment">//程序睡眠1ns，模拟网络时延</span><br>time.Sleep(time.Nanosecond)<br>&#125;<br></code></pre></div></td></tr></table></figure><p>客户端改为以下：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">func main()&#123;<br>conn, err := net.Dial("tcp", ":8899")<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>for i := 0; i &lt; 100; i++&#123;<br>data := fmt.Sprintf("&#123;"index":%d, "name":"maqian", "age":21, "company":"intely"&#125;", i + 1)<br>n, err := conn.Write([]byte(data))<br>if err != nil&#123;<br>fmt.Println(err)<br>continue<br>&#125;<br>fmt.Printf("Send %d byte data : %s<br>", n, data)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>以上我们发送了100条json到服务端，按照预想服务端将会输出100行json，但是实际上并不是：</p><p><img src="https://s2.ax1x.com/2019/05/25/VAnK4f.png" alt="VAnK4f.png"></p><p>这个现象产生的原因是因为服务端每次读取数据之后将会休眠1ns，但是对于客户端来说，这1ns它还在一直传输数据，1ns的时间可能 发送了1条，也可能是2条，这个数量我们不知道是多少，也无法控制。于是就导致数据堆积，服务端再读取就会出问题了。与此同时，由于缓冲区有限，一次最多读取2048个字节，堆积的字节超过2048的也无法读取，只能留到下次读取，这种现象就是粘包问题。</p><h2 id="二、解决办法"><a href="#二、解决办法" class="headerlink" title="二、解决办法"></a>二、解决办法</h2><p>上面抛出了粘包的问题后，现在就要开始想办法处理了，怎么处理呢？这里就需要用到协议了，协议就是双方约定好的数据包格式， 让服务端知道从哪里开始读，读到哪里结束，这样就不会出错了。实现这个协议最简单的办法就是加上一个协议头和一个数据包长度 。</p><p>假设现在要发送<code>[0x11, 0x22, 0x33]</code>，约定协议头为<code>[0xaa, 0xbb]</code>，由于发送数据的长度是三个字节，所以经过客户端封装之后的数据就变成了<code>[0xaa, 0xbb, 0x03, 0x11, 0x22, 0x33]</code></p><p>服务端收到数据后，先找<code>[0xaa, 0xbb]</code>的位置，然后根据他们的位置得到数据长度为<code>3</code>，于是再往后读三个字节就是真正的的数据 部分了。</p><h2 id="三、实现"><a href="#三、实现" class="headerlink" title="三、实现"></a>三、实现</h2><p>指定好了协议之后就可以开始实现了，为了方便，直接把这里写成一个对象：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> SocketUtil <span class="hljs-keyword">struct</span> &#123;<br>    Coonnet.Conn<br>&#125;<br></code></pre></div></td></tr></table></figure><p>包头的定义：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> PkgHeader <span class="hljs-keyword">struct</span> &#123;<br>HeaderFlag[<span class="hljs-number">2</span>]<span class="hljs-keyword">byte</span><br>DataLength<span class="hljs-keyword">uint32</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>包头包括协议头和数据长度，共六个字节。</p><h3 id="3-1-数据发送时的封装"><a href="#3-1-数据发送时的封装" class="headerlink" title="3.1 数据发送时的封装"></a>3.1 数据发送时的封装</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">WritePkg</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span>&#123;<br><span class="hljs-keyword">if</span> fd == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(SOCKET_ERROR_SERVER_CLOSED)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span><br>&#125;<br>buff := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>binary.Write(buff, binary.BigEndian, []<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0xaa</span>, <span class="hljs-number">0xbb</span>&#125;) <span class="hljs-comment">//添加协议头</span><br>binary.Write(buff, binary.BigEndian, <span class="hljs-keyword">uint32</span>(<span class="hljs-built_in">len</span>(data))) <span class="hljs-comment">//添加长度</span><br>binary.Write(buff, binary.BigEndian, data) <span class="hljs-comment">//数据部分</span><br>allBytes := buff.Bytes()<br><span class="hljs-keyword">return</span> fd.writeNByte(allBytes)<br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>writeByte()</code>的实现</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">writeNByte</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span>&#123;<br>n, err := fd.Coon.Write(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, err<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-接收数据时解包"><a href="#3-2-接收数据时解包" class="headerlink" title="3.2 接收数据时解包"></a>3.2 接收数据时解包</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">ReadPkg</span><span class="hljs-params">()</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span>&#123;<br><span class="hljs-keyword">if</span> fd == <span class="hljs-literal">nil</span> || fd.Coon == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(SOCKET_ERROR_SERVER_CLOSED)<br>&#125;<br>head, err := fd.readHead() <span class="hljs-comment">//先读取数据头</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-comment">//数据头和约定不一样，报错</span><br><span class="hljs-keyword">if</span> head.HeaderFlag != [<span class="hljs-number">2</span>]<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0xaa</span>, <span class="hljs-number">0xbb</span>&#125;&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">"Head package error"</span>)<br>&#125;<br><span class="hljs-comment">//读取指定长度的数据</span><br>datas, err := fd.readNByte(head.DataLength)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> datas, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>readHead()</code>的实现：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">readHead</span><span class="hljs-params">()</span><span class="hljs-params">(*PkgHeader, error)</span></span>&#123;<br>data, err := fd.readNByte(HeaderLength)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>h := PkgHeader&#123;&#125;<br>buff := bytes.NewBuffer(data)<br>binary.Read(buff, binary.BigEndian, &amp;h.HeaderFlag) <span class="hljs-comment">//读取0xaa 0xbb连个字节</span><br>binary.Read(buff, binary.BigEndian, &amp;h.DataLength) <span class="hljs-comment">//读取四个字节的长度</span><br><span class="hljs-keyword">return</span> &amp;h, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p><code>readNByte()</code>的实现：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd * SocketUtil)</span> <span class="hljs-title">readNByte</span><span class="hljs-params">(n <span class="hljs-keyword">uint32</span>)</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span>&#123;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, n)<br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; x &lt; <span class="hljs-keyword">int</span>(n) ;&#123;<br>length, err := fd.Coon.Read(data[x:]) <span class="hljs-comment">//有数据则读，没有则阻塞</span><br><span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(SOCKET_ERROR_CLIENT_CLOSED)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>x += length<br>&#125;<br><span class="hljs-keyword">return</span> data, <span class="hljs-literal">nil</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-完整代码"><a href="#3-3-完整代码" class="headerlink" title="3.3 完整代码"></a>3.3 完整代码</h3><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> common<br> <br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"net"</span><br><span class="hljs-string">"errors"</span><br><span class="hljs-string">"bytes"</span><br><span class="hljs-string">"encoding/binary"</span><br>)<br> <br> <br> <br><span class="hljs-keyword">type</span> PkgHeader <span class="hljs-keyword">struct</span> &#123;<br>HeaderFlag[<span class="hljs-number">2</span>]<span class="hljs-keyword">byte</span><br>DataLength<span class="hljs-keyword">uint32</span><br>&#125;<br> <br><span class="hljs-keyword">const</span>(<br>HeaderLength = <span class="hljs-number">6</span><br>)<br> <br><span class="hljs-keyword">const</span>(<br>SOCKET_ERROR_CLIENT_CLOSED  = <span class="hljs-string">"Client has been closed"</span><br>SOCKET_ERROR_SERVER_CLOSED  = <span class="hljs-string">"Server has been closed"</span><br>SOCKET_ERROR_TIMEOUT= <span class="hljs-string">"Timeout"</span><br>)<br> <br><span class="hljs-keyword">type</span> SocketUtil <span class="hljs-keyword">struct</span> &#123;<br>Connnet.Conn<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">Init</span><span class="hljs-params">(conn net.Conn)</span></span>&#123;<br>fd.Conn = conn<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">WritePkg</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span>&#123;<br><span class="hljs-keyword">if</span> fd == <span class="hljs-literal">nil</span> &#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, errors.New(SOCKET_ERROR_SERVER_CLOSED)<br>&#125;<br><span class="hljs-keyword">if</span> <span class="hljs-built_in">len</span>(data) == <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>, <span class="hljs-literal">nil</span><br>&#125;<br>buff := bytes.NewBuffer([]<span class="hljs-keyword">byte</span>&#123;&#125;)<br>binary.Write(buff, binary.BigEndian, []<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0xaa</span>, <span class="hljs-number">0xbb</span>&#125;)<br>binary.Write(buff, binary.BigEndian, <span class="hljs-keyword">uint32</span>(<span class="hljs-built_in">len</span>(data)))<br>binary.Write(buff, binary.BigEndian, data)<br> <br>allBytes := buff.Bytes()<br> <br><span class="hljs-keyword">return</span> fd.writeNByte(allBytes)<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">ReadPkg</span><span class="hljs-params">()</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span>&#123;<br><span class="hljs-keyword">if</span> fd == <span class="hljs-literal">nil</span> || fd.Conn == <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(SOCKET_ERROR_SERVER_CLOSED)<br>&#125;<br>head, err := fd.readHead()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">if</span> head.HeaderFlag != [<span class="hljs-number">2</span>]<span class="hljs-keyword">byte</span>&#123;<span class="hljs-number">0xaa</span>, <span class="hljs-number">0xbb</span>&#125;&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(<span class="hljs-string">"Head package error"</span>)<br>&#125;<br>datas, err := fd.readNByte(head.DataLength)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br><span class="hljs-keyword">return</span> datas, <span class="hljs-literal">nil</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">readHead</span><span class="hljs-params">()</span><span class="hljs-params">(*PkgHeader, error)</span></span>&#123;<br>data, err := fd.readNByte(HeaderLength)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>h := PkgHeader&#123;&#125;<br>buff := bytes.NewBuffer(data)<br>binary.Read(buff, binary.BigEndian, &amp;h.HeaderFlag)<br>binary.Read(buff, binary.BigEndian, &amp;h.DataLength)<br><span class="hljs-keyword">return</span> &amp;h, <span class="hljs-literal">nil</span><br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd * SocketUtil)</span> <span class="hljs-title">readNByte</span><span class="hljs-params">(n <span class="hljs-keyword">uint32</span>)</span><span class="hljs-params">([]<span class="hljs-keyword">byte</span>, error)</span></span>&#123;<br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, n)<br><span class="hljs-keyword">for</span> x := <span class="hljs-number">0</span>; x &lt; <span class="hljs-keyword">int</span>(n) ;&#123;<br>length, err := fd.Conn.Read(data[x:])<br><span class="hljs-keyword">if</span> length == <span class="hljs-number">0</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, errors.New(SOCKET_ERROR_CLIENT_CLOSED)<br>&#125;<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-literal">nil</span>, err<br>&#125;<br>x += length<br>&#125;<br><span class="hljs-keyword">return</span> data, <span class="hljs-literal">nil</span><br>&#125;<br> <br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">writeNByte</span><span class="hljs-params">(data []<span class="hljs-keyword">byte</span>)</span><span class="hljs-params">(<span class="hljs-keyword">int</span>, error)</span></span>&#123;<br>n, err := fd.Conn.Write(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>, err<br>&#125;<span class="hljs-keyword">else</span>&#123;<br><span class="hljs-keyword">return</span> n, <span class="hljs-literal">nil</span><br>&#125;<br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-params">(fd *SocketUtil)</span> <span class="hljs-title">Close</span><span class="hljs-params">()</span></span>&#123;<br>fd.Conn.Close()<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四、服务端"><a href="#四、服务端" class="headerlink" title="四、服务端"></a>四、服务端</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br> <br><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"net"</span><br><span class="hljs-string">"fmt"</span><br><span class="hljs-string">"网络编程/并发/common"</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">handle</span><span class="hljs-params">(conn net.Conn)</span></span>&#123;<br><span class="hljs-keyword">defer</span> conn.Close()<br>fmt.Println(<span class="hljs-string">"Connect :"</span>, conn.RemoteAddr())<br> <br>fd := common.SocketUtil&#123;conn&#125;<br><span class="hljs-keyword">for</span> &#123;<br>data, err := fd.ReadPkg() <span class="hljs-comment">//读取数据</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">break</span><br>&#125;<br>fmt.Println(<span class="hljs-keyword">string</span>(data))<br>&#125;<br> <br>&#125;<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>listener, err := net.Listen(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8899"</span>)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">"Start listen localhost:8899"</span>)<br> <br><span class="hljs-keyword">for</span> &#123;<br>conn, err := listener.Accept()<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br><span class="hljs-keyword">go</span> handle(conn)<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="五、客户端"><a href="#五、客户端" class="headerlink" title="五、客户端"></a>五、客户端</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">package main<br> <br>import (<br>   "net"<br>   "fmt"<br>   "网络编程/并发/common"<br>)<br> <br>func main()&#123;<br>   conn, err := net.Dial("tcp", ":8899")<br>   if err != nil&#123;<br>      fmt.Println(err)<br>      return<br>   &#125;<br>   clntFd := common.SocketUtil&#123;conn&#125;<br>   for i := 0; i &amp;lt; 100; i++&#123;<br>      data := fmt.Sprintf("&#123;"index":%d, "name":"maqian", "age":21, "company":"intely"&#125;", i + 1)<br>      n, err := clntFd.WritePkg([]byte(data))<br>      if err != nil&#123;<br>         fmt.Println(err)<br>         return<br>      &#125;<br>      fmt.Printf("Send %d byte data : %s<br>", n, data)<br>   &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="六、运行"><a href="#六、运行" class="headerlink" title="六、运行"></a>六、运行</h2><p>运行服务端再运行客户端就会发现，已经不和之前的一样了，整整齐齐，perfect！</p><p><img src="https://s2.ax1x.com/2019/05/25/VAulIx.png" alt="VAulIx.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang网络编程（二）：并发Server-Client</title>
      <link href="2020/02/04/Golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B9%B6%E5%8F%91Server-Client/"/>
      <url>2020/02/04/Golang%E7%BD%91%E7%BB%9C%E7%BC%96%E7%A8%8B%EF%BC%88%E4%BA%8C%EF%BC%89%EF%BC%9A%E5%B9%B6%E5%8F%91Server-Client/</url>
      
        <content type="html"><![CDATA[<h2 id="一、概述"><a href="#一、概述" class="headerlink" title="一、概述"></a>一、概述</h2><p>上一篇实现了一个server和client通信，完成了小写转大写的功能，但是是一个单任务式的响应：客户端发送连接接收响应，程序结束；服务端则接收数据响应数据也结束！就实际需要而言，并没有很大的用处，所以现在我们就给客户端和服务端添加上并发功能。<br><a id="more"></a></p><p>逻辑其实很简单，就是利用golang的gorutine，一旦来新的连接，就开启一个gorutine去处理，然后响应，直到客户端关闭连接。</p><h2 id="二、服务端"><a href="#二、服务端" class="headerlink" title="二、服务端"></a>二、服务端</h2><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">package main<br> <br>import (<br>"net"<br>"fmt"<br>"strings"<br>)<br> <br>func handle(conn net.Conn)&#123;<br>defer conn.Close()  //关闭连接<br>fmt.Println("Connect :", conn.RemoteAddr())<br> <br>for &#123;<br>//只要客户端没有断开连接，一直保持连接，读取数据<br>data := make([]byte, 2048)<br>n, err := conn.Read(data)<br>//数据长度为0表示客户端连接已经断开<br>if n == 0&#123;<br>fmt.Printf("%s has disconnect<br>", conn.RemoteAddr())<br>break<br>&#125;<br>if err != nil&#123;<br>fmt.Println(err)<br>continue<br>&#125;<br>fmt.Printf("Receive data [%s] from [%s]<br>", string(data[:n]), conn.RemoteAddr())<br>                //转大写<br>rspData := strings.ToUpper(string(data[:n]))<br>_, err = conn.Write([]byte(rspData))<br>if err != nil&#123;<br>fmt.Println(err)<br>continue<br>&#125;<br>&#125;<br> <br>&#125;<br> <br>func main()&#123;<br>listener, err := net.Listen("tcp", ":8899")<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>fmt.Println("Start listen localhost:8899")<br> <br>for &#123;<br>//开始循环接收客户端连接<br>conn, err := listener.Accept()<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>//一旦收到客户端连接，开启一个新的gorutine去处理这个连接<br>go handle(conn)  <br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="三、客户端"><a href="#三、客户端" class="headerlink" title="三、客户端"></a>三、客户端</h2><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">import</span> (<br><span class="hljs-string">"net"</span><br><span class="hljs-string">"fmt"</span><br>)<br> <br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span>&#123;<br>conn, err := net.Dial(<span class="hljs-string">"tcp"</span>, <span class="hljs-string">":8899"</span>)  <span class="hljs-comment">//连接服务端</span><br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-string">"Connect to localhost:8899 success"</span>)<br><span class="hljs-keyword">defer</span> conn.Close()<br> <br><span class="hljs-keyword">for</span>&#123;<br><span class="hljs-comment">//一直循环读入用户数据，发送到服务端处理</span><br>fmt.Print(<span class="hljs-string">"Please input send data :"</span>)<br><span class="hljs-keyword">var</span> a <span class="hljs-keyword">string</span><br>fmt.Scan(&amp;a)<br><span class="hljs-keyword">if</span> a == <span class="hljs-string">"exit"</span>&#123;<span class="hljs-keyword">break</span>&#125;  <span class="hljs-comment">//添加一个退出机制，用户输入exit，退出</span><br> <br>_, err := conn.Write([]<span class="hljs-keyword">byte</span>(a)) <br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br> <br>data := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">2048</span>)<br>n, err := conn.Read(data)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">continue</span><br>&#125;<br>fmt.Println(<span class="hljs-string">"Response data :"</span>, <span class="hljs-keyword">string</span>(data[:n]))<br>&#125;<br> <br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="四、运行"><a href="#四、运行" class="headerlink" title="四、运行"></a>四、运行</h2><p>此时，我们开启一个服务端，开启两个客户端进行测试：<br>服务端：<br><img src="https://s2.ax1x.com/2019/05/22/VCpkcQ.png" alt="VCpkcQ.png"><br>客户端：<br><img src="https://s2.ax1x.com/2019/05/22/VCpVns.png" alt="VCpVns.png"><br><img src="https://s2.ax1x.com/2019/05/22/VCpAXj.png" alt="VCpAXj.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Golang网络编程（一）</title>
      <link href="2020/02/03/go_socket/"/>
      <url>2020/02/03/go_socket/</url>
      
        <content type="html"><![CDATA[<h2 id="1-前言"><a href="#1-前言" class="headerlink" title="1. 前言"></a>1. 前言</h2><p>​  最近工作当中用Python写了非常多的socket代码，用于和底层的设备之间进行交互。然而我的方式比较原始，自己在一个基础的socket上不断地进行扩展。总所周知，Python的网络编程界有一个大名鼎鼎的<a href="https://www.twistedmatrix.com/trac/" target="_blank" rel="noopener">Twisted</a>框架，Twisted是已经一个维护了十余年的成熟项目，基于事件驱动设计的高性能网络编程框架。奈何这个框架的学习成本比较高，再由于笔者最近在学习Go语言，所以想着不如在Go语言中折腾一下网络编程，以下就是笔者学习阶段的一些总结。<br><a id="more"></a></p><h2 id="2-Socket编程起源"><a href="#2-Socket编程起源" class="headerlink" title="2. Socket编程起源"></a>2. Socket编程起源</h2><p>socket起源于Unix，而Unix/<a href="http://lib.csdn.net/base/linux" target="_blank" rel="noopener">Linux</a> 基本哲学之一就是“一切皆文件”，都可以用“打开open –&gt; 读写write/read –&gt; 关闭close”模式 来操作。Socket就是该模式的一个实现，socket即是一种特殊的文件，一些socket函数就是对其进行的操作（读/写IO、打开、关闭）</p><p>在 Unix/Linux 中的 Socket 编程主要通过调用 <code>listen</code>, <code>accept</code>, <code>write</code> <code>read</code> 等函数来实现的. 具体如下图所示:</p><p><img src="https://s2.ax1x.com/2019/05/18/EXEMo8.png" alt="EXEMo8.png"></p><h2 id="3-再回首——Python中的socket"><a href="#3-再回首——Python中的socket" class="headerlink" title="3. 再回首——Python中的socket"></a>3. 再回首——Python中的socket</h2><p>在进入到Go语言的世界前，和我再来回顾一下，Python中Socket编程的基础实例：</p><p>Server.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Echo server program</span><br><span class="hljs-keyword">import</span> socket<br><br>HOST = <span class="hljs-string">''</span>                 <span class="hljs-comment"># Symbolic name meaning all available interfaces</span><br>PORT = <span class="hljs-number">50007</span>              <span class="hljs-comment"># Arbitrary non-privileged port</span><br><br>sock_server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>sock_server.bind((HOST, PORT))<br><br>sock_server.listen(<span class="hljs-number">1</span>) <span class="hljs-comment">#开始监听，1代表在允许有一个连接排队，更多的新连接连进来时就会被拒绝</span><br>conn, addr = sock_server.accept() <span class="hljs-comment">#阻塞直到有连接为止，有了一个新连接进来后，就会为这个请求生成一个连接对象</span><br><br><span class="hljs-keyword">with</span> conn:<br>    print(<span class="hljs-string">'Connected by'</span>, addr)<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        data = conn.recv(<span class="hljs-number">1024</span>) <span class="hljs-comment">#接收1024个字节</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> data: <span class="hljs-keyword">break</span> <span class="hljs-comment">#收不到数据，就break</span><br>        conn.sendall(data) <span class="hljs-comment">#把收到的数据再全部返回给客户端</span><br></code></pre></div></td></tr></table></figure><p>Client.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># Echo client program</span><br><span class="hljs-keyword">import</span> socket<br><br>HOST = <span class="hljs-string">'localhost'</span>    <span class="hljs-comment"># The remote host</span><br>PORT = <span class="hljs-number">50007</span>              <span class="hljs-comment"># The same port as used by the server</span><br><br>client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)<br>client.connect((HOST, PORT))<br>client.sendall(<span class="hljs-string">b'Hello, world'</span>)<br><br>data = client.recv(<span class="hljs-number">1024</span>)<br><br>print(<span class="hljs-string">'Received'</span>,data)<br></code></pre></div></td></tr></table></figure><p>显而易见，Python的代码哲学还是有优点的。好了，整理好心情，和Python道声再见，我们进入Go的世界。</p><h2 id="4-Go-SOCKET基础概念"><a href="#4-Go-SOCKET基础概念" class="headerlink" title="4. Go SOCKET基础概念"></a>4. Go SOCKET基础概念</h2><h3 id="4-1-IP类型"><a href="#4-1-IP类型" class="headerlink" title="4.1 IP类型"></a>4.1 IP类型</h3><p>net包中定义的IP类型直接就是byte数组：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IP []<span class="hljs-keyword">byte</span><br></code></pre></div></td></tr></table></figure><p>我们可以使用<code>func parseIP(s string) IP</code>来把一个IP地址转换成IP类型：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">ipAddr := <span class="hljs-string">"192.168.1.79"</span><br>addr := net.ParseIP(ipAddr)<br><span class="hljs-keyword">if</span> addr == <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(<span class="hljs-string">"unavaliable addr"</span>)<br>&#125;<span class="hljs-keyword">else</span>&#123;<br>fmt.Println(addr.To16())<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="4-2-函数"><a href="#4-2-函数" class="headerlink" title="4.2 函数"></a>4.2 函数</h3><h4 id="4-2-1-funcResolveTCPAddr-net-addr-string-TCPAddr-error"><a href="#4-2-1-funcResolveTCPAddr-net-addr-string-TCPAddr-error" class="headerlink" title="4.2.1 funcResolveTCPAddr(net, addr string) (*TCPAddr, error)"></a>4.2.1 <strong>funcResolveTCPAddr(net, addr string) (*TCPAddr, error)</strong></h4><p>ResolveTCPAddr<code>函数的功能是解析TCP连接的地址，包含</code>ip<code>和</code>port</p><ul><li><code>net</code>：<code>tcp</code> <code>tcp4</code> <code>tcp6</code>三选一，分别表示TCPv4，TCPv6和任意，默认是<code>tcp4</code></li><li><code>addr</code>：主机的地址，可以是<code>[ip+port]</code>，也可以是<code>[domain+port]</code>，可以省略主机部分，表示本机地址</li></ul><p>返回一个<code>*TCPAddr</code>类型 ，表示一个TCP连接地址：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> TCPAddr <span class="hljs-keyword">struct</span> &#123;<br>IP   IP<br>Port <span class="hljs-keyword">int</span><br>Zone <span class="hljs-keyword">string</span> <span class="hljs-comment">// IPv6 scoped addressing zone</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-2-func-ResolveIPAddr-net-addr-string-IPAddr-error"><a href="#4-2-2-func-ResolveIPAddr-net-addr-string-IPAddr-error" class="headerlink" title="4.2.2 func ResolveIPAddr(net, addr string) (*IPAddr, error)"></a>4.2.2 func ResolveIPAddr(net, addr string) (*IPAddr, error)</h4><p><code>ResolveIPAddr</code>函数的功能是解析ip地址：</p><ul><li><code>net</code>：<code>ip</code>  <code>ip4</code> <code>ip6</code> 分别代表IPv4，IPv6以及任意。默认留空表示<code>ip4</code></li><li><code>addr</code> ：IP地址</li></ul><p>返回一个<code>*IPAddr</code>结构：</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> IPAddr <span class="hljs-keyword">struct</span> &#123;<br>IP   IP<br>Zone <span class="hljs-keyword">string</span> <span class="hljs-comment">// IPv6 scoped addressing zone</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-3-func-Dial-network-address-string-Conn-error"><a href="#4-2-3-func-Dial-network-address-string-Conn-error" class="headerlink" title="4.2.3 func Dial(network, address string) (Conn, error)"></a><strong>4.2.3 func Dial(network, address string) (Conn, error)</strong></h4><p><code>Dial</code>函数的功能是建立一个连接：</p><ul><li><code>network</code>： 如果是TCP连接，对应<code>tcp</code> <code>tcp4</code> <code>tcp6；如果是IP连接，对应ip ip4 ip6</code>。对于ip连接，需要在后面加一个冒号然后注明协议号或者协议名字</li><li><code>address</code>：连接的地址，<code>ip+port</code>或<code>domain+port</code> 形式，也可以省略主机地址表示本地地址<code>217.0.0.1</code></li></ul><p>返回一个<code>net.Conn</code>接口对象，包含了连接的信息，我们可以使用该对象的<code>Write()</code>和<code>Read()</code>对连接进行读写。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">type</span> Conn <span class="hljs-keyword">interface</span> &#123;<br>Read(b []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br>Write(b []<span class="hljs-keyword">byte</span>) (n <span class="hljs-keyword">int</span>, err error)<br>Close() error<br>LocalAddr() Addr<br>RemoteAddr() Addr<br>SetDeadline(t time.Time) error<br>SetReadDeadline(t time.Time) error<br>SetWriteDeadline(t time.Time) error<br>&#125;<br></code></pre></div></td></tr></table></figure><p>与这个函数相对应的两个函数：</p><ul><li><code>func DialTCP(net string, laddr, raddr *TCPAddr) (*TCPConn, error)</code></li><li><code>func DialIP(netProto string, laddr, raddr *IPAddr) (*IPConn, error)</code></li></ul><p>分别表示建立TCP请求和IP请求，中间多的<code>laddr</code>表示本地的地址，一般为<code>nil</code> 。</p><h4 id="4-2-4-func-c-conn-Write-b-byte-int-error"><a href="#4-2-4-func-c-conn-Write-b-byte-int-error" class="headerlink" title="4.2.4 func (c *conn) Write(b []byte) (int, error)"></a><strong>4.2.4 func (c *conn) Write(b []byte) (int, error)</strong></h4><p>向<code>conn</code>连接对象中写入数据，即发送数据给对方，写入的数据是<code>[]byte</code>类型，成功将返回发送的数据包字节数。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">n, err := tcpCoon.Write([]<span class="hljs-keyword">byte</span>(<span class="hljs-string">"HelloWorld"</span>))<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>fmt.Println(err)<br><span class="hljs-keyword">return</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h4 id="4-2-5-func-c-conn-Read-b-byte-int-error"><a href="#4-2-5-func-c-conn-Read-b-byte-int-error" class="headerlink" title="4.2.5 func (c *conn) Read(b []byte) (int, error)"></a><strong>4.2.5 func (c *conn) Read(b []byte) (int, error)</strong></h4><p>从conn连接对象中读取数据，成功将返回读取到的字节数。</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">recvData := <span class="hljs-built_in">make</span>([]<span class="hljs-keyword">byte</span>, <span class="hljs-number">2048</span>)<br>n, err = tcpCoon.Read(recvData)<br><span class="hljs-keyword">if</span> err != <span class="hljs-literal">nil</span>&#123;<br>   fmt.Println(err)<br>   <span class="hljs-keyword">return</span><br>&#125;<br>fmt.Println(<span class="hljs-keyword">string</span>(recvData))<br></code></pre></div></td></tr></table></figure><h4 id="4-2-6-func-Listen-net-laddr-string-Listener-error"><a href="#4-2-6-func-Listen-net-laddr-string-Listener-error" class="headerlink" title="4.2.6 func Listen(net, laddr string) (Listener, error)"></a><strong>4.2.6 func Listen(net, laddr string) (Listener, error)</strong></h4><p>Listen函数在服务端使用，让服务端开始监听。</p><ul><li><code>net</code> ：和上面一样，可以是<code>tcp</code> <code>ip</code>相关的值</li><li><code>laddr</code> ：要监听的地址，<code>ip+port</code>省略主机地址将使用本机地址<code>127.0.0.1</code></li></ul><p>相应的两个函数：</p><ul><li><code>func ListenTCP(net string, laddr *TCPAddr) (*TCPListener, error)</code>：监听TCP连接</li><li><code>func DialIP(netProto string, laddr, raddr *IPAddr) (*IPConn, error)</code>：监听IP连接</li></ul><h4 id="4-2-7-func-l-TCPListener-Accept-Conn-error"><a href="#4-2-7-func-l-TCPListener-Accept-Conn-error" class="headerlink" title="4.2.7 func (l *TCPListener) Accept() (Conn, error)"></a><strong>4.2.7 func (l *TCPListener) Accept() (Conn, error)</strong></h4><p>服务端开始监听需要使用<code>Accept</code>函数来接受客户端连接，此时服务端将进入阻塞状态。</p><p>相应的还有一个</p><ul><li><code>func (l *TCPListener) AcceptTCP() (*TCPConn, error)</code></li></ul><h2 id="5-Go-基础scoket代码实例"><a href="#5-Go-基础scoket代码实例" class="headerlink" title="5. Go 基础scoket代码实例"></a>5. Go 基础scoket代码实例</h2><p>经过上面的介绍，相信大家对Go的socket编程已经有了一些了解。现在我们就来写一个server和client，实现功能：client发送数据到server，server将数据转成大写后返回。</p><p>server.go</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">package main<br> <br>import (<br>"net"<br>"fmt"<br>"strings"<br>)<br> <br>func main()&#123;<br>tcpAddr, err := net.ResolveTCPAddr("tcp4", "localhost:8080") //创建一个TCPAddr<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br> <br>tcpLinstener, err := net.ListenTCP("tcp4", tcpAddr) //开始监听<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>fmt.Printf("Start listen:[%s]<br>", tcpAddr)<br> <br>tcpCoon, err := tcpLinstener.AcceptTCP()  //阻塞，等待客户端连接<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>defer tcpCoon.Close()  //记得关闭连接对象<br> <br>data := make([]byte, 2048)<br>n, err := tcpCoon.Read(data)  //客户端连接后，开始读取数据<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br> <br>recvStr := string(data[:n])<br>fmt.Println("Recv:", recvStr)<br>tcpCoon.Write([]byte(strings.ToUpper(recvStr)))  //转换成大写后返回客户端<br>&#125;<br></code></pre></div></td></tr></table></figure><p>client.go</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go">package main<br> <br>import (<br>"net"<br>"fmt"<br>)<br> <br>func main()&#123;<br>tcpAddr, err := net.ResolveTCPAddr("tcp4", "localhost:8080")  //TCP连接地址<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br> <br>tcpCoon, err := net.DialTCP("tcp4", nil, tcpAddr)  //建立连接<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>defer tcpCoon.Close()  //关闭<br> <br>sendData := "helloworld"<br>n, err := tcpCoon.Write([]byte(sendData))  //发送数据<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>fmt.Printf("Send %d byte data success: %s<br>", n, sendData)<br> <br>recvData := make([]byte, 2048)<br>n, err = tcpCoon.Read(recvData)  //读取数据<br>if err != nil&#123;<br>fmt.Println(err)<br>return<br>&#125;<br>recvStr := string(recvData[:n])<br>fmt.Printf("Response data: %s", recvStr)<br></code></pre></div></td></tr></table></figure><h2 id="6-小结"><a href="#6-小结" class="headerlink" title="6. 小结"></a>6. 小结</h2><p>至此，相信大家对Go的网络编程已经有了一个大致的了解。</p><p>后续的计划是</p><ul><li>Go并发socket编程</li><li>Go的socket编程粘包处理</li><li>挑选一个成熟的Go网络编程框架进行学习</li></ul><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>马谦的博客：<a href="https://www.dyxmq.cn/code/golang/golang-socket-2.html" target="_blank" rel="noopener">https://www.dyxmq.cn/code/golang/golang-socket-2.html</a></p><p>始于珞尘：<a href="https://juejin.im/entry/5aa8ebe46fb9a028de4467bd" target="_blank" rel="noopener">https://juejin.im/entry/5aa8ebe46fb9a028de4467bd</a></p><p>《Go语言程序设计》</p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> golang </tag>
            
            <tag> socket </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>2019年度总结</title>
      <link href="2019/12/31/2019%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/"/>
      <url>2019/12/31/2019%E5%B9%B4%E5%BA%A6%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<blockquote><p>痛楚难以避免，而磨难可以选择。  ——村上春树《当我跑步时，我谈些什么》<br><a id="more"></a></p></blockquote><p>年底的某个周末一路朔溪而上，勉强在午后登上了阴云密布的梧桐山。前一次爬梧桐山已经是清明节的事情了，转眼又到了年底。</p><p><img src="https://s2.ax1x.com/2019/12/27/lZUIzQ.jpg" alt="lZUIzQ.jpg"></p><p>回顾一下年初的<a href="https://huangyongchi.com/2019/08/03/%E6%88%91%E7%9A%842019%E8%AE%A1%E5%88%92/" target="_blank" rel="noopener">19年计划</a>，说起来我大概也是这半年头回再看这个计划了。现在看起来，19年大概算得上是充满遗憾的一年了，有很多事情本可以做的更好。</p><h2 id="工作"><a href="#工作" class="headerlink" title="工作"></a>工作</h2><p>最近刚忙完了湖北省博物馆的室内导航项目，计划来年能正式上线，如果一切顺利的话，故乡的小伙伴下次去省博的时候就能用上我们的定位导航系统。</p><p>习惯了工作上的节奏起起伏伏，项目进度紧的时候，加班自然也多一些，但是比起其他人996还是轻松太多。</p><p>在学校的时，偶尔能遇到一些对工作极度热情的人，看到这些人工作是的热情总会有一种——“哦，这样的工作狂，难怪他这么吊”的感叹。工作狂当然也不是我所想要的状态，只不过感觉自己应该更加专注、专业。目前自己还有很大的差距，平时还是要以更高的标准要求自己。</p><h2 id="学习"><a href="#学习" class="headerlink" title="学习"></a>学习</h2><p>上半年状态好的时候，基本每天都在学一点新的东西。也买了很多书，当初兴致满满的以为今年都会看完。结果到现在，反而成了搬家时的负担。</p><p>年初一直计划报个雅思考试，结果种种原因下来，最终也未能付诸实践，这大概是今年最遗憾的一件事情。</p><p>技术相关：</p><ul><li>《Python Cookbook》</li><li>《计算机网路——自顶向下方法》</li><li>《Redis设计与实现》</li><li>《Redis in action》</li><li>《图解算法》</li><li>《Docker从入门到实践》</li><li>《Go语言程序设计》</li></ul><p>其他：</p><ul><li>《当我跑步时我谈些什么》</li><li>《活着》</li><li>《偷影子的人》</li><li>《财务自由之路》</li><li>《人类简史》</li></ul><p>下半年常常无由来的烦恼，在游戏上花了不少时间，书反而看的少了很多。</p><p>一些看了半截再也没能完本的书：</p><ul><li>《高性能的MYSql》</li><li>《计算机操作系统》</li><li>以及下半年买的所有书。。。</li></ul><h2 id="生活"><a href="#生活" class="headerlink" title="生活"></a>生活</h2><p>年中的时候开始刻意的改变一些生活习惯，到目前为止也算是初见成效。</p><ul><li>尽量减少熬夜</li><li>每周三次5公里跑（最近天气冷下来，又倦怠了很多）</li><li>每个月一次户外徒步</li><li>基本戒除了咖啡外的所有饮料（咖啡因带来快乐还是难以戒除）</li></ul><p>体重比起年初大概减了10斤，最近也不会也特别疲倦的感觉，大概是恢复到了一个健康的生活节奏。</p><p>19年还是给自己添了太多没由来的烦恼，这里就不说了。只感觉自己的精力也是有限的，在这样一个快节奏的城市，感伤的成本太高了。只有自己真正的强大起来，才能去帮助别人解决烦恼。还有太多的事情要去做，没有时间一直停留纠结了。</p><h2 id="写在最后"><a href="#写在最后" class="headerlink" title="写在最后"></a>写在最后</h2><p>感谢一年来所有的人的包容、支持。</p><p>对帮助过我的朋友们，说一声谢谢。</p><p>对曾被我的坏情绪影响过的朋友，说一句对不起。</p><p>祝你们工作顺利，身体健康，事事顺心。</p><p>依旧热爱生活的YC。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>从Twisted到asyncio</title>
      <link href="2019/12/26/%E4%BB%8ETwisted%E5%88%B0asyncio/"/>
      <url>2019/12/26/%E4%BB%8ETwisted%E5%88%B0asyncio/</url>
      
        <content type="html"><![CDATA[<p><a href="https://twistedmatrix.com/trac/" target="_blank" rel="noopener">Twisted</a>可能是Python中支持的异步编程的最古老的第三方库之一。许多开发者已使用它开发了各种应用程序。它支持许多网络协议，并可用于许多不同类型的网络编程。实际上，asyncio受Twisted的启发很大。几名专业的Twisted开发人员的也参加到了asyncio的构建工作中。不久，将会有一个基于asyncio的Twisted版本。<br><a id="more"></a></p><h2 id="过渡"><a href="#过渡" class="headerlink" title="过渡"></a>过渡</h2><p>下表显示了Twisted和asyncio中一些的类似概念。</p><table><thead><tr><th style="text-align:left">Twisted</th><th style="text-align:left">asyncio</th></tr></thead><tbody><tr><td style="text-align:left"><code>Deferred</code></td><td style="text-align:left"><code>asyncio.Future</code></td></tr><tr><td style="text-align:left"><code>deferToThread(func)</code></td><td style="text-align:left"><code>loop.run_in_executor(None, func)</code></td></tr><tr><td style="text-align:left"><code>@inlineCallbacks</code></td><td style="text-align:left"><code>async def</code></td></tr><tr><td style="text-align:left"><code>reactor.run()</code></td><td style="text-align:left"><code>loop.run_forever()</code></td></tr></tbody></table><h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><p>这个小例子显示了两个等效的程序，一个在Twisted中实现，一个在asyncio中实现。</p><ul><li>基于 <em>deferred</em> 的 Twisted 例子：</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> twisted.internet <span class="hljs-keyword">import</span> defer<br><span class="hljs-keyword">from</span> twisted.internet <span class="hljs-keyword">import</span> reactor<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply</span><span class="hljs-params">(x)</span>:</span><br>    result = x * <span class="hljs-number">2</span><br>    d = defer.Deferred()<br>    reactor.callLater(<span class="hljs-number">1.0</span>, d.callback,<br>                      result)<br>    <span class="hljs-keyword">return</span> d<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step1</span><span class="hljs-params">(x)</span>:</span><br>    <span class="hljs-keyword">return</span> multiply(x)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">step2</span><span class="hljs-params">(result)</span>:</span><br>    print(<span class="hljs-string">"result: %s"</span> % result)<br><br>    reactor.stop()<br><br><br>d = defer.Deferred()<br>d.addCallback(step1)<br>d.addCallback(step2)<br>d.callback(<span class="hljs-number">5</span>)<br><br>reactor.run()<br></code></pre></div></td></tr></table></figure><ul><li>基于asyncio的简单例子</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">multiply</span><span class="hljs-params">(x)</span>:</span><br>    result = x * <span class="hljs-number">2</span><br>    <span class="hljs-keyword">await</span> asyncio.sleep(<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> result<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">steps</span><span class="hljs-params">(x)</span>:</span><br>    result = <span class="hljs-keyword">await</span> multiply(x)<br>    print(<span class="hljs-string">"result: %s"</span> % result)<br><br><br>loop = asyncio.get_event_loop()<br>coro = steps(<span class="hljs-number">5</span>)<br>loop.run_until_complete(coro)<br>loop.close()<br></code></pre></div></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://asyncio.readthedocs.io/en/latest/twisted.html" target="_blank" rel="noopener">https://asyncio.readthedocs.io/en/latest/twisted.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流畅的Python读书笔记（二）</title>
      <link href="2019/11/06/%E6%B5%81%E7%95%85%E7%9A%84Python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/"/>
      <url>2019/11/06/%E6%B5%81%E7%95%85%E7%9A%84Python%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%BA%8C%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyx4jkxhnaj22l51xu4j6.jpg" alt></p><a id="more"></a><h2 id="2-1-可变序列与不可变序列"><a href="#2-1-可变序列与不可变序列" class="headerlink" title="2.1 可变序列与不可变序列"></a>2.1 可变序列与不可变序列</h2><ul><li><p>可变序列</p><ul><li>list、 bytearray、 array.array、 collections.deque 和 memoryview。 </li></ul></li><li><p>不可变序列</p><ul><li>tuple、 str 和 bytes。 </li></ul></li></ul><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyvzw4nki0j20h805gmyj.jpg" alt></p><h2 id="2-2-列表推导和生成器表达式"><a href="#2-2-列表推导和生成器表达式" class="headerlink" title="2.2　列表推导和生成器表达式"></a>2.2　列表推导和生成器表达式</h2><ul><li>列表推导是构建列表（list）的快捷方式</li><li>生成器表达式则可以用来创建其他任何类型的序列 </li></ul><p>ps:</p><p>*<em>很多 Python 程序员都把列表推导（list comprehension）简称为 listcomps，生成</em><br>式表达器（generator expression）则称为 genexps。* </p><h3 id="2-2-1-列表推导和可读性"><a href="#2-2-1-列表推导和可读性" class="headerlink" title="2.2.1　列表推导和可读性"></a>2.2.1　列表推导和可读性</h3><p>新手写法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>symbols = <span class="hljs-string">'$¢£¥€¤'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>codes = []<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols:<br><span class="hljs-meta">... </span>codes.append(ord(symbol))<br>...<br><span class="hljs-meta">&gt;&gt;&gt; </span>codes<br>[<span class="hljs-number">36</span>, <span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>]<br></code></pre></div></td></tr></table></figure><p>列表推导写法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>symbols = <span class="hljs-string">'$¢£¥€¤'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>codes = [ord(symbol) <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols]<br><span class="hljs-meta">&gt;&gt;&gt; </span>codes<br>[<span class="hljs-number">36</span>, <span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>]<br></code></pre></div></td></tr></table></figure><p>列表推导不会再有变量泄漏的问题 </p><h3 id="2-2-2-列表推导同filter和map的比较"><a href="#2-2-2-列表推导同filter和map的比较" class="headerlink" title="2.2.2　列表推导同filter和map的比较"></a>2.2.2　列表推导同filter和map的比较</h3><p>实例代码：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>symbols = <span class="hljs-string">'$¢£¥€¤'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>beyond_ascii = [ord(s) <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> symbols <span class="hljs-keyword">if</span> ord(s) &gt; <span class="hljs-number">127</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>beyond_ascii<br>[<span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>]<br><br><br><span class="hljs-meta">&gt;&gt;&gt; </span>beyond_ascii = list(filter(<span class="hljs-keyword">lambda</span> c: c &gt; <span class="hljs-number">127</span>, map(ord, symbols)))<br><span class="hljs-meta">&gt;&gt;&gt; </span>beyond_ascii<br>[<span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>]<br></code></pre></div></td></tr></table></figure><p>下面的这种写法，确实很难看。。。</p><h3 id="2-2-3-笛卡儿积"><a href="#2-2-3-笛卡儿积" class="headerlink" title="2.2.3　笛卡儿积"></a>2.2.3　笛卡儿积</h3><p>笛卡尔积定义：</p><blockquote><p>笛卡尔乘积是指在数学中，两个<a href="https://baike.baidu.com/item/%E9%9B%86%E5%90%88" target="_blank" rel="noopener">集合</a><em>X</em>和<em>Y</em>的笛卡尓积（Cartesian product），又称<a href="https://baike.baidu.com/item/%E7%9B%B4%E7%A7%AF" target="_blank" rel="noopener">直积</a>，表示为<em>X</em>×<em>Y</em>，第一个对象是<em>X</em>的成员而第二个对象是<em>Y</em>的所有可能<a href="https://baike.baidu.com/item/%E6%9C%89%E5%BA%8F%E5%AF%B9" target="_blank" rel="noopener">有序对</a>的其中一个成员[3]  。</p><p>假设集合A={a, b}，集合B={0, 1, 2}，则两个集合的笛卡尔积为{(a, 0), (a, 1), (a, 2), (b, 0), (b, 1), (b, 2)}。</p></blockquote><p>如果你需要一个列表，列表里是 3 种不同尺寸的 T 恤衫，每个尺寸都有 2 个颜色，示例<br>2-4 用列表推导算出了这个列表，列表里有 6 种组合。 </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>colors = [<span class="hljs-string">'black'</span>, <span class="hljs-string">'white'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sizes = [<span class="hljs-string">'S'</span>, <span class="hljs-string">'M'</span>, <span class="hljs-string">'L'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tshirts = [(color, size) <span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> colors <span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> sizes]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tshirts<br>[(<span class="hljs-string">'black'</span>, <span class="hljs-string">'S'</span>), (<span class="hljs-string">'black'</span>, <span class="hljs-string">'M'</span>), (<span class="hljs-string">'black'</span>, <span class="hljs-string">'L'</span>), (<span class="hljs-string">'white'</span>, <span class="hljs-string">'S'</span>),<br>(<span class="hljs-string">'white'</span>, <span class="hljs-string">'M'</span>), (<span class="hljs-string">'white'</span>, <span class="hljs-string">'L'</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> colors: <br><span class="hljs-meta">... </span><span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> sizes:<br><span class="hljs-meta">... </span>print((color, size))<br>...<br>(<span class="hljs-string">'black'</span>, <span class="hljs-string">'S'</span>)<br>(<span class="hljs-string">'black'</span>, <span class="hljs-string">'M'</span>)<br>(<span class="hljs-string">'black'</span>, <span class="hljs-string">'L'</span>)<br>(<span class="hljs-string">'white'</span>, <span class="hljs-string">'S'</span>)<br>(<span class="hljs-string">'white'</span>, <span class="hljs-string">'M'</span>)<br>(<span class="hljs-string">'white'</span>, <span class="hljs-string">'L'</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>tshirts = [(color, size) <span class="hljs-keyword">for</span> size <span class="hljs-keyword">in</span> sizes <br>                <span class="hljs-keyword">for</span> color <span class="hljs-keyword">in</span> colors]<br><span class="hljs-meta">&gt;&gt;&gt; </span>tshirts<br>[(<span class="hljs-string">'black'</span>, <span class="hljs-string">'S'</span>), (<span class="hljs-string">'white'</span>, <span class="hljs-string">'S'</span>), (<span class="hljs-string">'black'</span>, <span class="hljs-string">'M'</span>), (<span class="hljs-string">'white'</span>, <span class="hljs-string">'M'</span>),<br>(<span class="hljs-string">'black'</span>, <span class="hljs-string">'L'</span>), (<span class="hljs-string">'white'</span>, <span class="hljs-string">'L'</span>)]<br></code></pre></div></td></tr></table></figure><p>通过调整for的顺序，来实现对内容的排序方式</p><h3 id="2-2-4-生成器表达式"><a href="#2-2-4-生成器表达式" class="headerlink" title="2.2.4　生成器表达式"></a>2.2.4　生成器表达式</h3><p>虽然也可以用列表推导来初始化元组、数组或其他序列类型，但是<strong>生成器表达式是更好的</strong><br><strong>选择</strong>。</p><p>这是因为生成器表达式背后遵守了迭代器协议，可以逐个地产出元素，而不是先建立一个完整的列表，然后再把这个列表传递到某个构造函数里。前面那种方式显然能够<strong>节省内存</strong>。 </p><p>生成器表达式的语法跟列表推导差不多，只不过把<strong>方括号换成圆括号</strong>而已。 </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>symbols = <span class="hljs-string">'$¢£¥€¤'</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>tuple(ord(symbol) <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols)<br>(<span class="hljs-number">36</span>, <span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> array<br><span class="hljs-meta">&gt;&gt;&gt; </span>array.array(<span class="hljs-string">'I'</span>, (ord(symbol) <span class="hljs-keyword">for</span> symbol <span class="hljs-keyword">in</span> symbols))<br>array(<span class="hljs-string">'I'</span>, [<span class="hljs-number">36</span>, <span class="hljs-number">162</span>, <span class="hljs-number">163</span>, <span class="hljs-number">165</span>, <span class="hljs-number">8364</span>, <span class="hljs-number">164</span>])<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>colors = [<span class="hljs-string">'black'</span>, <span class="hljs-string">'white'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span>sizes = [<span class="hljs-string">'S'</span>, <span class="hljs-string">'M'</span>, <span class="hljs-string">'L'</span>]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> tshirt <span class="hljs-keyword">in</span> (<span class="hljs-string">'%s %s'</span> % (c, s) <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> colors <span class="hljs-keyword">for</span> s <span class="hljs-keyword">in</span> sizes): ➊<br><span class="hljs-meta">... </span>print(tshirt)<br>...<br>black S<br>black M<br>black L<br>white S<br>white M<br>white L<br></code></pre></div></td></tr></table></figure><h2 id="2-3-元组不仅仅是不可变的列表"><a href="#2-3-元组不仅仅是不可变的列表" class="headerlink" title="2.3　元组不仅仅是不可变的列表"></a>2.3　元组不仅仅是不可变的列表</h2><p>元祖可以用于没有字段名的记录 </p><h3 id="2-3-1-元组和记录"><a href="#2-3-1-元组和记录" class="headerlink" title="2.3.1　元组和记录"></a>2.3.1　元组和记录</h3><p>元组其实是对数据的记录：元组中的每个元素都存放了记录中一个字段的数据，外加这个字段的位置。正是这个位置信息给数据赋予了意义 。</p><p>如果把元组当作一些字段的集合，那么数量和位置信息就变得非常重要了 </p><p>如果在任何的表达式里我们在元组内对元素排序，这些元素所携带的信息就会丢失，因为这些信息是跟它们的位置有关的 </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>lax_coordinates = (<span class="hljs-number">33.9425</span>, <span class="hljs-number">-118.408056</span>) ➊<br><span class="hljs-meta">&gt;&gt;&gt; </span>city, year, pop, chg, area = (<span class="hljs-string">'Tokyo'</span>, <span class="hljs-number">2003</span>, <span class="hljs-number">32450</span>, <span class="hljs-number">0.66</span>, <span class="hljs-number">8014</span>) ➋<br><span class="hljs-meta">&gt;&gt;&gt; </span>traveler_ids = [(<span class="hljs-string">'USA'</span>, <span class="hljs-string">'31195855'</span>), (<span class="hljs-string">'BRA'</span>, <span class="hljs-string">'CE342567'</span>), ➌<br><span class="hljs-meta">... </span>(<span class="hljs-string">'ESP'</span>, <span class="hljs-string">'XDA205856'</span>)]<br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> passport <span class="hljs-keyword">in</span> sorted(traveler_ids): ➍<br><span class="hljs-meta">... </span>print(<span class="hljs-string">'%s/%s'</span> % passport) ➎<br>...<br>BRA/CE342567<br>ESP/XDA205856<br>USA/<span class="hljs-number">31195855</span><br><span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">for</span> country, _ <span class="hljs-keyword">in</span> traveler_ids: ➏<br><span class="hljs-meta">... </span>print(country)<br>...<br>USA<br>BRA<br>ESP<br></code></pre></div></td></tr></table></figure><p>for 循环可以分别提取元组里的元素，也叫作拆包（unpacking）。因为元组中第二个元素对我们没有什么用，所以它赋值给“_”占位符。 </p><p>拆包让元组可以完美地被当作记录来使用 </p><p>总结：记录与元祖——位置的重要性</p><h3 id="2-3-2-元组拆包"><a href="#2-3-2-元组拆包" class="headerlink" title="2.3.2　元组拆包"></a>2.3.2　元组拆包</h3><p><code>*</code>运算符把一个可迭代对象拆开作为函数的参数：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>divmod(<span class="hljs-number">20</span>, <span class="hljs-number">8</span>)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>t = (<span class="hljs-number">20</span>, <span class="hljs-number">8</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>divmod(*t)<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>quotient, remainder = divmod(*t)<br><span class="hljs-meta">&gt;&gt;&gt; </span>quotient, remainder<br>(<span class="hljs-number">2</span>, <span class="hljs-number">4</span>)<br></code></pre></div></td></tr></table></figure><p><strong>用*来处理剩下的元素</strong> </p><p>不仅仅可以用在*args</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">&gt;&gt;&gt; a, b, *rest = range(<span class="hljs-number">5</span>)<br>&gt;&gt;&gt; a, b, rest<br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>])<br>&gt;&gt;&gt; a, b, *rest = range(<span class="hljs-number">3</span>)<br>&gt;&gt;&gt; a, b, rest   <br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [<span class="hljs-number">2</span>])<br>&gt;&gt;&gt; a, b, *rest = range(<span class="hljs-number">2</span>)<br>&gt;&gt;&gt; a, b, rest<br>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, [])<br></code></pre></div></td></tr></table></figure><p>可以出现在任意位置</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>a, *body, c, d = range(<span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>a, body, c, d<br>(<span class="hljs-number">0</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>], <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>*head, b, c, d = range(<span class="hljs-number">5</span>)<br><span class="hljs-meta">&gt;&gt;&gt; </span>head, b, c, d<br>([<span class="hljs-number">0</span>, <span class="hljs-number">1</span>], <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>)<br></code></pre></div></td></tr></table></figure><h3 id="2-3-3-嵌套元组拆包"><a href="#2-3-3-嵌套元组拆包" class="headerlink" title="2.3.3　嵌套元组拆包"></a>2.3.3　嵌套元组拆包</h3> <figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">metro_areas = [<br>(<span class="hljs-string">'Tokyo'</span>,<span class="hljs-string">'JP'</span>,<span class="hljs-number">36.933</span>,(<span class="hljs-number">35.689722</span>,<span class="hljs-number">139.691667</span>)), <span class="hljs-comment"># ➊</span><br>(<span class="hljs-string">'Delhi NCR'</span>, <span class="hljs-string">'IN'</span>, <span class="hljs-number">21.935</span>, (<span class="hljs-number">28.613889</span>, <span class="hljs-number">77.208889</span>)),<br>(<span class="hljs-string">'Mexico City'</span>, <span class="hljs-string">'MX'</span>, <span class="hljs-number">20.142</span>, (<span class="hljs-number">19.433333</span>, <span class="hljs-number">-99.133333</span>)),<br>(<span class="hljs-string">'New York-Newark'</span>, <span class="hljs-string">'US'</span>, <span class="hljs-number">20.104</span>, (<span class="hljs-number">40.808611</span>, <span class="hljs-number">-74.020386</span>)),<br>(<span class="hljs-string">'Sao Paulo'</span>, <span class="hljs-string">'BR'</span>, <span class="hljs-number">19.649</span>, (<span class="hljs-number">-23.547778</span>, <span class="hljs-number">-46.635833</span>)),<br>]<br>print(<span class="hljs-string">'&#123;:15&#125; | &#123;:^9&#125; | &#123;:^9&#125;'</span>.format(<span class="hljs-string">''</span>, <span class="hljs-string">'lat.'</span>, <span class="hljs-string">'long.'</span>))<br>fmt = <span class="hljs-string">'&#123;:15&#125; | &#123;:9.4f&#125; | &#123;:9.4f&#125;'</span><br><span class="hljs-keyword">for</span> name, cc, pop, (latitude, longitude) <span class="hljs-keyword">in</span> metro_areas: <span class="hljs-comment"># ➋</span><br><span class="hljs-keyword">if</span> longitude &lt;= <span class="hljs-number">0</span>: <span class="hljs-comment"># ➌</span><br>print(fmt.format(name, latitude, longitude))<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python垃圾回收</title>
      <link href="2019/11/05/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/"/>
      <url>2019/11/05/%E5%BC%95%E7%94%A8%E8%AE%A1%E6%95%B0/</url>
      
        <content type="html"><![CDATA[<p>GC作为现代编程语言的自动内存管理机制，专注于两件事：1. 找到内存中无用的垃圾资源 2. 清除这些垃圾并把内存让出来给其他对象使用。GC彻底把程序员从资源管理的重担中解放出来，让他们有更多的时间放在业务逻辑上。但这并不意味着码农就可以不去了解GC，毕竟多了解GC知识还是有利于我们写出更健壮的代码。<br><a id="more"></a></p><h3 id="引用计数"><a href="#引用计数" class="headerlink" title="引用计数"></a>引用计数</h3><p>Python语言默认采用的垃圾收集机制是『引用计数法 Reference Counting』，该算法最早George E. Collins在1960的时候首次提出，50年后的今天，该算法依然被很多编程语言使用。</p><p>『引用计数法』的原理是：每个对象维护一个<code>ob_ref</code>字段，用来记录该对象当前被引用的次数，每当新的引用指向该对象时，它的引用计数ob_ref加1，每当该对象的引用失效时计数ob_ref减1，一旦对象的引用计数为0，该对象立即被回收，对象占用的内存空间将被释放。它的缺点是需要额外的空间维护引用计数，这个问题是其次的，不过最主要的问题是它不能解决对象的“循环引用”，因此，也有很多语言比如Java并没有采用该算法做来垃圾的收集机制。</p><p>什么是循环引用？A和B相互引用而再没有外部引用A与B中的任何一个，它们的引用计数虽然都为1，但显然应该被回收，例子：</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">a = &#123; &#125; <span class="hljs-comment">#对象A的引用计数为 1</span><br><span class="hljs-keyword">b </span>= &#123; &#125; <span class="hljs-comment">#对象B的引用计数为 1</span><br>a[<span class="hljs-string">'b'</span>] = <span class="hljs-keyword">b </span> <span class="hljs-comment">#B的引用计数增1</span><br><span class="hljs-keyword">b['a'] </span>= a  <span class="hljs-comment">#A的引用计数增1</span><br>del a <span class="hljs-comment">#A的引用减 1，最后A对象的引用为 1</span><br>del <span class="hljs-keyword">b </span><span class="hljs-comment">#B的引用减 1, 最后B对象的引用为 1</span><br></code></pre></div></td></tr></table></figure><p><img src="https://foofish.net/images/recycle-refrence.jpg" alt="recycle-refrence.jpg"></p><p>在这个例子中程序执行完<code>del</code>语句后，A、B对象已经没有任何引用指向这两个对象，但是这两个对象各包含一个对方对象的引用，虽然最后两个对象都无法通过其它变量来引用这两个对象了，这对GC来说就是两个非活动对象或者说是垃圾对象，但是他们的引用计数并没有减少到零。因此如果是使用引用计数法来管理这两对象的话，他们并不会被回收，它会一直驻留在内存中，就会造成了内存泄漏（内存空间在使用完毕后未释放）。为了解决对象的循环引用问题，Python引入了标记-清除和分代回收两种GC机制。</p><h3 id="标记清除"><a href="#标记清除" class="headerlink" title="标记清除"></a>标记清除</h3><p>『标记清除（Mark—Sweep）』算法是一种基于追踪回收（tracing GC）技术实现的垃圾回收算法。它分为两个阶段：第一阶段是标记阶段，GC会把所有的『活动对象』打上标记，第二阶段是把那些没有标记的对象『非活动对象』进行回收。那么GC又是如何判断哪些是活动对象哪些是非活动对象的呢？</p><p>对象之间通过引用（指针）连在一起，构成一个有向图，对象构成这个有向图的节点，而引用关系构成这个有向图的边。从根对象（root object）出发，沿着有向边遍历对象，可达的（reachable）对象标记为活动对象，不可达的对象就是要被清除的非活动对象。根对象就是全局变量、调用栈、寄存器。</p><p><img src="https://foofish.net/images/mark-sweep.svg" alt="mark-sweepg"></p><p>在上图中，我们把小黑圈视为全局变量，也就是把它作为root object，从小黑圈出发，对象1可直达，那么它将被标记，对象2、3可间接到达也会被标记，而4和5不可达，那么1、2、3就是活动对象，4和5是非活动对象会被GC回收。</p><p>标记清除算法作为Python的辅助垃圾收集技术主要处理的是一些容器对象，比如list、dict、tuple，instance等，因为对于字符串、数值对象是不可能造成循环引用问题。Python使用一个双向链表将这些容器对象组织起来。不过，这种简单粗暴的标记清除算法也有明显的缺点：清除非活动的对象前它必须顺序扫描整个堆内存，哪怕只剩下小部分活动对象也要扫描所有对象。</p><h3 id="分代回收"><a href="#分代回收" class="headerlink" title="分代回收"></a>分代回收</h3><p>分代回收是一种以空间换时间的操作方式，Python将内存根据对象的存活时间划分为不同的集合，每个集合称为一个代，Python将内存分为了3“代”，分别为年轻代（第0代）、中年代（第1代）、老年代（第2代），他们对应的是3个链表，它们的垃圾收集频率与对象的存活时间的增大而减小。新创建的对象都会分配在年轻代，年轻代链表的总数达到上限时，Python垃圾收集机制就会被触发，把那些可以被回收的对象回收掉，而那些不会回收的对象就会被移到中年代去，依此类推，老年代中的对象是存活时间最久的对象，甚至是存活于整个系统的生命周期内。同时，分代回收是建立在标记清除技术基础之上。分代回收同样作为Python的辅助垃圾收集技术处理那些容器对象</p><p>参考：</p><ul><li><a href="http://www.memorymanagement.org/mmref/recycle.html#tracing-collectors" target="_blank" rel="noopener">http://www.memorymanagement.org/mmref/recycle.html#tracing-collectors</a></li><li>《垃圾回收的算法与实现》</li><li>《Python源码剖析》</li></ul>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流畅的Python读书笔记(1)</title>
      <link href="2019/11/05/%E6%B5%81%E7%95%85%E7%9A%84python(%E4%B8%80)/"/>
      <url>2019/11/05/%E6%B5%81%E7%95%85%E7%9A%84python(%E4%B8%80)/</url>
      
        <content type="html"><![CDATA[<p>流畅的Python读书笔记</p><h2 id="关于"><a href="#关于" class="headerlink" title="关于"></a>关于</h2><blockquote><p>前言</p><p>Python 官方教程（<a href="https://docs.python.org/3/tutorial/）的开头是这样写的：" target="_blank" rel="noopener">https://docs.python.org/3/tutorial/）的开头是这样写的：</a> “Python 是一门既<br>容易上手又强大的编程语言。 ”这句话本身并无大碍，但需要注意的是，正因为它既好学<br>又好用，所以很多 Python 程序员只用到了其强大功能的一小部分。<br><a id="more"></a><br>工作中人们往往带着一种这很简单的错觉，希望通过这本书我可以学习到进阶的知识，摆脱这样的印象</p></blockquote><h2 id="第一章-Python数据模型"><a href="#第一章-Python数据模型" class="headerlink" title="第一章 Python数据模型"></a>第一章 Python数据模型</h2><p>1.1 python风格的纸牌</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> collections<br>Card = collections.namedtuple(<span class="hljs-string">'Card'</span>, [<span class="hljs-string">'rank'</span>, <span class="hljs-string">'suit'</span>])<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">FrenchDeck</span>:</span><br>ranks = [str(n) <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, <span class="hljs-number">11</span>)] + list(<span class="hljs-string">'JQKA'</span>)<br>suits = <span class="hljs-string">'spades diamonds clubs hearts'</span>.split()<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>self._cards = [Card(rank, suit) <span class="hljs-keyword">for</span> suit <span class="hljs-keyword">in</span> self.suits <br>                   <span class="hljs-keyword">for</span> rank <span class="hljs-keyword">in</span> self.ranks]<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__len__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> len(self._cards)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__getitem__</span><span class="hljs-params">(self, position)</span>:</span><br><span class="hljs-keyword">return</span> self._cards[position]<br></code></pre></div></td></tr></table></figure><p>关于<code>collections</code>的用法</p><blockquote><p><a href="https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000" target="_blank" rel="noopener">https://www.liaoxuefeng.com/wiki/0014316089557264a6b348958f449949df42a6d3a2e542c000/001431953239820157155d21c494e5786fce303f3018c86000</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 读书笔记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>622. 设计循环队列</title>
      <link href="2019/11/05/%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2019/11/05/%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>设计你的循环队列实现。 循环队列是一种线性数据结构，其操作表现基于 FIFO（先进先出）原则并且队尾被连接在队首之后以形成一个循环。它也被称为“环形缓冲器”。<br><a id="more"></a></p><p>循环队列的一个好处是我们可以利用这个队列之前用过的空间。在一个普通队列里，一旦一个队列满了，我们就不能插入下一个元素，即使在队列前面仍有空间。但是使用循环队列，我们能使用这些空间去存储新的值。</p><p>你的实现应该支持如下操作：</p><ul><li><code>MyCircularQueue(k)</code>: 构造器，设置队列长度为 k 。</li><li><code>Front</code>: 从队首获取元素。如果队列为空，返回 -1 。</li><li><code>Rear</code>: 获取队尾元素。如果队列为空，返回 -1 。</li><li><code>enQueue(value)</code>: 向循环队列插入一个元素。如果成功插入则返回真。</li><li><code>deQueue()</code>: 从循环队列中删除一个元素。如果成功删除则返回真。</li><li><code>isEmpty()</code>: 检查循环队列是否为空。</li><li><code>isFull()</code>: 检查循环队列是否已满。</li></ul><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>队列的存储结构中使用的最多的是循环队列。循环队列包括两个指针， front 指针指向队头元素， rear 指针指向队尾元素的下一个位置。<br>队列为空的判断条件是：front == rear<br>队列满的判断条件是：(rear+1)%maxsize == front<br>队列长度的计算公式：(rear-front+maxsize)%maxsize</p><p>正常情况下当front == rear是队列有可能是满也有可能是空，为了区分这两种情况 我们需要在front前添加一个闲置单元。</p><p><img src="http://ww1.sinaimg.cn/large/d126accegy1g1z044bgxyj20li06bq41.jpg" alt="tututu"></p><p><strong><em>show me the code</em></strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">"""<br>@Author    : Young<br>@Email     : hyc554@outlook.com<br>@site      : http://www.cnblogs.com/huang-yc/<br>@File      : mycircularqueue.py<br>@version   : 1.0<br>@Time      : 2019/4/11 20:06<br>Description about this file:<br><br>"""</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyCircularQueue</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, k: int)</span>:</span><br>        <span class="hljs-string">"""<br>        Initialize your data structure here. Set the size of the queue to be k.<br>        """</span><br>        self.queue = [<span class="hljs-literal">None</span>] * (k + <span class="hljs-number">1</span>)<br>        self.maxsize = k + <span class="hljs-number">1</span><br>        self.front = <span class="hljs-number">0</span><br>        self.tail = <span class="hljs-number">0</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enQueue</span><span class="hljs-params">(self, value: int)</span> -&gt; bool:</span><br>        <span class="hljs-string">"""<br>        Insert an element into the circular queue. Return true if the operation is successful.<br>        """</span><br>        <span class="hljs-keyword">if</span> self.isFull():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.queue[self.tail] = value<br>        self.tail = (self.tail + <span class="hljs-number">1</span>) % self.maxsize<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">deQueue</span><span class="hljs-params">(self)</span> -&gt; bool:</span><br>        <span class="hljs-string">"""<br>        Delete an element from the circular queue. Return true if the operation is successful.<br>        """</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        self.queue[self.front] = <span class="hljs-literal">None</span><br>        self.front = (self.front + <span class="hljs-number">1</span>) % self.maxsize<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Front</span><span class="hljs-params">(self)</span> -&gt; int:</span><br>        <span class="hljs-string">"""<br>        Get the front item from the queue.<br>        """</span><br><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        <span class="hljs-keyword">return</span> self.queue[self.front]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Rear</span><span class="hljs-params">(self)</span> -&gt; int:</span><br>        <span class="hljs-string">"""<br>        Get the last item from the queue.<br>        """</span><br>        <span class="hljs-keyword">if</span> self.isEmpty():<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        <span class="hljs-keyword">return</span> self.queue[self.tail<span class="hljs-number">-1</span>]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isEmpty</span><span class="hljs-params">(self)</span> -&gt; bool:</span><br>        <span class="hljs-string">"""<br>        Checks whether the circular queue is empty or not.<br>        """</span><br>        <span class="hljs-keyword">return</span> self.front == self.tail<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">isFull</span><span class="hljs-params">(self)</span> -&gt; bool:</span><br>        <span class="hljs-string">"""<br>        Checks whether the circular queue is full or not.<br>        """</span><br>        <span class="hljs-keyword">return</span> (self.tail + <span class="hljs-number">1</span>) % self.maxsize == self.front<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    a =MyCircularQueue(<span class="hljs-number">3</span>)<br>    print(a.enQueue(<span class="hljs-number">1</span>))<br>    print(a.enQueue(<span class="hljs-number">2</span>))<br>    print(a.enQueue(<span class="hljs-number">3</span>))<br>    print(a.enQueue(<span class="hljs-number">4</span>))<br>    print(a.Rear())<br>    print(a.isFull())<br>    print(a.deQueue())<br>    print(a.enQueue(<span class="hljs-number">4</span>))<br>    print(a.Rear())<br>    print(a.queue)<br>    print(a.Front())<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker快速搭建Kafka开发环境</title>
      <link href="2019/10/31/docker-kafka/"/>
      <url>2019/10/31/docker-kafka/</url>
      
        <content type="html"><![CDATA[<p>最近由于业务的需求，做了一些常用的消息队列的调研。提到<code>MQ</code>那么大名鼎鼎的<code>kafka</code>自然不能不研究一下。</p><p>作为一个新手玩家，快速搭建起一套可以运行的环境十分重要，根据文档的介绍可以完成在Linux系统下的环境搭建，但是读下来发现步骤还是有点繁多。有没有什么更加快捷的办法搭建一套可以运行的开发环境呢，于是我想到了Docker。2019年了，容器化已经成为了主流，在本地进行开发和测试的时候使用Docker也便于模拟多节点的集群环境。<br><a id="more"></a></p><p><img src="https://s2.ax1x.com/2019/10/31/KIBxpD.png" alt="KIBxpD.png"></p><h3 id="前置条件"><a href="#前置条件" class="headerlink" title="前置条件"></a>前置条件</h3><ul><li><a href="https://docs.docker.com/install/linux/docker-ce/ubuntu/" target="_blank" rel="noopener">Docker</a>: 要想使用Docker来启动kafka，开发环境提前装好Docker是必须的，我一般在Ubuntu虚拟机上进行开发测试</li><li><a href="https://docs.docker.com/compose/install/" target="_blank" rel="noopener">Docker Compose</a>: kafka依赖zookeeper，使用docker-compose来管理容器依赖</li></ul><h3 id="Docker镜像"><a href="#Docker镜像" class="headerlink" title="Docker镜像"></a>Docker镜像</h3><p>要想使用Docker安装Kafka，第一件事当然是去Docker hub上找镜像以及使用方法啦。发现kafka并不像mysql或者redis那样有官方镜像，不过Google一下后发现可以选择知名的三方镜像<a href="https://hub.docker.com/r/wurstmeister/kafka/" target="_blank" rel="noopener">wurstmeister/kafka</a></p><p><a href="https://github.com/wurstmeister/kafka-docker" target="_blank" rel="noopener">wurstmeister/kafka</a>在Github上更新还算频繁，目前使用kafka版本是<code>1.1.0</code></p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><ol><li><p>参考<a href="https://github.com/wurstmeister/kafka-docker/blob/master/test/docker-compose.yml" target="_blank" rel="noopener">官方测试用的docker-compose.yml</a>直接在自定义的目录位置新建docker-compose的配置文件</p><p><code>touch ~/docker/kafka/docker-compose.yml</code></p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile">version: <span class="hljs-string">'2.1'</span><br>services:<br>  zookeeper:<br>    image: wurstmeister/zookeeper<br>    ports:<br>      - <span class="hljs-string">"2181"</span><br>  kafka:<br>    image: wurstmeister/kafka<br>    ports:<br>      - <span class="hljs-string">"9092"</span><br>    environment:<br>      KAFKA_ADVERTISED_HOST_NAME: <span class="hljs-number">192.168</span>.XXX.XXX<br>      KAFKA_ZOOKEEPER_CONNECT: zookeeper:<span class="hljs-number">2181</span><br>    volumes:<br>      - /var/<span class="hljs-keyword">run</span><span class="bash">/docker.sock:/var/run/docker.sock</span><br></code></pre></div></td></tr></table></figure><p><strong>注意：</strong> <code>KAFKA_ADVERTISED_HOST_NAME</code> 需要配置为宿主机的ip</p></li><li><p><code>docker-compose</code> 启动kafka</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">docker-compose up -d</span><br></code></pre></div></td></tr></table></figure><p>启动完之后通过<code>docker ps</code>可以看到启动了一个zookeeper容器和一个kafka容器</p></li><li><p>启动多个kafka节点，比如3</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker-compose scale <span class="hljs-attribute">kafka</span>=3<br></code></pre></div></td></tr></table></figure><p>如果没什么错误的话，再通过<code>docker ps</code>可以看到启动了一个zookeeper容器和三个kafka容器</p></li></ol><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><ol><li><p>首先进入到一个kafka容器中，例如: kafka_kafka_1</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">docker <span class="hljs-built_in">exec</span> -it kafka_kafka_1 /bin/bash<br></code></pre></div></td></tr></table></figure></li><li><p>创建一个topic并查看，需要指定zookeeper的容器名(这里是kafka_zookeeper_1)，topic的名字为test</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-topics.sh --create --topic <span class="hljs-built_in">test</span> --zookeeper kafka-docker_zookeeper_1:2181 --replication-factor 1 --partitions 1<br><br><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-topics.sh --list --zookeeper kafka-docker_zookeeper_1:2181<br></code></pre></div></td></tr></table></figure></li><li><p>发布消息，输入几条消息后，按^C退出发布</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-console-producer.sh --topic=<span class="hljs-built_in">test</span> --broker-list kafka-docker_kafka_1:9092<br></code></pre></div></td></tr></table></figure></li><li><p>接受消息</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-variable">$KAFKA_HOME</span>/bin/kafka-console-consumer.sh --bootstrap-server kafka-docker_kafka_1:9092 --from-beginning --topic <span class="hljs-built_in">test</span><br></code></pre></div></td></tr></table></figure></li></ol><p>如果接收到了发布的消息，那么说明部署正常，可以正式使用了。</p><p>这里补上一次测试的截图</p><p><img src="https://s2.ax1x.com/2019/10/31/KIB3Se.png" alt="KIB3Se.png"></p>]]></content>
      
      
      <categories>
          
          <category> 中间件 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> kafka </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python的CRC校验</title>
      <link href="2019/10/15/crc-py/"/>
      <url>2019/10/15/crc-py/</url>
      
        <content type="html"><![CDATA[<h2 id="CRC校验"><a href="#CRC校验" class="headerlink" title="CRC校验"></a>CRC校验</h2><p><img src="https://s2.ax1x.com/2019/10/15/KC8RKJ.png" alt="KC8RKJ.png"><br><a id="more"></a></p><blockquote><p>循环冗余校验码（CRC），简称循环码，是一种常用的、具有检错、纠错能力的校验码，在早期的通信中运用广泛。循环冗余校验码常用于外存储器和计算机同步通信的数据校验。奇偶校验码和海明校验码都是采用奇偶检测为手段检错和纠错的(奇偶校验码不具有纠错能力)，而循环冗余校验则是通过某种数学运算来建立数据位和校验位的约定关系的。</p><p>——百度百科</p></blockquote><h2 id="crcmod校验CRC"><a href="#crcmod校验CRC" class="headerlink" title="crcmod校验CRC"></a>crcmod校验CRC</h2><p><code>crcmod</code>该软件包中的软件是一个Python模块，用于生成计算循环冗余校验（<code>CRC</code>）的对象。它包括一个用于快速计算的（可选）C扩展，以及一个纯Python实现。</p><p>该程序包允许使用任何8、16、24、32或64位<code>CRC</code>。您可以为选定的多项式或<a href="http://crcmod.sourceforge.net/crcmod.html#crcmod.Crc" target="_blank" rel="noopener"><code>crcmod.Crc</code></a>类的实例生成Python函数，该实例 提供与Python标准库中的<a href="http://docs.python.org/library/hashlib.html#module-hashlib" target="_blank" rel="noopener"><code>hashlib</code></a>，<a href="http://docs.python.org/library/md5.html#module-md5" target="_blank" rel="noopener"><code>md5</code></a>和<a href="http://docs.python.org/library/sha.html#module-sha" target="_blank" rel="noopener"><code>sha</code></a>模块相同的接口 。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> crcmod<br></code></pre></div></td></tr></table></figure><h3 id="算法参数"><a href="#算法参数" class="headerlink" title="算法参数"></a>算法参数</h3><table><thead><tr><th style="text-align:left">Name</th><th style="text-align:left">Polynomial</th><th style="text-align:left">Reversed</th><th style="text-align:left">Init-value</th><th style="text-align:left">XOR-out</th><th style="text-align:left">Check</th></tr></thead><tbody><tr><td style="text-align:left"><code>crc-8</code></td><td style="text-align:left">0x107</td><td style="text-align:left">False</td><td style="text-align:left">0x00</td><td style="text-align:left">0x00</td><td style="text-align:left">0xF4</td></tr><tr><td style="text-align:left"><code>crc-8-darc</code></td><td style="text-align:left">0x139</td><td style="text-align:left">True</td><td style="text-align:left">0x00</td><td style="text-align:left">0x00</td><td style="text-align:left">0x15</td></tr><tr><td style="text-align:left"><code>crc-8-i-code</code></td><td style="text-align:left">0x11D</td><td style="text-align:left">False</td><td style="text-align:left">0xFD</td><td style="text-align:left">0x00</td><td style="text-align:left">0x7E</td></tr><tr><td style="text-align:left"><code>crc-8-itu</code></td><td style="text-align:left">0x107</td><td style="text-align:left">False</td><td style="text-align:left">0x55</td><td style="text-align:left">0x55</td><td style="text-align:left">0xA1</td></tr><tr><td style="text-align:left"><code>crc-8-maxim</code></td><td style="text-align:left">0x131</td><td style="text-align:left">True</td><td style="text-align:left">0x00</td><td style="text-align:left">0x00</td><td style="text-align:left">0xA1</td></tr><tr><td style="text-align:left"><code>crc-8-rohc</code></td><td style="text-align:left">0x107</td><td style="text-align:left">True</td><td style="text-align:left">0xFF</td><td style="text-align:left">0x00</td><td style="text-align:left">0xD0</td></tr><tr><td style="text-align:left"><code>crc-8-wcdma</code></td><td style="text-align:left">0x19B</td><td style="text-align:left">True</td><td style="text-align:left">0x00</td><td style="text-align:left">0x00</td><td style="text-align:left">0x25</td></tr><tr><td style="text-align:left"><code>crc-16</code></td><td style="text-align:left">0x18005</td><td style="text-align:left">True</td><td style="text-align:left">0x0000</td><td style="text-align:left">0x0000</td><td style="text-align:left">0xBB3D</td></tr></tbody></table><h3 id="CRC16校验"><a href="#CRC16校验" class="headerlink" title="CRC16校验"></a>CRC16校验</h3><p><code>crcmod.mkCrcFun</code>的参数解析</p><ul><li><em>poly</em> –用于计算CRC的生成多项式。该值指定为Python整数或长整数。该整数中的位是多项式的系数。允许的唯一多项式是那些生成8、16、24、32或64位CRC的多项式。</li><li><em>initCrc</em> –用于开始CRC计算的初始值。该初始值应为初始移位寄存器值，如果使用反向算法则应反向，然后与最终XOR值进行XOR。这等效于算法应针对零长度字符串返回的CRC结果。默认设置为所有位，因为该起始值将考虑前导零字节。从零开始将忽略所有前导零字节。</li><li><em>rev-</em>当为<code>True</code>时，选择位反转算法的标志。默认为 <code>True，</code>因为位反转算法更有效。</li><li><em>xorOut</em> –与计算出的CRC值进行XOR的最终值。由某些CRC算法使用。默认为零。</li></ul><p>代码实现</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> crcmod<br><br><br>words = <span class="hljs-string">b'Y\x11\x9b\xdf\x00\x00\n\x88$\x10\x00\x00\x00\x01\xa0\xcc\xb5'</span><br>crc16 = crcmod.mkCrcFun(<span class="hljs-number">0x18005</span>, rev=<span class="hljs-literal">True</span>, initCrc=<span class="hljs-number">0xFFFF</span>, xorOut=<span class="hljs-number">0x0000</span>)<br>print(crc16(words))<br><br><span class="hljs-comment"># 42443</span><br></code></pre></div></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p><a href="http://crcmod.sourceforge.net/crcmod.html" target="_blank" rel="noopener">http://crcmod.sourceforge.net/crcmod.html</a></p><p><a href="https://stackoverflow.com/questions/35205702/calculating-crc16-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/35205702/calculating-crc16-in-python</a></p><p><a href="https://baike.baidu.com/item/循环冗余校验码/10168758?fromtitle=CRC校验&amp;fromid=3439037" target="_blank" rel="noopener">https://baike.baidu.com/item/%E5%BE%AA%E7%8E%AF%E5%86%97%E4%BD%99%E6%A0%A1%E9%AA%8C%E7%A0%81/10168758?fromtitle=CRC%E6%A0%A1%E9%AA%8C&amp;fromid=3439037</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 网络 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>写在中秋</title>
      <link href="2019/09/12/mid/"/>
      <url>2019/09/12/mid/</url>
      
        <content type="html"><![CDATA[<p>难得迎来了下半年的第一个小长假，明天要出一趟远门。<br><a id="more"></a></p><p>这个博客也好久没有更新了，偶尔登上来看一下，还是一些小伙伴在测试发一些文章的，但是实际上我自己都是用markdown写。你们的文章格式渲染最终都不会很好，所以我都默默的删掉了。在这里给大家道个歉，也祝大家学习工作顺利吧。</p><p>最近状态起起伏伏，随着深圳闷热的夏日最终慢慢走到了尽头，仿佛还是慢慢的找回了自己的节奏，重新开始看那些还没看完的书，做还没做完的事情。</p><p>度过了项目最紧张时间，某天回到家，看着杂乱书架，下定决心来整理一下了。</p><p>也不知道为什么翻出了一本雅思词汇书，我有一个习惯就是在扉页上日期写上自己的购书日期，或者自己重新翻开一本很久没有看过的书的日期。所以这本书上的签字是这样的，大概是17年底买的了。</p><p><img src="https://s2.ax1x.com/2019/09/12/nDrkJH.jpg" alt="nDrkJH.jpg"></p><p>研究生三年考雅思的想法实际上一直是有的，但是因为种种事情而放弃了。</p><p>看了一下基本每一页基本都还是有笔记的，大概是当时每天早上在实验室背单词做的笔记。</p><p>三分钟的热度，说的就是在下了。类似的情况还有这里</p><p><img src="https://s2.ax1x.com/2019/09/12/nDDhzn.jpg" alt="nDDhzn.jpg"></p><p>高中毕业时，在光谷书城买了这本C++的书，后面也是因为种种原因没有坚持看完，谁能想到最后还是成为了一个软件工程师。</p><p>编程的路一下耽搁了8年。</p><p>雅思争取明年能参加一次考试，保六争七吧。</p><p><code>keep hungry keep foolish</code>，这是我最近喜欢的一句话。</p><p>人生的进度条已然走过了三分之一，不要给自己给太多的遗憾。</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django——微信消息推送</title>
      <link href="2019/09/09/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>2019/09/09/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信公众号的分类</p><a id="more"></a><ul><li><p>微信消息推送</p><ul><li><p>公众号</p><ul><li><p>已认证公众号</p></li><li><p>服务号</p></li><li><p>已认证服务号</p></li><li><p>企业号</p></li></ul></li></ul></li></ul><p>基于：微信认证服务号 主动推送微信消息。<br>前提：关注服务号<br>环境：沙箱环境</p><p>沙箱环境地址： <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><ol><li><p>注册开发者账号</p><p>获得：appID、appsecret</p><p>网页授权获取用户基本信息：47.98.134.86 或 域名 </p></li><li><p>关注公众号（已认证的服务号）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHwTKA.png" alt="iHwTKA.png"></p></li><li><p>生成二维码，用户扫描；<br> 将用户信息发送给微信，微信再将数据发送给设置redirect_uri地址(md5值)</p><p><a href="https://imgchr.com/i/iH09rn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH09rn.png" alt="iH09rn.png"></a></p></li><li><p>回调地址：47.98.134.86/callback/</p><p><img src="https://s1.ax1x.com/2018/11/08/iHfnQP.png" alt="iHfnQP.png"></p><ul><li>授权 </li><li>用户md5</li><li>获取wx_id<br>在数据库中更新设置：wx_id </li></ul></li><li><p>发送消息（模板消息）</p><ul><li><p>wx_id </p></li><li><p>access_token（2小时有效期）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHfZRI.png" alt="iHfZRI.png"></p></li></ul></li></ol><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>models.py </p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> hashlib<br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><span class="hljs-params">(models.Model)</span>:</span><br>    username = models.CharField(<span class="hljs-string">"用户名"</span>, max_length=<span class="hljs-number">64</span>, unique=<span class="hljs-literal">True</span>)<br>    password = models.CharField(<span class="hljs-string">"密码"</span>, max_length=<span class="hljs-number">64</span>)<br>    uid = models.CharField(verbose_name=<span class="hljs-string">'个人唯一ID'</span>,max_length=<span class="hljs-number">64</span>, unique=<span class="hljs-literal">True</span>)<br>    wx_id = models.CharField(verbose_name=<span class="hljs-string">"微信ID"</span>, max_length=<span class="hljs-number">128</span>, blank=<span class="hljs-literal">True</span>, null=<span class="hljs-literal">True</span>, db_index=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">save</span><span class="hljs-params">(self, *args, **kwargs)</span>:</span><br>        <span class="hljs-comment"># 创建用户时，为用户自动生成个人唯一ID</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.pk:<br>            m = hashlib.md5()<br>            m.update(self.username.encode(encoding=<span class="hljs-string">"utf-8"</span>))<br>            self.uid = m.hexdigest()<br>        super(UserInfo, self).save(*args, **kwargs)<br></code></pre></div></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">WECHAT_CONFIG = &#123;<br>    <span class="hljs-string">'app_id'</span>: <span class="hljs-string">'wx3d0d44e8d59b5b8c'</span>,<br>    <span class="hljs-string">'appsecret'</span>: <span class="hljs-string">'a4ede68946e9a2e7e36480d23865a64d'</span>,<br>    <span class="hljs-string">'redirect_uri'</span>: <span class="hljs-string">'http://47.106.237.76/callback/'</span>,<br>&#125;<br></code></pre></div></td></tr></table></figure><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> json<br><span class="hljs-keyword">import</span> functools<br><span class="hljs-keyword">import</span> requests<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, redirect, HttpResponse<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><span class="hljs-comment"># 沙箱环境地质：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">(request)</span>:</span><br>    obj = models.UserInfo.objects.get(id=<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">'index.html'</span>,&#123;<span class="hljs-string">'obj'</span>:obj&#125;)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">auth</span><span class="hljs-params">(func)</span>:</span><br><span class="hljs-meta">    @functools.wraps(func)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(request, *args, **kwargs)</span>:</span><br>        user_info = request.session.get(<span class="hljs-string">'user_info'</span>)<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> user_info:<br>            <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">'/login/'</span>)<br>        <span class="hljs-keyword">return</span> func(request, *args, **kwargs)<br><br>    <span class="hljs-keyword">return</span> inner<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">login</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    用户登录<br>    :param request: <br>    :return: <br>    """</span><br>    <span class="hljs-comment"># models.UserInfo.objects.create(username='luffy',password=123)</span><br><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">"POST"</span>:<br>        user = request.POST.get(<span class="hljs-string">'user'</span>)<br>        pwd = request.POST.get(<span class="hljs-string">'pwd'</span>)<br>        obj = models.UserInfo.objects.filter(username=user, password=pwd).first()<br><br>        <span class="hljs-keyword">if</span> obj:<br>            request.session[<span class="hljs-string">'user_info'</span>] = &#123;<span class="hljs-string">'id'</span>: obj.id, <span class="hljs-string">'name'</span>: obj.username, <span class="hljs-string">'uid'</span>: obj.uid&#125;<br>            <span class="hljs-keyword">return</span> redirect(to=<span class="hljs-string">'/bind/'</span>)<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'login.html'</span>)<br><br><br><span class="hljs-meta">@auth</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bind</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    用户登录后，关注公众号，并绑定个人微信（用于以后消息推送）<br>    :param request: <br>    :return: <br>    """</span><br>    <span class="hljs-keyword">return</span> render(request, <span class="hljs-string">'bind.html'</span>)<br><br><br><span class="hljs-meta">@auth</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bind_qcode</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    生成二维码<br>    :param request: <br>    :return: <br>    """</span><br>    ret = &#123;<span class="hljs-string">'code'</span>: <span class="hljs-number">1000</span>&#125;<br>    <span class="hljs-keyword">try</span>:<br>        access_url = <span class="hljs-string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid=&#123;appid&#125;&amp;redirect_uri=&#123;redirect_uri&#125;&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state=&#123;state&#125;#wechat_redirect"</span><br>        access_url = access_url.format(<br>            appid=settings.WECHAT_CONFIG[<span class="hljs-string">"app_id"</span>], <span class="hljs-comment"># 'wx89085e915d351cae',</span><br>            redirect_uri=settings.WECHAT_CONFIG[<span class="hljs-string">"redirect_uri"</span>], <span class="hljs-comment"># 'http://47.93.4.198/test/',</span><br>            state=request.session[<span class="hljs-string">'user_info'</span>][<span class="hljs-string">'uid'</span>] <span class="hljs-comment"># 为当前用户生成MD5值</span><br>        )<br>        ret[<span class="hljs-string">'data'</span>] = access_url<br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>        ret[<span class="hljs-string">'code'</span>] = <span class="hljs-number">1001</span><br>        ret[<span class="hljs-string">'msg'</span>] = str(e)<br><br>    <span class="hljs-keyword">return</span> JsonResponse(ret)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    用户在手机微信上扫码后，微信自动调用该方法。<br>    用于获取扫码用户的唯一ID，以后用于给他推送消息。<br>    :param request: <br>    :return: <br>    """</span><br>    code = request.GET.get(<span class="hljs-string">"code"</span>)<br><br>    <span class="hljs-comment"># 用户md5值</span><br>    state = request.GET.get(<span class="hljs-string">"state"</span>)<br><br>    <span class="hljs-comment"># 获取该用户openId(用户唯一，用于给用户发送消息)</span><br>    res = requests.get(<br>        url=<span class="hljs-string">"https://api.weixin.qq.com/sns/oauth2/access_token"</span>,<br>        params=&#123;<br>            <span class="hljs-string">"appid"</span>: settings.WECHAT_CONFIG[<span class="hljs-string">'app_id'</span>],<br>            <span class="hljs-string">"secret"</span>: settings.WECHAT_CONFIG[<span class="hljs-string">'appsecret'</span>],<br>            <span class="hljs-string">"code"</span>: code,<br>            <span class="hljs-string">"grant_type"</span>: <span class="hljs-string">'authorization_code'</span>,<br>        &#125;<br>    ).json()<br>    <span class="hljs-comment"># 获取的到openid表示用户授权成功</span><br>    openid = res.get(<span class="hljs-string">"openid"</span>)<br>    print(openid)<br>    <span class="hljs-keyword">if</span> openid:<br>        models.UserInfo.objects.filter(uid=state).update(wx_id=openid)<br>        response = <span class="hljs-string">"&lt;h1&gt;授权成功 %s &lt;/h1&gt;"</span> % openid<br>    <span class="hljs-keyword">else</span>:<br>        response = <span class="hljs-string">"&lt;h1&gt;用户扫码之后，手机上的提示&lt;/h1&gt;"</span><br>    <span class="hljs-keyword">return</span> HttpResponse(response)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sendmsg</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_access_token</span><span class="hljs-params">()</span>:</span><br>        <span class="hljs-string">"""<br>        获取微信全局接口的凭证(默认有效期俩个小时)<br>        如果不每天请求次数过多, 通过设置缓存即可<br>        """</span><br>        result = requests.get(<br>            url=<span class="hljs-string">"https://api.weixin.qq.com/cgi-bin/token"</span>,<br>            params=&#123;<br>                <span class="hljs-string">"grant_type"</span>: <span class="hljs-string">"client_credential"</span>,<br>                <span class="hljs-string">"appid"</span>: settings.WECHAT_CONFIG[<span class="hljs-string">'app_id'</span>],<br>                <span class="hljs-string">"secret"</span>: settings.WECHAT_CONFIG[<span class="hljs-string">'appsecret'</span>],<br>            &#125;<br>        ).json()<br>        <span class="hljs-keyword">if</span> result.get(<span class="hljs-string">"access_token"</span>):<br>            access_token = result.get(<span class="hljs-string">'access_token'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            access_token = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">return</span> access_token<br><br>    access_token = get_access_token()<br><br>    openid = models.UserInfo.objects.get(id=<span class="hljs-number">1</span>).wx_id<br>    print(openid)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_custom_msg</span><span class="hljs-params">()</span>:</span><br>        body = &#123;<br>            <span class="hljs-string">"touser"</span>: openid,<br>            <span class="hljs-string">"msgtype"</span>: <span class="hljs-string">"text"</span>,<br>            <span class="hljs-string">"text"</span>: &#123;<br>                <span class="hljs-string">"content"</span>: <span class="hljs-string">'云姐好美呀'</span><br>            &#125;<br>        &#125;<br>        response = requests.post(<br>            url=<span class="hljs-string">"https://api.weixin.qq.com/cgi-bin/message/custom/send"</span>,<br>            params=&#123;<br>                <span class="hljs-string">'access_token'</span>: access_token<br>            &#125;,<br>            data=bytes(json.dumps(body, ensure_ascii=<span class="hljs-literal">False</span>), encoding=<span class="hljs-string">'utf-8'</span>)<br>        )<br>        <span class="hljs-comment"># 这里可根据回执code进行判定是否发送成功(也可以根据code根据错误信息)</span><br>        result = response.json()<br>        <span class="hljs-keyword">return</span> result<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">send_template_msg</span><span class="hljs-params">()</span>:</span><br>        <span class="hljs-string">"""<br>        发送模版消息<br>        """</span><br>        res = requests.post(<br>            url=<span class="hljs-string">"https://api.weixin.qq.com/cgi-bin/message/template/send"</span>,<br>            params=&#123;<br>                <span class="hljs-string">'access_token'</span>: access_token<br>            &#125;,<br>            json=&#123;<br>                <span class="hljs-string">"touser"</span>: openid,<br>                <span class="hljs-string">"template_id"</span>: <span class="hljs-string">'NcN_W_aEIwu-FHyJx8djU99Z70AvwwGcEufXiTzj-NM'</span>,<br>                <span class="hljs-string">"data"</span>: &#123;<br>                    <span class="hljs-string">"first"</span>: &#123;<br>                        <span class="hljs-string">"value"</span>: <span class="hljs-string">"冰姐"</span>,<br>                        <span class="hljs-string">"color"</span>: <span class="hljs-string">"#173177"</span><br>                    &#125;,<br>                    <span class="hljs-string">"keyword1"</span>: &#123;<br>                        <span class="hljs-string">"value"</span>: <span class="hljs-string">"美女"</span>,<br>                        <span class="hljs-string">"color"</span>: <span class="hljs-string">"#173177"</span><br>                    &#125;,<br>                &#125;<br>            &#125;<br>        )<br>        result = res.json()<br>        <span class="hljs-keyword">return</span> result<br>    <span class="hljs-comment"># 在这里编辑要发送的函数中的内容</span><br>    result = send_template_msg()<br><br>    <span class="hljs-keyword">if</span> result.get(<span class="hljs-string">'errcode'</span>) == <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'发送成功'</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'发送失败'</span>)<br></code></pre></div></td></tr></table></figure><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><p>1登陆：</p><p><a href="https://imgchr.com/i/iHwYBq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHwYBq.png" alt="iHwYBq.png"></a></p><p>2客户扫码关注我们的公众号</p><p><a href="https://imgchr.com/i/iHwTKA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHwTKA.png" alt="iHwTKA.png"></a></p><p>为了获得用户的微信ID，我们需要客户再次扫码，向微信授权把ID给我们</p><p><a href="https://imgchr.com/i/iH09rn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH09rn.png" alt="iH09rn.png"></a></p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p><a href="https://github.com/hyyc554/wxbox" target="_blank" rel="noopener">https://github.com/hyyc554/wxbox</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>斐波那契数列</title>
      <link href="2019/09/03/feibonacii/"/>
      <url>2019/09/03/feibonacii/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>输入一个整数 nn ，求斐波那契数列的第 nn 项。</p><p>假定从0开始，第0项为0。(nn&lt;=39)<br><a id="more"></a></p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">输入整数 n=<span class="hljs-number">5</span> <br><br>返回 <span class="hljs-number">5</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Fibonacci</span><span class="hljs-params">(self, n)</span>:</span><br>        <span class="hljs-string">"""<br>        :type n: int<br>        :rtype: int<br>        """</span><br><br>        tempArray = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">if</span> n &gt;= <span class="hljs-number">2</span>:<br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">2</span>, n+<span class="hljs-number">1</span>):<br>                tempArray[i%<span class="hljs-number">2</span>] = tempArray[<span class="hljs-number">0</span>] + tempArray[<span class="hljs-number">1</span>]<br>        <span class="hljs-keyword">return</span> tempArray[n%<span class="hljs-number">2</span>]<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 算法 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>八月杂记</title>
      <link href="2019/08/31/%E5%85%AB%E6%9C%88%E6%9D%82%E8%AE%B0/"/>
      <url>2019/08/31/%E5%85%AB%E6%9C%88%E6%9D%82%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>​    经历了许多个连续加班的晚上，手头的工作终于告一段落。</p><a id="more"></a><p>​    晚上和公司的同事们聚餐，回到家里，看看自己书桌上的书也是乱七八糟的摞在一起。好几本书，最初兴致勃勃的看了一部分，后来忙于工作也没什么时间看书了。久而久之书桌也是一团糟，房间也是有点杂乱了，索性抽时间好好整理了一下房间。</p><p>​    整理完内务，转眼就已经是午夜以后了。想着来更新一下许久未动的博客，顺便也整理一下最近的思绪。</p><p>​    说起来，距离去年的夏天也已经刚好一年。以前经常听别人说毕业后的第一份工作特别重要，自己也是机缘巧合下，来到深圳，成为了一个软件工程师。</p><p>总结一下最近的工作的感悟：</p><ul><li>不要把负面情绪，从工作带回家里。</li><li>没有什么事情是非得熬夜完成的。（熬夜真的不好，但是有时候又需要晚上熬夜来看一些娱乐性的东西来缓解工作上的压力）</li><li>学习工程师的文化，高效、严谨、负责、卓越。</li></ul><p><img src="https://s2.ax1x.com/2019/08/31/mvm2O1.jpg" alt="工作日的天空"></p><p>31日更新一些图</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>18. 重建二叉树</title>
      <link href="2019/08/22/18.%20%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/"/>
      <url>2019/08/22/18.%20%E9%87%8D%E5%BB%BA%E4%BA%8C%E5%8F%89%E6%A0%91/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>输入一棵二叉树前序遍历和中序遍历的结果，请重建该二叉树。<br><a id="more"></a></p><p><strong>注意</strong>:</p><ul><li>二叉树中每个节点的值都互不相同；</li><li>输入的前序遍历和中序遍历一定合法；</li></ul><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">给定：</span><br><span class="hljs-string">前序遍历是：[3,</span> <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">20</span><span class="hljs-string">,</span> <span class="hljs-number">15</span><span class="hljs-string">,</span> <span class="hljs-number">7</span><span class="hljs-string">]</span><br><span class="hljs-string">中序遍历是：[9,</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-number">15</span><span class="hljs-string">,</span> <span class="hljs-number">20</span><span class="hljs-string">,</span> <span class="hljs-number">7</span><span class="hljs-string">]</span><br><br><span class="hljs-string">返回：[3,</span> <span class="hljs-number">9</span><span class="hljs-string">,</span> <span class="hljs-number">20</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">,</span> <span class="hljs-number">15</span><span class="hljs-string">,</span> <span class="hljs-number">7</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">,</span> <span class="hljs-literal">null</span><span class="hljs-string">]</span><br><span class="hljs-string">返回的二叉树如下所示：</span><br>    <span class="hljs-number">3</span><br>   <span class="hljs-string">/</span> <span class="hljs-string">\</span><br>  <span class="hljs-number">9</span>  <span class="hljs-number">20</span><br>    <span class="hljs-string">/</span>  <span class="hljs-string">\</span><br>   <span class="hljs-number">15</span>   <span class="hljs-number">7</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>思路：前序的第一个元素是根结点的值，在中序中找到该值，中序中该值的左边的元素是根结点的左子树，右边是右子树，然后递归的处理左边和右边</p><p>不太理解的话需要配合示意图来看：</p><p><a href="https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/7/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/learn/card/data-structure-binary-tree/2/traverse-a-tree/7/</a></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">buildTree</span><span class="hljs-params">(self, preorder, inorder)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> preorder <span class="hljs-keyword">or</span> <span class="hljs-keyword">not</span> inorder:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">None</span><br><br>        index = inorder.index(preorder[<span class="hljs-number">0</span>])  <span class="hljs-comment"># 找到前序遍历结果中第一位对应在中序遍历结果中的位置</span><br>        left = inorder[<span class="hljs-number">0</span>:index]<br>        right = inorder[index+<span class="hljs-number">1</span>:]<br>        root = TreeNode(preorder[<span class="hljs-number">0</span>])<br>        root.left = self.buildTree(preorder[<span class="hljs-number">1</span>:<span class="hljs-number">1</span>+len(left)], left)<br>        root.right = self.buildTree(preorder[-len(right):], right)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>剪绳子</title>
      <link href="2019/08/21/cat-string/"/>
      <url>2019/08/21/cat-string/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给你一根长度为 nn 绳子，请把绳子剪成 mm 段（mm、nn 都是整数，2≤n≤582≤n≤58 并且 m≥2m≥2）。</p><p>每段的绳子的长度记为k[0]、k[1]、……、k[m]。k[0]k[1] … k[m] 可能的最大乘积是多少？</p><p>例如当绳子的长度是8时，我们把它剪成长度分别为2、3、3的三段，此时得到最大的乘积18。</p><a id="more"></a><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">maxProductAfterCutting</span><span class="hljs-params">(self,length)</span>:</span><br>        <span class="hljs-string">"""<br>        题目解析：<br>        用来找一个剪绳子的方案，使得减绳子之后的每段乘积大于当前绳子总长度<br>        解法：n表示绳子总长度，m表示剪绳子的段数<br>        1.如果绳子总长度&lt;4，那么减绳子之后的乘积小于绳子总长度<br>        2.如果绳子总长度=4，那么可以将绳子减为2段，此时每段乘积和总长度相等<br>        3.如果绳子总长度&gt;=5，那么剪绳子的乘积肯定存在某个值大于绳子总长:<br>            可以证明2(n-2)&gt;n并且3(n-3)&gt;n。<br>            而且3(n-3)&gt;=2(n-2)。<br>            所以我们应该尽可能地多剪长度为3的绳子段，长度为2的绳子最多2段，不要留绳子长度为1的<br><br>        :type length: int<br>        :rtype: int<br>        """</span><br>        <span class="hljs-comment"># 边界判断</span><br>        <span class="hljs-keyword">if</span> length&lt;<span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">0</span><br>        <span class="hljs-keyword">elif</span> length==<span class="hljs-number">2</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">1</span><br>        <span class="hljs-keyword">elif</span> length==<span class="hljs-number">3</span>: <span class="hljs-keyword">return</span> <span class="hljs-number">2</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment">#其他情况，如果总的绳子长度=4，那么效果一样，最大乘积都是4</span><br>            <span class="hljs-comment">#如果绳子长度&gt;=5,那么需要尽可能的多剪成长度为3的子绳子段,然后长度为2的绳子最多2段，不要留绳子长度为1的</span><br>            times_of_three = length //<span class="hljs-number">3</span><br>            spare = length % <span class="hljs-number">3</span><br>            <span class="hljs-keyword">if</span> spare==<span class="hljs-number">1</span>:<br>                times_of_three-=<span class="hljs-number">1</span><br>            times_of_two = spare//<span class="hljs-number">2</span><br>            res = pow(<span class="hljs-number">3</span>,times_of_three)*pow(<span class="hljs-number">2</span>,times_of_two)<br>            <span class="hljs-keyword">return</span> res<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_Solution</span><span class="hljs-params">()</span>:</span><br>    a = Solution()<br>    <span class="hljs-keyword">assert</span> a.maxProductAfterCutting(<span class="hljs-number">8</span>) == <span class="hljs-number">18</span><br>    <span class="hljs-comment"># assert a.maxProductAfterCutting(10) == 18</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19. 二叉树的镜像</title>
      <link href="2019/08/14/mirrir-tree/"/>
      <url>2019/08/14/mirrir-tree/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>输入一个二叉树，将它变换为它的镜像。</p><a id="more"></a><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">输入树：<br>      <span class="hljs-number">8</span><br>     / \<br>    <span class="hljs-number">6</span>  <span class="hljs-number">10</span><br>   / \ / \<br>  <span class="hljs-number">5</span>  <span class="hljs-number">7</span> <span class="hljs-number">9</span> <span class="hljs-number">11</span><br><br> [<span class="hljs-number">8</span>,<span class="hljs-number">6</span>,<span class="hljs-number">10</span>,<span class="hljs-number">5</span>,<span class="hljs-number">7</span>,<span class="hljs-number">9</span>,<span class="hljs-number">11</span>,null,null,null,null,null,null,null,null] <br>输出树：<br>      <span class="hljs-number">8</span><br>     / \<br>    <span class="hljs-number">10</span>  <span class="hljs-number">6</span><br>   / \ / \<br>  <span class="hljs-number">11</span> <span class="hljs-number">9</span> <span class="hljs-number">7</span>  <span class="hljs-number">5</span><br><br> [<span class="hljs-number">8</span>,<span class="hljs-number">10</span>,<span class="hljs-number">6</span>,<span class="hljs-number">11</span>,<span class="hljs-number">9</span>,<span class="hljs-number">7</span>,<span class="hljs-number">5</span>,null,null,null,null,null,null,null,null]<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># class TreeNode:</span><br><span class="hljs-comment">#     def __init__(self, x):</span><br><span class="hljs-comment">#         self.val = x</span><br><span class="hljs-comment">#         self.left = None</span><br><span class="hljs-comment">#         self.right = None</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-comment"># 返回镜像树的根节点</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">Mirror</span><span class="hljs-params">(self, root)</span>:</span><br>        <span class="hljs-comment"># write code here</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> root:<br>            <span class="hljs-keyword">return</span> root<br>        root.left,root.right = root.right,root.left<br>        self.Mirror(root.left)<br>        self.Mirror(root.right)<br>        <span class="hljs-keyword">return</span> root<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RabbitMQ的python操作手册</title>
      <link href="2019/08/04/move/"/>
      <url>2019/08/04/move/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/02/01/k3XCnJ.jpg" alt="MQ"><br><a id="more"></a></p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>在工作中使用<code>Celery</code>也有一段时间了，这里写一点关于Celery延伸出来的一个重要的技术点——消息队列。</p><p><code>Celery - Distributed Task Queue</code>这是Celery官方文档给出的一个定义，这里celery‘被定义为一个分布式的任务队列。Celery和Django配合时的工作模型如下：</p><p><img src="https://s2.ax1x.com/2019/08/04/esUs3T.png" alt="esUs3T.png"></p><p>这里就解释一个任务队列使如何搭配上一个消息队列来进行工作的，接下来我们一起来了解RabbitMQ的方方面面。</p><h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><h4 id="什么是MQ？"><a href="#什么是MQ？" class="headerlink" title="什么是MQ？"></a>什么是MQ？</h4><p>MQ全称为Message Queue, <a href="http://baike.baidu.com/view/262473.htm" target="_blank" rel="noopener">消息队列</a>（MQ）是一种应用程序对应用程序的通信方法。应用程序通过读写出入队列的消息（针对应用程序的数据）来通信，而无需专用连接来链接它们。消 息传递指的是程序之间通过在消息中发送数据进行通信，而不是通过直接调用彼此来通信，直接调用通常是用于诸如<a href="http://baike.baidu.com/view/431455.htm" target="_blank" rel="noopener">远程过程调用</a>的技术。排队指的是应用程序通过 队列来通信。队列的使用除去了接收和发送应用程序同时执行的要求。</p><h4 id="什么是RabbitMQ？"><a href="#什么是RabbitMQ？" class="headerlink" title="什么是RabbitMQ？"></a>什么是RabbitMQ？</h4><p>RabbitMQ是一个在AMQP基础上完整的，可复用的企业消息系统。他遵循Mozilla Public License开源协议</p><p>RabbitMQ是一个消息代理：它接受和转发消息。 您可以将其视为顺丰快递：当您将要发布的消息快件给到顺丰快递手上，您可以确定顺丰以及快递小哥最终会将邮件发送给您的收件人。 在这个类比中，RabbitMQ是一个顺丰快递、快递小哥、丰巢。</p><p>RabbitMQ和顺丰之间的主要区别在于它不处理实体货物信件，而是接受，存储和转发二进制数据——消息。</p><p>RabbitMQ和一般的消息传递使用了一些术语：</p><ul><li>生产（Producing）就是发送（消息）。 发送消息的程序就所谓的生产者（producer ）</li><li>队列（queue ）是RabbitMQ中的邮箱的名称。 虽然消息流经RabbitMQ和您的应用程序，但它们只能存储在队列中。 队列只受主机的内存和磁盘限制的约束，它本质上是一个大的消息缓冲区。 许多生产者可以发送到一个队列的消息，并且许多消费者可以尝试从一个队列接收数据。 这就是我们代表队列的方式：</li><li>消费（Consuming ）与接受（receiving）有类似的意义。 消费者（consumer ）是一个主要等待接收消息的程序：</li></ul><p>请注意，生产者，消费者和代理不必驻留在同一主机上; 实际上在大多数应用中他们没有。 应用程序也可以是生产者和消费者。</p><h2 id="RabbitMQ安装"><a href="#RabbitMQ安装" class="headerlink" title="RabbitMQ安装"></a>RabbitMQ安装</h2><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">安装配置epel源<br>   <span class="hljs-variable">$ </span>rpm -ivh <span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/dl.fedoraproject.org/pub</span><span class="hljs-regexp">/epel/</span><span class="hljs-number">6</span>/i386/epel-release<span class="hljs-number">-6-8</span>.noarch.rpm<br> <br>安装erlang<br>   <span class="hljs-variable">$ </span>yum -y install erlang<br> <br>安装RabbitMQ<br>   <span class="hljs-variable">$ </span>yum -y install rabbitmq-server<br></code></pre></div></td></tr></table></figure><p>注意：service rabbitmq-server start/stop</p><p>安装API</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip install pika<br><span class="hljs-keyword">or</span><br>easy_install pika<br><span class="hljs-keyword">or</span><br>源码<br> <br><span class="hljs-symbol">https:</span>//pypi.python<span class="hljs-meta">.org</span>/pypi/pika<br></code></pre></div></td></tr></table></figure><p>回顾基于Queue实现生产者消费者模型</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><br><span class="hljs-keyword">import</span> queue<br><span class="hljs-keyword">import</span> threading<br>message = queue.Queue(<span class="hljs-number">10</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">producer</span><span class="hljs-params">(i)</span>:</span><br>    <span class="hljs-string">'''厨师,生产包子放入队列'''</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        message.put(i)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">consumer</span><span class="hljs-params">(i)</span>:</span><br>    <span class="hljs-string">'''消费者,从队列中取包子吃'''</span><br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        msg = message.get()<br><br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">12</span>): 厨师的线程包子<br>    t = threading.Thread(target=producer, args=(i,))<br>    t.start()<br><span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">10</span>): 消费者的线程吃包子<br>    t = threading.Thread(target=consumer, args=(i,))<br>    t.start()<br></code></pre></div></td></tr></table></figure><p><strong>对于RabbitMQ来说，生产和消费不再针对内存里的一个Queue对象，而是某台服务器上的RabbitMQ Server实现的消息队列。</strong></p><h2 id="一、最基本的生产者消费者"><a href="#一、最基本的生产者消费者" class="headerlink" title="一、最基本的生产者消费者"></a>一、最基本的生产者消费者</h2><p><strong>1.生产者代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># ######################### 生产者 #########################</span><br><span class="hljs-comment">#链接rabbit服务器（localhost是本机，如果是其他服务器请修改为ip地址）</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#创建一个队列名叫hello</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>)<br><span class="hljs-comment">#exchange -- 它使我们能够确切地指定消息应该到哪个队列去。</span><br><span class="hljs-comment">#向队列插入数值 routing_key是队列名 body是要插入的内容</span><br><br>channel.basic_publish(exchange=<span class="hljs-string">''</span>,<br>                  routing_key=<span class="hljs-string">'hello'</span>,<br>                  body=<span class="hljs-string">'Hello World!'</span>)<br>print(<span class="hljs-string">"开始队列"</span>)<br><span class="hljs-comment">#缓冲区已经flush而且消息已经确认发送到了RabbitMQ中，关闭链接</span><br>connection.close()<br></code></pre></div></td></tr></table></figure><p><strong>2.消费者代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># ########################## 消费者 ##########################</span><br><span class="hljs-comment">#链接rabbit</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#如果生产者没有运行创建队列，那么消费者也许就找不到队列了。为了避免这个问题</span><br><span class="hljs-comment">#所有消费者也创建这个队列</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>)<br><span class="hljs-comment">#接收消息需要使用callback这个函数来接收，他会被pika库来调用</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] Received %r"</span> % body)<br><span class="hljs-comment">#从队列取数据 callback是回调函数 如果拿到数据 那么将执行callback函数</span><br>channel.basic_consume(callback,<br>                      queue=<span class="hljs-string">'hello'</span>,<br>                      no_ack=<span class="hljs-literal">True</span>)<br>print(<span class="hljs-string">' [*] 等待信息. To exit press CTRL+C'</span>)<br><span class="hljs-comment">#永远循环等待数据处理和callback处理的数据</span><br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><h2 id="二、acknowledgment-消息不丢失的方法"><a href="#二、acknowledgment-消息不丢失的方法" class="headerlink" title="二、acknowledgment 消息不丢失的方法"></a>二、acknowledgment 消息不丢失的方法</h2><p>no-ack ＝ False，如果生产者遇到情况(关闭通道,连接关闭或TCP连接丢失))挂掉了，那么，RabbitMQ会重新将该任务添加到队列中。<br><strong>1.生产者不变，但是还是复制上来吧</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment"># ######################### 生产者 #########################</span><br><span class="hljs-comment">#链接rabbit服务器</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#创建一个队列名叫hello</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>)<br><span class="hljs-comment">#向队列插入数值 routing_key是队列名 body是要插入的内容</span><br>channel.basic_publish(exchange=<span class="hljs-string">''</span>,<br>                  routing_key=<span class="hljs-string">'hello'</span>,<br>                  body=<span class="hljs-string">'Hello World!'</span>)<br>print(<span class="hljs-string">"开始队列"</span>)<br>connection.close()<br></code></pre></div></td></tr></table></figure><p><strong>2.消费者</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment">#链接rabbit</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#如果生产者没有运行创建队列，那么消费者创建队列</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>)<br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] Received %r"</span> % body)<br>    <span class="hljs-keyword">import</span> time<br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">'ok'</span><br>    ch.basic_ack(delivery_tag = method.delivery_tag) <span class="hljs-comment">#主要使用此代码</span><br>    <br>channel.basic_consume(callback,<br>                      queue=<span class="hljs-string">'hello'</span>,<br>                      no_ack=<span class="hljs-literal">False</span>)<br><br>print(<span class="hljs-string">' [*] Waiting for messages. To exit press CTRL+C'</span>)<br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><p>当生产者生成一条数据，被消费者接收，消费者中断后如果不超过10秒，连接的时候数据还在。当超过10秒之后，重新链接，数据将消失。消费者等待链接。</p><h2 id="三、durable-消息不丢失-（消息持久化）"><a href="#三、durable-消息不丢失-（消息持久化）" class="headerlink" title="三、durable 消息不丢失 （消息持久化）"></a>三、durable 消息不丢失 （消息持久化）</h2><p>这个 queue_declare 需要在 生产者（producer） 和消费方（consumer) 代码中都进行设置。<br><strong>1.生产者</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-comment">#链接rabbit服务器</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#创建队列，使用durable方法</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>, durable=<span class="hljs-literal">True</span>)<br>                    <span class="hljs-comment">#如果想让队列实现持久化那么加上durable=True</span><br>channel.basic_publish(exchange=<span class="hljs-string">''</span>,<br>                  routing_key=<span class="hljs-string">'hello'</span>,<br>                  body=<span class="hljs-string">'Hello World!'</span>,<br>                  properties=pika.BasicProperties(<br>                      delivery_mode=<span class="hljs-number">2</span>, <br>                  <span class="hljs-comment">#标记我们的消息为持久化的 - 通过设置 delivery_mode 属性为 2</span><br>                  <span class="hljs-comment">#这样必须设置，让消息实现持久化</span><br>                  ))<br><span class="hljs-comment">#这个exchange参数就是这个exchange的名字. 空字符串标识默认的或者匿名的exchange：如果存在routing_key, 消息路由到routing_key指定的队列中。</span><br>print(<span class="hljs-string">" [x] 开始队列'"</span>)<br>connection.close()<br></code></pre></div></td></tr></table></figure><p><strong>2.消费者</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> pika<br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br><span class="hljs-comment">#创建频道</span><br>channel = connection.channel()<br><span class="hljs-comment">#创建队列，使用durable方法</span><br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>, durable=<span class="hljs-literal">True</span>)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] Received %r"</span> % body)<br>    <span class="hljs-keyword">import</span> time<br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">'ok'</span><br>    ch.basic_ack(delivery_tag = method.delivery_tag)<br><br>    channel.basic_consume(callback,<br>                    queue=<span class="hljs-string">'hello'</span>,<br>                    no_ack=<span class="hljs-literal">False</span>)<br><br>    print(<span class="hljs-string">' [*] 等待队列. To exit press CTRL+C'</span>)<br>    channel.start_consuming()<br></code></pre></div></td></tr></table></figure><p>注：标记消息为持久化的并不能完全保证消息不会丢失，尽管告诉RabbitMQ保存消息到磁盘，当RabbitMQ接收到消息还没有保存的时候仍然有一个短暂的时间窗口. RabbitMQ不会对每个消息都执行同步fsync(2) — 可能只是保存到缓存cache还没有写入到磁盘中，这个持久化保证不是很强，但这比我们简单的任务queue要好很多，如果你想很强的保证你可以使用 publisher confirms</p><h2 id="四、消息获取顺序"><a href="#四、消息获取顺序" class="headerlink" title="四、消息获取顺序"></a>四、消息获取顺序</h2><p>默认消息队列里的数据是按照顺序被消费者拿走，例如：消费者1 去队列中获取 奇数 序列的任务，消费者1去队列中获取 偶数 序列的任务。<br>channel.basic_qos(prefetch_count=1) 表示谁来谁取，不再按照奇偶数排列</p><p>1.生产者</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> pika  <br><span class="hljs-keyword">import</span> sys  <br><br>connection = pika.BlockingConnection(pika.ConnectionParameters(  <br>    host=<span class="hljs-string">'localhost'</span>))  <br>channel = connection.channel()  <br><span class="hljs-comment"># 设置队列为持久化的队列  </span><br>channel.queue_declare(queue=<span class="hljs-string">'task_queue'</span>, durable=<span class="hljs-literal">True</span>)<br>message = <span class="hljs-string">' '</span>.join(sys.argv[<span class="hljs-number">1</span>:]) <span class="hljs-keyword">or</span> <span class="hljs-string">"Hello World!"</span>  <br>channel.basic_publish(exchange=<span class="hljs-string">''</span>,  <br>                  routing_key=<span class="hljs-string">'task_queue'</span>,  <br>                  body=message,  <br>                  properties=pika.BasicProperties(  <br>                     delivery_mode = <span class="hljs-number">2</span>, <span class="hljs-comment"># 设置消息为持久化的  </span><br>                  ))  <br>print(<span class="hljs-string">" [x] Sent %r"</span> % message)  <br>connection.close()<br></code></pre></div></td></tr></table></figure><p>2.消费者</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-keyword">import</span> pika<br>connection = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br>channel.queue_declare(queue=<span class="hljs-string">'hello'</span>durable=<span class="hljs-literal">True</span>)  <span class="hljs-comment"># 设置队列持久化 </span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] Received %r"</span> % body)<br>    <span class="hljs-keyword">import</span> time<br>    time.sleep(<span class="hljs-number">10</span>)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">'ok'</span><br>    ch.basic_ack(delivery_tag = method.delivery_tag)<br><span class="hljs-comment">#表示谁来谁取，不再按照奇偶数排列</span><br>channel.basic_qos(prefetch_count=<span class="hljs-number">1</span>)<span class="hljs-comment"># 消息未处理完前不要发送信息的消息  </span><br><br>channel.basic_consume(callback,<br>                  queue=<span class="hljs-string">'hello'</span>,<br>                  no_ack=<span class="hljs-literal">False</span>)<br><br>print(<span class="hljs-string">' [*] Waiting for messages. To exit press CTRL+C'</span>)<br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><h2 id="五、消息发布订阅"><a href="#五、消息发布订阅" class="headerlink" title="五、消息发布订阅"></a>五、消息发布订阅</h2><p>发布订阅和简单的消息队列区别在于，发布订阅会将消息发送给所有的订阅者，而消息队列中的数据被消费一次便消失。所以，RabbitMQ实现发布和订阅时，会为每一个订阅者创建一个队列，而发布者发布消息时，会将消息放置在所有相关队列中。</p><h5 id="exchange-type-fanout"><a href="#exchange-type-fanout" class="headerlink" title="exchange type = fanout"></a>exchange type = fanout</h5><p>1.发布者</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">#!/usr/bin/env python</span><br>import pika<br>import sys<br><span class="hljs-built_in"><br>connection </span>= pika.BlockingConnection(pika.ConnectionParameters(<br>    <span class="hljs-attribute">host</span>=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br><br>channel.exchange_declare(<span class="hljs-attribute">exchange</span>=<span class="hljs-string">'logs'</span>,<br>                     <span class="hljs-attribute">type</span>=<span class="hljs-string">'fanout'</span>)<br><br>message = <span class="hljs-string">' '</span>.join(sys.argv[1:]) <span class="hljs-keyword">or</span> <span class="hljs-string">"info: Hello World!"</span><br>channel.basic_publish(<span class="hljs-attribute">exchange</span>=<span class="hljs-string">'logs'</span>,<br>                  <span class="hljs-attribute">routing_key</span>=<span class="hljs-string">''</span>,<br>                  <span class="hljs-attribute">body</span>=message)<br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">" [x] Sent %r"</span> % message)<br>connection.close()<br></code></pre></div></td></tr></table></figure><p>2.订阅者</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-keyword">import</span> pika<br><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<br>    host=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">'logs'</span>,<br>                     type=<span class="hljs-string">'fanout'</span>)<br><br>result = channel.queue_declare(exclusive=<span class="hljs-literal">True</span>) <span class="hljs-comment">#队列断开后自动删除临时队列  </span><br>queue_name = result.method.queue            <span class="hljs-comment"># 队列名采用服务端分配的临时队列  </span><br><br>channel.queue_bind(exchange=<span class="hljs-string">'logs'</span>,<br>               queue=queue_name)<br><br>print(<span class="hljs-string">' [*] Waiting for logs. To exit press CTRL+C'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] %r"</span> % body)<br><br>channel.basic_consume(callback,<br>                  queue=queue_name,<br>                  no_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><h2 id="六、关键字发送"><a href="#六、关键字发送" class="headerlink" title="六、关键字发送"></a>六、关键字发送</h2><p>exchange type = direct</p><p>之前事例，发送消息时明确指定某个队列并向其中发送消息，RabbitMQ还支持根据关键字发送，即：队列绑定关键字，发送者将数据根据关键字发送到消息exchange，exchange根据 关键字 判定应该将数据发送至指定队列。</p><p>1.生产者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-comment">#######################生产者#################</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> sys<br>connection = pika.BlockingConnection(pika.ConnectionParameters(<br>        host=<span class="hljs-string">'localhost'</span>))  <br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">'direct_logs'</span>,<br>                     type=<span class="hljs-string">'direct'</span>)<br><br>severity = sys.argv[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> len(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'info'</span><br>message = <span class="hljs-string">' '</span>.join(sys.argv[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> <span class="hljs-string">'Hello World!'</span><br>channel.basic_publish(exchange=<span class="hljs-string">'direct_logs'</span>,<br>                      routing_key=severity,<br>                      body=message)<br>print(<span class="hljs-string">" [x] Sent %r:%r"</span> % (severity, message))<br>connection.close()<br></code></pre></div></td></tr></table></figure><p>2.消费者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment">############消费者####</span><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<br>        host=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br>channel.exchange_declare(exchange=<span class="hljs-string">'direct_logs'</span>,<br>                         type=<span class="hljs-string">'direct'</span>)<br>result = channel.queue_declare(exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br>severities = sys.argv[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> severities:<br>    sys.stderr.write(<span class="hljs-string">"Usage: %s [info] [warning] [error]\n"</span> % sys.argv[<span class="hljs-number">0</span>])<br>    sys.exit(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">for</span> severity <span class="hljs-keyword">in</span> severities:<br>    channel.queue_bind(exchange=<span class="hljs-string">'direct_logs'</span>,<br>                       queue=queue_name,<br>                       routing_key=severity)<br><br>print(<span class="hljs-string">' [*] Waiting for logs. To exit press CTRL+C'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] %r:%r"</span> % (method.routing_key, body))<br><br>channel.basic_consume(callback,<br>                      queue=queue_name,<br>                      no_ack=<span class="hljs-literal">True</span>)<br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><h2 id="七、模糊匹配"><a href="#七、模糊匹配" class="headerlink" title="七、模糊匹配"></a>七、模糊匹配</h2><p>exchange type = topic</p><p>在topic类型下，可以让队列绑定几个模糊的关键字，之后发送者将数据发送到exchange，exchange将传入”路由值“和 ”关键字“进行匹配，匹配成功，则将数据发送到指定队列。</p><figure class="highlight vala"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta"># 表示可以匹配 0 个 或 多个 单词</span><br></code></pre></div></td></tr></table></figure><ul><li><p>表示只能匹配 一个 单词</p><p>发送者路由值 队列中</p><p>old.boy.python old.* – 不匹配</p><p>old.boy.python old.# – 匹配</p></li></ul><p>1.消费者</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> sys<br><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<br>        host=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">'topic_logs'</span>,<br>                         type=<span class="hljs-string">'topic'</span>)<br><br>result = channel.queue_declare(exclusive=<span class="hljs-literal">True</span>)<br>queue_name = result.method.queue<br><br>binding_keys = sys.argv[<span class="hljs-number">1</span>:]<br><span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> binding_keys:<br>    sys.stderr.write(<span class="hljs-string">"Usage: %s [binding_key]...\n"</span> % sys.argv[<span class="hljs-number">0</span>])<br>    sys.exit(<span class="hljs-number">1</span>)<br><br><span class="hljs-keyword">for</span> binding_key <span class="hljs-keyword">in</span> binding_keys:<br>    channel.queue_bind(exchange=<span class="hljs-string">'topic_logs'</span>,<br>                       queue=queue_name,<br>                       routing_key=binding_key)<br><br>print(<span class="hljs-string">' [*] Waiting for logs. To exit press CTRL+C'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties, body)</span>:</span><br>    print(<span class="hljs-string">" [x] %r:%r"</span> % (method.routing_key, body))<br><br>channel.basic_consume(callback,<br>                      queue=queue_name,<br>                      no_ack=<span class="hljs-literal">True</span>)<br><br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure><p>2.生产者</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> sys<br><br>connection = pika.BlockingConnection(pika.ConnectionParameters(<br>        host=<span class="hljs-string">'localhost'</span>))<br>channel = connection.channel()<br><br>channel.exchange_declare(exchange=<span class="hljs-string">'topic_logs'</span>,<br>                        type=<span class="hljs-string">'topic'</span>)<br><br>routing_key = sys.argv[<span class="hljs-number">1</span>] <span class="hljs-keyword">if</span> len(sys.argv) &gt; <span class="hljs-number">1</span> <span class="hljs-keyword">else</span> <span class="hljs-string">'anonymous.info'</span><br>message = <span class="hljs-string">' '</span>.join(sys.argv[<span class="hljs-number">2</span>:]) <span class="hljs-keyword">or</span> <span class="hljs-string">'Hello World!'</span><br>channel.basic_publish(exchange=<span class="hljs-string">'topic_logs'</span>,<br>                      routing_key=routing_key,<br>                      body=message) <br>print(<span class="hljs-string">" [x] Sent %r:%r"</span> % (routing_key, message))<br>connection.close()<br></code></pre></div></td></tr></table></figure><hr><p>更多内容：以下参考：<br><a href="http://blog.csdn.net/songfreeman/article/details/50945025" target="_blank" rel="noopener">http://blog.csdn.net/songfreeman/article/details/50945025</a></p><h3 id="八、work-queue"><a href="#八、work-queue" class="headerlink" title="八、work queue"></a>八、work queue</h3><p>1.循环调度(Round-robin dispatching)</p><p>使用多个消费者来接收并处理消息<br>默认，RabbitMQ将循环的发送每个消息到下一个Consumer , 平均每个Consumer都会收到同样数量的消息。 这种分发消息的方式成为 循环调度（round-robin)</p><ul><li><p>生产者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-keyword">import</span> pika<br><span class="hljs-keyword">import</span> sys<br><span class="hljs-comment">#链接</span><br>connec = pika.BlockingConnection(pika.ConnectionParameters(host=<span class="hljs-string">'localhost'</span>))<br>channel = connec.channel()<br><span class="hljs-comment">#创建队列</span><br>channel.queue_declare(queue=<span class="hljs-string">'worker'</span>)<br><span class="hljs-comment">#插入数据</span><br>message = <span class="hljs-string">' '</span>.join(sys.argv[<span class="hljs-number">1</span>:]) <span class="hljs-keyword">or</span> <span class="hljs-string">"Hello World"</span><br>channel.basic_publish(exchange=<span class="hljs-string">''</span>,<br>                      routing_key=<span class="hljs-string">'worker'</span>,<br>                      body=message,<br>                      properties=pika.BasicProperties(delivery_mode = <span class="hljs-number">2</span>,)<br>                      )<br>print(<span class="hljs-string">" [x] Send %r "</span> % message)<br></code></pre></div></td></tr></table></figure></li><li><p>消费者：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment">#coding:utf8</span><br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">import</span> pika<br>  <br>connect = pika.BlockingConnection(pika.ConnectionParameters (host=<span class="hljs-string">'localhost'</span>))<br>channel = connect.channel()<br>  <br>channel.queue_declare(<span class="hljs-string">'worker'</span>)<br>  <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">callback</span><span class="hljs-params">(ch, method, properties,body)</span>:</span><br>    print(<span class="hljs-string">" [x] Received %r"</span> % body)<br>    time.sleep(body.count(<span class="hljs-string">b'.'</span>))<br>    print(<span class="hljs-string">" [x] Done"</span>)<br>ch.basic_ack(delivery_tag = method.delivery_tag)<br>  <br>channel.basic_consume(callback,<br>                  queue=<span class="hljs-string">'worker'</span>,<br>                  )<br>channel.start_consuming()<br></code></pre></div></td></tr></table></figure></li></ul><p>执行的时候两个消费者等待接收消息，<br>第一次生产者产生消息的时候被消费者1接收<br>第二次生产者产生消息的时候被消费者2接收</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>162. 寻找峰值</title>
      <link href="2019/07/31/162%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2019/07/31/162%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>峰值元素是指其值大于左右相邻值的元素。</p><p>给定一个输入数组 <code>nums</code>，其中 <code>nums[i] ≠ nums[i+1]</code>，找到峰值元素并返回其索引。</p><p>数组可能包含多个峰值，在这种情况下，返回任何一个峰值所在位置即可。</p><p>你可以假设 <code>nums[-1] = nums[n] = -∞</code>。</p><a id="more"></a><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">输入: nums = [1,2,3,1]</span><br><span class="hljs-section">输出: 2</span><br><span class="hljs-section">解释: 3 是峰值元素，你的函数应该返回其索引 2。</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">输入:</span> <span class="hljs-string">nums</span> <span class="hljs-string">=</span> <span class="hljs-string">[1,2,1,3,5,6,4]</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">1</span> <span class="hljs-string">或</span> <span class="hljs-number">5</span> <br><span class="hljs-string">解释:</span> <span class="hljs-string">你的函数可以返回索引</span> <span class="hljs-number">1</span><span class="hljs-string">，其峰值元素为</span> <span class="hljs-number">2</span><span class="hljs-string">；</span><br>     <span class="hljs-string">或者返回索引</span> <span class="hljs-number">5</span><span class="hljs-string">，</span> <span class="hljs-string">其峰值元素为</span> <span class="hljs-number">6</span><span class="hljs-string">。</span><br></code></pre></div></td></tr></table></figure><p><strong>说明:</strong></p><p>你的解法应该是 <em>O</em>(<em>logN</em>) 时间复杂度的。</p><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findPeakElement</span><span class="hljs-params">(self, nums)</span>:</span><br>        left = <span class="hljs-number">0</span><br>        right = len(nums) - <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># handle condition 3</span><br>        <span class="hljs-keyword">while</span> left &lt; right - <span class="hljs-number">1</span>:<br>            mid = (left + right) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] &gt; nums[mid + <span class="hljs-number">1</span>] <span class="hljs-keyword">and</span> nums[mid] &gt; nums[mid - <span class="hljs-number">1</span>]:<br>                <span class="hljs-keyword">return</span> mid<br><br>            <span class="hljs-keyword">if</span> nums[mid] &lt; nums[mid + <span class="hljs-number">1</span>]:<br>                left = mid + <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                right = mid - <span class="hljs-number">1</span><br><br>        <span class="hljs-comment"># handle condition 1 and 2</span><br>        <span class="hljs-keyword">return</span> left <span class="hljs-keyword">if</span> nums[left] &gt;= nums[right] <span class="hljs-keyword">else</span> right<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">findPeakElement2</span><span class="hljs-params">(self, nums)</span>:</span><br>        l, r = <span class="hljs-number">0</span>, len(nums) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> l &lt; r:<br>            mid = l + (r - l) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> nums[mid] &gt; nums[mid + <span class="hljs-number">1</span>]:<br>                r = mid<br>            <span class="hljs-keyword">else</span>:<br>                l = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> l<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    a = Solution()<br>    b = [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">11</span>, <span class="hljs-number">98</span>, <span class="hljs-number">23</span>, <span class="hljs-number">48</span>, <span class="hljs-number">10</span>, <span class="hljs-number">11</span>, <span class="hljs-number">12</span>, <span class="hljs-number">13</span>, <span class="hljs-number">14</span>]<br>    c = a.findPeakElement2(b)<br>    print(c)<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>布隆过滤器在海量数据去重验证中应用</title>
      <link href="2019/06/23/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/"/>
      <url>2019/06/23/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8/</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>今天一个技术群里的小伙伴提了这样一个问题：</p><blockquote><p>你爬虫的时候假如有海量的url，怎么保证不重复？</p></blockquote><p>他说是之前在面试中遇到了这样的问题，大家第一时间想到的都差不多，用集合这种数据结构不久可以轻松的解决这个问题吗？<br><a id="more"></a></p><p>然而事情似乎没有这么简单，因为及时是存在Redis中，在<code>海量数据</code>的前提下，直接使用set作为数据存储来判断是否出现过，成本似乎比较高（内存条还是比较贵的。。。）</p><h3 id="面试结束级方案——从数据库中取"><a href="#面试结束级方案——从数据库中取" class="headerlink" title="面试结束级方案——从数据库中取"></a>面试结束级方案——从数据库中取</h3><p>爬虫每采集过一个 URL，就把这个 URL 存入数据库中，每次一个新的 URL 过来就到数据库查询下是否访问过。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">select</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">from</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">where</span> <span class="hljs-keyword">url</span> = <span class="hljs-string">'https://jaychen.cc'</span><br></code></pre></div></td></tr></table></figure><p>但是随着爬虫爬过的 URL 越来越多，每次请求前都要访问数据库一次，并且对于这种字符串的 SQL 查询效率并不高。</p><h3 id="新手级方案——利用redis的set数据结构"><a href="#新手级方案——利用redis的set数据结构" class="headerlink" title="新手级方案——利用redis的set数据结构"></a>新手级方案——利用redis的set数据结构</h3><p>Redis 的 set 结构也可以满足这个需求，并且性能优于数据库，时间复杂度是O(1)。似乎一切都很美好，甚至还表现出了你对redis还是有一些了解的。但是 Redis 也存在一个问题：耗费过多的内存。</p><p>当这些问题中的<code>海量</code>，其实已经提示了，你必须想好如何应对这样的大数据。如果面试官提出了这样的问题，他显然不希望你只考虑到了，时间复杂度。</p><h3 id="专业级方案——利用布隆过滤器"><a href="#专业级方案——利用布隆过滤器" class="headerlink" title="专业级方案——利用布隆过滤器"></a>专业级方案——利用布隆过滤器</h3><p><img src="https://s2.ax1x.com/2019/05/12/Ehgo59.jpg" alt="Ehgo59.jpg"></p><p>OK，不闹了，不是上面这个布隆。</p><p>我们先看维基百科给出的解释</p><blockquote><p><strong>布隆过滤器</strong>（英语：Bloom Filter）是1970年由布隆提出的。它实际上是一个很长的<a href="https://zh.wikipedia.org/wiki/%E4%BA%8C%E8%BF%9B%E5%88%B6" target="_blank" rel="noopener">二进制</a>向量和一系列随机<a href="https://zh.wikipedia.org/wiki/%E6%98%A0%E5%B0%84" target="_blank" rel="noopener">映射函数</a>。布隆过滤器可以用于检索一个元素是否在一个集合中。它的优点是空间效率和查询时间都远远超过一般的算法，缺点是有一定的误识别率和删除困难。</p><h2 id="基本概念"><a href="#基本概念" class="headerlink" title="基本概念"></a>基本概念</h2><p>如果想判断一个元素是不是在一个集合里，一般想到的是将集合中所有元素保存起来，然后通过比较确定。<a href="https://zh.wikipedia.org/wiki/%E9%93%BE%E8%A1%A8" target="_blank" rel="noopener">链表</a>、<a href="https://zh.wikipedia.org/wiki/%E6%A0%91_(%E6%95%B0%E6%8D%AE%E7%BB%93%E6%9E%84" target="_blank" rel="noopener">树</a>)、<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E8%A1%A8" target="_blank" rel="noopener">散列表</a>（又叫哈希表，Hash table）等等数据结构都是这种思路。但是随着集合中元素的增加，我们需要的存储空间越来越大。同时检索速度也越来越慢，上述三种结构的检索时间复杂度分别为 O(n),O(log n),O(1)。</p><p>布隆过滤器的原理是，当一个元素被加入集合时，通过K个<a href="https://zh.wikipedia.org/wiki/%E6%95%A3%E5%88%97%E5%87%BD%E6%95%B0" target="_blank" rel="noopener">散列函数</a>将这个元素映射成一个位<a href="https://zh.wikipedia.org/wiki/%E6%95%B0%E7%BB%84" target="_blank" rel="noopener">数组</a>中的K个点，把它们置为1。检索时，我们只要看看这些点是不是都是1就（大约）知道集合中有没有它了：如果这些点有任何一个0，则被检元素一定不在；如果都是1，则被检元素很可能在。这就是布隆过滤器的基本思想。</p><h2 id="优点"><a href="#优点" class="headerlink" title="优点"></a>优点</h2><p>相比于其它的数据结构，布隆过滤器在空间和时间方面都有巨大的优势。布隆过滤器存储空间和插入/查询时间都是常数O(k)。另外，散列函数相互之间没有关系，方便由硬件并行实现。布隆过滤器不需要存储元素本身，在某些对保密要求非常严格的场合有优势。</p><p>布隆过滤器可以表示全集，其它任何数据结构都不能；</p><p>k和m相同，使用同一组散列函数的两个布隆过滤器的交并<a href="https://zh.wikipedia.org/wiki/Wikipedia:%E5%88%97%E6%98%8E%E6%9D%A5%E6%BA%90" target="_blank" rel="noopener">[来源请求]</a>运算可以使用位操作进行。</p><h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><p>但是布隆过滤器的缺点和优点一样明显。误算率是其中之一。随着存入的元素数量增加，误算率随之增加。但是如果元素数量太少，则使用散列表足矣。</p><p>另外，一般情况下不能从布隆过滤器中删除元素。我们很容易想到把位数组变成整数数组，每插入一个元素相应的计数器加1, 这样删除元素时将计数器减掉就可以了。然而要保证安全地删除元素并非如此简单。首先我们必须保证删除的元素的确在布隆过滤器里面。这一点单凭这个过滤器是无法保证的。另外计数器回绕也会造成问题。</p><p>在降低误算率方面，有不少工作，使得出现了很多布隆过滤器的变种。</p></blockquote><p>上面的专业解释看不懂？OK，下面有通俗的解释。</p><h3 id="布隆过滤器的数据结构"><a href="#布隆过滤器的数据结构" class="headerlink" title="布隆过滤器的数据结构"></a>布隆过滤器的数据结构</h3><p>布隆过滤器本质是一个<strong>位数组</strong>，位数组就是数组的每个元素都只占用 1 bit 。每个元素只能是 0 或者 1。这样申请一个 10000 个元素的位数组只占用 10000 / 8 = 1250 B 的空间。布隆过滤器除了一个位数组，还有 K 个哈希函数。当一个元素加入布隆过滤器中的时候，会进行如下操作：</p><ul><li>使用  K 个哈希函数对元素值进行 K 次计算，得到 K 个哈希值。</li><li>根据得到的哈希值，在位数组中把对应下标的值置为 1。</li></ul><p>假设布隆过滤器有 3 个哈希函数：f1, f2, f3 和一个位数组 <code>arr</code>。现在要把 <code>https://jaychen.cc</code> 插入布隆过滤器中：</p><ul><li>对值进行三次哈希计算，得到三个值 n1, n2, n3。</li><li>把位数组中三个元素 arr[n1], arr[n2], arr[3] 置为 1。</li></ul><p>当要判断一个值是否在布隆过滤器中，对元素再次进行哈希计算，得到值之后判断位数组中的每个元素是否都为 1，如果值都为 1，那么说明这个值在布隆过滤器中，如果存在一个值不为 1，说明该元素不在布隆过滤器中。</p><h3 id="布隆过滤器的工作流程"><a href="#布隆过滤器的工作流程" class="headerlink" title="布隆过滤器的工作流程"></a>布隆过滤器的工作流程</h3><p>布隆过滤器是一个 bit 向量或者说 bit 数组，长这样：</p><p><img src="https://s2.ax1x.com/2019/05/12/Ehqr9K.jpg" alt="Ehqr9K.jpg"></p><p>如果我们要映射一个值到布隆过滤器中，我们需要使用<strong>多个不同的哈希函数</strong>生成<strong>多个哈希值，</strong>并对每个生成的哈希值指向的 bit 位置 1，例如针对值 “baidu” 和三个不同的哈希函数分别生成了哈希值 1、4、7，则上图转变为：</p><p><img src="https://s2.ax1x.com/2019/05/12/Ehqs1O.jpg" alt="Ehqs1O.jpg"></p><p>Ok，我们现在再存一个值 “tencent”，如果哈希函数返回 3、4、8 的话，图继续变为：</p><p><img src="https://s2.ax1x.com/2019/05/12/EhqBh6.jpg" alt="EhqBh6.jpg"></p><p>值得注意的是，4 这个 bit 位由于两个值的哈希函数都返回了这个 bit 位，因此它被覆盖了。现在我们如果想查询 “dianping” 这个值是否存在，哈希函数返回了 1、5、8三个值，结果我们发现 5 这个 bit 位上的值为 0，<strong>说明没有任何一个值映射到这个 bit 位上</strong>，因此我们可以很确定地说 “dianping” 这个值不存在。而当我们需要查询 “baidu” 这个值是否存在的话，那么哈希函数必然会返回 1、4、7，然后我们检查发现这三个 bit 位上的值均为 1，那么我们可以说 “baidu” <strong>存在了么？答案是不可以，只能是 “baidu” 这个值可能存在。</strong></p><p>这是为什么呢？答案跟简单，因为随着增加的值越来越多，被置为 1 的 bit 位也会越来越多，这样某个值 “taobao” 即使没有被存储过，但是万一哈希函数返回的三个 bit 位都被其他值置位了 1 ，那么程序还是会判断 “taobao” 这个值存在。</p><h3 id="布隆过滤器的优缺点"><a href="#布隆过滤器的优缺点" class="headerlink" title="布隆过滤器的优缺点"></a>布隆过滤器的优缺点</h3><p>看了上面的说明，必然会提出一个问题：当插入的元素原来越多，位数组中被置为 1 的位置就越多，当一个不在布隆过滤器中的元素，经过哈希计算之后，得到的值在位数组中查询，有可能这些位置也都被置为 1。这样一个不存在布隆过滤器中的也有可能被误判成在布隆过滤器中。但是如果布隆过滤器判断说一个元素不在布隆过滤器中，那么这个值就一定不在布隆过滤器中。简单来说：</p><ul><li>布隆过滤器说某个元素在，可能会被误判。</li><li>布隆过滤器说某个元素不在，那么一定不在。</li></ul><p>这个布隆过滤器的缺陷放到上面爬虫的需求中，可能存在某些没有访问过的 URL 可能会被误判为访问过，但是如果是访问过的 URL 一定不会被误判为没访问过。</p><h2 id="Redis-中的布隆过滤器"><a href="#Redis-中的布隆过滤器" class="headerlink" title="Redis 中的布隆过滤器"></a>Redis 中的布隆过滤器</h2><p>redis 在 4.0 的版本中加入了 module 功能，布隆过滤器可以通过 module 的形式添加到 redis 中，所以使用 redis 4.0 以上的版本可以通过加载 <a href="https://link.juejin.im?target=https%3A%2F%2Fgithub.com%2FRedisLabsModules%2Frebloom" target="_blank" rel="noopener">module</a> 来使用 redis 中的布隆过滤器。但是这不是最简单的方式，使用 docker 可以直接在 redis 中体验布隆过滤器。</p><figure class="highlight applescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">&gt; docker <span class="hljs-built_in">run</span> -d -p <span class="hljs-number">6379</span>:<span class="hljs-number">6379</span> <span class="hljs-comment">--name bloomfilter redislabs/rebloom</span><br>&gt; docker exec -<span class="hljs-keyword">it</span> bloomfilter redis-cli<br>复制代码<br></code></pre></div></td></tr></table></figure><p>redis 布隆过滤器主要就两个命令：</p><ul><li><code>bf.add</code> 添加元素到布隆过滤器中：<code>bf.add urls https://jaychen.cc</code>。</li><li><code>bf.exists</code> 判断某个元素是否在过滤器中：<code>bf.exists urls https://jaychen.cc</code>。</li></ul><p>上面说过布隆过滤器存在误判的情况，在 redis 中有两个值决定布隆过滤器的准确率：</p><ul><li><code>error_rate</code>：允许布隆过滤器的错误率，这个值越低过滤器的位数组的大小越大，占用空间也就越大。</li><li><code>initial_size</code>：布隆过滤器可以储存的元素个数，当实际存储的元素个数超过这个值之后，过滤器的准确率会下降。</li></ul><p>redis 中有一个命令可以来设置这两个值：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">bf</span><span class="hljs-selector-class">.reserve</span> <span class="hljs-selector-tag">urls</span> 0<span class="hljs-selector-class">.01</span> 100<br>复制代码<br></code></pre></div></td></tr></table></figure><p>三个参数的含义：</p><ul><li>第一个值是过滤器的名字。</li><li>第二个值为 <code>error_rate</code> 的值。</li><li>第三个值为 <code>initial_size</code> 的值。</li></ul><p>使用这个命令要注意一点：<strong>执行这个命令之前过滤器的名字应该不存在，如果执行之前就存在会报错：(error) ERR item exists</strong></p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>jaychen：<a href="https://juejin.im/post/5bc7446e5188255c791b3360" target="_blank" rel="noopener">https://juejin.im/post/5bc7446e5188255c791b3360</a></p><p><a href="https://www.zhihu.com/people/EasonChen_7" target="_blank" rel="noopener">Young Chen</a>：<a href="https://zhuanlan.zhihu.com/p/43263751" target="_blank" rel="noopener">https://zhuanlan.zhihu.com/p/43263751</a></p><p>维基百科：<a href="https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/%E5%B8%83%E9%9A%86%E8%BF%87%E6%BB%A4%E5%99%A8</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>15. 二维数组中的查找</title>
      <link href="2019/06/01/15.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/"/>
      <url>2019/06/01/15.%20%E4%BA%8C%E7%BB%B4%E6%95%B0%E7%BB%84%E4%B8%AD%E7%9A%84%E6%9F%A5%E6%89%BE/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>在一个二维数组中，每一行都按照从左到右递增的顺序排序，每一列都按照从上到下递增的顺序排序。</p><p>请完成一个函数，输入这样的一个二维数组和一个整数，判断数组中是否含有该整数。<br><a id="more"></a></p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">输入数组：<br><br>[<br>  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">8</span>,<span class="hljs-number">9</span>]，<br>  [<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">9</span>,<span class="hljs-number">12</span>]，<br>  [<span class="hljs-number">4</span>,<span class="hljs-number">7</span>,<span class="hljs-number">10</span>,<span class="hljs-number">13</span>]，<br>  [<span class="hljs-number">6</span>,<span class="hljs-number">8</span>,<span class="hljs-number">11</span>,<span class="hljs-number">15</span>]<br>]<br><br>如果输入查找数值为<span class="hljs-number">7</span>，则返回true，<br><br>如果输入查找数值为<span class="hljs-number">5</span>，则返回false。<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>利用数组的特点，从第一行开始，我们每次让数组的每行的最后一个和目标值进行比较。具体算法如下：</p><ol><li>行序列 i 初始化为0，列序列 j 初始化为数组的列数；</li><li>写一个while循环判断： array[i][j] 和 target 的大小关系：</li></ol><ul><li><code>array[i][j] &lt; target</code>， 说明这一行的数都比较目标值小，则意味着行序列需要增加；</li><li><code>array[i][j] &gt; target</code>， 说明目标值可能就在这行，我们让列序列减小；</li><li><code>array[i][j] = target</code>， 那就说明找到了，返回True就好了</li></ul><ol start="3"><li>如果while循环都走完了，则只能说明这个数组中没有这个数，返回False</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">searchArray</span><span class="hljs-params">(self, array, target)</span>:</span><br>        <span class="hljs-string">"""<br>        :type array: List[List[int]]<br>        :type target: int<br>        :rtype: bool<br>        """</span><br>        <br>        len_line = len(array) - <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> len_line &lt;<span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br>        len_column = len(array[<span class="hljs-number">0</span>])<span class="hljs-number">-1</span><br>        i = <span class="hljs-number">0</span><br>        j = len_column<br>        <span class="hljs-keyword">while</span> i &lt;= len_line <span class="hljs-keyword">and</span> j &gt;= <span class="hljs-number">0</span>:<br>            <span class="hljs-keyword">if</span> array[i][j] &lt; target:<br>                i += <span class="hljs-number">1</span><br>            <span class="hljs-keyword">elif</span> array[i][j] &gt; target:<br>                j -= <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Centos7环境 Mongodb 的安装及远程连接</title>
      <link href="2019/05/05/Centos7%E7%8E%AF%E5%A2%83-Mongodb-%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>2019/05/05/Centos7%E7%8E%AF%E5%A2%83-Mongodb-%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>此流程仅本人测试，没有报错。折腾了一会，出了解决不了的BUG还是卸载重装比较方便。</p><a id="more"></a><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>① 把Mongo的安装配置添加的yum中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">vi /etc/yum.repos.d/mongodb-org-4.0.repo<br></code></pre></div></td></tr></table></figure><p>把下面配置复制到文件中</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">[mongodb-org-4.0]<br>name=MongoDB Repository<br>baseurl=https://repo.mongodb.org/yum/redhat/<span class="hljs-variable">$releasever</span>/mongodb-org/4.0/x86_64/<br>gpgcheck=1<br>enabled=1<br>gpgkey=https://www.mongodb.org/static/pgp/server-4.0.asc<br></code></pre></div></td></tr></table></figure><p>② 运行安装命令</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo yum install -y mongodb-org<br></code></pre></div></td></tr></table></figure><p>③ 设置数据储存路径<br>默认下mongo的储存路径是 /data/db ，如果此时系统中没有这个文件，是不会启动成功的。所以要手动穿件这个文件夹</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mkdir -p /data/db<br></code></pre></div></td></tr></table></figure><p>④ 启动Mongo</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">sudo service mongod start<br></code></pre></div></td></tr></table></figure><p>⑤ 连接本地的Mongo</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">mongo<br></code></pre></div></td></tr></table></figure><p>此时Mongo的安装已经完成，上面日志中有警告啥的可以通过配置解决，但不影响使用。</p><p>参考资料：<a href="https://docs.mongodb.com/master/mongo/" target="_blank" rel="noopener">https://docs.mongodb.com/master/mongo/</a></p><h2 id="二、Mongo的远程连接"><a href="#二、Mongo的远程连接" class="headerlink" title="二、Mongo的远程连接"></a>二、Mongo的远程连接</h2><p>注意：Mongo的远程连接需要打开权限控制<br>本教程是不过多涉及权限问题，权限详情可参考：<br><a href="http://www.cnblogs.com/hanyinglong/archive/2016/07/25/5704320.html" target="_blank" rel="noopener">http://www.cnblogs.com/hanyinglong/archive/2016/07/25/5704320.html</a></p><p>① 添加新的用户<br>首先添加个管理员账号（root权限）：</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.createUser(&#123;<br>   <span class="hljs-attr">user</span>:<span class="hljs-string">"root"</span>,<br>   <span class="hljs-attr">pwd</span>:<span class="hljs-string">"password"</span>,<br>   <span class="hljs-attr">roles</span>:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">"root"</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">"admin"</span>&#125;]<br>   &#125;)<br></code></pre></div></td></tr></table></figure><p>添加个普通账号（读写权限）： (需要先用root登陆)<br>（命令中的db 代表用户所分配的数据库）</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">db.createUser(&#123;<br>                　　<span class="hljs-attr">user</span>:<span class="hljs-string">"hyc"</span>,                                   <br>                　　<span class="hljs-attr">pwd</span>:<span class="hljs-string">"123456"</span>,<br>                　　<span class="hljs-attr">roles</span>:[&#123;<span class="hljs-attr">role</span>:<span class="hljs-string">"readWrite"</span>,<span class="hljs-attr">db</span>:<span class="hljs-string">"test"</span>&#125;]<br>           　　&#125;);<br></code></pre></div></td></tr></table></figure><p>② 修改配置文件</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">vi</span> /etc/mongod.<span class="hljs-keyword">conf</span><br></code></pre></div></td></tr></table></figure><p>注释掉：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash"><span class="hljs-comment"># bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</span><br></code></pre></div></td></tr></table></figure><p>添加：</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">security:<br>    authorization: enabled<br></code></pre></div></td></tr></table></figure><p>③ 重启Mongo 远程连接</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">service mongod restart</span><br></code></pre></div></td></tr></table></figure><p>④ 开启端口访问</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">firewall-cmd --zone=public --permanent --add-port=27017/tcp; firewall-cmd --reload<br></code></pre></div></td></tr></table></figure><p>打开ROBO（mongo 可视化工具）：</p><p><a href="https://imgchr.com/i/iXEZcD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/13/iXEZcD.png" alt="iXEZcD.png"></a></p><p><img src="https://s1.ax1x.com/2018/11/13/iXArOH.png" alt="iXArOH.png"></p><h2 id="最后点击Save就可以愉快的使用啦"><a href="#最后点击Save就可以愉快的使用啦" class="headerlink" title="最后点击Save就可以愉快的使用啦"></a>最后点击Save就可以愉快的使用啦</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django开发常用指令</title>
      <link href="2019/05/05/Django%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/"/>
      <url>2019/05/05/Django%E5%BC%80%E5%8F%91%E5%B8%B8%E7%94%A8%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="Django相关指令"><a href="#Django相关指令" class="headerlink" title="Django相关指令"></a>Django相关指令</h2><a id="more"></a><p>django-admin.py和manage.py这两个文件代码和包含命令基本是一样的，只不过django-admin.py一般只用来创建项目，而manage.py用来管理创建好了的项目。</p><p><strong>创建新项目</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">django-admin.py startproject [project_name]<br></code></pre></div></td></tr></table></figure><p><em>注意: windows系统下请用django-admin startproject [xxx]</em></p><p><strong>创建新应用</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py startapp [app_name]<br></code></pre></div></td></tr></table></figure><p><em>注意: 你需要先cd进入创建的项目文件夹</em></p><p><strong>检测模型变化，生成新的数据库迁移文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py makemigrations [app_label]<br></code></pre></div></td></tr></table></figure><p><em>注意: app名字可选。如果一个项目包含多个app，而你只更改了其中一个app的模型，建议后面加入具体的app名</em></p><p><strong>同步数据库与模型</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py migrate<br></code></pre></div></td></tr></table></figure><p><strong>启动服务器</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py runserver 0.0.0.0:8000<br></code></pre></div></td></tr></table></figure><p><strong>创建超级用户</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py createsuperuser<br></code></pre></div></td></tr></table></figure><p><strong>修改用户密码</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py changepassword [username]<br></code></pre></div></td></tr></table></figure><p><strong>打开交互终端</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py shell<br>python manage.py dbshell(数据库交互)<br></code></pre></div></td></tr></table></figure><p><strong>查看当前版本</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">python manage.py version<br></code></pre></div></td></tr></table></figure><p><strong>搜集静态文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py collectstatic<br></code></pre></div></td></tr></table></figure><p><strong>数据库备份与恢复</strong></p><ol><li>备份</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">#</span><span class="bash"> 备份某一个APP</span><br>python manage.py dumpdata app_name --format=json &gt; app.json<br><span class="hljs-meta">#</span><span class="bash"> 备份整个db</span><br>python manage.py dumpdata --format=json &gt; bak.json<br></code></pre></div></td></tr></table></figure><ol><li>恢复</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py loaddata app.json<br></code></pre></div></td></tr></table></figure><p><strong>一些不常用的指令</strong> 相对意义上的不常用，也可能由于笔者水平所限，暂时尚未使用过以下指令</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py flush# 清空数据库内容，只留下空表<br>python manage.py test# 开始测试<br>python manage.py createcachetable# 创建缓存表<br>python manage.py check # 检测项目有没有问题<br>python manage.py inspectdb [table] # 根据已有数据库反向生成django模型。你可以选择数据表名字<br>python manage.py makemessages # 搜集所有的messages，可以生成指定文件格式如xml文件，供后期翻译<br>python manage.py sendemail [email]# 发送测试邮件<br>python manage.py showmigrations# 显示所有数据库迁移文件<br></code></pre></div></td></tr></table></figure><h2 id="Python相关指令"><a href="#Python相关指令" class="headerlink" title="Python相关指令"></a>Python相关指令</h2><p><strong>生成requirements.txt文件</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip freeze &gt; requirements.txt<br></code></pre></div></td></tr></table></figure><p><strong>安装requirements.txt依赖</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">pip install -r requirements.txt -i https://pypi.doubanio.com/simple/<br></code></pre></div></td></tr></table></figure><p><strong>关闭全部 Python 进程</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">taskkill -f -im python<br>taskkill -f -im python.exe<br></code></pre></div></td></tr></table></figure><h2 id="celery相关指令"><a href="#celery相关指令" class="headerlink" title="celery相关指令"></a>celery相关指令</h2><p><strong>启动 celery 的后台任务</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">celery -A [project_name] beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler<br></code></pre></div></td></tr></table></figure><p>或</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py celery worker --settings=settings -l info -c 4 --autoreload<br></code></pre></div></td></tr></table></figure><p><strong>启动 celery 的周期任务</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">celery worker -A [project_name] -l info<br></code></pre></div></td></tr></table></figure><p>或者</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">python manage.py celery beat<br></code></pre></div></td></tr></table></figure><h2 id="uwsgi相关指令"><a href="#uwsgi相关指令" class="headerlink" title="uwsgi相关指令"></a>uwsgi相关指令</h2><p><strong>启动</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uwsgi --ini uwsgi.ini<br></code></pre></div></td></tr></table></figure><p><strong>重启</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uwsgi --reload uwsgi.pid<br></code></pre></div></td></tr></table></figure><p><strong>关闭</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uwsgi --stop uwsgi.pid<br></code></pre></div></td></tr></table></figure><p><strong>强制关闭</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">ps aux|grep uwsgi|awk '&#123;print $2&#125;'|xargs kill -9<br></code></pre></div></td></tr></table></figure><p><strong>读取uwsgi实时状态</strong></p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">uwsgi --connect-and-read uwsgi/uwsgi.status<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django与Celery</title>
      <link href="2019/05/05/Django%E4%B8%8ECelery/"/>
      <url>2019/05/05/Django%E4%B8%8ECelery/</url>
      
        <content type="html"><![CDATA[<p>先祭上 <a href="https://github.com/celery/django-celery-beat" target="_blank" rel="noopener">https://github.com/celery/django-celery-beat</a><br><a id="more"></a></p><blockquote><p>注意：</p><p>celery4.0支持django1.8以上版本，如果1.8以下版本请使用celry3.1</p><p>另外celery4.0版本不支持windows，需要启动的时候指定下–pool=solo，下面会说明</p></blockquote><p>本文从零开始，如果已有django环境和celery环境，请忽略以下步骤</p><h1 id="VirtualEnv环境"><a href="#VirtualEnv环境" class="headerlink" title="VirtualEnv环境"></a>VirtualEnv环境</h1><p>请参照我之前的文章-<a href="https://my.oschina.net/u/914655/blog/1192590" target="_blank" rel="noopener">virtualenv环境</a></p><p>这里简单列下</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">E:\virtualenv\nowamagic_venv&gt;virtualenv proj_env1 <span class="hljs-attribute">--python</span>=C:\Python36\python.exe<br>Running virtualenv with interpreter C:\Python36\python.exe<br>Using base<span class="hljs-built_in"> prefix </span><span class="hljs-string">'C:\\Python36'</span><br>New python executable <span class="hljs-keyword">in</span> E:\virtualenv\nowamagic_venv\proj_env1\Scripts\python.exe<br>Installing setuptools, pip, wheel<span class="hljs-built_in">..</span>.done.<br><br>E:\virtualenv\nowamagic_venv&gt;cd proj_env1<br><br>E:\virtualenv\nowamagic_venv\proj_env1&gt;cd Scripts<br><br>E:\virtualenv\nowamagic_venv\proj_env1\Scripts&gt;activate<br><br>(proj_env1) E:\virtualenv\nowamagic_venv\proj_env1\Scripts&gt;pip list<br>DEPRECATION: The<span class="hljs-built_in"> default </span>format will switch <span class="hljs-keyword">to</span> columns <span class="hljs-keyword">in</span> the future. You can use --format=(legacy|columns) (<span class="hljs-keyword">or</span> define a<br>ection) <span class="hljs-keyword">to</span> <span class="hljs-builtin-name">disable</span> this warning.<br>pip (9.0.1)<br>setuptools (38.5.1)<br>wheel (0.30.0)<br></code></pre></div></td></tr></table></figure><p>有时安装的pip版本太低，用pip安装软件时会报</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip.<span class="hljs-variable">_vendor</span>.distlib.DistlibException: Unable <span class="hljs-keyword">to</span> locate finder <span class="hljs-keyword">for</span> <span class="hljs-string">'pip._vendor.distlib'</span><br></code></pre></div></td></tr></table></figure><p>这时需要卸载掉pip setuptools，重新安装下</p><ol><li><p>uninstall current pip:</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">python -m pip uninstall pip setuptools</span><br></code></pre></div></td></tr></table></figure></li><li><p>download <code>get-pip.py</code> from <a href="https://bootstrap.pypa.io/get-pip.py" target="_blank" rel="noopener">https://bootstrap.pypa.io/get-pip.py</a></p></li><li><p>execute get-pip script:</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">python</span> <span class="hljs-built_in">get</span>-pip.<span class="hljs-keyword">py</span><br></code></pre></div></td></tr></table></figure></li></ol><h1 id><a href="#" class="headerlink" title=" "></a> </h1><h1 id="安装软件"><a href="#安装软件" class="headerlink" title="安装软件"></a>安装软件</h1><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">Django</span> (2<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.2</span>)<br><span class="hljs-selector-tag">celery</span> (4<span class="hljs-selector-class">.1</span><span class="hljs-selector-class">.0</span>)<br><span class="hljs-selector-tag">mysqlclient</span> (1<span class="hljs-selector-class">.3</span><span class="hljs-selector-class">.12</span>) 连接<span class="hljs-selector-tag">mysql</span>客户端<br><span class="hljs-selector-tag">redis</span> (2<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.6</span>) 以<span class="hljs-selector-tag">redis</span>作为后端<span class="hljs-selector-tag">broker</span><br></code></pre></div></td></tr></table></figure><p>安装过程</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">(proj_env1) E:\virtualenv\nowamagic_venv\proj_env1\<span class="hljs-keyword">Scripts&gt;pip </span><span class="hljs-keyword">install </span>django<br>Collecting django<br>  Using <span class="hljs-keyword">cached </span>Django<span class="hljs-number">-2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>-py3-none-any.whl<br>Collecting pytz (from django)<br>  Using <span class="hljs-keyword">cached </span>pytz<span class="hljs-number">-2017</span>.<span class="hljs-number">3</span>-py2.py3-none-any.whl<br><span class="hljs-keyword">Installing </span>collected packages: pytz, django<br>Successfully <span class="hljs-keyword">installed </span>django<span class="hljs-number">-2</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span> pytz<span class="hljs-number">-2017</span>.<span class="hljs-number">3</span><br><br>(proj_env1) E:\virtualenv\nowamagic_venv\proj_env1\<span class="hljs-keyword">Scripts&gt;pip </span><span class="hljs-keyword">install </span>celery<br>Collecting celery<br>  Using <span class="hljs-keyword">cached </span>celery<span class="hljs-number">-4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-py2.py3-none-any.whl<br>Requirement already satisfied: pytz&gt;dev in e:\virtualenv\nowamagic_venv\proj_env1\lib\site-packages (from celery)<br>Collecting <span class="hljs-keyword">billiard&lt;3.6.0,&gt;=3.5.0.2 </span>(from celery)<br>  Using <span class="hljs-keyword">cached </span><span class="hljs-keyword">billiard-3.5.0.3-py3-none-any.whl<br></span>Collecting kombu&lt;<span class="hljs-number">5</span>.<span class="hljs-number">0</span>,&gt;=<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span> (from celery)<br>  Using <span class="hljs-keyword">cached </span>kombu<span class="hljs-number">-4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span>-py2.py3-none-any.whl<br>Collecting amqp&lt;<span class="hljs-number">3</span>.<span class="hljs-number">0</span>,&gt;=<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span> (from kombu&lt;<span class="hljs-number">5</span>.<span class="hljs-number">0</span>,&gt;=<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>-&gt;celery)<br>  Using <span class="hljs-keyword">cached </span>amqp<span class="hljs-number">-2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span>-py2.py3-none-any.whl<br>Collecting vine&gt;=<span class="hljs-number">1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">3</span> (from amqp&lt;<span class="hljs-number">3</span>.<span class="hljs-number">0</span>,&gt;=<span class="hljs-number">2</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>-&gt;kombu&lt;<span class="hljs-number">5</span>.<span class="hljs-number">0</span>,&gt;=<span class="hljs-number">4</span>.<span class="hljs-number">0</span>.<span class="hljs-number">2</span>-&gt;celery)<br>  Using <span class="hljs-keyword">cached </span>vine<span class="hljs-number">-1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span>-py2.py3-none-any.whl<br><span class="hljs-keyword">Installing </span>collected packages: <span class="hljs-keyword">billiard, </span>vine, amqp, kombu, celery<br>Successfully <span class="hljs-keyword">installed </span>amqp<span class="hljs-number">-2</span>.<span class="hljs-number">2</span>.<span class="hljs-number">2</span> <span class="hljs-keyword">billiard-3.5.0.3 </span>celery<span class="hljs-number">-4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> kombu<span class="hljs-number">-4</span>.<span class="hljs-number">1</span>.<span class="hljs-number">0</span> vine<span class="hljs-number">-1</span>.<span class="hljs-number">1</span>.<span class="hljs-number">4</span><br><br>(proj_env1) E:\virtualenv\nowamagic_venv\proj_env1\<span class="hljs-keyword">Scripts&gt;pip </span><span class="hljs-keyword">install </span>mysqlclient<br>Collecting mysqlclient<br>  Using <span class="hljs-keyword">cached </span>mysqlclient<span class="hljs-number">-1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span>-cp36-cp36m-win_amd64.whl<br><span class="hljs-keyword">Installing </span>collected packages: mysqlclient<br>Successfully <span class="hljs-keyword">installed </span>mysqlclient<span class="hljs-number">-1</span>.<span class="hljs-number">3</span>.<span class="hljs-number">12</span><br><br>(proj_env1) E:\virtualenv\nowamagic_venv\proj_env1\<span class="hljs-keyword">Scripts&gt;pip </span><span class="hljs-keyword">install </span>redis<br>Collecting redis<br>  Using <span class="hljs-keyword">cached </span>redis<span class="hljs-number">-2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">6</span>-py2.py3-none-any.whl<br><span class="hljs-keyword">Installing </span>collected packages: redis<br>Successfully <span class="hljs-keyword">installed </span>redis<span class="hljs-number">-2</span>.<span class="hljs-number">10</span>.<span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h1 id="-1"><a href="#-1" class="headerlink" title=" "></a> </h1><h1 id="启动django项目"><a href="#启动django项目" class="headerlink" title="启动django项目"></a>启动django项目</h1><figure class="highlight taggerscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">(proj_env1) e:<span class="hljs-symbol">\c</span>ode<span class="hljs-symbol">\g</span>it<span class="hljs-symbol">\s</span>ource<span class="hljs-symbol">\m</span>y&gt;django-admin startproject django_celery_beat_test<br></code></pre></div></td></tr></table></figure><p>现在结构如下</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-bullet">- </span>django<span class="hljs-emphasis">_celery_</span>beat_test/<br><span class="hljs-bullet">  - </span>manage.py<br><span class="hljs-bullet">  - </span>django<span class="hljs-emphasis">_celery_</span>beat_test/<br><span class="hljs-bullet">    - </span><span class="hljs-strong">__init__</span>.py<br><span class="hljs-bullet">    - </span>settings.py<br><span class="hljs-bullet">    - </span>urls.py<br><span class="hljs-bullet">    - </span>wsgi.py<br></code></pre></div></td></tr></table></figure><h1 id="定义-Celery-实例"><a href="#定义-Celery-实例" class="headerlink" title="定义 Celery 实例"></a>定义 Celery 实例</h1><p><strong>file:</strong>  <em>django_celery_beat_test/django_celery_beat_test/celery.py</em></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery<br><br><span class="hljs-comment"># set the default Django settings module for the 'celery' program.</span><br>os.environ.setdefault(<span class="hljs-string">'DJANGO_SETTINGS_MODULE'</span>, <span class="hljs-string">'django_celery_beat_test.settings'</span>)<br><br>app = Celery(<span class="hljs-string">'django_celery_beat_test'</span>)<br><br><span class="hljs-comment"># Using a string here means the worker doesn't have to serialize</span><br><span class="hljs-comment"># the configuration object to child processes.</span><br><span class="hljs-comment"># - namespace='CELERY' means all celery-related configuration keys</span><br><span class="hljs-comment">#   should have a `CELERY_` prefix.</span><br>app.config_from_object(<span class="hljs-string">'django.conf:settings'</span>, namespace=<span class="hljs-string">'CELERY'</span>)<br><br><span class="hljs-comment"># Load task modules from all registered Django app configs.</span><br>app.autodiscover_tasks()<br><br><br><span class="hljs-meta">@app.task(bind=True)</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">debug_task</span><span class="hljs-params">(self)</span>:</span><br>    print(<span class="hljs-string">'Request: &#123;0!r&#125;'</span>.format(self.request))<br></code></pre></div></td></tr></table></figure><p>然后你需要在你的django_celery_beat_test/django_celery_beat_test/<strong> init</strong>.py模块中导入这个app。这可以确保在Django启动时加载app，以便@shared_task装饰器（稍后提及）使用它：</p><p><strong>file：</strong>  <em>django_celery_beat_test/django_celery_beat_test/<strong> init</strong>.py</em></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><br><span class="hljs-comment"># This will make sure the app is always imported when</span><br><span class="hljs-comment"># Django starts so that shared_task will use this app.</span><br><span class="hljs-keyword">from</span> .celery <span class="hljs-keyword">import</span> app <span class="hljs-keyword">as</span> celery_app<br><br>__all__ = [<span class="hljs-string">'celery_app'</span>]<br></code></pre></div></td></tr></table></figure><p>其中</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import<br></code></pre></div></td></tr></table></figure><p>引入绝对导入是防止我们定义的celery.py模块与库模块celery冲突，具体作用可见<a href="http://blog.csdn.net/caiqiiqi/article/details/51050800" target="_blank" rel="noopener">这里</a></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">app</span> = Celery(<span class="hljs-string">'django_celery_beat_test'</span>)<br></code></pre></div></td></tr></table></figure><p>这是我们celery的实例，可以有很多实例，但django里一个可能就够了 </p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">app.config_from_object(<span class="hljs-string">'django.conf:settings'</span>, <span class="hljs-keyword">namespace</span>=<span class="hljs-string">'CELERY'</span>)<br></code></pre></div></td></tr></table></figure><p>代表celery的配置文件在django的配置文件settings里，并且定义了命名空间CELERY，也即在settings里的celery的配置都得以CELERY开头，比如broker_url需要定义为CELERY_BROKER_URL</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">app</span><span class="hljs-selector-class">.autodiscover_tasks</span>()<br></code></pre></div></td></tr></table></figure><p>使用上面的行，Celery会自动发现所有安装的应用程序中的任务，遵循tasks.py约定：</p><figure class="highlight markdown"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-bullet">- </span>app1/<br><span class="hljs-bullet">    - </span>tasks.py<br><span class="hljs-bullet">    - </span>models.py<br><span class="hljs-bullet">- </span>app2/<br><span class="hljs-bullet">    - </span>tasks.py<br><span class="hljs-bullet">    - </span>models.py<br></code></pre></div></td></tr></table></figure><p>这样您就不必手动将各个模块添加到CELERY_IMPORTS设置中</p><h2 id="celery的配置"><a href="#celery的配置" class="headerlink" title="celery的配置"></a>celery的配置</h2><p>接着在settings.py中定义</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">CELERY_BROKER_URL</span> = <span class="hljs-string">'redis://:cds-china@172.20.3.3:6379/0'</span><br><br><span class="hljs-comment">#: Only add pickle to this list if your broker is secured</span><br><span class="hljs-comment">#: from unwanted access (see userguide/security.html)</span><br><span class="hljs-attr">CELERY_ACCEPT_CONTENT</span> = [<span class="hljs-string">'json'</span>]<br><span class="hljs-attr">CELERY_TASK_SERIALIZER</span> = <span class="hljs-string">'json'</span><br><span class="hljs-attr">CELERY_RESULT_SERIALIZER</span> = <span class="hljs-string">'json'</span><br><span class="hljs-attr">CELERY_RESULT_BACKEND</span> = <span class="hljs-string">'redis://:cds-china@172.20.3.3:6379/1'</span><br></code></pre></div></td></tr></table></figure><h2 id="创建app"><a href="#创建app" class="headerlink" title="创建app"></a>创建app</h2><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">python</span> manage.<span class="hljs-keyword">py</span> startapp demoapp<br></code></pre></div></td></tr></table></figure><p>现在结构如下：</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">django_celery_beat_test/<br>├── demoapp<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── models<span class="hljs-selector-class">.py</span><br>│   ├── tasks<span class="hljs-selector-class">.py</span><br>│   ├── tests<span class="hljs-selector-class">.py</span><br>│   ├── views<span class="hljs-selector-class">.py</span><br>├── manage<span class="hljs-selector-class">.py</span><br>├── django_celery_beat_test<br>│   ├── __init__<span class="hljs-selector-class">.py</span><br>│   ├── celery<span class="hljs-selector-class">.py</span><br>│   ├── settings<span class="hljs-selector-class">.py</span><br>│   ├── urls<span class="hljs-selector-class">.py</span><br>│   ├── wsgi<span class="hljs-selector-class">.py</span><br>└── test.db<br></code></pre></div></td></tr></table></figure><p>tasks.py内容如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># Create your tasks here</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><br><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> shared_task<br><br><br><span class="hljs-meta">@shared_task</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span><br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-meta">@shared_task</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mul</span><span class="hljs-params">(x, y)</span>:</span><br>    <span class="hljs-keyword">return</span> x * y<br><br><br><span class="hljs-meta">@shared_task</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">xsum</span><span class="hljs-params">(numbers)</span>:</span><br>    <span class="hljs-keyword">return</span> sum(numbers)<br></code></pre></div></td></tr></table></figure><p>这里使用shared_task，其与app.task区别见<a href="https://groups.google.com/forum/#!topic/celery-users/XiSDiNjBR6k" target="_blank" rel="noopener">这里</a></p><p>在函数中调用task</p><p>views.py见下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><br><span class="hljs-keyword">import</span> json<br><br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> HttpResponse<br><span class="hljs-comment"># Create your views here.</span><br><span class="hljs-keyword">from</span> .tasks <span class="hljs-keyword">import</span> add<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">(request)</span>:</span><br>    print(<span class="hljs-string">'1 + 1 = ?'</span>)<br>    r = add.delay(<span class="hljs-number">1</span>, <span class="hljs-number">1</span>)<br>    print(<span class="hljs-string">'r.get() = %s '</span> % r.get())<br>    resp = &#123;<span class="hljs-string">'errorcode'</span>: <span class="hljs-number">100</span>, <span class="hljs-string">'detail'</span>: <span class="hljs-string">'Get success'</span>&#125;<br>    <span class="hljs-keyword">return</span> HttpResponse(json.dumps(resp), content_type=<span class="hljs-string">"application/json"</span>)<br></code></pre></div></td></tr></table></figure><p>urls.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> django.urls <span class="hljs-keyword">import</span> path<br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> demoapp.views <span class="hljs-keyword">import</span> index<br><br>urlpatterns = [<br><br>    url(<span class="hljs-string">r'^$'</span>, index, name=<span class="hljs-string">'index'</span>),<br>    <span class="hljs-comment"># url(r'^proj/', include('proj.foo.urls')),</span><br>    path(<span class="hljs-string">'admin/'</span>, admin.site.urls),<br>]<br></code></pre></div></td></tr></table></figure><h1 id="启动celery-worker"><a href="#启动celery-worker" class="headerlink" title="启动celery worker"></a>启动celery worker</h1><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">celery</span> <span class="hljs-literal">-</span><span class="hljs-comment">A</span> <span class="hljs-comment">django_celery_beat_test</span> <span class="hljs-comment">worker</span> --<span class="hljs-comment">pool=solo</span> <span class="hljs-literal">-</span><span class="hljs-comment">l</span> <span class="hljs-comment">info</span><br><br><span class="hljs-comment">(django_celery_beat_env)</span> <span class="hljs-comment">e:\code\git\source\my\django_celery_beat_test</span>&gt;<span class="hljs-comment">celery</span> <span class="hljs-literal">-</span><span class="hljs-comment">A</span><br> <span class="hljs-comment">django_celery_beat_test</span> <span class="hljs-comment">worker</span> --<span class="hljs-comment">pool=solo</span> <span class="hljs-literal">-</span><span class="hljs-comment">l</span> <span class="hljs-comment">info</span><br><br> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-comment">celery@zq</span><span class="hljs-literal">-</span><span class="hljs-comment">PC</span> <span class="hljs-comment">v4</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">0</span> <span class="hljs-comment">(latentcall)</span><br>--<span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-comment">****</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br>--<span class="hljs-literal">-</span> <span class="hljs-comment">*</span> <span class="hljs-comment">***</span>  <span class="hljs-comment">*</span> -- <span class="hljs-comment">Windows</span><span class="hljs-literal">-</span><span class="hljs-comment">7</span><span class="hljs-literal">-</span><span class="hljs-comment">6</span><span class="hljs-string">.</span><span class="hljs-comment">1</span><span class="hljs-string">.</span><span class="hljs-comment">7601</span><span class="hljs-literal">-</span><span class="hljs-comment">SP1</span> <span class="hljs-comment">2018</span><span class="hljs-literal">-</span><span class="hljs-comment">02</span><span class="hljs-literal">-</span><span class="hljs-comment">08</span> <span class="hljs-comment">13:19:43</span><br>-- <span class="hljs-comment">*</span> <span class="hljs-literal">-</span> <span class="hljs-comment">****</span> --<span class="hljs-literal">-</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">**</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-title">[</span><span class="hljs-comment">config</span><span class="hljs-title">]</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">**</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-string">.</span>&gt; <span class="hljs-comment">app:</span>         <span class="hljs-comment">django_celery_beat_test:0x3974198</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">**</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-string">.</span>&gt; <span class="hljs-comment">transport:</span>   <span class="hljs-comment">redis://:**@172</span><span class="hljs-string">.</span><span class="hljs-comment">20</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">3:6379/0</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">**</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-string">.</span>&gt; <span class="hljs-comment">results:</span>     <span class="hljs-comment">redis://:**@172</span><span class="hljs-string">.</span><span class="hljs-comment">20</span><span class="hljs-string">.</span><span class="hljs-comment">3</span><span class="hljs-string">.</span><span class="hljs-comment">3:6379/1</span><br><span class="hljs-literal">-</span> <span class="hljs-comment">***</span> --<span class="hljs-literal">-</span> <span class="hljs-comment">*</span> --<span class="hljs-literal">-</span> <span class="hljs-string">.</span>&gt; <span class="hljs-comment">concurrency:</span> <span class="hljs-comment">4</span> <span class="hljs-comment">(solo)</span><br>-- <span class="hljs-comment">*******</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-string">.</span>&gt; <span class="hljs-comment">task</span> <span class="hljs-comment">events:</span> <span class="hljs-comment">OFF</span> <span class="hljs-comment">(enable</span> <span class="hljs-literal">-</span><span class="hljs-comment">E</span> <span class="hljs-comment">to</span> <span class="hljs-comment">monitor</span> <span class="hljs-comment">tasks</span> <span class="hljs-comment">in</span> <span class="hljs-comment">this</span> <span class="hljs-comment">worker)</span><br>--<span class="hljs-literal">-</span> <span class="hljs-comment">*****</span> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><br> --<span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span><span class="hljs-literal">-</span> <span class="hljs-title">[</span><span class="hljs-comment">queues</span><span class="hljs-title">]</span><br>                <span class="hljs-string">.</span>&gt; <span class="hljs-comment">celery</span>           <span class="hljs-comment">exchange=celery(direct)</span> <span class="hljs-comment">key=celery</span><br><br><br><span class="hljs-title">[</span><span class="hljs-comment">tasks</span><span class="hljs-title">]</span><br>  <span class="hljs-string">.</span> <span class="hljs-comment">demoapp</span><span class="hljs-string">.</span><span class="hljs-comment">tasks</span><span class="hljs-string">.</span><span class="hljs-comment">add</span><br>  <span class="hljs-string">.</span> <span class="hljs-comment">demoapp</span><span class="hljs-string">.</span><span class="hljs-comment">tasks</span><span class="hljs-string">.</span><span class="hljs-comment">mul</span><br>  <span class="hljs-string">.</span> <span class="hljs-comment">demoapp</span><span class="hljs-string">.</span><span class="hljs-comment">tasks</span><span class="hljs-string">.</span><span class="hljs-comment">xsum</span><br>  <span class="hljs-string">.</span> <span class="hljs-comment">django_celery_beat_test</span><span class="hljs-string">.</span><span class="hljs-comment">celery</span><span class="hljs-string">.</span><span class="hljs-comment">debug_task</span><br></code></pre></div></td></tr></table></figure><p><strong>注意这里celery4以上的版本在window上运行时，需要加上–pool=solo，否则在执行任务时会报</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">ValueError:</span> <span class="hljs-string">not</span> <span class="hljs-string">enough</span> <span class="hljs-string">values</span> <span class="hljs-string">to</span> <span class="hljs-string">unpack</span> <span class="hljs-string">(expected</span> <span class="hljs-number">3</span><span class="hljs-string">,</span> <span class="hljs-string">got</span> <span class="hljs-number">0</span><span class="hljs-string">)</span><br></code></pre></div></td></tr></table></figure><h1 id="启动server"><a href="#启动server" class="headerlink" title="启动server"></a>启动server</h1><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">python runserver <span class="hljs-number">8000</span><br></code></pre></div></td></tr></table></figure><p>浏览器访问<a href="http://127.0.0.1:8000/" target="_blank" rel="noopener">http://127.0.0.1:8000/</a></p><p>看控制台会打印结果</p><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-number">1</span> + <span class="hljs-number">1</span> = ?<br><span class="hljs-string">[07/Feb/2018 18:37:59]</span> <span class="hljs-string">"<span class="hljs-keyword">GET</span> / HTTP/1.1"</span> <span class="hljs-number">200</span> <span class="hljs-number">43</span><br>r.get() = <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>表示成功</p><h1 id="django-celery-beat"><a href="#django-celery-beat" class="headerlink" title="django_celery_beat"></a>django_celery_beat</h1><p>接下来看django_celery_beat模块</p><p>上面没有说celery beat，celery beat就是一个定时模块，并且包含crontab类似功能，后面是celery worker，可以说非常强大。</p><p>默认调度程序是celery.beat.PersistentScheduler，它只是跟踪本地<a href="https://docs.python.org/dev/library/shelve.html#module-shelve" target="_blank" rel="noopener">shelve</a>数据库文件中的最后一次运行时间。</p><p>但还有一哥们写的调度程序django_celery_beat，它以数据库做为载体，定时任务之类的记录在库里，并且有web admin界面控制。</p><h2 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h2><p>1.pip安装</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> django-celery-beat<br></code></pre></div></td></tr></table></figure><p>2.添加到INSTALLED_APPS</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">INSTALLED_APPS = (<br>    <span class="hljs-params">...</span>,<br>    <span class="hljs-string">'django_celery_beat'</span>,<br>)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>migrate安装必要的库</li></ol><figure class="highlight 1c"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">python manage.py migrate<br><br><br>(django_celery_beat_env) e:\code\git\source\my\django_celery_beat_test&gt;python ma<br>nage.py migrate<br>System check identified some issues:<br><br>WARNINGS:<br>?: (mysql.W002) MySQL Strict Mode is not set for database connection 'default'<br>        HINT: MySQL's Strict Mode fixes many data integrity problems in MySQL, s<br>uch as data truncation upon insertion, by escalating warnings into errors. It is<br> strongly recommended you activate it. See: https://docs.djangoproject.com/en/2.<br>0/ref/databases/#mysql-sql-mode<br>Operations to perform:<br>  Apply all migrations: admin, auth, contenttypes, django_celery_beat, sessions<br>Running migrations:<br>  Applying contenttypes.<span class="hljs-number">0001</span>_initial... OK<br>  Applying auth.<span class="hljs-number">0001</span>_initial... OK<br>  Applying admin.<span class="hljs-number">0001</span>_initial... OK<br>  Applying admin.<span class="hljs-number">0002</span>_logentry_remove_auto_add... OK<br>  Applying contenttypes.<span class="hljs-number">0002</span>_remove_content_type_name... OK<br>  Applying auth.<span class="hljs-number">0002</span>_alter_permission_name_max_length... OK<br>  Applying auth.<span class="hljs-number">0003</span>_alter_user_email_max_length... OK<br>  Applying auth.<span class="hljs-number">0004</span>_alter_user_username_opts... OK<br>  Applying auth.<span class="hljs-number">0005</span>_alter_user_last_login_null... OK<br>  Applying auth.<span class="hljs-number">0006</span>_require_contenttypes_<span class="hljs-number">0002</span>... OK<br>  Applying auth.<span class="hljs-number">0007</span>_alter_validators_add_error_messages... OK<br>  Applying auth.<span class="hljs-number">0008</span>_alter_user_username_max_length... OK<br>  Applying auth.<span class="hljs-number">0009</span>_alter_user_last_name_max_length... OK<br>  Applying django_celery_beat.<span class="hljs-number">0001</span>_initial... OK<br>  Applying django_celery_beat.<span class="hljs-number">0002</span>_auto_<span class="hljs-number">20161118</span>_<span class="hljs-number">0346</span>... OK<br>  Applying django_celery_beat.<span class="hljs-number">0003</span>_auto_<span class="hljs-number">20161209</span>_<span class="hljs-number">0049</span>... OK<br>  Applying django_celery_beat.<span class="hljs-number">0004</span>_auto_<span class="hljs-number">20170221</span>_<span class="hljs-number">0000</span>... OK<br>  Applying sessions.<span class="hljs-number">0001</span>_initial... OK<br></code></pre></div></td></tr></table></figure><p>\4. 启动celery beat的时候指定–scheduler</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">celery</span> -A django_celery_beat_test <span class="hljs-keyword">beat </span>-l <span class="hljs-meta">info</span> --scheduler django_celery_beat.schedulers:DatabaseScheduler<br></code></pre></div></td></tr></table></figure><h2 id="django-admin"><a href="#django-admin" class="headerlink" title="django admin"></a>django admin</h2><p>创建superuser</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">(django_celery_beat_env) <span class="hljs-keyword">e</span>:\code\git\<span class="hljs-keyword">source</span>\my\django_celery_beat_test&gt;<span class="hljs-keyword">python</span> <span class="hljs-keyword">ma</span><br>nage.<span class="hljs-keyword">py</span> createsuperuser<br>Username (leave blank <span class="hljs-keyword">to</span> use <span class="hljs-string">'zq'</span>): admin<br>Email addres<span class="hljs-variable">s:</span> zq@<span class="hljs-number">126</span>.<span class="hljs-keyword">com</span><br>Password:<br>Password (again):<br>Superuser created successfully.<br></code></pre></div></td></tr></table></figure><p>登录admin <a href="http://127.0.0.1:8000/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/</a></p><p>如下：</p><p><img src="https://static.oschina.net/uploads/space/2018/0208/134004_2dyZ_914655.png" alt="img"></p><p>可添加定时，任务等。</p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Django思维导图</title>
      <link href="2019/05/05/Django%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>2019/05/05/Django%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>Django基础</p><a id="more"></a><p><img src="https://s1.ax1x.com/2018/11/21/FCcB6S.png" alt="FCcB6S.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django与supervisor 管理进程</title>
      <link href="2019/05/05/Django%E4%B8%8Esupervisor-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/"/>
      <url>2019/05/05/Django%E4%B8%8Esupervisor-%E7%AE%A1%E7%90%86%E8%BF%9B%E7%A8%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1、前言"><a href="#1、前言" class="headerlink" title="1、前言"></a>1、前言</h2><p>在Django项目中，我们需要用到一些独立于Django框架外的脚本。这样一些脚本可能需要独立的持续运行，且具有很强的可维护性，这个时候supervisor就可以排上用场了。</p><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyq9bijxgvj206h08hjrr.jpg" alt></p><a id="more"></a><ul><li><p>基于python编写，安装方便</p></li><li><p>进程管理工具，可以很方便的对用户定义的进程进行启动，关闭，重启，并且对意外关闭的进程进行重启 ，只需要简单的配置一下即可，且有web端，状态、日志查看清晰明了。</p></li><li><p>组成部分 </p><ul><li>supervisord[服务端，所以要通过这个来启动它]</li><li>supervisorctl[客户端，可以来执行stop等命令]</li></ul></li><li><p>官方文档地址：</p><p><a href="http://supervisord.org/" target="_blank" rel="noopener">http://supervisord.org/</a></p></li></ul><h2 id="2、安装"><a href="#2、安装" class="headerlink" title="2、安装"></a>2、安装</h2><p>直接使用pip进行</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> supervisor<br></code></pre></div></td></tr></table></figure><h2 id="3、使用说明"><a href="#3、使用说明" class="headerlink" title="3、使用说明"></a>3、使用说明</h2><p>使用supervisor很简单，只需要修改一些配置文件，就可以使用了。</p><h4 id="3-1-查看默认配置"><a href="#3-1-查看默认配置" class="headerlink" title="3.1 查看默认配置"></a>3.1 查看默认配置</h4><p>运行</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">echo_supervisord_conf</span><br></code></pre></div></td></tr></table></figure><p>即可看到默认配置情况，但是一般情况下，我们都不要去修改默认的配置，而是将默认配置重定向到另外的文件中，不同的进程运用不同的配置文件去对默认文件进行复写即可。</p><figure class="highlight jboss-cli"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">echo</span>_supervisord_conf &gt; <span class="hljs-string">/etc/supervisord.conf</span><br></code></pre></div></td></tr></table></figure><p>默认配置说明</p><blockquote><p>默认的配置文件是下面这样的，但是这里有个坑需要注意，supervisord.pid 以及 supervisor.sock 是放在 /tmp 目录下，但是 /tmp 目录是存放临时文件，里面的文件是会被 Linux 系统删除的，一旦这些文件丢失，就无法再通过 supervisorctl 来执行 restart 和 stop 命令了，将只会得到 unix:///tmp/supervisor.sock 不存在的错误 。</p></blockquote><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini">[unix_http_server]<br>;file=/tmp/supervisor.sock   ; (the path to the socket file)<br>;建议修改为 /var/run 目录，避免被系统删除<br>file=/var/run/supervisor.sock   ; (the path to the socket file)<br>;chmod=0700                 ; socket file mode (default 0700)<br>;chown=nobody:nogroup       ; socket file uid:gid owner<br>;username=user              ; (default is no username (open server))<br>;password=123               ; (default is no password (open server))<br><br>;[inet_http_server]         ; inet (TCP) server disabled by default<br>;port=127.0.0.1:9001        ; (ip_address:port specifier, *:port for ;all iface)<br>;username=user              ; (default is no username (open server))<br>;password=123               ; (default is no password (open server))<br>...<br><br>[supervisord]<br>;logfile=/tmp/supervisord.log ; 日志文件(main log file;default $CWD/supervisord.log)<br>;建议修改为 /var/log 目录，避免被系统删除<br>logfile=/var/log/supervisor/supervisord.log ; (main log file;default $CWD/supervisord.log)<br>logfile_maxbytes=50MB        ; 日志文件大小(max main logfile bytes b4 rotation;default 50MB)<br>logfile_backups=10           ; 日志文件保留备份数量(num of main logfile rotation backups;default 10)<br>loglevel=info                ; 日志级别(log level;default info; others: debug,warn,trace)<br>;pidfile=/tmp/supervisord.pid ; (supervisord pidfile;default supervisord.pid)<br>;建议修改为 /var/run 目录，避免被系统删除<br>pidfile=/var/run/supervisord.pid ; (supervisord pidfile;default supervisord.pid)<br>;设置启动supervisord的用户，一般情况下不要轻易用root用户来启动，除非你真的确定要这么做<br>;user=chrism                 ; (default is current user, required if root)<br>nodaemon=false               ; (start in foreground if true;default false)<br>minfds=1024                  ; (min. avail startup file descriptors;default 1024)<br>minprocs=200                 ; (min. avail process descriptors;default 200)<br>;umask=022                   ; (process file creation umask;default 022)<br>;identifier=supervisor       ; (supervisord identifier, default is 'supervisor')<br>;directory=/tmp              ; (default is not to cd during start)<br>;nocleanup=true              ; (don't clean up tempfiles at start;default false)<br>;childlogdir=/tmp            ; ('AUTO' child log dir, default $TEMP)<br>;environment=KEY="value"     ; (key value pairs to add to environment)<br>;strip_ansi=false            ; (strip ansi escape codes in logs; def. false)<br><br>[unix_http_server]<br>file=/tmp/supervisor.sock   ; (the path to the socket file)<br>;chmod=0700                 ; socket file mode (default 0700)<br>;chown=nobody:nogroup       ; socket file uid:gid owner<br>;username=user              ; (default is no username (open server))<br>;password=123               ; (default is no password (open server))<br><br>[supervisorctl]<br>; 必须和'unix_http_server'里面的设定匹配<br>;serverurl=unix:///tmp/supervisor.sock ; use a unix:// URL  for a unix socket<br>;建议修改为 /var/run 目录，避免被系统删除<br>serverurl=unix:///var/run/supervisor.sock ; use a unix:// URL  for a unix socket<br>;serverurl=http://127.0.0.1:9001 ; use an http:// url to specify an inet socket<br>;username=chris              ; should be same as http_username if set<br>;password=123                ; should be same as http_password if set<br><br>。。。<br><br>[include]<br>files = /etc/supervisor/*.conf<br></code></pre></div></td></tr></table></figure><p>配置文件都有说明，且很简单，就不做多的描述了，在上面有一些建议修改的目录，若做了修改，则应先创建这些文件，需要注意权限问题，很多错误都是没有权限造成的。</p><h4 id="3-2-启动服务端"><a href="#3-2-启动服务端" class="headerlink" title="3.2 启动服务端"></a>3.2 启动服务端</h4><p>现在，让我们来启动supervisor服务。</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">supervisord -c <span class="hljs-regexp">/etc/</span>supervisord.conf<br></code></pre></div></td></tr></table></figure><p>查看supervisord 是否运行：</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">ps</span> aux|<span class="hljs-keyword">grep</span> superviosrd<br></code></pre></div></td></tr></table></figure><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">output:</span>xxxx   <span class="hljs-number">82039</span>      <span class="hljs-number">1</span>  <span class="hljs-number">0</span> <span class="hljs-number">11</span>:<span class="hljs-number">22</span> ?        00:<span class="hljs-number">00</span>:<span class="hljs-number">00</span> <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>python <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>supervisord -c <span class="hljs-regexp">/etc/</span>supervisord.conf<br></code></pre></div></td></tr></table></figure><h4 id="3-2-项目配置及运行"><a href="#3-2-项目配置及运行" class="headerlink" title="3.2 项目配置及运行"></a>3.2 项目配置及运行</h4><p>上面我们已经把 supervisrod 运行起来了，现在可以添加我们要管理的进程的配置文件。可以把所有配置项都写到 supervisord.conf 文件里，但并不推荐这样做，而是通过 include 的方式把不同的程序（组）写到不同的配置文件里，对，就是默认配置中的最后的那个include。下面来对项目进行简单的配置。<br>假设我们把项目配置文件放在这个目录中:<code>/etc/supervisor/</code><br>则我们需要修改<code>/etc/supervisord.conf</code> 中的include为：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[include]</span><br><span class="hljs-attr">files</span> = /etc/supervisor/*.conf<br></code></pre></div></td></tr></table></figure><p>测试py文件：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    print(<span class="hljs-string">'i am ok'</span>)<br>    time.sleep(<span class="hljs-number">5</span>)<br></code></pre></div></td></tr></table></figure><p>以下为配置文件目录<code>/etc/supervisor/test.conf</code>：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini"><span class="hljs-section">[program:testpy]</span><br><span class="hljs-attr">command</span>=python test.py              <span class="hljs-comment">; the program (relative uses PATH, can take args)</span><br><span class="hljs-comment">;process_name=%(program_name)s ; process_name expr (default %(program_name)s)</span><br><span class="hljs-comment">;numprocs=1                    ; number of processes copies to start (def 1)</span><br><span class="hljs-attr">directory</span>=/root/myporject/               <span class="hljs-comment">; directory to cwd to before exec (def no cwd)</span><br><span class="hljs-comment">;umask=022                     ; umask for process (default None)</span><br><span class="hljs-attr">priority</span>=<span class="hljs-number">999</span>                  <span class="hljs-comment">; the relative start priority (default 999)</span><br><span class="hljs-attr">startsecs</span> = <span class="hljs-number">5</span>        <span class="hljs-comment">; 启动 5 秒后没有异常退出，就当作已经正常启动了</span><br><span class="hljs-attr">autorestart</span> = <span class="hljs-literal">true</span>   <span class="hljs-comment">; 程序异常退出后自动重启</span><br><span class="hljs-attr">startretries</span> = <span class="hljs-number">3</span>     <span class="hljs-comment">; 启动失败自动重试次数，默认是 3</span><br><span class="hljs-attr">stdout_logfile</span> = /root/myporject/supervisor.log<br></code></pre></div></td></tr></table></figure><p>配置完成以后，即可运行：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">supervisord -c <span class="hljs-regexp">/etc/</span>supervisord.conf<br></code></pre></div></td></tr></table></figure><p>查看运行状态</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@localhost ~]</span># <span class="hljs-selector-tag">supervisorctl</span> <span class="hljs-selector-tag">status</span><br><span class="hljs-selector-tag">testpy</span>                           <span class="hljs-selector-tag">RUNNING</span>   <span class="hljs-selector-tag">pid</span> 2391, <span class="hljs-selector-tag">uptime</span> 0<span class="hljs-selector-pseudo">:00</span><span class="hljs-selector-pseudo">:54</span><br></code></pre></div></td></tr></table></figure><p>打开浏览器，输入127.0.0.9001,输入用户名与密码（如果配置文件中inet_http_server中作了设置），可以看到下面这个界面：</p><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyqajnbn72j20me066t8x.jpg" alt></p><h4 id="3-3-使用supervisorctl"><a href="#3-3-使用supervisorctl" class="headerlink" title="3.3 使用supervisorctl"></a>3.3 使用supervisorctl</h4><p>在启动服务之后，运行：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">supervisorctl -c <span class="hljs-regexp">/etc/</span>supervisord.conf<br></code></pre></div></td></tr></table></figure><p>或者直接<code>supervisorctl</code></p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@localhost ~]</span># <span class="hljs-selector-tag">supervisorctl</span><br><span class="hljs-selector-tag">testpy</span>                           <span class="hljs-selector-tag">RUNNING</span>   <span class="hljs-selector-tag">pid</span> 2391, <span class="hljs-selector-tag">uptime</span> 0<span class="hljs-selector-pseudo">:01</span><span class="hljs-selector-pseudo">:45</span><br></code></pre></div></td></tr></table></figure><p>若成功，则会进入supervisorctl的shell界面，有以下方法：</p><ul><li>status                   # 查看程序状态</li><li>stop testpy               # 关闭 testpy 程序</li><li>start testpy               # 启动 testpy 程序</li><li>restart testpy           # 重启 testpy 程序</li><li>reread                      ＃ 读取有更新（增加）的配置文件，不会启动新添加的程序</li><li>update                     ＃ 重启配置文件修改过的程序</li></ul><p>执行相关操作后，可以在web端看到具体的变化情况，如stop 程序</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">stop</span> testpy<br></code></pre></div></td></tr></table></figure><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyqaemp03ej20lv061t8y.jpg" alt></p><p>其实，也可以不使用supervisorctl shell界面，而在bash终端运行：</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>supervisorctl status<br><span class="hljs-variable">$ </span>supervisorctl stop usercenter<br><span class="hljs-variable">$ </span>supervisorctl start usercenter<br><span class="hljs-variable">$ </span>supervisorctl restart usercenter<br><span class="hljs-variable">$ </span>supervisorctl reread<br><span class="hljs-variable">$ </span>supervisorctl update<br></code></pre></div></td></tr></table></figure><h4 id="3-4-多个进程管理"><a href="#3-4-多个进程管理" class="headerlink" title="3.4 多个进程管理"></a>3.4 多个进程管理</h4><p>按照官方文档的定义，一个 [program:x] 实际上是表示一组相同特征或同类的进程组，也就是说一个 [program:x] 可以启动多个进程。这组进程的成员是通过 numprocs 和 process_name 这两个参数来确定的，这句话什么意思呢，我们来看这个例子。</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">; 设置进程的名称，使用 supervisorctl 来管理进程时需要使用该进程名<br>[program:foo] <br><br>; 可以在 command 这里用 python 表达式传递不同的参数给每个进程<br><span class="hljs-attribute">command</span>=python server.py <span class="hljs-attribute">--port</span>=90%(process_num)02d<br><br><span class="hljs-attribute">directory</span>=/home/python/tornado_server ; 执行 command 之前，先切换到工作目录<br><br>; 若 numprocs 不为1，process_name 的表达式中一定要包含 process_num 来区分不同的进程<br><span class="hljs-attribute">numprocs</span>=2                   <br><span class="hljs-attribute">process_name</span>=%(program_name)s_%(process_num)02d; <br><br><span class="hljs-attribute">user</span>=oxygen                 ; 使用 oxygen 用户来启动该进程<br><br><span class="hljs-attribute">autorestart</span>=<span class="hljs-literal">true</span>  ; 程序崩溃时自动重启<br><br><span class="hljs-attribute">redirect_stderr</span>=<span class="hljs-literal">true</span>      ; 重定向输出的日志<br><br>stdout_logfile = /var/log/supervisord/<br>tornado_server.log<br><span class="hljs-attribute">loglevel</span>=info<br></code></pre></div></td></tr></table></figure><p>上面这个例子会启动两个进程，process_name 分别为 foo:foo_01 和 foo:foo_02。通过这样一种方式，就可以用一个 [program:x] 配置项，来启动一组非常类似的进程。<br> 更详细配置，点击<a href="https://link.jianshu.com?t=http://supervisord.org/configuration.html#program-x-section-settings" target="_blank" rel="noopener">这里</a></p><p>Supervisor 同时还提供了另外一种进程组的管理方式，通过这种方式，可以使用 supervisorctl 命令来管理一组进程。跟 [program:x] 的进程组不同的是，这里的进程是一个个的 [program:x] 。</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">[group:thegroupname]</span><br><span class="hljs-attr">programs</span>=progname1,progname2  <span class="hljs-comment">; each refers to 'x' in [program:x] definitions</span><br><span class="hljs-attr">priority</span>=<span class="hljs-number">999</span>                  <span class="hljs-comment">; the relative start priority (default 999)</span><br></code></pre></div></td></tr></table></figure><p>当添加了上述配置后，progname1 和 progname2 的进程名就会变成 thegroupname:progname1 和 thegroupname:progname2 以后就要用这个名字来管理进程了，而不是之前的 progname1。</p><p>以后执行 supervisorctl stop thegroupname: 就能同时结束 progname1 和 progname2，执行 supervisorctl stop thegroupname:progname1 就能结束 progname1。</p><h2 id="4-结尾"><a href="#4-结尾" class="headerlink" title="4. 结尾"></a>4. 结尾</h2><p>实际上，默认情况下，supervisored 也是一个进程，最理想的的情况应该是将其安装为系统服务，安装方法可以参考<a href="https://link.jianshu.com?t=http://serverfault.com/questions/96499/how-to-automatically-start-supervisord-on-linux-ubuntu" target="_blank" rel="noopener">这里</a>,安装脚本参考<a href="https://link.jianshu.com?t=https://github.com/Supervisor/initscripts" target="_blank" rel="noopener">这里</a>,由于没有做具体的实验，此处不展开说明。</p><p>其实还有一个简单的方法，因为 Linux 在启动的时候会执行 /etc/rc.local 里面的脚本，所以只要在这里添加执行命令就可以</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># 如果是 Ubuntu 添加以下内容</span><br><span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>supervisord -c <span class="hljs-regexp">/etc/</span>supervisord.conf<br><br><span class="hljs-comment"># 如果是 Centos 添加以下内容</span><br><span class="hljs-regexp">/usr/</span>bin<span class="hljs-regexp">/supervisord -c /</span>etc<span class="hljs-regexp">/supervisord.conf</span><br></code></pre></div></td></tr></table></figure><p>以上内容需要添加在 exit 命令前，而且由于在执行 rc.local 脚本时，PATH 环境变量未全部初始化，因此命令需要使用绝对路径。</p><p>在添加前，先在终端测试一下命令是否能正常执行，如果找不到 supervisord，可以用如下命令找到</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">sudo find / -name supervisord<br><span class="hljs-symbol"><br>output:</span><br><span class="hljs-meta-keyword">/usr/</span>local<span class="hljs-meta-keyword">/bin/</span>supervisord<br></code></pre></div></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p>这段日子真的很难    <a href="https://www.jianshu.com/p/bf2b3f4dec73" target="_blank" rel="noopener">https://www.jianshu.com/p/bf2b3f4dec73</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django与Celery配合实现定时任务</title>
      <link href="2019/05/05/Django%E4%B8%8ECelery%E9%85%8D%E5%90%88%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/"/>
      <url>2019/05/05/Django%E4%B8%8ECelery%E9%85%8D%E5%90%88%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2018/12/12/Ft8aX4.png" alt="Ft8aX4.png"></p><a id="more"></a><h2 id="一、前言"><a href="#一、前言" class="headerlink" title="一、前言"></a>一、前言</h2><p>　　Celery是一个基于python开发的分布式任务队列，而做python WEB开发最为流行的框架莫属Django，但是Django的请求处理过程都是同步的无法实现异步任务，若要实现异步任务处理需要通过其他方式（前端的一般解决方案是ajax操作），而后台Celery就是不错的选择。倘若一个用户在执行某些操作需要等待很久才返回，这大大降低了网站的吞吐量。</p><p>​    另一方面，当我们需要处理一些定时任务时Celery强大的生态环境也是他的优势。</p><p>​    在刚刚学习如何使用Celery时可能会觉得难以入手，我利用工作之余研究这些文档前前后后也花了快一个周的样子，目前已经可以满足我的需求，所以静下心多写多测试，加油。</p><h2 id="二、配置使用"><a href="#二、配置使用" class="headerlink" title="二、配置使用"></a>二、配置使用</h2><p>　　celery很容易集成到Django框架中，当然如果想要实现定时任务的话还需要安装django-celery-beta插件，后面会说明。需要注意的是Celery4.0只支持Django版本&gt;=1.8的，如果是小于1.8版本需要使用Celery3.1。</p><p>本示例使用主要依赖包如下：</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">celery</span>==<span class="hljs-number">4.2</span>.<span class="hljs-number">1</span><br><span class="hljs-attr">Django</span>==<span class="hljs-number">1.11</span>.<span class="hljs-number">7</span><br><span class="hljs-attr">django-celery-beat</span>==<span class="hljs-number">1.4</span>.<span class="hljs-number">0</span><br><span class="hljs-attr">django-celery-results</span>==<span class="hljs-number">1.0</span>.<span class="hljs-number">4</span><br><span class="hljs-attr">PyMySQL</span>==<span class="hljs-number">0.9</span>.<span class="hljs-number">2</span><br><span class="hljs-attr">redis</span>==<span class="hljs-number">2.10</span>.<span class="hljs-number">6</span><br></code></pre></div></td></tr></table></figure><h3 id="配置"><a href="#配置" class="headerlink" title="配置"></a>配置</h3><p>　　新建立项目<code>celery_demo</code>,目录结构（每个app下多了个tasks文件，用于定义任务）：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">celery_demo</span><br>├── <span class="hljs-selector-tag">app01</span><br>│   ├── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">apps</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">migrations</span><br>│   │   └── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">models</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">tasks</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">views</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">manage</span><span class="hljs-selector-class">.py</span><br>├── <span class="hljs-selector-tag">celery_demo</span><br>│   ├── __<span class="hljs-selector-tag">init__</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">settings</span><span class="hljs-selector-class">.py</span><br>│   ├── <span class="hljs-selector-tag">urls</span><span class="hljs-selector-class">.py</span><br>│   └── <span class="hljs-selector-tag">wsgi</span><span class="hljs-selector-class">.py</span><br>└── <span class="hljs-selector-tag">templates</span><br></code></pre></div></td></tr></table></figure><p>在项目目录<code>celery_demo/celery_demo/</code>目录下新建<code>celery.py</code>:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python3</span><br><span class="hljs-comment"># -*- coding:utf-8 -*-</span><br><span class="hljs-comment"># Author:wd</span><br><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><span class="hljs-keyword">import</span> os<br><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> Celery<br><br><span class="hljs-comment"># 设置django环境</span><br>os.environ.setdefault(<span class="hljs-string">'DJANGO_SETTINGS_MODULE'</span>, <span class="hljs-string">'celery_demo.settings'</span>)  <br>app = Celery(<span class="hljs-string">'celery_demo'</span>)<br><span class="hljs-comment">#  使用CELERY_ 作为前缀，在settings中写配置</span><br>app.config_from_object(<span class="hljs-string">'django.conf:settings'</span>, namespace=<span class="hljs-string">'CELERY'</span>) <br><span class="hljs-comment"># 发现任务文件每个app下的task.py</span><br>app.autodiscover_tasks()<br></code></pre></div></td></tr></table></figure><p>在<code>celery_demo/celery_demo/__init__.py</code>写入：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><span class="hljs-keyword">from</span> .celery <span class="hljs-keyword">import</span> app <span class="hljs-keyword">as</span> celery_app<br>__all__ = [<span class="hljs-string">'celery_app'</span>]<br></code></pre></div></td></tr></table></figure><p>在<code>celery_demo/celery_demo/settings.py</code>写入：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">CELERY_BROKER_URL = <span class="hljs-string">'redis://10.1.210.69:6379/0'</span> <span class="hljs-comment"># Broker配置，使用Redis作为消息中间件</span><br><br>CELERY_RESULT_BACKEND = <span class="hljs-string">'redis://10.1.210.69:6379/0'</span> <span class="hljs-comment"># BACKEND配置，这里使用redis</span><br><br>CELERY_RESULT_SERIALIZER = <span class="hljs-string">'json'</span> <span class="hljs-comment"># 结果序列化方案</span><br></code></pre></div></td></tr></table></figure><p>进入项目的<code>celery_demo</code>目录启动<code>worker</code>：</p><figure class="highlight nginx"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">celery</span> worker -A taskproj -l <span class="hljs-literal">debug</span><br></code></pre></div></td></tr></table></figure><h3 id="定义与触发任务"><a href="#定义与触发任务" class="headerlink" title="定义与触发任务"></a>定义与触发任务</h3><p>任务定义在每个tasks文件中，<code>app01／tasks.py</code>：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> __future__ <span class="hljs-keyword">import</span> absolute_import, unicode_literals<br><span class="hljs-keyword">from</span> celery <span class="hljs-keyword">import</span> shared_task<br><br><br><span class="hljs-meta">@shared_task</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span>:</span><br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-meta">@shared_task</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mul</span><span class="hljs-params">(x, y)</span>:</span><br>    <span class="hljs-keyword">return</span> x * y<br></code></pre></div></td></tr></table></figure><p>视图中触发任务</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> tasks<br><br><span class="hljs-comment"># Create your views here.</span><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">(request,*args,**kwargs)</span>:</span><br>    res=tasks.add.delay(<span class="hljs-number">1</span>,<span class="hljs-number">3</span>)<br>    <span class="hljs-comment">#任务逻辑</span><br>    <span class="hljs-keyword">return</span> JsonResponse(&#123;<span class="hljs-string">'status'</span>:<span class="hljs-string">'successful'</span>,<span class="hljs-string">'task_id'</span>:res.task_id&#125;)<br></code></pre></div></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/index" target="_blank" rel="noopener">http://127.0.0.1:8000/index</a></p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180823175922694-2037330814.png" alt="img"></p><p> 若想获取任务结果，可以通过task_id使用AsyncResult获取结果,还可以直接通过backend获取：</p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824100626480-211214086.png" alt="img"></p><h3 id="扩展"><a href="#扩展" class="headerlink" title="扩展"></a>扩展</h3><p>　　除了redis、rabbitmq能做结果存储外，还可以使用Django的orm作为结果存储，当然需要安装依赖插件，这样的好处在于我们可以直接通过django的数据查看到任务状态，同时为可以制定更多的操作，下面介绍如何使用orm作为结果存储。</p><ol><li>安装</li></ol><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> django-celery-results<br></code></pre></div></td></tr></table></figure><ol start="2"><li>配置settings.py，注册app</li></ol><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">INSTALLED_APPS = (<br>    <span class="hljs-params">...</span>,<br>    <span class="hljs-string">'django_celery_results'</span>,<br>)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>修改backend配置，将Redis改为django-db</li></ol><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">#CELERY_RESULT_BACKEND = <span class="hljs-string">'redis://10.1.210.69:6379/0'</span> # BACKEND配置，这里使用redis<br><br>CELERY_RESULT_BACKEND = <span class="hljs-string">'django-db'</span>  #使用django orm 作为结果存储<br></code></pre></div></td></tr></table></figure><ol start="4"><li>修改数据库</li></ol><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">python3</span> manage.<span class="hljs-keyword">py</span> migrate django_celery_results<br></code></pre></div></td></tr></table></figure><p>此时会看到数据库会多创建：</p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824101945385-924791653.png" alt="img"> 当然你有时候需要对task表进行操作，以下源码的表结构定义：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskResult</span><span class="hljs-params">(models.Model)</span>:</span><br>    <span class="hljs-string">"""Task result/status."""</span><br><br>    task_id = models.CharField(_(<span class="hljs-string">'task id'</span>), max_length=<span class="hljs-number">255</span>, unique=<span class="hljs-literal">True</span>)<br>    task_name = models.CharField(_(<span class="hljs-string">'task name'</span>), null=<span class="hljs-literal">True</span>, max_length=<span class="hljs-number">255</span>)<br>    task_args = models.TextField(_(<span class="hljs-string">'task arguments'</span>), null=<span class="hljs-literal">True</span>)<br>    task_kwargs = models.TextField(_(<span class="hljs-string">'task kwargs'</span>), null=<span class="hljs-literal">True</span>)<br>    status = models.CharField(_(<span class="hljs-string">'state'</span>), max_length=<span class="hljs-number">50</span>,<br>                              default=states.PENDING,<br>                              choices=TASK_STATE_CHOICES<br>                              )<br>    content_type = models.CharField(_(<span class="hljs-string">'content type'</span>), max_length=<span class="hljs-number">128</span>)<br>    content_encoding = models.CharField(_(<span class="hljs-string">'content encoding'</span>), max_length=<span class="hljs-number">64</span>)<br>    result = models.TextField(null=<span class="hljs-literal">True</span>, default=<span class="hljs-literal">None</span>, editable=<span class="hljs-literal">False</span>)<br>    date_done = models.DateTimeField(_(<span class="hljs-string">'done at'</span>), auto_now=<span class="hljs-literal">True</span>)<br>    traceback = models.TextField(_(<span class="hljs-string">'traceback'</span>), blank=<span class="hljs-literal">True</span>, null=<span class="hljs-literal">True</span>)<br>    hidden = models.BooleanField(editable=<span class="hljs-literal">False</span>, default=<span class="hljs-literal">False</span>, db_index=<span class="hljs-literal">True</span>)<br>    meta = models.TextField(null=<span class="hljs-literal">True</span>, default=<span class="hljs-literal">None</span>, editable=<span class="hljs-literal">False</span>)<br><br>    objects = managers.TaskResultManager()<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        <span class="hljs-string">"""Table information."""</span><br><br>        ordering = [<span class="hljs-string">'-date_done'</span>]<br><br>        verbose_name = _(<span class="hljs-string">'task result'</span>)<br>        verbose_name_plural = _(<span class="hljs-string">'task results'</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_dict</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> &#123;<br>            <span class="hljs-string">'task_id'</span>: self.task_id,<br>            <span class="hljs-string">'task_name'</span>: self.task_name,<br>            <span class="hljs-string">'task_args'</span>: self.task_args,<br>            <span class="hljs-string">'task_kwargs'</span>: self.task_kwargs,<br>            <span class="hljs-string">'status'</span>: self.status,<br>            <span class="hljs-string">'result'</span>: self.result,<br>            <span class="hljs-string">'date_done'</span>: self.date_done,<br>            <span class="hljs-string">'traceback'</span>: self.traceback,<br>            <span class="hljs-string">'meta'</span>: self.meta,<br>        &#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-string">'&lt;Task: &#123;0.task_id&#125; (&#123;0.status&#125;)&gt;'</span>.format(self)<br></code></pre></div></td></tr></table></figure><h2 id="三、Django中使用定时任务"><a href="#三、Django中使用定时任务" class="headerlink" title="三、Django中使用定时任务"></a>三、Django中使用定时任务</h2><p>　　如果想要在django中使用定时任务功能同样是靠beat完成任务发送功能，当在Django中使用定时任务时，需要安装django-celery-beat插件。以下将介绍使用过程。</p><h3 id="安装配置"><a href="#安装配置" class="headerlink" title="安装配置"></a>安装配置</h3><p>1.beat插件安装</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip3 <span class="hljs-keyword">install</span> django-celery-beat<br></code></pre></div></td></tr></table></figure><p>2.注册APP</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">INSTALLED_APPS</span> = [<br>    ....   <br>    <span class="hljs-string">'django_celery_beat'</span>,<br>]<br></code></pre></div></td></tr></table></figure><p>3.数据库变更</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">python3</span> manage.<span class="hljs-keyword">py</span> migrate django_celery_beat<br></code></pre></div></td></tr></table></figure><p>4.分别启动woker和beta</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">celery -A proj beat -l info --scheduler django_celery_beat.schedulers:DatabaseScheduler  <span class="hljs-comment">#启动beta 调度器使用数据库</span><br><br>celery worker -A taskproj -l info <span class="hljs-comment">#启动woker</span><br></code></pre></div></td></tr></table></figure><p>5.配置admin</p><p>在<code>urls.py</code>写入：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment"># urls.py</span><br><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br> <br>urlpatterns = [<br>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),<br>]<br></code></pre></div></td></tr></table></figure><p>6.创建用户</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">python3</span> manage.<span class="hljs-keyword">py</span> createsuperuser<br></code></pre></div></td></tr></table></figure><p>7.登录admin进行管理（地址<a href="http://127.0.0.1:8000/admin）并且还可以看到我们上次使用orm作为结果存储的表。" target="_blank" rel="noopener">http://127.0.0.1:8000/admin）并且还可以看到我们上次使用orm作为结果存储的表。</a></p><p><a href="http://127.0.0.1:8000/admin/login/?next=/admin/" target="_blank" rel="noopener">http://127.0.0.1:8000/admin/login/?next=/admin/</a></p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824140802430-1813363210.png" alt="img"></p><p> 使用示例：</p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824142214576-1072914422.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824142306542-76662934.png" alt="img"></p><p> 查看结果：</p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824142457980-2047538109.png" alt="img"></p><h3 id="二次开发"><a href="#二次开发" class="headerlink" title="二次开发"></a>二次开发</h3><p>　　django-celery-beat插件本质上是对数据库表变化检查，一旦有数据库表改变，调度器重新读取任务进行调度，所以如果想自己定制的任务页面，只需要操作beat插件的四张表就可以了。当然你还可以自己定义调度器，django-celery-beat插件已经内置了model，只需要进行导入便可进行orm操作，以下我用django reset api进行示例：</p><p><strong>settings.py</strong></p><figure class="highlight sml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-type">INSTALLED_APPS</span> = [<br>    <span class="hljs-symbol">'django</span>.contrib.admin',<br>    <span class="hljs-symbol">'django</span>.contrib.auth',<br>    <span class="hljs-symbol">'django</span>.contrib.contenttypes',<br>    <span class="hljs-symbol">'django</span>.contrib.sessions',<br>    <span class="hljs-symbol">'django</span>.contrib.messages',<br>    <span class="hljs-symbol">'django</span>.contrib.staticfiles',<br>    <span class="hljs-symbol">'app01</span>.apps.<span class="hljs-type">App01Config'</span>,<br>    <span class="hljs-symbol">'django_celery_results'</span>,<br>    <span class="hljs-symbol">'django_celery_beat'</span>,<br>    <span class="hljs-symbol">'rest_framework'</span>,<br>]<br></code></pre></div></td></tr></table></figure><p><strong>urls.py</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">urlpatterns = [<br>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),<br>    url(<span class="hljs-string">r'^index$'</span>, views.index),<br>    url(<span class="hljs-string">r'^res$'</span>, views.get_res),<br>    url(<span class="hljs-string">r'^tasks$'</span>, views.TaskView.as_view(&#123;<span class="hljs-string">'get'</span>:<span class="hljs-string">'list'</span>&#125;)),<br>]<br></code></pre></div></td></tr></table></figure><p><strong>views.py</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django_celery_beat.models <span class="hljs-keyword">import</span> PeriodicTask  <span class="hljs-comment">#倒入插件model</span><br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> pagination<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> ModelViewSet<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Userserializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = PeriodicTask<br>        fields = <span class="hljs-string">'__all__'</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Mypagination</span><span class="hljs-params">(pagination.PageNumberPagination)</span>:</span><br>    <span class="hljs-string">"""自定义分页"""</span><br>    page_size=<span class="hljs-number">2</span><br>    page_query_param = <span class="hljs-string">'p'</span><br>    page_size_query_param=<span class="hljs-string">'size'</span><br>    max_page_size=<span class="hljs-number">4</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TaskView</span><span class="hljs-params">(ModelViewSet)</span>:</span><br>    queryset = PeriodicTask.objects.all()<br>    serializer_class = Userserializer<br>    permission_classes = []<br>    pagination_class = Mypagination<br></code></pre></div></td></tr></table></figure><p>访问<a href="http://127.0.0.1:8000/tasks如下：" target="_blank" rel="noopener">http://127.0.0.1:8000/tasks如下：</a></p><p><img src="https://images2018.cnblogs.com/blog/1075473/201808/1075473-20180824153332274-1150335891.png" alt="img"></p><p>参考资料：</p><blockquote><p>W-D：<a href="https://www.cnblogs.com/wdliu/p/9530219.html" target="_blank" rel="noopener">https://www.cnblogs.com/wdliu/p/9530219.html</a></p><p>还在琢磨：<a href="https://blog.csdn.net/mbl114/article/details/78047175" target="_blank" rel="noopener">https://blog.csdn.net/mbl114/article/details/78047175</a></p><p>Celery文档：<a href="http://docs.celeryproject.org/en/latest/" target="_blank" rel="noopener">http://docs.celeryproject.org/en/latest/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> Celery </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker构建Django部署环境（三）Docker Compose</title>
      <link href="2019/05/05/Docker%20Compose%E7%AE%80%E4%BB%8B/"/>
      <url>2019/05/05/Docker%20Compose%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<p><em>由于Django的配置文件实在有点多，这里我们先用Flask最小化演练。</em></p><p><code>Docker Compose</code> 是 Docker 官方编排（Orchestration）项目之一，负责快速的部署分布式应用。<br><a id="more"></a></p><p>本章将介绍 <code>Compose</code> 项目情况以及安装和使用。</p><p><code>Compose</code> 项目是 Docker 官方的开源项目，负责实现对 Docker 容器集群的快速编排。从功能上看，跟 <code>OpenStack</code> 中的 <code>Heat</code> 十分类似。</p><p>其代码目前在 <a href="https://github.com/docker/compose" target="_blank" rel="noopener">https://github.com/docker/compose</a> 上开源。</p><p><code>Compose</code> 定位是 「定义和运行多个 Docker 容器的应用（Defining and running multi-container Docker applications）」，其前身是开源项目 Fig。</p><p>通过第一部分中的介绍，我们知道使用一个 <code>Dockerfile</code> 模板文件，可以让用户很方便的定义一个单独的应用容器。然而，在日常工作中，经常会碰到需要多个容器相互配合来完成某项任务的情况。例如要实现一个 Web 项目，除了 Web 服务容器本身，往往还需要再加上后端的数据库服务容器，甚至还包括负载均衡容器等。</p><p><code>Compose</code> 恰好满足了这样的需求。它允许用户通过一个单独的 <code>docker-compose.yml</code> 模板文件（YAML 格式）来定义一组相关联的应用容器为一个项目（project）。</p><p><code>Compose</code> 中有两个重要的概念：</p><ul><li>服务 (<code>service</code>)：一个应用的容器，实际上可以包括若干运行相同镜像的容器实例。</li><li>项目 (<code>project</code>)：由一组关联的应用容器组成的一个完整业务单元，在 <code>docker-compose.yml</code> 文件中定义。</li></ul><p><code>Compose</code> 的默认管理对象是项目，通过子命令对项目中的一组容器进行便捷地生命周期管理。</p><p><code>Compose</code> 项目由 Python 编写，实现上调用了 Docker 服务提供的 API 来对容器进行管理。因此，只要所操作的平台支持 Docker API，就可以在其上利用 <code>Compose</code> 来进行编排管理。</p><h2 id="安装Docker-Compose"><a href="#安装Docker-Compose" class="headerlink" title="安装Docker Compose"></a>安装Docker Compose</h2><p>在Linux上安装Docker Compose</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">curl -L https:<span class="hljs-regexp">//gi</span>thub.com<span class="hljs-regexp">/docker/</span>compose<span class="hljs-regexp">/releases/</span>download<span class="hljs-regexp">/1.25.0-rc1/</span>docker-compose-`uname -s`-`uname -m` -o <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br>chmod +x <span class="hljs-regexp">/usr/</span>local<span class="hljs-regexp">/bin/</span>docker-compose<br></code></pre></div></td></tr></table></figure><p>或者通过Pip安装Docker Compose</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo pip install -U docker-compose</span><br></code></pre></div></td></tr></table></figure><p>测试Docker Compose是否工作</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> docker-compose --version</span><br></code></pre></div></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/19/VX4MB4.png" alt="VX4MB4.png"></p><h2 id="获取示例应用"><a href="#获取示例应用" class="headerlink" title="获取示例应用"></a>获取示例应用</h2><ul><li>应用容器，运行Python示例程序</li><li>Redis容器，运行Redis数据库</li></ul><p>这里我们构建一个最简单的flask服务，它将对访问计数，计数器依赖于redis的一个自增键。就是这么简单明了的一个demo。我们开始吧</p><p>创建app.py文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> redis <span class="hljs-keyword">import</span> Redis<br><span class="hljs-keyword">import</span> os<br><br>app = Flask(__name__)<br>redis = Redis(host=<span class="hljs-string">"redis"</span>, port=<span class="hljs-number">6379</span>)<br><br><span class="hljs-meta">@app.route('/')</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">hello</span><span class="hljs-params">()</span>:</span><br>    redis.incr(<span class="hljs-string">'hits'</span>)<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">'Hello Docker Book reader! I have been seen &#123;0&#125; times'</span>.format(redis.get(<span class="hljs-string">'hits'</span>))<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">"__main__"</span>:<br>    app.run(host=<span class="hljs-string">"0.0.0.0"</span>, debug=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><p>创建requirements.txt</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">flask<br>redis</span><br></code></pre></div></td></tr></table></figure><p>创建composeapp的Dockerfile</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> mkdir composeapp &amp;&amp; <span class="hljs-built_in">cd</span> composeapp</span><br><span class="hljs-meta">$</span><span class="bash"> touch Dockerfile</span><br></code></pre></div></td></tr></table></figure><p>在Dockerfile中写入一下内容:</p><figure class="highlight dockerfile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs dockerfile"><span class="hljs-keyword">FROM</span> python:<span class="hljs-number">3.7</span><br><span class="hljs-keyword">MAINTAINER</span> James Turnbull &lt;james@example.com&gt;<br><span class="hljs-keyword">ENV</span> REFRESHED_AT <span class="hljs-number">2016</span>-<span class="hljs-number">08</span>-<span class="hljs-number">01</span><br><br><span class="hljs-keyword">ADD</span><span class="bash"> . /composeapp</span><br><br><span class="hljs-keyword">WORKDIR</span><span class="bash"> /composeapp</span><br><br><span class="hljs-keyword">RUN</span><span class="bash"> pip install -r requirements.txt</span><br></code></pre></div></td></tr></table></figure><p>构建composeapp镜像</p><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ sudo docker <span class="hljs-keyword">build </span>-t <span class="hljs-keyword">jamtur01/composeapp </span>.<br></code></pre></div></td></tr></table></figure><p>创建docker-compose.yml文件</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini">web:<br>  image: jamtur01/composeapp<br>  command: python app.py<br>  ports:<br>   - "5000:5000"<br>  volumes:<br>   - .:/composeapp<br>  links:<br>   - redis<br>redis:<br>  image: redis<br></code></pre></div></td></tr></table></figure><p>启动示例应用服务，必须在docker-compose.yml文件所在目录执行</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>sudo docker-compose up<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/19/VX4Y36.png" alt="VX4Y36.png"></p><p>访问对应的IP端口：</p><p><img src="https://s2.ax1x.com/2019/06/19/VXIZOU.png" alt="VXIZOU.png"></p><p>以守护进程方式运行Compose</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>sudo docker-compose up -d<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/19/VX4auD.png" alt="VX4auD.png"></p><p>查看服务的运行状态</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>sudo docker-compose ps<br></code></pre></div></td></tr></table></figure><p><img src="https://s2.ax1x.com/2019/06/19/VX4bvT.png" alt="VX4bvT.png"></p><p>查看服务的日志事件</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>sudo docker-compose logs<br></code></pre></div></td></tr></table></figure><p>停止正在运行的服务</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ sudo docker-compose <span class="hljs-built_in">stop</span><br></code></pre></div></td></tr></table></figure><p>启动这些服务</p><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ sudo docker-compose <span class="hljs-literal">start</span><br></code></pre></div></td></tr></table></figure><p>删除这些服务（必须服务停止的状态下）</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-variable">$ </span>sudo docker-compose rm<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ES基础学习</title>
      <link href="2019/05/05/ES6/"/>
      <url>2019/05/05/ES6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是ECMAScript"><a href="#1-什么是ECMAScript" class="headerlink" title="1. 什么是ECMAScript"></a>1. 什么是ECMAScript</h2><blockquote><p>ECMAScript是一种由<a href="https://baike.baidu.com/item/Ecma%E5%9B%BD%E9%99%85" target="_blank" rel="noopener">Ecma国际</a>（前身为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A/2052072" target="_blank" rel="noopener">欧洲计算机制造商协会</a>,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">程序设计语言</a>。这种语言在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">万维网</a>上应用广泛，它往往被称为<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a>或<a href="https://baike.baidu.com/item/JScript" target="_blank" rel="noopener">JScript</a>，所以它可以理解为是javascript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。<br><a id="more"></a></p></blockquote><h3 id="ECMAScript-与-JavaScript"><a href="#ECMAScript-与-JavaScript" class="headerlink" title="ECMAScript 与 JavaScript"></a>ECMAScript 与 JavaScript</h3><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><h2 id="2-什么是ES6"><a href="#2-什么是ES6" class="headerlink" title="2. 什么是ES6"></a>2. 什么是ES6</h2><p><strong>ES6</strong>是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。</p><p>ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。</p><p>尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p><h2 id="3-ES6语法"><a href="#3-ES6语法" class="headerlink" title="3. ES6语法"></a>3. ES6语法</h2><h3 id="3-1-let命令"><a href="#3-1-let命令" class="headerlink" title="3.1 let命令"></a>3.1 let命令</h3><h4 id="3-1-1-基础用法"><a href="#3-1-1-基础用法" class="headerlink" title="3.1.1 基础用法"></a>3.1.1 基础用法</h4><p>es6新增了 let 命令，用来声明变量。它的用法类似于 var ，但是所声明的变量，只在let命令所在的代码块内有效。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">var</span> b = <span class="hljs-number">1</span>;<br>&#125;<br><br>a <span class="hljs-comment">// ReferenceError: a is not defined.</span><br>b <span class="hljs-comment">// 1</span><br></code></pre></div></td></tr></table></figure><p>上面代码在代码块之中，分别用 let 和 var 声明了两个变量。然后在代码块之外调用这两个变量，结果 let 声明的变量报错， var 声明的变量返回了正确的值。这表明， let 声明的变量只在它所在的代码块有效</p><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  <span class="hljs-comment">// ...</span><br>&#125;<br><br><span class="hljs-built_in">console</span>.log(i);<br><span class="hljs-comment">// ReferenceError: i is not defined</span><br></code></pre></div></td></tr></table></figure><p>上面代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> a = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  a[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;;<br>&#125;<br>a[<span class="hljs-number">6</span>](); <span class="hljs-comment">// 10</span><br></code></pre></div></td></tr></table></figure><p>上面代码中，变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> a = [];<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">10</span>; i++) &#123;<br>  a[i] = <span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>    <span class="hljs-built_in">console</span>.log(i);<br>  &#125;;<br>&#125;<br>a[<span class="hljs-number">6</span>](); <span class="hljs-comment">// 6</span><br></code></pre></div></td></tr></table></figure><p>上面代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">3</span>; i++) &#123;<br>  <span class="hljs-keyword">let</span> i = <span class="hljs-string">'abc'</span>;<br>  <span class="hljs-built_in">console</span>.log(i);<br>&#125;<br><span class="hljs-comment">// abc</span><br><span class="hljs-comment">// abc</span><br><span class="hljs-comment">// abc</span><br></code></pre></div></td></tr></table></figure><p>上面代码正确运行，输出了 3 次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><h4 id="3-1-2-不存在变量提升"><a href="#3-1-2-不存在变量提升" class="headerlink" title="3.1.2 不存在变量提升"></a>3.1.2 不存在变量提升</h4><p><code>var</code>命令会发生”变量提升“现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">// var 的情况</span><br><span class="hljs-built_in">console</span>.log(foo); <span class="hljs-comment">// 输出undefined</span><br><span class="hljs-keyword">var</span> foo = <span class="hljs-number">2</span>;<br><br><span class="hljs-comment">// let 的情况</span><br><span class="hljs-built_in">console</span>.log(bar); <span class="hljs-comment">// 报错ReferenceError</span><br><span class="hljs-keyword">let</span> bar = <span class="hljs-number">2</span>;<br></code></pre></div></td></tr></table></figure><p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><h4 id="3-1-3-为什么需要块级作用域？"><a href="#3-1-3-为什么需要块级作用域？" class="headerlink" title="3.1.3 为什么需要块级作用域？"></a>3.1.3 为什么需要块级作用域？</h4><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p> 第一种场景，内层变量可能会覆盖外层变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> tmp = <span class="hljs-keyword">new</span> <span class="hljs-built_in">Date</span>();<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">f</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-built_in">console</span>.log(tmp);<br>  <span class="hljs-keyword">if</span> (<span class="hljs-literal">false</span>) &#123;<br>    <span class="hljs-keyword">var</span> tmp = <span class="hljs-string">'hello world'</span>;<br>  &#125;<br>&#125;<br><br>f(); <span class="hljs-comment">// undefined</span><br></code></pre></div></td></tr></table></figure><p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> s = <span class="hljs-string">'hello'</span>;<br><br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">var</span> i = <span class="hljs-number">0</span>; i &lt; s.length; i++) &#123;<br>  <span class="hljs-built_in">console</span>.log(s[i]);<br>&#125;<br><br><span class="hljs-built_in">console</span>.log(i); <span class="hljs-comment">// 5</span><br></code></pre></div></td></tr></table></figure><p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h4 id="3-1-4-不允许重复声明"><a href="#3-1-4-不允许重复声明" class="headerlink" title="3.1.4 不允许重复声明"></a>3.1.4 不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">// 报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">var</span> a = <span class="hljs-number">1</span>;<br>&#125;<br><br><span class="hljs-comment">// 报错</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params"></span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">10</span>;<br>  <span class="hljs-keyword">let</span> a = <span class="hljs-number">1</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>因此，不能在函数内部重新声明参数。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  <span class="hljs-keyword">let</span> arg; <span class="hljs-comment">// 报错</span><br>&#125;<br><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">func</span>(<span class="hljs-params">arg</span>) </span>&#123;<br>  &#123;<br>    <span class="hljs-keyword">let</span> arg; <span class="hljs-comment">// 不报错</span><br>  &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="3-2-const命令"><a href="#3-2-const命令" class="headerlink" title="3.2 const命令"></a>3.2 const命令</h3><h4 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h4><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><figure class="highlight processing"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">const</span> <span class="hljs-literal">PI</span> = <span class="hljs-number">3.1415</span>;<br><span class="hljs-literal">PI</span> <span class="hljs-comment">// 3.1415</span><br><br><span class="hljs-literal">PI</span> = <span class="hljs-number">3</span>;<br><span class="hljs-comment">// TypeError: Assignment to constant variable.</span><br></code></pre></div></td></tr></table></figure><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">const</span> foo;<br><span class="hljs-comment">// SyntaxError: Missing initializer in const declaration</span><br></code></pre></div></td></tr></table></figure><p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><figure class="highlight monkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  <span class="hljs-keyword">const</span> <span class="hljs-built_in">MAX</span> = <span class="hljs-number">5</span>;<br>&#125;<br><br><span class="hljs-built_in">MAX</span> // Uncaught ReferenceError: <span class="hljs-built_in">MAX</span> is <span class="hljs-keyword">not</span> defined<br></code></pre></div></td></tr></table></figure><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">if</span> (<span class="hljs-literal">true</span>) &#123;<br>  console.<span class="hljs-keyword">log</span>(<span class="hljs-keyword">MAX</span>); <span class="hljs-comment">// ReferenceError</span><br>  const <span class="hljs-keyword">MAX</span> = <span class="hljs-number">5</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">var</span> message = <span class="hljs-string">"Hello!"</span>;<br><span class="hljs-keyword">let</span> age = <span class="hljs-number">25</span>;<br><br><span class="hljs-comment">// 以下两行都会报错</span><br><span class="hljs-keyword">const</span> message = <span class="hljs-string">"Goodbye!"</span>;<br><span class="hljs-keyword">const</span> age = <span class="hljs-number">30</span>;<br></code></pre></div></td></tr></table></figure><h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><p>传统的JavaScript语言，输出模板通常是这样的写的。</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$(<span class="hljs-comment">'#result').append(</span><br>  <span class="hljs-comment">'There are <span class="hljs-doctag">&lt;b&gt;</span>' + basket.count + '<span class="hljs-doctag">&lt;/b&gt;</span> ' +</span><br>  <span class="hljs-comment">'items in your basket, ' +</span><br>  <span class="hljs-comment">'<span class="hljs-doctag">&lt;em&gt;</span>' + basket.onSale +</span><br>  <span class="hljs-comment">'<span class="hljs-doctag">&lt;/em&gt;</span> are on sale!'</span><br>);<br></code></pre></div></td></tr></table></figure><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><figure class="highlight dust"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="xml">$('#result').append(`<br>  There are <span class="hljs-tag">&lt;<span class="hljs-name">b</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;basket.count&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">b</span>&gt;</span> items<br>   in your basket, <span class="hljs-tag">&lt;<span class="hljs-name">em</span>&gt;</span>$</span><span class="hljs-template-variable">&#123;basket.onSale&#125;</span><span class="xml"><span class="hljs-tag">&lt;/<span class="hljs-name">em</span>&gt;</span><br>  are on sale!<br>`);</span><br></code></pre></div></td></tr></table></figure><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">// 普通字符串</span><br>`In JavaScript <span class="hljs-string">'\n'</span> is a <span class="hljs-built_in">line</span>-feed.`<br><br><span class="hljs-comment">// 多行字符串</span><br>`In JavaScript <span class="hljs-keyword">this</span> is<br> <span class="hljs-keyword">not</span> legal.`<br><br>console.<span class="hljs-built_in">log</span>(`<span class="hljs-built_in">string</span> <span class="hljs-built_in">text</span> <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br><span class="hljs-built_in">string</span> <span class="hljs-built_in">text</span> <span class="hljs-built_in">line</span> <span class="hljs-number">2</span>`);<br><br><span class="hljs-comment">// 字符串中嵌入变量</span><br>let name = <span class="hljs-string">"Bob"</span>, time = <span class="hljs-string">"today"</span>;<br>`Hello $&#123;name&#125;, how are you $&#123;time&#125;?`<br></code></pre></div></td></tr></table></figure><p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><figure class="highlight autohotkey"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">let greeting = `\`Yo\` World!`;<br></code></pre></div></td></tr></table></figure><p>输入结果：<code>Yo</code> World!</p><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><figure class="highlight gherkin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$('<span class="hljs-comment">#list').html(`</span><br><span class="hljs-variable">&lt;ul&gt;</span><br>  <span class="hljs-variable">&lt;li&gt;</span>first<span class="hljs-variable">&lt;/li&gt;</span><br>  <span class="hljs-variable">&lt;li&gt;</span>second<span class="hljs-variable">&lt;/li&gt;</span><br><span class="hljs-variable">&lt;/ul&gt;</span><br>`);<br></code></pre></div></td></tr></table></figure><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p>阮一峰：<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/let</a></p><p>维基百科： <a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/ECMAScript</a></p><p>百度百科：<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
            <tag> js </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker构建Django部署环境（一）核心概念</title>
      <link href="2019/05/05/Docker%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/"/>
      <url>2019/05/05/Docker%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/</url>
      
        <content type="html"><![CDATA[<p><strong>本文只是对Docker的概念做了较为详细的介绍，并不涉及一些像Docker环境的安装以及Docker的一些常见操作和命令。</strong></p><p><strong>阅读本文大概需要15分钟，通过阅读本文你将知道一下概念：</strong></p><ul><li><strong>容器</strong></li><li><strong>什么是Docker？</strong></li><li><strong>Docker思想、特点</strong></li><li><strong>Docker容器主要解决什么问题</strong></li><li><strong>容器 VS 虚拟机</strong></li><li><strong>Docker基本概念： 镜像（Image），容器（Container），仓库（Repository）</strong><a id="more"></a></li></ul><hr><blockquote><p><strong>Docker 是世界领先的软件容器平台</strong>，所以想要搞懂Docker的概念我们必须先从容器开始说起。</p></blockquote><h2 id="一-先从认识容器开始"><a href="#一-先从认识容器开始" class="headerlink" title="一 先从认识容器开始"></a>一 先从认识容器开始</h2><h3 id="1-1-什么是容器？"><a href="#1-1-什么是容器？" class="headerlink" title="1.1 什么是容器？"></a>1.1 什么是容器？</h3><h4 id="先来看看容器较为官方的解释"><a href="#先来看看容器较为官方的解释" class="headerlink" title="先来看看容器较为官方的解释"></a>先来看看容器较为官方的解释</h4><p><strong>一句话概括容器：容器就是将软件打包成标准化单元，以用于开发、交付和部署。</strong></p><ul><li><strong>容器镜像是轻量的、可执行的独立软件包</strong> ，包含软件运行所需的所有内容：代码、运行时环境、系统工具、系统库和设置。</li><li><strong>容器化软件适用于基于Linux和Windows的应用，在任何环境中都能够始终如一地运行。</strong></li><li><strong>容器赋予了软件独立性</strong> ，使其免受外在环境差异（例如，开发和预演环境的差异）的影响，从而有助于减少团队间在相同基础设施上运行不同软件时的冲突。</li></ul><h4 id="再来看看容器较为通俗的解释"><a href="#再来看看容器较为通俗的解释" class="headerlink" title="再来看看容器较为通俗的解释"></a>再来看看容器较为通俗的解释</h4><p><strong>如果需要通俗的描述容器的话，我觉得容器就是一个存放东西的地方，就像书包可以装各种文具、衣柜可以放各种衣服、鞋架可以放各种鞋子一样。我们现在所说的容器存放的东西可能更偏向于应用比如网站、程序甚至是系统环境。</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/6/17/1640cae21c18e404?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="认识容器"></p><h3 id="1-2-图解物理机、虚拟机与容器"><a href="#1-2-图解物理机、虚拟机与容器" class="headerlink" title="1.2 图解物理机、虚拟机与容器"></a>1.2 图解物理机、虚拟机与容器</h3><p>关于虚拟机与容器的对比在后面会详细介绍到，这里只是通过网上的图片加深大家对于物理机、虚拟机与容器这三者的理解。</p><p><strong>物理机</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/1641129f0ecdf8ff?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="物理机"></p><p><strong>虚拟机：</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/164112a72a917f4a?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="虚拟机"></p><p><strong>容器：</strong></p><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/164112ac76e6f693?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="容器"></p><p>通过上面这三张抽象图，我们可以大概可以通过类比概括出： <strong>容器虚拟化的是操作系统而不是硬件，容器之间是共享同一套操作系统资源的。虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统。因此容器的隔离级别会稍低一些。</strong></p><hr><blockquote><p>相信通过上面的解释大家对于容器这个既陌生又熟悉的概念有了一个初步的认识，下面我们就来谈谈Docker的一些概念。</p></blockquote><h2 id="二-再来谈谈Docker的一些概念"><a href="#二-再来谈谈Docker的一些概念" class="headerlink" title="二 再来谈谈Docker的一些概念"></a>二 再来谈谈Docker的一些概念</h2><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/16410734eb1ed373?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="Docker的一些概念"></p><h3 id="2-1-什么是Docker？"><a href="#2-1-什么是Docker？" class="headerlink" title="2.1 什么是Docker？"></a>2.1 什么是Docker？</h3><p>说实话关于Docker是什么并太好说，下面我通过四点向你说明Docker到底是个什么东西。</p><ul><li><strong>Docker 是世界领先的软件容器平台。</strong></li><li><strong>Docker</strong> 使用 Google 公司推出的 <strong>Go 语言</strong> 进行开发实现，基于 <strong>Linux 内核</strong> 的cgroup，namespace，以及AUFS类的<strong>UnionFS</strong>等技术，<strong>对进程进行封装隔离，属于操作系统层面的虚拟化技术。</strong> 由于隔离的进程独立于宿主和其它的隔离的进 程，因此也称其为容器。<strong>Docke最初实现是基于 LXC.</strong></li><li><strong>Docker 能够自动执行重复性任务，例如搭建和配置开发环境，从而解放了开发人员以便他们专注在真正重要的事情上：构建杰出的软件。</strong></li><li><strong>用户可以方便地创建和使用容器，把自己的应用放入容器。容器还可以进行版本管理、复制、分享、修改，就像管理普通的代码一样。</strong></li></ul><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/16411c3946dda762?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="什么是Docker"></p><h3 id="2-2-Docker思想"><a href="#2-2-Docker思想" class="headerlink" title="2.2 Docker思想"></a>2.2 Docker思想</h3><ul><li><strong>集装箱</strong></li><li><strong>标准化：</strong> ①运输方式 ② 存储方式 ③ API接口</li><li><strong>隔离</strong></li></ul><h3 id="2-3-Docker容器的特点"><a href="#2-3-Docker容器的特点" class="headerlink" title="2.3 Docker容器的特点"></a>2.3 Docker容器的特点</h3><ul><li><h4 id="轻量"><a href="#轻量" class="headerlink" title="轻量"></a>轻量</h4><p>在一台机器上运行的多个 Docker 容器可以共享这台机器的操作系统内核；它们能够迅速启动，只需占用很少的计算和内存资源。镜像是通过文件系统层进行构造的，并共享一些公共文件。这样就能尽量降低磁盘用量，并能更快地下载镜像。</p></li><li><h4 id="标准"><a href="#标准" class="headerlink" title="标准"></a>标准</h4><p>Docker 容器基于开放式标准，能够在所有主流 Linux 版本、Microsoft Windows 以及包括 VM、裸机服务器和云在内的任何基础设施上运行。</p></li><li><h4 id="安全"><a href="#安全" class="headerlink" title="安全"></a>安全</h4><p>Docker 赋予应用的隔离性不仅限于彼此隔离，还独立于底层的基础设施。Docker 默认提供最强的隔离，因此应用出现问题，也只是单个容器的问题，而不会波及到整台机器。</p></li></ul><h3 id="2-4-为什么要用Docker"><a href="#2-4-为什么要用Docker" class="headerlink" title="2.4 为什么要用Docker"></a>2.4 为什么要用Docker</h3><ul><li><strong>Docker 的镜像提供了除内核外完整的运行时环境，确保了应用运行环境一致性，从而不会再出现 “这段代码在我机器上没问题啊” 这类问题；——一致的运行环境</strong></li><li><strong>可以做到秒级、甚至毫秒级的启动时间。大大的节约了开发、测试、部署的时间。——更快速的启动时间</strong></li><li><strong>避免公用的服务器，资源会容易受到其他用户的影响。——隔离性</strong></li><li><strong>善于处理集中爆发的服务器使用压力；——弹性伸缩，快速扩展</strong></li><li><strong>可以很轻易的将在一个平台上运行的应用，迁移到另一个平台上，而不用担心运行环境的变化导致应用无法正常运行的情况。——迁移方便</strong></li><li><strong>使用 Docker 可以通过定制应用镜像来实现持续集成、持续交付、部署。——持续交付和部署</strong></li></ul><hr><blockquote><p>每当说起容器，我们不得不将其与虚拟机做一个比较。就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。</p></blockquote><h2 id="三-容器-VS-虚拟机"><a href="#三-容器-VS-虚拟机" class="headerlink" title="三 容器 VS 虚拟机"></a>三 容器 VS 虚拟机</h2><p>  简单来说： <strong>容器和虚拟机具有相似的资源隔离和分配优势，但功能有所不同，因为容器虚拟化的是操作系统，而不是硬件，因此容器更容易移植，效率也更高。</strong></p><h3 id="3-1-两者对比图"><a href="#3-1-两者对比图" class="headerlink" title="3.1 两者对比图"></a>3.1 两者对比图</h3><p>  传统虚拟机技术是虚拟出一套硬件后，在其上运行一个完整操作系统，在该系统上再运行所需应用进程；而容器内的应用进程直接运行于宿主的内核，容器内没有自己的内核，而且也没有进行硬件虚拟。因此容器要比传统虚拟机更为轻便.</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/17/1640cb4abec9e902?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="容器 VS 虚拟机"></p><h3 id="3-2-容器与虚拟机-VM-总结"><a href="#3-2-容器与虚拟机-VM-总结" class="headerlink" title="3.2 容器与虚拟机 (VM) 总结"></a>3.2 容器与虚拟机 (VM) 总结</h3><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/16410aa3b89ae481?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="容器与虚拟机 (VM) 总结"></p><ul><li><strong>容器是一个应用层抽象，用于将代码和依赖资源打包在一起。</strong> <strong>多个容器可以在同一台机器上运行，共享操作系统内核，但各自作为独立的进程在用户空间中运行</strong> 。与虚拟机相比， <strong>容器占用的空间较少</strong>（容器镜像大小通常只有几十兆），<strong>瞬间就能完成启动</strong> 。</li><li><strong>虚拟机 (VM) 是一个物理硬件层抽象，用于将一台服务器变成多台服务器。</strong> 管理程序允许多个 VM 在一台机器上运行。每个VM都包含一整套操作系统、一个或多个应用、必要的二进制文件和库资源，因此 <strong>占用大量空间</strong> 。而且 VM <strong>启动也十分缓慢</strong> 。</li></ul><p>  通过Docker官网，我们知道了这么多Docker的优势，但是大家也没有必要完全否定虚拟机技术，因为两者有不同的使用场景。<strong>虚拟机更擅长于彻底隔离整个运行环境</strong>。例如，云服务提供商通常采用虚拟机技术隔离不同的用户。而 <strong>Docker通常用于隔离不同的应用</strong> ，例如前端，后端以及数据库。</p><h3 id="3-3-容器与虚拟机-VM-两者是可以共存的"><a href="#3-3-容器与虚拟机-VM-两者是可以共存的" class="headerlink" title="3.3 容器与虚拟机 (VM)两者是可以共存的"></a>3.3 容器与虚拟机 (VM)两者是可以共存的</h3><p>就我而言，对于两者无所谓谁会取代谁，而是两者可以和谐共存。</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/17/1640cca26fc38f9e?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="两者是可以共存的"></p><hr><blockquote><p>Docker中非常重要的三个基本概念，理解了这三个概念，就理解了 Docker 的整个生命周期。</p></blockquote><h2 id="四-Docker基本概念"><a href="#四-Docker基本概念" class="headerlink" title="四 Docker基本概念"></a>四 Docker基本概念</h2><p>Docker 包括三个基本概念</p><ul><li><strong>镜像（Image）</strong></li><li><strong>容器（Container）</strong></li><li><strong>仓库（Repository）</strong></li></ul><p>理解了这三个概念，就理解了 Docker 的整个生命周期</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/164109e4900357a9?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="Docker 包括三个基本概念"></p><h3 id="4-1-镜像（Image）——一个特殊的文件系统"><a href="#4-1-镜像（Image）——一个特殊的文件系统" class="headerlink" title="4.1 镜像（Image）——一个特殊的文件系统"></a>4.1 镜像（Image）——一个特殊的文件系统</h3><p>  <strong>操作系统分为内核和用户空间</strong>。对于 Linux 而言，内核启动后，会挂载 root 文件系统为其提供用户空间支持。而Docker 镜像（Image），就相当于是一个 root 文件系统。</p><p>  <strong>Docker 镜像是一个特殊的文件系统，除了提供容器运行时所需的程序、库、资源、配置等文件外，还包含了一些为运行时准备的一些配置参数（如匿名卷、环境变量、用户等）。</strong> 镜像不包含任何动态数据，其内容在构建之后也不会被改变。</p><p>  Docker 设计时，就充分利用 <strong>Union FS</strong>的技术，将其设计为 <strong>分层存储的架构</strong> 。 镜像实际是由多层文件系统联合组成。</p><p>  <strong>镜像构建时，会一层层构建，前一层是后一层的基础。每一层构建完就不会再发生改变，后一层上的任何改变只发生在自己这一层。</strong> 比如，删除前一层文件的操作，实际不是真的删除前一层的文件，而是仅在当前层标记为该文件已删除。在最终容器运行的时候，虽然不会看到这个文件，但是实际上该文件会一直跟随镜像。因此，在构建镜像的时候，需要额外小心，每一层尽量只包含该层需要添加的东西，任何额外的东西应该在该层构建结束前清理掉。</p><p>  分层存储的特征还使得镜像的复用、定制变的更为容易。甚至可以用之前构建好的镜像作为基础层，然后进一步添加新的层，以定制自己所需的内容，构建新的镜像。</p><h3 id="4-2-容器（Container-——镜像运行时的实体"><a href="#4-2-容器（Container-——镜像运行时的实体" class="headerlink" title="4.2 容器（Container)——镜像运行时的实体"></a>4.2 容器（Container)——镜像运行时的实体</h3><p>  镜像（Image）和容器（Container）的关系，就像是面向对象程序设计中的 类 和 实例 一样，镜像是静态的定义，<strong>容器是镜像运行时的实体。容器可以被创建、启动、停止、删除、暂停等</strong>。</p><p>  <strong>容器的实质是进程，但与直接在宿主执行的进程不同，容器进程运行于属于自己的独立的 命名空间。前面讲过镜像使用的是分层存储，容器也是如此。</strong></p><p>  <strong>容器存储层的生存周期和容器一样，容器消亡时，容器存储层也随之消亡。因此，任何保存于容器存储层的信息都会随容器删除而丢失。</strong></p><p>  按照 Docker 最佳实践的要求，<strong>容器不应该向其存储层内写入任何数据</strong> ，容器存储层要保持无状态化。<strong>所有的文件写入操作，都应该使用数据卷（Volume）、或者绑定宿主目录</strong>，在这些位置的读写会跳过容器存储层，直接对宿主(或网络存储)发生读写，其性能和稳定性更高。数据卷的生存周期独立于容器，容器消亡，数据卷不会消亡。因此， <strong>使用数据卷后，容器可以随意删除、重新 run ，数据却不会丢失。</strong></p><h3 id="4-3-仓库（Repository）——集中存放镜像文件的地方"><a href="#4-3-仓库（Repository）——集中存放镜像文件的地方" class="headerlink" title="4.3 仓库（Repository）——集中存放镜像文件的地方"></a>4.3 仓库（Repository）——集中存放镜像文件的地方</h3><p>  镜像构建完成后，可以很容易的在当前宿主上运行，但是， <strong>如果需要在其它服务器上使用这个镜像，我们就需要一个集中的存储、分发镜像的服务，Docker Registry就是这样的服务。</strong></p><p>  一个 Docker Registry中可以包含多个仓库（Repository）；每个仓库可以包含多个标签（Tag）；每个标签对应一个镜像。所以说：<strong>镜像仓库是Docker用来集中存放镜像文件的地方类似于我们之前常用的代码仓库。</strong></p><p>  通常，<strong>一个仓库会包含同一个软件不同版本的镜像</strong>，而<strong>标签就常用于对应该软件的各个版本</strong> 。我们可以通过<code>&lt;仓库名&gt;:&lt;标签&gt;</code>的格式来指定具体是这个软件哪个版本的镜像。如果不给出标签，将以 latest 作为默认标签.。</p><p><strong>这里补充一下Docker Registry 公开服务和私有 Docker Registry的概念：</strong></p><p>  <strong>Docker Registry 公开服务</strong> 是开放给用户使用、允许用户管理镜像的 Registry 服务。一般这类公开服务允许用户免费上传、下载公开的镜像，并可能提供收费服务供用户管理私有镜像。</p><p>  最常使用的 Registry 公开服务是官方的 <strong>Docker Hub</strong> ，这也是默认的 Registry，并拥有大量的高质量的官方镜像，网址为：<a href="https://link.juejin.im/?target=https%3A%2F%2Fhub.docker.com%2F" target="_blank" rel="noopener">hub.docker.com/</a> 。在国内访问<strong>Docker Hub</strong> 可能会比较慢国内也有一些云服务商提供类似于 Docker Hub 的公开服务。比如 <a href="https://link.juejin.im/?target=https%3A%2F%2Fhub.tenxcloud.com%2F" target="_blank" rel="noopener">时速云镜像库</a>、<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.163yun.com%2Fproduct%2Frepo" target="_blank" rel="noopener">网易云镜像服务</a>、<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.daocloud.io%2F" target="_blank" rel="noopener">DaoCloud 镜像市场</a>、<a href="https://link.juejin.im/?target=https%3A%2F%2Fwww.aliyun.com%2Fproduct%2Fcontainerservice%3Futm_content%3Dse_1292836" target="_blank" rel="noopener">阿里云镜像库</a>等。</p><p>  除了使用公开服务外，用户还可以在 <strong>本地搭建私有 Docker Registry</strong> 。Docker 官方提供了 Docker Registry 镜像，可以直接使用做为私有 Registry 服务。开源的 Docker Registry 镜像只提供了 Docker Registry API 的服务端实现，足以支持 docker 命令，不影响使用。但不包含图形界面，以及镜像维护、用户管理、访问控制等高级功能。</p><hr><blockquote><p>Docker的概念基本上已经讲完，最后我们谈谈：Build, Ship, and Run。</p></blockquote><h2 id="五-最后谈谈：Build-Ship-and-Run"><a href="#五-最后谈谈：Build-Ship-and-Run" class="headerlink" title="五 最后谈谈：Build, Ship, and Run"></a>五 最后谈谈：Build, Ship, and Run</h2><p>如果你搜索Docker官网，会发现如下的字样：<strong>“Docker - Build, Ship, and Run Any App, Anywhere”</strong>。那么Build, Ship, and Run到底是在干什么呢？</p><p><img src="https://user-gold-cdn.xitu.io/2018/6/18/16411c521e79bd82?imageView2/0/w/1280/h/960/format/webp/ignore-error/1" alt="build ship run"></p><ul><li><strong>Build（构建镜像）</strong> ： 镜像就像是集装箱包括文件以及运行环境等等资源。</li><li><strong>Ship（运输镜像）</strong> ：主机和仓库间运输，这里的仓库就像是超级码头一样。</li><li><strong>Run （运行镜像）</strong> ：运行的镜像就是一个容器，容器就是运行程序的地方。</li></ul><p><strong>Docker 运行过程也就是去仓库把镜像拉到本地，然后用一条命令把镜像运行起来变成容器。所以，我们也常常将Docker称为码头工人或码头装卸工，这和Docker的中文翻译搬运工人如出一辙。</strong></p><h2 id="六-总结"><a href="#六-总结" class="headerlink" title="六 总结"></a>六 总结</h2><p>本文主要把Docker中的一些常见概念做了详细的阐述，但是并不涉及Docker的安装、镜像的使用、容器的操作等内容。这部分东西，希望读者自己可以通过阅读书籍与官方文档的形式掌握。如果觉得官方文档阅读起来很费力的话，这里推荐一本书籍《Docker技术入门与实战第二版》</p>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>GOPROXY 环境变量</title>
      <link href="2019/05/05/GOPROXY%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
      <url>2019/05/05/GOPROXY%20%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
      
        <content type="html"><![CDATA[<p>我们知道从 <code>Go 1.11</code> 版本开始，官方支持了 <code>go module</code> 包依赖管理工具。<br><a id="more"></a></p><p>其实还新增了 <code>GOPROXY</code> 环境变量。如果设置了该变量，下载源代码时将会通过这个环境变量设置的代理地址，而不再是以前的直接从代码库下载。这无疑对我等无法科学上网的开发良民来说是最大的福音。</p><p>更可喜的是，<a href="https://github.com/goproxyio/goproxy" target="_blank" rel="noopener">goproxy.io</a> 这个开源项目帮我们实现好了我们想要的。该项目允许开发者一键构建自己的 <code>GOPROXY</code> 代理服务。同时，也提供了公用的代理服务 <code>https://goproxy.io</code>，我们只需设置该环境变量即可正常下载被墙的源码包了：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-built_in">export</span> GOPROXY=https://goproxy.io<br></code></pre></div></td></tr></table></figure><p>不过，<strong>需要依赖于 go module 功能</strong>。可通过 <code>export GO111MODULE=on</code> 开启 MODULE。</p><p>如果项目不在 <code>GOPATH</code> 中，则无法使用 <code>go get ...</code>，但可以使用 <code>go mod ...</code> 相关命令。</p><p>也可以通过置空这个环境变量来关闭，<code>export GOPROXY=</code>。</p><p>对于 Windows 用户，可以在 <code>PowerShell</code> 中设置：</p><figure class="highlight sh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sh"><span class="hljs-variable">$env</span>:GOPROXY = <span class="hljs-string">"https://goproxy.io"</span><br></code></pre></div></td></tr></table></figure><p>最后，我们当然推荐使用 <code>GOPROXY</code> 这个环境变量的解决方式，前提是 <strong>Go version &gt;= 1.11</strong>。</p><p>在goland中应用：</p><p>在新建项目时：</p><p><img src="https://s2.ax1x.com/2019/06/22/ZpIA00.png" alt="ZpIA00.png"></p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LeetCode（[21. 合并两个有序链表]）</title>
      <link href="2019/05/05/LeetCode%EF%BC%88%5B21.-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%5D%EF%BC%89/"/>
      <url>2019/05/05/LeetCode%EF%BC%88%5B21.-%E5%90%88%E5%B9%B6%E4%B8%A4%E4%B8%AA%E6%9C%89%E5%BA%8F%E9%93%BE%E8%A1%A8%5D%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。 \</p><a id="more"></a><p><strong>示例：</strong></p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">输入：<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">4</span>, <span class="hljs-number">1</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span><br>输出：<span class="hljs-number">1</span>-&gt;<span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">4</span><br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># encoding: utf-8</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self)</span>:</span><br>        self.val = <span class="hljs-literal">None</span><br>        self.next = <span class="hljs-literal">None</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">return</span> str(self.val)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(l1, l2)</span>:</span><br>    <span class="hljs-comment"># 处理边界情况（l1或l2为空）</span><br>    <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> l2<br>    <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> l1<br>    <span class="hljs-comment"># 确保l1有最小的初始值</span><br>    <span class="hljs-keyword">if</span> l2.val &lt; l1.val:<br>        l1, l2 = l2, l1<br>    <span class="hljs-comment"># 保存一个链表头用来作为返回值</span><br>    head = l1<br>    <span class="hljs-comment"># 开始迭代到l1为最后一个节点</span><br>    <span class="hljs-keyword">while</span> l1.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 假如l2完结，工作完成</span><br>        <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        <span class="hljs-comment"># 假如l2节点属于在l1的当前节点与下一个节点值之间</span><br>        <span class="hljs-keyword">if</span> l1.val &lt;= l2.val &lt;= l1.next.val:<br>            <span class="hljs-comment"># 在这一步我们通过设置l1.next\l2.next来拼接l2，并将L2 迭代</span><br>            l1.next, l2.next, l2 = l2, l1.next, l2.next<br>        <span class="hljs-comment"># l1迭代向前</span><br>        l1 = l1.next<br>    <span class="hljs-comment"># 以防l2较长的情况，我们在l1迭代完成后把l2加入到l1尾部</span><br>    l1.next = l2<br>    <span class="hljs-keyword">return</span> head<br></code></pre></div></td></tr></table></figure><p>测试代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br><br>    three = Node()<br>    three.val = <span class="hljs-number">3</span><br><br>    two = Node()<br>    two.val = <span class="hljs-number">2</span><br>    two.next = three<br><br>    one = Node()<br>    one.val = <span class="hljs-number">1</span><br>    one.next = two<br><br>    head = Node()<br>    head.val = <span class="hljs-number">0</span><br>    head.next = one<br><br>    three1 = Node()<br>    three1.val = <span class="hljs-number">3</span><br><br>    two1 = Node()<br>    two1.val = <span class="hljs-number">2</span><br>    two1.next = three1<br><br>    one1 = Node()<br>    one1.val = <span class="hljs-number">1</span><br>    one1.next = two1<br><br>    head1 = Node()<br>    head1.val = <span class="hljs-number">0</span><br>    head1.next = one1<br>    newhead = mergeTwoLists(head, head1)<br>    <span class="hljs-keyword">while</span> newhead:<br>        print(newhead.val, )<br>        newhead = newhead.next<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Linux相关思维导图</title>
      <link href="2019/05/05/Linux%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/"/>
      <url>2019/05/05/Linux%E6%80%9D%E7%BB%B4%E5%AF%BC%E5%9B%BE/</url>
      
        <content type="html"><![CDATA[<p>这里主要收集一些我认为不错的思维导图，请联系我删除<br><a id="more"></a></p><h2 id="目录结构："><a href="#目录结构：" class="headerlink" title="目录结构："></a>目录结构：</h2><p><img src="https://s1.ax1x.com/2018/11/19/FSzKOJ.png" alt="FSzKOJ.png"></p><h2 id="常用命令："><a href="#常用命令：" class="headerlink" title="常用命令："></a>常用命令：</h2><p><img src="https://s1.ax1x.com/2018/11/19/FSzb1U.png" alt="FSzb1U.png"></p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> 思维导图 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL为什么表数据删掉一半，表文件大小不变？</title>
      <link href="2019/05/05/Mysql13/"/>
      <url>2019/05/05/Mysql13/</url>
      
        <content type="html"><![CDATA[<h2 id="一、引子"><a href="#一、引子" class="headerlink" title="一、引子"></a>一、引子</h2><p>经常会有同学来问我，我的数据库占用空间太大，我把一个最大的表我把一个最大的表删掉了一半的数据，怎么表文件的大小还是没变？<br><a id="more"></a></p><h2 id="二、问题来源"><a href="#二、问题来源" class="headerlink" title="二、问题来源"></a>二、问题来源</h2><h3 id="1-innodb的表数据存在方式"><a href="#1-innodb的表数据存在方式" class="headerlink" title="1. innodb的表数据存在方式"></a>1. innodb的表数据存在方式</h3><p>一个 InnoDB 表包含两部分：</p><ol><li><p>表结构定义（MySQL8.0之前存在于.frm 为后缀的文件，占用空间小）</p></li><li><p>数据</p></li></ol><h3 id="2-参数-innodb-file-per-table"><a href="#2-参数-innodb-file-per-table" class="headerlink" title="2. 参数 innodb_file_per_table"></a>2. 参数 innodb_file_per_table</h3><p>表数据既可以存在共享表空间里，也可以是单独的文件。</p><p>这个行为是由参数 <code>innodb_file_per_table</code> 控制的：</p><ol><li>这个参数设置为 <code>OFF</code> 表示的是，表的数据放在系统共享表空间，也就是跟数据字典放在一起；</li><li>这个参数设置为 <code>ON</code> 表示的是，每个 InnoDB 表数据存储在一个以 .ibd 为后缀的文件中。</li></ol><p><em>从 MySQL 5.6.6 版本开始，默认值值为ON</em> </p><h3 id="3-数据删除流程"><a href="#3-数据删除流程" class="headerlink" title="3. 数据删除流程"></a>3. 数据删除流程</h3><p><img src="https://s2.ax1x.com/2019/05/26/VEhXef.png" alt="VEhXef.png"></p><p>假设，我们要删掉 R4 这个记录:</p><ul><li><p>InnoDB 引擎只会把 R4 这个记录标记为删除。</p></li><li><p>如果之后要再插入一个 ID 在 300 和 600 之间的记录时，可能会复用这个位置。</p></li><li><p>但是，磁盘文件的大小并不会缩小。</p></li></ul><p>现在，你已经知道了 InnoDB 的数据是按页存储的，那么如果我们删掉了一个数据页上的所有记录，会怎么样？</p><p>答案是，整个数据页就可以被复用了。</p><p>但是，数据页的复用跟记录的复用是不同的。</p><p>记录的复用，只限于符合范围条件的数据。比如上面的这个例子，R4 这条记录被删除后，如果插入一个 ID 是 400 的行，可以直接复用这个空间。但如果插入的是一个 ID 是 800 的行，就不能复用这个位置了。</p><p>而当整个页从 B+ 树里面摘掉以后，可以复用到任何位置。以图 1 为例，如果将数据页 page A 上的所有记录删除以后，page A 会被标记为可复用。这时候如果要插入一条 ID=50 的记录需要使用新页的时候，page A 是可以被复用的。</p><p>如果相邻的两个数据页利用率都很小，系统就会把这两个页上的数据合到其中一个页上，另外一个数据页就被标记为可复用。</p><p>进一步地，如果我们用 delete 命令把整个表的数据删除呢？结果就是，所有的数据页都会被标记为可复用。但是磁盘上，文件不会变小。</p><h4 id="4-数据空洞"><a href="#4-数据空洞" class="headerlink" title="4. 数据空洞"></a>4. 数据空洞</h4><p>你现在知道了，delete 命令其实只是把记录的位置，或者数据页标记为了“可复用”，但磁盘文件的大小是不会变的。也就是说，通过 delete 命令是不能回收表空间的。这些可以复用，而没有被使用的空间，看起来就像是“空洞”。</p><p>实际上，不止是删除数据会造成空洞，插入数据也会。</p><p>如果数据是按照索引递增顺序插入的，那么索引是紧凑的。但如果数据是随机插入的，就可能造成索引的数据页分裂。</p><p>可以看到，由于 page A 满了，再插入一个 ID 是 550 的数据时，就不得不再申请一个新的页面 page B 来保存数据了。页分裂完成后，page A 的末尾就留下了空洞（注意：实际上，可能不止 1 个记录的位置是空洞）。</p><p>另外，更新索引上的值，可以理解为删除一个旧的值，再插入一个新值。不难理解，这也是会造成空洞的。</p><p>数据空洞</p><p>也就是说，经过大量增删改的表，都是可能是存在空洞的。</p><p><strong>所以，如果能够把这些空洞去掉，就能达到收缩表空间的目的。</strong></p><h2 id="三、问题解决方案——重建表"><a href="#三、问题解决方案——重建表" class="headerlink" title="三、问题解决方案——重建表"></a>三、问题解决方案——重建表</h2><h3 id="1-使用-alter-table-A-engine-InnoDB-命令来重建表"><a href="#1-使用-alter-table-A-engine-InnoDB-命令来重建表" class="headerlink" title="1.使用 alter table A engine=InnoDB 命令来重建表"></a>1.使用 alter table A engine=InnoDB 命令来重建表</h3><p>执行流程：</p><ol><li>建立一个临时文件，扫描表 A 主键的所有数据页；</li><li>用数据页中表 A 的记录生成 B+ 树，存储到临时文件中；</li><li>生成临时文件的过程中，将所有对 A 的操作记录在一个日志文件（row log）中，对应的是图中 state2 的状态；</li><li>临时文件生成后，将日志文件中的操作应用到临时文件，得到一个逻辑数据上与表 A 相同的数据文件，对应的就是图中 state3 的状态；</li><li>用临时文件替换表 A 的数据文件。</li></ol><p>示意图：</p><p><img src="https://i.loli.net/2019/05/26/5cea58c24c7b970890.png" alt="2d1cfbbeb013b851a56390d38b5321f0.png"></p>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL之索引类型</title>
      <link href="2019/05/05/Mysql%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B/"/>
      <url>2019/05/05/Mysql%E7%B4%A2%E5%BC%95%E7%B1%BB%E5%9E%8B/</url>
      
        <content type="html"><![CDATA[<p>想必大家在被问到这个问题的时候，在网上总是能搜到不同的回答，却又各不相同。其实这些答案大部分都是正确的，只不过在阐述MySQL索引类型的时候从不同方面入手而已。这里归纳如下，具体的机制可以参考其他博文：<br><a id="more"></a></p><h2 id="从数据结构角度"><a href="#从数据结构角度" class="headerlink" title="从数据结构角度"></a><strong>从数据结构角度</strong></h2><ol><li><p>B+树索引(O(log(n)))：关于B+树索引，可以参考 <a href="http://blog.codinglabs.org/articles/theory-of-mysql-index.html" target="_blank" rel="noopener">MySQL索引背后的数据结构及算法原理</a></p></li><li><p>hash索引：</p><ul><li>仅仅能满足”=”,”IN”和”&lt;=&gt;”查询，不能使用范围查询</li><li>其检索效率非常高，索引的检索可以一次定位，不像B-Tree 索引需要从根节点到枝节点，最后才能访问到页节点这样多次的IO访问，所以 Hash 索引的查询效率要远高于 B-Tree 索引</li><li>只有Memory存储引擎显示支持hash索引</li></ul></li><li><p>FULLTEXT索引（现在MyISAM和InnoDB引擎都支持了）</p></li><li><p>R-Tree索引（用于对GIS数据类型创建SPATIAL索引）</p></li></ol><h2 id="从物理存储角度"><a href="#从物理存储角度" class="headerlink" title="从物理存储角度"></a><strong>从物理存储角度</strong></h2><ol><li><p>聚集索引（clustered index）</p></li><li><p>非聚集索引（non-clustered index）</p></li></ol><h2 id="从逻辑角度"><a href="#从逻辑角度" class="headerlink" title="从逻辑角度"></a><strong>从逻辑角度</strong></h2><ol><li><p>主键索引：主键索引是一种特殊的唯一索引，不允许有空值</p></li><li><p>普通索引或者单列索引</p></li><li><p>多列索引（复合索引）：复合索引指多个字段上创建的索引，只有在查询条件中使用了创建索引时的第一个字段，索引才会被使用。使用复合索引时遵循最左前缀集合</p></li><li><p>唯一索引或者非唯一索引</p></li><li><p>空间索引：空间索引是对空间数据类型的字段建立的索引，MYSQL中的空间数据类型有4种，分别是GEOMETRY、POINT、LINESTRING、POLYGON。<br>MYSQL使用SPATIAL关键字进行扩展，使得能够用于创建正规索引类型的语法创建空间索引。创建空间索引的列，必须将其声明为NOT NULL，空间索引只能在存储引擎为MYISAM的表中创建</p></li></ol><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name[col_name <span class="hljs-keyword">data</span> <span class="hljs-keyword">type</span>]<br>[<span class="hljs-keyword">unique</span>|fulltext|spatial][<span class="hljs-keyword">index</span>|<span class="hljs-keyword">key</span>][index_name](col_name[<span class="hljs-keyword">length</span>])[<span class="hljs-keyword">asc</span>|<span class="hljs-keyword">desc</span>]<br></code></pre></div></td></tr></table></figure><p>参数解析：</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-number">1</span>、unique|fulltext|spatial为可选参数，分别表示唯一索引、全文索引和空间索引；<br><span class="hljs-number">2</span>、index和<span class="hljs-type">key</span>为同义词，两者作用相同，用来指定创建索引<br><span class="hljs-number">3</span>、col_name为需要创建索引的字段列，该列必须从数据表中该定义的多个列中选择；<br><span class="hljs-number">4</span>、index_name指定索引的名称，为可选参数，如果不指定，MYSQL默认col_name为索引值；<br><span class="hljs-number">5</span>、length为可选参数，表示索引的长度，只有字符串类型的字段才能指定索引长度；<br><span class="hljs-number">6</span>、asc或desc指定升序或降序的索引值存储<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 数据库 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL分页limit速度太慢的优化方法</title>
      <link href="2019/05/05/MySQL%E5%88%86%E9%A1%B5limit%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>2019/05/05/MySQL%E5%88%86%E9%A1%B5limit%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="limit用法"><a href="#limit用法" class="headerlink" title="limit用法"></a>limit用法</h2><p>在我们使用查询语句的时候，经常要返回前几条或者中间某几行数据，这个时候怎么办呢？不用担心，mysql已经为我们提供了这样一个功能。</p><a id="more"></a><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-keyword">table</span> <span class="hljs-keyword">LIMIT</span> [<span class="hljs-keyword">offset</span>,] <span class="hljs-keyword">rows</span> | <span class="hljs-keyword">rows</span> <span class="hljs-keyword">OFFSET</span> <span class="hljs-keyword">offset</span><br></code></pre></div></td></tr></table></figure><p>LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的<code>偏移量</code>，第二个参数指定返回记录行的最大数目。<code>初始记录行的偏移量是 0(而不是 1)</code>： 为了与 PostgreSQL 兼容，MySQL 也支持句法： LIMIT # OFFSET #。</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">mysql&gt; SELECT * FROM <span class="hljs-keyword">table</span> LIMIT <span class="hljs-comment">5,10</span>; // 检索记录行<span class="hljs-comment"> 6-15</span><br></code></pre></div></td></tr></table></figure><p>为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：</p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">mysql&gt; SELECT * FROM <span class="hljs-keyword">table</span> LIMIT <span class="hljs-comment">95,-1</span>; // 检索记录行<span class="hljs-comment"> 96-last.</span><br></code></pre></div></td></tr></table></figure><p>如果只给定一个参数，它表示返回最大的记录行数目： </p><figure class="highlight gams"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">mysql&gt; SELECT * FROM <span class="hljs-keyword">table</span> LIMIT <span class="hljs-comment">5</span>; //检索前<span class="hljs-comment"> 5</span> 个记录行<br></code></pre></div></td></tr></table></figure><p>换句话说，<code>LIMIT n</code> 等价于<code>LIMIT 0,n</code>。</p><h2 id="Mysql的分页查询语句的性能分析"><a href="#Mysql的分页查询语句的性能分析" class="headerlink" title="Mysql的分页查询语句的性能分析"></a><strong>Mysql的分页查询语句的性能分析</strong></h2><p>MySql分页sql语句，如果和MSSQL的TOP语法相比，那么MySQL的LIMIT语法要显得优雅了许多。使用它来分页是再自然不过的事情了。</p><h3 id="最基本的分页方式："><a href="#最基本的分页方式：" class="headerlink" title="最基本的分页方式："></a><strong>最基本的分页方式：</strong></h3><figure class="highlight lasso"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> <span class="hljs-params">...</span> FROM <span class="hljs-params">...</span> <span class="hljs-keyword">WHERE</span> <span class="hljs-params">...</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-params">...</span> LIMIT <span class="hljs-params">...</span><br></code></pre></div></td></tr></table></figure><p>在中小数据量的情况下，这样的SQL足够用了，唯一需要注意的问题就是确保使用了索引：举例来说，如果实际SQL类似下面语句，那么在category_id, id两列上建立复合索引比较好：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> articles <span class="hljs-keyword">WHERE</span> category_id = <span class="hljs-number">123</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">50</span>, <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h3 id="子查询的分页方式："><a href="#子查询的分页方式：" class="headerlink" title="子查询的分页方式："></a><strong>子查询的分页方式：</strong></h3><p>随着数据量的增加，页数会越来越多，查看后几页的SQL就可能类似：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> articles <span class="hljs-keyword">WHERE</span> category_id = <span class="hljs-number">123</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10000</span>, <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><p>一言以蔽之，就是越往后分页，<code>LIMIT语句的偏移量就会越大，速度也会明显变慢</code>。</p><p>此时，我们可以通过子查询的方式来提高分页效率，大致如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> articles <span class="hljs-keyword">WHERE</span> <span class="hljs-keyword">id</span> &gt;= <br>(<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">FROM</span> articles <span class="hljs-keyword">WHERE</span> category_id = <span class="hljs-number">123</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10000</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">LIMIT</span> <span class="hljs-number">10</span><br></code></pre></div></td></tr></table></figure><h3 id="JOIN分页方式"><a href="#JOIN分页方式" class="headerlink" title="JOIN分页方式"></a>JOIN分页方式</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> <span class="hljs-string">`content`</span> <span class="hljs-keyword">AS</span> t1 <br><span class="hljs-keyword">JOIN</span> (<span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">FROM</span> <span class="hljs-string">`content`</span> <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> <span class="hljs-keyword">id</span> <span class="hljs-keyword">desc</span> <span class="hljs-keyword">LIMIT</span> <span class="hljs-string">".($page-1)*$pagesize."</span>, <span class="hljs-number">1</span>) <span class="hljs-keyword">AS</span> t2 <br><span class="hljs-keyword">WHERE</span> t1.id &lt;= t2.id <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> t1.id <span class="hljs-keyword">desc</span> <span class="hljs-keyword">LIMIT</span> $pagesize;<br></code></pre></div></td></tr></table></figure><p>经过我的测试，join分页和子查询分页的效率基本在一个等级上，消耗的时间也基本一致。 explain SQL语句：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">id select_type table<span class="hljs-built_in"> type </span>possible_keys key key_len ref rows Extra<br>1 PRIMARY &lt;derived2&gt;<span class="hljs-built_in"> system </span><span class="hljs-literal">NULL</span> <span class="hljs-literal">NULL</span> <span class="hljs-literal">NULL</span> <span class="hljs-literal">NULL</span> 1 <br>1 PRIMARY t1 range PRIMARY PRIMARY 4 <span class="hljs-literal">NULL</span> 6264 Using where<br>2 DERIVED content index <span class="hljs-literal">NULL</span> PRIMARY 4 <span class="hljs-literal">NULL</span> 27085 Using index<br></code></pre></div></td></tr></table></figure><p>为什么会这样呢？因为子查询是在索引上完成的，而普通的查询时在数据文件上完成的，通常来说，索引文件要比数据文件小得多，所以操作起来也会更有效率。</p><p>实际可以利用类似策略模式的方式去处理分页，比如判断如果是一百页以内，就使用最基本的分页方式，大于一百页，则使用子查询的分页方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python 中的单例模式</title>
      <link href="2019/05/05/Python%20%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/"/>
      <url>2019/05/05/Python%20%E4%B8%AD%E7%9A%84%E5%8D%95%E4%BE%8B%E6%A8%A1%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<h1 id="单例模式"><a href="#单例模式" class="headerlink" title="单例模式"></a>单例模式</h1><p><strong>单例模式（Singleton Pattern）</strong>是一种常用的软件设计模式，该模式的主要目的是确保<strong>某一个类只有一个实例存在</strong>。当你希望在整个系统中，某个类只能出现一个实例时，单例对象就能派上用场。<br><a id="more"></a></p><p>比如，某个服务器程序的配置信息存放在一个文件中，客户端通过一个 AppConfig 的类来读取配置文件的信息。如果在程序运行期间，有很多地方都需要使用配置文件的内容，也就是说，很多地方都需要创建 AppConfig 对象的实例，这就导致系统中存在多个 AppConfig 的实例对象，而这样会严重浪费内存资源，尤其是在配置文件内容很多的情况下。事实上，类似 AppConfig 这样的类，我们希望在程序运行期间只存在一个实例对象。</p><p>在 Python 中，我们可以用多种方法来实现单例模式：</p><ul><li>使用模块</li><li>使用 <code>__new__</code></li><li>使用装饰器（decorator）</li><li>使用元类（metaclass）</li></ul><h1 id="使用模块"><a href="#使用模块" class="headerlink" title="使用模块"></a>使用模块</h1><p>其实，<strong>Python 的模块就是天然的单例模式</strong>，因为模块在第一次导入时，会生成 <code>.pyc</code> 文件，当第二次导入时，就会直接加载 <code>.pyc</code> 文件，而不会再次执行模块代码。因此，我们只需把相关的函数和数据定义在一个模块中，就可以获得一个单例对象了。如果我们真的想要一个单例类，可以考虑这样做：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># mysingleton.py</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">My_Singleton</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">foo</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><br>my_singleton = My_Singleton()<br></code></pre></div></td></tr></table></figure><p>将上面的代码保存在文件 <code>mysingleton.py</code> 中，然后这样使用：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> mysingleton <span class="hljs-keyword">import</span> my_singleton<br><br>my_singleton.foo()<br></code></pre></div></td></tr></table></figure><h1 id="使用-new"><a href="#使用-new" class="headerlink" title="使用 __new__"></a>使用 <code>__new__</code></h1><p>为了使类只能出现一个实例，我们可以使用 <code>__new__</code> 来控制实例的创建过程，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><span class="hljs-params">(object)</span>:</span><br>    _instance = <span class="hljs-literal">None</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__new__</span><span class="hljs-params">(cls, *args, **kw)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> cls._instance:<br>            cls._instance = super(Singleton, cls).__new__(cls, *args, **kw)  <br>        <span class="hljs-keyword">return</span> cls._instance  <br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(Singleton)</span>:</span>  <br>    a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>在上面的代码中，我们将类的实例和一个类变量 <code>_instance</code> 关联起来，如果 <code>cls._instance</code> 为 None 则创建实例，否则直接返回 <code>cls._instance</code>。</p><p>执行情况如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-meta">&gt;&gt;&gt; </span>one = MyClass()<br><span class="hljs-meta">&gt;&gt;&gt; </span>two = MyClass()<br><span class="hljs-meta">&gt;&gt;&gt; </span>one == two<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>one <span class="hljs-keyword">is</span> two<br><span class="hljs-literal">True</span><br><span class="hljs-meta">&gt;&gt;&gt; </span>id(one), id(two)<br>(<span class="hljs-number">4303862608</span>, <span class="hljs-number">4303862608</span>)<br></code></pre></div></td></tr></table></figure><h1 id="使用装饰器"><a href="#使用装饰器" class="headerlink" title="使用装饰器"></a>使用装饰器</h1><p>我们知道，装饰器（decorator）可以动态地修改一个类或函数的功能。这里，我们也可以使用装饰器来装饰某个类，使其只能生成一个实例，代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> functools <span class="hljs-keyword">import</span> wraps<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">singleton</span><span class="hljs-params">(cls)</span>:</span><br>    instances = &#123;&#125;<br><span class="hljs-meta">    @wraps(cls)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">getinstance</span><span class="hljs-params">(*args, **kw)</span>:</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> instances:<br>            instances[cls] = cls(*args, **kw)<br>        <span class="hljs-keyword">return</span> instances[cls]<br>    <span class="hljs-keyword">return</span> getinstance<br><br><span class="hljs-meta">@singleton</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(object)</span>:</span><br>    a = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><p>在上面，我们定义了一个装饰器 <code>singleton</code>，它返回了一个内部函数 <code>getinstance</code>，该函数会判断某个类是否在字典 <code>instances</code> 中，如果不存在，则会将 <code>cls</code> 作为 key，<code>cls(*args, **kw)</code> 作为 value 存到 <code>instances</code> 中，否则，直接返回 <code>instances[cls]</code>。</p><h1 id="使用-metaclass"><a href="#使用-metaclass" class="headerlink" title="使用 metaclass"></a>使用 metaclass</h1><p>元类（metaclass）可以控制类的创建过程，它主要做三件事：</p><ul><li>拦截类的创建</li><li>修改类的定义</li><li>返回修改后的类</li></ul><p>使用元类实现单例模式的代码如下：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Singleton</span><span class="hljs-params">(type)</span>:</span><br>    _instances = &#123;&#125;<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__call__</span><span class="hljs-params">(cls, *args, **kwargs)</span>:</span><br>        <span class="hljs-keyword">if</span> cls <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> cls._instances:<br>            cls._instances[cls] = super(Singleton, cls).__call__(*args, **kwargs)<br>        <span class="hljs-keyword">return</span> cls._instances[cls]<br><br><span class="hljs-comment"># Python2</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyClass</span><span class="hljs-params">(object)</span>:</span><br>    __metaclass__ = Singleton<br><br><span class="hljs-comment"># Python3</span><br><span class="hljs-comment"># class MyClass(metaclass=Singleton):</span><br><span class="hljs-comment">#    pass</span><br></code></pre></div></td></tr></table></figure><h1 id="小结"><a href="#小结" class="headerlink" title="小结"></a>小结</h1><ul><li>Python 的模块是天然的单例模式，这在大部分情况下应该是够用的，当然，我们也可以使用装饰器、元类等方法</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python——回顾常用的库</title>
      <link href="2019/05/05/Python%E2%80%94%E2%80%94%E5%9B%9E%E9%A1%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/"/>
      <url>2019/05/05/Python%E2%80%94%E2%80%94%E5%9B%9E%E9%A1%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>这些最基础的面试想不起来会很尴尬</p><a id="more"></a><h2 id="Python-map-函数"><a href="#Python-map-函数" class="headerlink" title="Python map() 函数"></a>Python map() 函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><p>语法</p><h3 id="map-函数语法："><a href="#map-函数语法：" class="headerlink" title="map() 函数语法："></a>map() 函数语法：</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">map(function, iterable, ...)<br></code></pre></div></td></tr></table></figure><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 函数</li><li>iterable – 一个或多个序列</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 map() 的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">square</span><span class="hljs-params">(x)</span> :</span>            <span class="hljs-comment"># 计算平方数</span><br><span class="hljs-keyword">return</span> x ** <span class="hljs-number">2</span><br>&gt;&gt;&gt;map(square, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])   <span class="hljs-comment"># 计算列表各个元素的平方</span><br>&gt;&gt;&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br>&gt;&gt;&gt;map(<span class="hljs-keyword">lambda</span> x: x ** <span class="hljs-number">2</span>, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>])  <span class="hljs-comment"># 使用 lambda 匿名函数</span><br>&gt;&gt;&gt;[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>]<br></code></pre></div></td></tr></table></figure><h3 id="提供了两个列表，对相同位置的列表数据进行相加"><a href="#提供了两个列表，对相同位置的列表数据进行相加" class="headerlink" title="提供了两个列表，对相同位置的列表数据进行相加"></a>提供了两个列表，对相同位置的列表数据进行相加</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&gt;&gt;&gt;map(<span class="hljs-keyword">lambda</span> x, y: x + y, [<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>], [<span class="hljs-number">2</span>, <span class="hljs-number">4</span>, <span class="hljs-number">6</span>, <span class="hljs-number">8</span>, <span class="hljs-number">10</span>])<br>&gt;&gt;&gt;[<span class="hljs-number">3</span>, <span class="hljs-number">7</span>, <span class="hljs-number">11</span>, <span class="hljs-number">15</span>, <span class="hljs-number">19</span>]<br></code></pre></div></td></tr></table></figure><h2 id="Python-filter-函数"><a href="#Python-filter-函数" class="headerlink" title="Python filter() 函数"></a>Python filter() 函数</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><blockquote><p><strong>注意:</strong> Pyhton2.7 返回列表，Python3.x 返回迭代器对象，具体内容可以查看：<a href="http://www.runoob.com/python3/python3-func-filter.html" target="_blank" rel="noopener">Python3 filter() 函数</a></p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下是 filter() 方法的语法:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">filter</span>(<span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">iterable</span>)</span><br></code></pre></div></td></tr></table></figure><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 判断函数。</li><li>iterable – 可迭代对象。</li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回列表。</p><hr><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 filter 函数的实例：</p><h3 id="过滤出列表中的所有奇数："><a href="#过滤出列表中的所有奇数：" class="headerlink" title="过滤出列表中的所有奇数："></a>过滤出列表中的所有奇数：</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python </span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-   </span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_odd</span><span class="hljs-params">(n)</span>:</span><br><span class="hljs-keyword">return</span> n % <span class="hljs-number">2</span> == <span class="hljs-number">1</span><br>newlist = filter(is_odd, [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>, <span class="hljs-number">10</span>]) <br>print(newlist)<br></code></pre></div></td></tr></table></figure><p>输出结果 ：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">7</span>, <span class="hljs-number">9</span>]<br></code></pre></div></td></tr></table></figure><h3 id="过滤出1-100中平方根是整数的数："><a href="#过滤出1-100中平方根是整数的数：" class="headerlink" title="过滤出1~100中平方根是整数的数："></a>过滤出1~100中平方根是整数的数：</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/python </span><br><span class="hljs-comment"># -*- coding: UTF-8 -*-   </span><br><span class="hljs-keyword">import</span> math <br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_sqr</span><span class="hljs-params">(x)</span>:</span>     <br><span class="hljs-keyword">return</span> math.sqrt(x) % <span class="hljs-number">1</span> == <span class="hljs-number">0</span><br>newlist = filter(is_sqr, range(<span class="hljs-number">1</span>, <span class="hljs-number">101</span>)) <br>print(newlist)<br></code></pre></div></td></tr></table></figure><p>输出结果 ：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">[<span class="hljs-number">1</span>, <span class="hljs-number">4</span>, <span class="hljs-number">9</span>, <span class="hljs-number">16</span>, <span class="hljs-number">25</span>, <span class="hljs-number">36</span>, <span class="hljs-number">49</span>, <span class="hljs-number">64</span>, <span class="hljs-number">81</span>, <span class="hljs-number">100</span>]<br></code></pre></div></td></tr></table></figure><h2 id="Python-reduce-函数"><a href="#Python-reduce-函数" class="headerlink" title="Python reduce() 函数"></a>Python reduce() 函数</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p><strong>reduce()</strong> 函数会对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>reduce() 函数语法：</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">reduce(<span class="hljs-function"><span class="hljs-keyword">function</span>, <span class="hljs-title">iterable</span><span class="hljs-params">[, initializer]</span>)</span><br></code></pre></div></td></tr></table></figure><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 函数，有两个参数</li><li>iterable – 可迭代对象</li><li>initializer – 可选，初始参数</li></ul><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>返回函数计算结果。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 reduce() 的使用方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">&gt;&gt;&gt;<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add</span><span class="hljs-params">(x, y)</span> :</span>            <span class="hljs-comment"># 两数相加 ...     </span><br><span class="hljs-keyword">return</span> x + y ...  <br><span class="hljs-meta">&gt;&gt;&gt; </span>reduce(add, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])   <span class="hljs-comment"># 计算列表和：1+2+3+4+5 15 </span><br><span class="hljs-meta">&gt;&gt;&gt; </span>reduce(<span class="hljs-keyword">lambda</span> x, y: x+y, [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>])  <span class="hljs-comment"># 使用 lambda 匿名函数 15</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python一行代码处理地理围栏</title>
      <link href="2019/05/05/Python%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%A4%84%E7%90%86%E5%9C%B0%E7%90%86%E5%9B%B4%E6%A0%8F/"/>
      <url>2019/05/05/Python%E4%B8%80%E8%A1%8C%E4%BB%A3%E7%A0%81%E5%A4%84%E7%90%86%E5%9C%B0%E7%90%86%E5%9B%B4%E6%A0%8F/</url>
      
        <content type="html"><![CDATA[<p>最近在工作中遇到了这个一个需求，用户设定地理围栏，后台获取到实时位置信息后通过与围栏比较，判断是否越界等。</p><p>这个过程需要用到数据协议为GEOjson，通过查阅资料后，发现python的shapely库可以非常简单的解决这个问题,接下来演示一下我处理这个问题的过程。</p><a id="more"></a><h2 id="测试数据："><a href="#测试数据：" class="headerlink" title="测试数据："></a>测试数据：</h2><p>通过<a href="http://geojson.io/来获得测试数据，如下图，在地图上绘制了一个多边形设为地理围栏，分别取了围栏内外两个点来进行测试。" target="_blank" rel="noopener">http://geojson.io/来获得测试数据，如下图，在地图上绘制了一个多边形设为地理围栏，分别取了围栏内外两个点来进行测试。</a></p><p><img src="https://s1.ax1x.com/2018/12/14/FUwEh4.png" alt="FUwEh4.png"></p><p>得到GEOjson数据如下：</p><figure class="highlight json"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">&#123;<br>  <span class="hljs-attr">"type"</span>: <span class="hljs-string">"FeatureCollection"</span>,<br>  <span class="hljs-attr">"features"</span>: [<br>    &#123;<br>      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Feature"</span>,<br>      <span class="hljs-attr">"properties"</span>: &#123;&#125;,<br>      <span class="hljs-attr">"geometry"</span>: &#123;<br>        <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Polygon"</span>,<br>        <span class="hljs-attr">"coordinates"</span>: [<br>          [<br>            [<br>              <span class="hljs-number">114.3458104133606</span>,<br>              <span class="hljs-number">30.476167529462785</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34512376785278</span>,<br>              <span class="hljs-number">30.475575748963195</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34576749801636</span>,<br>              <span class="hljs-number">30.474540124433936</span><br>            ],<br>            [<br>              <span class="hljs-number">114.3467652797699</span>,<br>              <span class="hljs-number">30.475363076967565</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34693694114685</span>,<br>              <span class="hljs-number">30.476102803645833</span><br>            ],<br>            [<br>              <span class="hljs-number">114.3458104133606</span>,<br>              <span class="hljs-number">30.476167529462785</span><br>            ]<br>          ]<br>        ]<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Feature"</span>,<br>      <span class="hljs-attr">"properties"</span>: &#123;&#125;,<br>      <span class="hljs-attr">"geometry"</span>: &#123;<br>        <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Point"</span>,<br>        <span class="hljs-attr">"coordinates"</span>: [<br>          <span class="hljs-number">114.34605717658997</span>,<br>          <span class="hljs-number">30.475584995561178</span><br>        ]<br>      &#125;<br>    &#125;,<br>    &#123;<br>      <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Feature"</span>,<br>      <span class="hljs-attr">"properties"</span>: &#123;&#125;,<br>      <span class="hljs-attr">"geometry"</span>: &#123;<br>        <span class="hljs-attr">"type"</span>: <span class="hljs-string">"Point"</span>,<br>        <span class="hljs-attr">"coordinates"</span>: [<br>          <span class="hljs-number">114.346604347229</span>,<br>          <span class="hljs-number">30.476518897432545</span><br>        ]<br>      &#125;<br>    &#125;<br>  ]<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="安装shapely"><a href="#安装shapely" class="headerlink" title="安装shapely"></a>安装shapely</h2><p>本测试基于python——python3.6</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ pip <span class="hljs-keyword">install</span> shapely<br></code></pre></div></td></tr></table></figure><p>windows安装shapely会报错</p><h2 id="shapely解析地理围栏"><a href="#shapely解析地理围栏" class="headerlink" title="shapely解析地理围栏"></a>shapely解析地理围栏</h2><p>话不多说直接上代码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> shapely.geometry <span class="hljs-keyword">import</span> Point<br><span class="hljs-keyword">from</span> shapely.geometry.polygon <span class="hljs-keyword">import</span> Polygon<br><br>point = Point(<span class="hljs-number">0.5</span>, <span class="hljs-number">0.5</span>)<br>polygon = Polygon([(<span class="hljs-number">0</span>, <span class="hljs-number">0</span>), (<span class="hljs-number">0</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">1</span>), (<span class="hljs-number">1</span>, <span class="hljs-number">0</span>)])<br>print(polygon.contains(point))<br></code></pre></div></td></tr></table></figure><p>下面是实际的实例：</p><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">from shapely.geometry import Point<br>from shapely.geometry.polygon import Polygon<br><br>polygon_data= [<br>            [<br>              <span class="hljs-number">114.3458104133606</span>,<br>              <span class="hljs-number">30.476167529462785</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34512376785278</span>,<br>              <span class="hljs-number">30.475575748963195</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34576749801636</span>,<br>              <span class="hljs-number">30.474540124433936</span><br>            ],<br>            [<br>              <span class="hljs-number">114.3467652797699</span>,<br>              <span class="hljs-number">30.475363076967565</span><br>            ],<br>            [<br>              <span class="hljs-number">114.34693694114685</span>,<br>              <span class="hljs-number">30.476102803645833</span><br>            ],<br>            [<br>              <span class="hljs-number">114.3458104133606</span>,<br>              <span class="hljs-number">30.476167529462785</span><br>            ]<br>          ]<br>          <br>point1 = Point([<span class="hljs-number">114.34605717658997</span>,<span class="hljs-number">30.475584995561178</span>])<br>point2 = Point([<span class="hljs-number">114.346604347229</span>,<span class="hljs-number">30.476518897432545</span>])<br>polygon = Polygon(polygon_data)<br>print(polygon.contains(point1))<br>print(polygon.contains(point2))<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-literal">True</span><br><span class="hljs-literal">False</span><br></code></pre></div></td></tr></table></figure><p>这样一来我们就快速的实现了，目标点是否在地理围栏内的判断。</p><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>Python还是挺好用的：）</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p><a href="https://stackoverflow.com/questions/36399381/whats-the-fastest-way-of-checking-if-a-point-is-inside-a-polygon-in-python" target="_blank" rel="noopener">https://stackoverflow.com/questions/36399381/whats-the-fastest-way-of-checking-if-a-point-is-inside-a-polygon-in-python</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker构建Django部署环境（四）项目实践</title>
      <link href="2019/05/05/README/"/>
      <url>2019/05/05/README/</url>
      
        <content type="html"><![CDATA[<p><em>目前根据这个项目文件已经实验通过，后续会补上详细步骤</em></p><h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><a id="more"></a><p>经过接近一周的下班后的摸索，总算是成功的利用docker完成了一个django项目的完整部署。不得不说时间已经来到9102年，不会一点docker的话，会给自己带来太多的局限。</p><p>相比于传统的部署方式，docker极大地简化了我们的工作。目前我所在的公司内，身为项目负责人的我，也兼顾了一些运维部署的工作。最近项目度过了密集的编码开发阶段，在项目部署阶段，安装系统、数据库、python、虚拟环境。。。真的是让我耗费了很多时间，这就是我为什么花了将近一周的业余时间研究docker的原因。</p><p>需要注意的是，如果你对django的传统的部署方式还是不太熟悉，甚至还没有完整的时间过几次，那么我建议暂时先在真实的linux系统上完成至少一次部署，这样才能保证迁移到容器部署后你的基础知识是牢固的。</p><p>如果对Docker尚不熟悉的朋友，可以先看一下这下面的系列博文</p><blockquote><p>2019-06-19 <a href="https://huangyongchi.com/2019/06/19/Docker%20Compose%E7%AE%80%E4%BB%8B/" target="_blank" rel="noopener">Docker构建Django部署环境（三）Docker Compose</a></p><p>2019-06-06 <a href="https://huangyongchi.com/2019/06/06/docker%E6%8C%87%E4%BB%A4/" target="_blank" rel="noopener">Docker构建Django部署环境（二）基本指令集</a></p><p>2019-06-01 <a href="https://huangyongchi.com/2019/06/01/Docker%E4%B9%8B%E8%B7%AF%EF%BC%88%E4%B8%80%EF%BC%89%E4%B8%80%E4%BA%9B%E6%A6%82%E5%BF%B5/" target="_blank" rel="noopener">Docker构建Django部署环境（一）核心概念</a></p><p>2018-12-19 <a href="https://huangyongchi.com/2018/12/19/%E4%BD%BF%E7%94%A8%20yum%20%E5%AE%89%E8%A3%85%EF%BC%88CentOS%207%E4%B8%8B%EF%BC%89/" target="_blank" rel="noopener">CentOS下安装Docker</a></p></blockquote><h2 id="传统Django部署架构"><a href="#传统Django部署架构" class="headerlink" title="传统Django部署架构"></a>传统Django部署架构</h2><p>浏览器访问一个页面的程序处理流程：</p><p>(1)，浏览器向 Nginx 发起一个请求，如果匹配到 Nginx 的静态 URL，比如 /static 目录下的 js、css、404.html 等文件，那么 Nginx 直接返回文件。其他请求 URL，通过 uwsgi_pass 配置转给 uWSGI 处理。</p><p>(2)，uWSGI 解析请求头、请求体，http 协议转为 wsgi协议内容，最后将请求转给 Django。</p><p>(3)，Django 通过 URL 匹配，找到指定的 View 函数，访问 MySQL、Redis 等服务，组装一个 Response 返回给 uWSGI。</p><p>(4)，uWSGI 根据返回 Response 生成响应头和响应体，uWSGI 协议转为 http 协议内容，最后将请求转给 Nginx。</p><p>(5)，浏览器根据 Nginx 返回的内容，渲染在页面，呈现给用户。</p><p>需要说明的是，Nginx 作为反向代理，提供了负载均衡的能力，同时，由于 Nginx 出色的静态文件服务能力，提高了系统的并发能力。uWSGI 通过多 work 提高了 Django 的并发能力，充分发挥了多核的优势。</p><p><img src="https://s2.ax1x.com/2019/06/28/Zu7OzD.png" alt="Zu7OzD.png"></p><h2 id="本项目架构"><a href="#本项目架构" class="headerlink" title="本项目架构"></a>本项目架构</h2><p>在简化架构的基础上，我们还是保证了基础的架构完整性，这个小博客项目里暂时没有用到消息队列与缓存，因此我们的演示架构如下</p><p><code>django+nginx+uwsgi+postgresql</code></p><p>项目结构：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs ini">.<br>├── docker-compose.yml<br>├── LICENSE<br>├── nginx<br>│   ├── Dockerfile<br>│   ├── my_nginx.conf<br>│   ├── nginx.conf<br>│   └── nginx_origin.conf<br>├── README.md<br>└── YcBlog<br>    ├── blog<br>    ├── cnblog<br>    ├── Dockerfile<br>    ├── manage.py<br>    ├── media<br>    ├── requirements.txt<br>    ├── static<br>    ├── templates<br>    └── uwsgi.ini<br></code></pre></div></td></tr></table></figure><p>启动命令：</p><p><code>docker-compose up</code></p><p>于是整个Django世界开始运行：）</p><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/hyyc554/django_in_docker" target="_blank" rel="noopener">https://github.com/hyyc554/django_in_docker</a></p>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python开发者的收藏夹</title>
      <link href="2019/05/05/Python%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/"/>
      <url>2019/05/05/Python%E5%BC%80%E5%8F%91%E8%80%85%E7%9A%84%E6%94%B6%E8%97%8F%E5%A4%B9/</url>
      
        <content type="html"><![CDATA[<p>记录一些有用的网址</p><p>干货：基础python Web ，主要是django框架</p><a id="more"></a><p>（分类：编程社区）：<br><a href="https://link.zhihu.com/?target=https%3A//www.v2ex.com/" target="_blank" rel="noopener">https://www.v2ex.com/</a><br><a href="https://link.zhihu.com/?target=http%3A//www.csdn.net/%3Fref%3Dtoolbar" target="_blank" rel="noopener">CSDN.NET - 全球最大中文IT社区，为IT专业技术人员提供最全面的信息传播和服务平台</a><br><a href="https://link.zhihu.com/?target=http%3A//www.ituring.com.cn/" target="_blank" rel="noopener">图灵社区</a><br><a href="https://link.zhihu.com/?target=http%3A//segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a><br><a href="https://link.zhihu.com/?target=http%3A//python-china.org/" target="_blank" rel="noopener">Python China</a><br><a href="https://link.zhihu.com/?target=http%3A//coolshell.cn/" target="_blank" rel="noopener">酷壳 – CoolShell.cn</a><br><a href="https://link.zhihu.com/?target=http%3A//ourcoders.com/home/" target="_blank" rel="noopener">OurCoders (我们程序员)</a><br><a href="https://link.zhihu.com/?target=http%3A//www.dewen.io/" target="_blank" rel="noopener">德问:编程社交问答</a><br><a href="https://link.zhihu.com/?target=http%3A//forum.memect.com/" target="_blank" rel="noopener">好东西论坛 | 好东西传送门的论坛</a><br><a href="https://link.zhihu.com/?target=http%3A//www.oschina.net/" target="_blank" rel="noopener">开源中国 - 找到您想要的开源项目，分享和交流</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/" target="_blank" rel="noopener">博客园 - 开发者的网上家园</a><br><a href="https://link.zhihu.com/?target=http%3A//www.django-china.cn/" target="_blank" rel="noopener">Django中国社区</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.jobbole.com/" target="_blank" rel="noopener">博客 - 伯乐在线</a><br><a href="https://link.zhihu.com/?target=http%3A//cocode.cc/" target="_blank" rel="noopener">CoCode</a></p><p>（分类：刷题： 另：个人见解：没有一定时间和基础的小伙伴其实没必要花大量时间刷题）<br><a href="https://link.zhihu.com/?target=https%3A//www.codecademy.com/" target="_blank" rel="noopener">Learn to code</a><br><a href="https://link.zhihu.com/?target=https%3A//leetcode.com/problemset/algorithms/" target="_blank" rel="noopener">Problems | LeetCode OJ</a><br><a href="https://link.zhihu.com/?target=http%3A//www.lintcode.com/zh-cn/problem/" target="_blank" rel="noopener">LintCode - 编程面试题在线训练平台</a><br><a href="https://link.zhihu.com/?target=http%3A//www.checkio.org/profile/login/%3Fnext%3D/station/home/" target="_blank" rel="noopener">Login:CheckiO</a></p><p>(分类：自学教程）：<br><a href="https://link.zhihu.com/?target=https%3A//github.com/justjavac/free-programming-books-zh_CN" target="_blank" rel="noopener">justjavac/free-programming-books-zh_CN · GitHub</a>   ←←←←←←←←←←看这个！！！！！<br><a href="https://link.zhihu.com/?target=http%3A//www.runoob.com/" target="_blank" rel="noopener">菜鸟教程 - 学的不仅是技术，更是梦想！</a><br><a href="https://link.zhihu.com/?target=http%3A//stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a>      神器stackoverflow，不会的百分之九十都可以在这里找到答案<br><a href="https://link.zhihu.com/?target=http%3A//www.ziqiangxuetang.com/" target="_blank" rel="noopener">自强学堂 - 在线教程</a>自强学堂<br><a href="https://link.zhihu.com/?target=http%3A//www.maiziedu.com/" target="_blank" rel="noopener">麦子学院 - 专业IT职业在线教育平台</a> 麦子学院，可能是现阶段网上最详细的python web 系列教程，里面有的老师讲的特别好，特别适合完全没基础的小伙伴，但是东西虽多，有些内容精度还需努力，还有很多课程也没有录制完毕 ，不过情况正常逐渐改善<br><a href="https://link.zhihu.com/?target=http%3A//www.imooc.com/" target="_blank" rel="noopener">慕课网-国内最大的IT技能学习平台</a> 慕课网  有廖雪峰前辈的python入门和进阶<br><a href="https://link.zhihu.com/?target=https%3A//www.shiyanlou.com/" target="_blank" rel="noopener">实验楼 - 第一家以实验为核心的IT在线教育平台</a>  有独有的虚拟环境，有python工程师的完整学习路线<br><a href="https://link.zhihu.com/?target=http%3A//www.jikexueyuan.com/" target="_blank" rel="noopener">http://www.jikexueyuan.com/</a>  极客学院 有免费的会员自己找<br><a href="https://link.zhihu.com/?target=http%3A//python.usyiyi.cn/" target="_blank" rel="noopener">Python 官方文档中文站</a>      很好的官方文档，库，django1.8.2的资料，很多人自发翻译 ，也希望有更多人能够顺手一翻，利人利己<br><a href="https://link.zhihu.com/?target=http%3A//www.liaoxuefeng.com/" target="_blank" rel="noopener">Home - 廖雪峰的官方网站</a>      廖雪峰前辈的python2和3入门,git入门都很不错，并且还有前端js教学<br><a href="https://link.zhihu.com/?target=http%3A//www.itdiffer.com/" target="_blank" rel="noopener">I am Qiwsir</a>     老齐前辈的python入门，讲的特别详细，web方向使用Tornado框架，在自学路上受到过本人帮助，并且工作也算是靠他帮忙才找到，有幸见过本人并受到了生活上的帮助和建议，不论在生活中还是工作中，真是一个非常谦和的长辈，非常非常感激他<br><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/" target="_blank" rel="noopener">简明现代魔法 —— 专注于互联网主流的各种技术</a> 简明现代魔法</p><p>（分类：英文自学网站）<br><a href="https://link.zhihu.com/?target=https%3A//www.udacity.com/" target="_blank" rel="noopener">https://www.udacity.com/</a><br><a href="https://link.zhihu.com/?target=https%3A//www.edx.org/" target="_blank" rel="noopener">edX | Free online courses from the world’s best universities</a><br><a href="https://link.zhihu.com/?target=http%3A//www.ibm.com/developerworks/" target="_blank" rel="noopener">IBM developerWorks : IBM’s resource for developers and IT professionals</a><br><a href="https://link.zhihu.com/?target=https%3A//www.coursera.org/" target="_blank" rel="noopener">Coursera - Free Online Courses From Top Universities</a><br><a href="https://link.zhihu.com/?target=http%3A//hackerxu.com/Twd/" target="_blank" rel="noopener">Tango with Django 中文文档</a>     tango_with_django_book<br><a href="https://link.zhihu.com/?target=http%3A//c.biancheng.net/cpp/html/1402.html" target="_blank" rel="noopener">如何使用本教程</a> 正则表达式入门，今天无意中翻到的，看起来还可以，还有个csdn的正则表达式网页，等在电脑上找到再发<br><a href="https://link.zhihu.com/?target=http%3A//danielkummer.github.io/git-flow-cheatsheet/index.zh_CN.html" target="_blank" rel="noopener">git-flow 备忘清单</a>   git flow备忘清单 </p><p>(分类：招聘网站）<br><a href="https://link.zhihu.com/?target=http%3A//www.lagou.com/" target="_blank" rel="noopener">拉勾网-最专业的互联网招聘平台</a><br><a href="https://link.zhihu.com/?target=http%3A//www.jobtong.com/" target="_blank" rel="noopener">周伯通招聘-最靠谱的移动互联网招聘社区</a><br><a href="https://link.zhihu.com/?target=http%3A//www.100offer.com/" target="_blank" rel="noopener">100offer-高端人才招聘网站</a><br><a href="https://link.zhihu.com/?target=http%3A//www.histarter.com/" target="_blank" rel="noopener">http://www.histarter.com/</a></p><p>（分类：文章）：<br><a href="https://link.zhihu.com/?target=https%3A//www.zybuluo.com/UniNova/note/96735" target="_blank" rel="noopener">留彼Python阅读清单</a><br><a href="https://link.zhihu.com/?target=http%3A//coolshell.cn/articles/4990.html" target="_blank" rel="noopener">程序员技术练级攻略</a> 耗子哥写的，推荐看看<br><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5MjUwNzIyMA%3D%3D%26mid%3D400060668%26idx%3D1%26sn%3D9064cf2be8b99bdfb0fdf9eba157eaf6%26scene%3D23%26srcid%3D1023T4YvC6lwNJPXA5YRCfoA%23rd" target="_blank" rel="noopener">我前妻的故事（一个初中肄业生的奋斗）</a>    推荐大家看看，tinyfool 前辈前妻的职场故事<br><a href="https://link.zhihu.com/?target=http%3A//www.wklken.me/posts/2013/12/21/python-jd.html" target="_blank" rel="noopener">Python招聘需求与技能体系</a> 今天偶然看到的python的技能需求与发展方向，特别详细，并且一直保持更新状态，有兴趣的也可以去看看他归档里的一些心情，工作状态总结，可以看到成长的轨迹<br><a href="https://link.zhihu.com/?target=http%3A//www.acfun.tv/v/ac2300100" target="_blank" rel="noopener">一路走来打工十年（上·中）未完待续</a><br><a href="https://link.zhihu.com/?target=http%3A//www.acfun.tv/a/ac2304009" target="_blank" rel="noopener">一路走来 打工十年·完</a>  A站文章<br><a href="https://link.zhihu.com/?target=http%3A//www.acfun.tv/a/ac2312212" target="_blank" rel="noopener">【工作】如何成为一名程序员</a></p><p>（分类：零碎资料）：<br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/fnng/p/3157639.html" target="_blank" rel="noopener">「UI 测试自动化selenium」汇总</a><br><a href="https://link.zhihu.com/?target=http%3A//www.ruanyifeng.com/blog/" target="_blank" rel="noopener">阮一峰的网络日志</a><br><a href="https://link.zhihu.com/?target=http%3A//mp.weixin.qq.com/s%3F__biz%3DMjM5NjA0NjgyMA%3D%3D%26mid%3D206271329%26idx%3D1%26sn%3Da5c3adf9c534d2cbf08f34e96a856a6e%26scene%3D2%26from%3Dtimeline%26isappinstalled%3D0%23wechat_redirect" target="_blank" rel="noopener">为什么成为一名程序员这么难？</a><br><a href="https://link.zhihu.com/?target=http%3A//python-cn.org/%23/" target="_blank" rel="noopener">Python-cn Guide</a><br><a href="https://link.zhihu.com/?target=http%3A//www.tuicool.com/articles/eaERjyU" target="_blank" rel="noopener">Django 1.6 最佳实践: 如何正确使用 CBVs (Class-based views)</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.jobbole.com/74881/" target="_blank" rel="noopener">实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（一）</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.jobbole.com/74914/" target="_blank" rel="noopener">实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（二）</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.jobbole.com/75435/" target="_blank" rel="noopener">实例详解Django的 select_related 和 prefetch_related 函数对 QuerySet 查询的优化（三）</a><br><a href="https://link.zhihu.com/?target=https%3A//ccbv.co.uk/" target="_blank" rel="noopener">https://ccbv.co.uk/</a><br><a href="https://link.zhihu.com/?target=http%3A//www.crifan.com/summary_the_meaning_of_self_and___init___in_python_and_why_need_them/" target="_blank" rel="noopener">【整理】Python中：self和<strong>init</strong>的含义 + 为何要有self和<strong>init</strong></a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/lhj588/archive/2012/05/24/2516040.html" target="_blank" rel="noopener">Django model字段类型清单</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/ponder008/article/details/6880400" target="_blank" rel="noopener">观察者模式（python版）</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/column/details/why-bug.html" target="_blank" rel="noopener">专栏：Python爬虫入门教程</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/smilelance/article/details/6529950" target="_blank" rel="noopener">Python 正则表达式（模式匹配）</a><br><a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/link%3Furl%3D754jn0cN6vzF-wPzl2zhcdyc-LvIb_itiQWVHb53Mr8zW5x114e3eTpUYyNEbmuWalfBoa7yhWbvbFJW5cy9Y0OZZlliaejBGYOsUGyNJbLMnLhhHQypTfTwNCwQu4RAbbwiw-5gqoumRRXB1AaD9q%233" target="_blank" rel="noopener">命令提示符_百度百科</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/zhangzhu/archive/2013/07/04/3172486.html" target="_blank" rel="noopener">Mysql命令大全</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.163.com/qj_l12%40126/blog/static/359308262008111624447196/" target="_blank" rel="noopener">http://blog.163.com/qj_l12@126/blog/static/359308262008111624447196/</a><br>mysql 中alter语句中change和modify的区别<br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/forphp/p/3444652.html" target="_blank" rel="noopener">group by - long896130895</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.renren.com/share/221734963/7835750512" target="_blank" rel="noopener">Django 数据库的操作</a><br><a href="https://link.zhihu.com/?target=http%3A//www.nanerbang.com/article/33/" target="_blank" rel="noopener">Django：如何admin管理界面中显示中文model名称<em>django</em>男儿邦</a><br><a href="https://link.zhihu.com/?target=http%3A//www.weiguda.com/blog/8/" target="_blank" rel="noopener">Django 1.6 最佳实践: 如何正确的使用和设置Database和Model</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/ab198604/article/details/12655765" target="_blank" rel="noopener">models数据模型学习笔记</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/zhangxinrun/article/details/8095118" target="_blank" rel="noopener">Django模板系统(非常详细)</a><br><a href="https://link.zhihu.com/?target=http%3A//lishiguang.iteye.com/blog/1328982" target="_blank" rel="noopener">通过django的meta类来修改自动后台显示的模块名称</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/gideal_wang/article/details/4316691" target="_blank" rel="noopener">HTTP POST GET 本质区别详解</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/parrot18/article/details/8617405" target="_blank" rel="noopener">Django中的request.GET和request.POST</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/whoami021/article/details/20876685%3Futm_source%3Dtuicool" target="_blank" rel="noopener">django表单处理（一）–最简单的表单</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/whoami021/article/details/20876965" target="_blank" rel="noopener">django表单处理（二）–数据验证</a><br><a href="https://link.zhihu.com/?target=http%3A//www.douban.com/note/296298497/" target="_blank" rel="noopener">django form关于clean及cleaned_data的说明 以及4种初始化</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/holbrook/archive/2012/02/09/2357348.html" target="_blank" rel="noopener">Django实战（20）：分页（Pagination)</a><br><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/academy/detail/1318909" target="_blank" rel="noopener">request.META里包含了哪些数据？ – 简明现代魔法</a><br><a href="https://link.zhihu.com/?target=http%3A//www.nowamagic.net/academy/detail/13281830" target="_blank" rel="noopener">Django中的request与response对象 – 简明现代魔法</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/fengmk2/archive/2008/04/21/1163766.html" target="_blank" rel="noopener">Python tips: 什么是*args和**kwargs？</a><br><a href="https://link.zhihu.com/?target=http%3A//baike.baidu.com/link%3Furl%3DSNdh8mZCqtI4gXpEuggnkT0SNqyJbixJCBsMU_5cV-mAkkxlg90wez79--ktR3vRsz6BoxiIT95u3e6Cx8Vt4q" target="_blank" rel="noopener">类和对象_百度百科</a><br><a href="https://link.zhihu.com/?target=http%3A//www.360doc.com/content/12/1012/21/7662927_241124973.shtml" target="_blank" rel="noopener">总结整理时下流行的浏览器User-Agent大全</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/FeiSan/article/details/1729905" target="_blank" rel="noopener">Python中函数的参数定义和可变参数</a><br><a href="https://link.zhihu.com/?target=http%3A//www.upour.com/2012/02/python-2-items-iteritems-get-set/" target="_blank" rel="noopener">items()和iteritems()区别和使用，字典的get()函数也不错</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/suibianshen2012/article/details/41451287" target="_blank" rel="noopener">Python3字典中items()和python2.x中iteritems()有什么区别</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/huangcong/archive/2011/08/29/2158268.html" target="_blank" rel="noopener">黄聪：Python 字符串操作（string替换、删除、截取、复制、连接、比较、查找、包含、大小写转换、分割等）</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/facevoid/article/details/5338048" target="_blank" rel="noopener">Python 列表(list)操作</a><br><a href="https://link.zhihu.com/?target=http%3A//pnig0s1992.blog.51cto.com/393390/369164/" target="_blank" rel="noopener">python中string的操作函数</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/btchenguang/archive/2012/09/01/2666763.html" target="_blank" rel="noopener">(9)Django框架学习-Templates进阶用法–上</a><br><a href="https://link.zhihu.com/?target=http%3A//www.yihaomen.com/article/python/324.htm" target="_blank" rel="noopener">django 程序ajax提交的方法,避免csrf错误</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.csdn.net/shuifa2008/article/details/8679272" target="_blank" rel="noopener">django CSRF protect （防止出现Forbidden 403）</a><br><a href="https://link.zhihu.com/?target=http%3A//zhidao.baidu.com/link%3Furl%3DN_gh6U_iJ1K6KL_p5EM985BQ925uerpwlX3VpMXicjWffekT1wwybNA-78RZE1dTP_nHiIsVDeVNAn22N5nrKq" target="_blank" rel="noopener">求Django常用语法，接受get和post参数的方法</a><br><a href="https://link.zhihu.com/?target=http%3A//blog.chinaunix.net/uid-21633169-id-4332621.html" target="_blank" rel="noopener">Django中request和response中的属性方法详述</a><br><a href="https://link.zhihu.com/?target=http%3A//www.ttlsa.com/python/how-to-install-and-use-pip-ttlsa/" target="_blank" rel="noopener">pip 安装使用详解</a><br><a href="https://link.zhihu.com/?target=http%3A//python.jobbole.com/81312/" target="_blank" rel="noopener">将Sublime Text 3设置为Python全栈开发环境</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnblogs.com/tk091/p/3700013.html" target="_blank" rel="noopener">virtualenv – python虚拟沙盒</a><br><a href="https://link.zhihu.com/?target=http%3A//www.cnsecer.com/7896.html" target="_blank" rel="noopener">再来一发很漂亮的sublime text3主题</a><br><a href="https://link.zhihu.com/?target=http%3A//python.jobbole.com/81312/" target="_blank" rel="noopener">将Sublime Text 3设置为Python全栈开发环境</a><br><a href="https://link.zhihu.com/?target=http%3A//segmentfault.com/a/1190000002596724" target="_blank" rel="noopener">Sublime Text3</a><br>(未完)</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 杂谈 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Twisted与Iot</title>
      <link href="2019/05/05/Twsited/"/>
      <url>2019/05/05/Twsited/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s2.ax1x.com/2019/07/07/ZBrvGj.png" alt="ZBrvGj.png"><br><a id="more"></a></p><h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>我学习Twisted也有一段时间了，在2019年为什么我还需要这样一个古老的框架呢？原因如下：</p><ul><li><code>asyncio</code>为代表的新时代下的协程框架很好，但是生态过于新，导致目前还没有可以借鉴的成熟案例。反观Twisted虽然不温不火，但是github上搜索到的开源项目源码数量还是较为可观的。</li><li>学习Twisted也是一个成长的过程，当熟悉了Twisted的设计理念，再来看当下流行的这些协程框架时，简直如鱼得水。</li><li>选择最适合的东西做事情。毫无疑问支持TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP以及我司未来可能用到的MQTT协议，是最大优点</li><li>最后，放一点我在V站上与其他人的<a href="https://www.v2ex.com/t/566492#reply28" target="_blank" rel="noopener">讨论</a>，综合起来社区的建议是<code>Twisted</code>or<code>Golang</code>。所以目前也在积极的学习地鼠仔语言，说不定哪天可以用go重构这个项目，不过这已经是后话了。</li></ul><h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><p>Twisted 是一个高性能的编程框架。Twisted是用Python实现的基于事件驱动的网络引擎框架。Twisted诞生于2000年初，在当时的网络游戏开发者看来，无论他们使用哪种语言，手中都鲜有可兼顾扩展性及跨平台的网络库。Twisted的作者试图在当时现有的环境下开发游戏，这一步走的非常艰难，他们迫切地需要一个可扩展性高、基于事件驱动、跨平台的网络开发框架，为此他们决定自己实现一个，并从那些之前的游戏和网络应用程序的开发者中学习，汲取他们的经验教训。<br>在不同的操作系统平台上，Twisted 利用不同的底层技术实现了高效能通信。</p><ul><li>在 Windows 中， Twisted 的实现基于 VO 完成端口 CIOCP, InpuνOutputCompletion p。此）技术，它保证了底层高效地将 I/O 事件通知给框架及应用程序。</li><li>在 Linux 中，Twisted 的 实现基于巳poll 技术， epoll 是 Linux 下 多路复用 I/O 接口 selec印oil 的增强版本，它能显著提高程序在大量并发连接中只有少量活跃的情况下的系统 CPU 利用率 。<br>在开发方法上， Twisted 引导程序员使用异步编程模型 。 Twisted 提供了丰富 的 Defer 、Threading 等特性来支持异步编程。这也导致了很 多开发者觉得 Twisted 难以学习，本章将深入浅出地引导读者掌握 Twisted 编程的基本方法 。</li></ul><p>Twisted支持许多常见的传输及应用层协议，包括TCP、UDP、SSL/TLS、HTTP、IMAP、SSH、IRC以及FTP。就像Python一样，Twisted也具有“内置电池”（batteries-included）的特点。Twisted对于其支持的所有协议都带有客户端和服务器实现，同时附带有基于命令行的工具，使得配置和部署产品级的Twisted应用变得非常方便。</p><p>一般来说，每个Twisted的抽象都只与一个特定的概念相关。在学习新的Twisted抽象概念时，最需要谨记的就是：</p><blockquote><p><strong>多数高层次抽象都是在低层次抽象的基础上建立的，很少有另立门户的。</strong></p></blockquote><p>因此，你在学习新的Twisted抽象概念时，始终要记住它做什么和不做什么。特别是，如果一个早期的抽象A实现了F特性，那么F特性不太可能再由其它任何抽象来实现。另外，如果另外一个抽象需要F特性，那么它会使用A而不是自己再去实现F。（通常的做法，B可能会通过继承A或获得一个指向A实例的引用）</p><p>网络非常的复杂，因此Twisted包含很多抽象的概念。通过从低层的抽象讲起，我们希望能更清楚起看到在一个Twisted程序中各个部分是怎么组织起来的。</p><h2 id="核心的循环体（reactor）"><a href="#核心的循环体（reactor）" class="headerlink" title="核心的循环体（reactor）"></a>核心的循环体（reactor）</h2><p>第一个我们要学习的抽象，也是Twisted中最重要的，就是reactor。在每个通过Twisted搭建起来的程序中心处，不管你这个程序有多少层，总会有一个reactor循环在不停止地驱动程序的运行。再也没有比reactor提供更加基础的支持了。实际上，Twisted的其它部分（即除了reactor循环体）可以这样理解：它们都是来辅助X来更好地使用reactor，这里的X可以是提供Web网页、处理一个数据库查询请求或其它更加具体的内容。尽管坚持像上一个客户端一样使用低层APIs是可能的，但如果我们执意那样做，那么我们必需自己来实现非常多的内容。而在更高的层次上，意味着我们可以少写很多代码。</p><p>但是当在外层思考与处理问题时, 很容易就忘记了reactor的存在了。在任何一个常见大小的Twisted程序中 ，确实很少会有直接与reactor的APIs交互。低层的抽象也是一样（即我们很少会直接与其交互）。我们在上一个客户端中用到的文件描述符抽象，就被更高层的抽象更好的归纳以至于我们很少会在真正的Twisted程序中遇到。（他们在内部依然在被使用，只是我们看不到而已）</p><p>至于文件描述符抽象的消息，这并不是一个问题。让Twisted掌舵异步I/O处理，这样我们就可以更加关注我们实际要解决的问题。但对于reactor不一样，它永远都不会消失。当你选择使用Twisted，也就意味着你选择使用Reactor模式，并且意味着你需要使用回调与多任务合作的”交互式”编程方式。如果你想正确地使用Twisted，你必须牢记reactor的存在。我们将在第六部分更加详细的讲解部分内容。但是现在要强调的是：</p><p><a href="https://imgchr.com/i/ZBsKL6" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/07/07/ZBsKL6.png" alt="ZBsKL6.png"></a></p><p>我们还将用图来描述新的概念，但这两个图是需要你牢记在脑海中的。可以这样说，我在写Twisted程序时一直想着这张图。</p><p>在我们付诸于代码前，有三个新的概念需要阐述清楚：Transports, Protocols, Protocol Factories</p><h2 id="Transports"><a href="#Transports" class="headerlink" title="Transports"></a>Transports</h2><p>Transports抽象是通过Twisted中interfaces模块中ITransport接口定义的。一个Twisted的Transport代表一个可以收发字节的单条连接。对于我们的诗歌下载客户端而言，就是对一条TCP连接的抽象。但是Twisted也支持诸如Unix中管道和UDP。Transport抽象可以代表任何这样的连接并为其代表的连接处理具体的异步I/O操作细节。</p><p>如果你浏览一下ITransport中的方法，可能找不到任何接收数据的方法。这是因为Transports总是在低层完成从连接中异步读取数据的许多细节工作，然后通过回调将数据发给我们。相似的原理，Transport对象的写相关的方法为避免阻塞也不会选择立即写我们要发送的数据。告诉一个Transport要发送数据，只是意味着：尽快将这些数据发送出去，别产生阻塞就行。当然，数据会按照我们提交的顺序发送。</p><p>通常我们不会自己实现一个Transport。我们会去使用Twisted提供的实现类，即在传递给reactor时会为我们创建一个对象实例。</p><h2 id="Protocols"><a href="#Protocols" class="headerlink" title="Protocols"></a>Protocols</h2><p>Twisted的Protocols抽象由interfaces模块中的IProtocol定义。也许你已经想到，Protocol对象实现协议内容。也就是说，一个具体的Twisted的Protocol的实现应该对应一个具体网络协议的实现，像FTP、IMAP或其它我们自己制定的协议。我们的诗歌下载协议，正如它表现的那样，就是在连接建立后将所有的诗歌内容全部发送出去并且在发送完毕后关闭连接。</p><p>严格意义上讲，每一个Twisted的Protocols类实例都为一个具体的连接提供协议解析。因此我们的程序每建立一条连接（对于服务方就是每接受一条连接），都需要一个协议实例。这就意味着，Protocol实例是存储协议状态与间断性（由于我们是通过异步I/O方式以任意大小来接收数据的）接收并累积数据的地方。</p><p>因此，Protocol实例如何得知它为哪条连接服务呢？如果你阅读IProtocol定义会发现一个makeConnection函数。这是一个回调函数，Twisted会在调用它时传递给其一个也是仅有的一个参数，即Transport实例。这个Transport实例就代表Protocol将要使用的连接。</p><p>Twisted内置了很多实现了通用协议的Protocol。你可以在<a href="http://twistedmatrix.com/trac/browser/trunk/twisted/protocols/basic.py" target="_blank" rel="noopener">twisted.protocols.basic</a>中找到一些稍微简单点的。在你尝试写新Protocol时，最好是看看Twisted源码是不是已经有现成的存在。如果没有，那实现一个自己的协议是非常好的，正如我们为诗歌下载客户端做的那样。</p><h2 id="Protocol-Factories"><a href="#Protocol-Factories" class="headerlink" title="Protocol Factories"></a>Protocol Factories</h2><p>因此每个连接需要一个自己的Protocol，而且这个Protocol是我们自己定义的类的实例。由于我们会将创建连接的工作交给Twisted来完成，Twisted需要一种方式来为一个新的连接创建一个合适的协议。创建协议就是Protocol Factories的工作了。</p><p>也许你已经猜到了，Protocol Factory的API由<a href="http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py" target="_blank" rel="noopener">IProtocolFactory</a>来定义，同样在<a href="http://twistedmatrix.com/trac/browser/trunk/twisted/internet/interfaces.py" target="_blank" rel="noopener">interfaces</a>模块中。Protocol Factory就是Factory模式的一个具体实现。buildProtocol方法在每次被调用时返回一个新Protocol实例，它就是Twisted用来为新连接创建新Protocol实例的方法。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Twisted </tag>
            
            <tag> 网络编程 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Docker构建Django部署环境（二）基本指令集</title>
      <link href="2019/05/05/docker%E6%8C%87%E4%BB%A4/"/>
      <url>2019/05/05/docker%E6%8C%87%E4%BB%A4/</url>
      
        <content type="html"><![CDATA[<h2 id="容器相关指令"><a href="#容器相关指令" class="headerlink" title="容器相关指令"></a>容器相关指令</h2><a id="more"></a><p>docker 命令采用了分组管理的思想，已经纳入管理的docker命令如下(版本18.09.2)： </p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">Management Commands:<br>  builder     Manage builds<br>  config      Manage Docker configs<br>  container   Manage containers<br>  engine      Manage the docker engine<br>  image       Manage images<br>  network     Manage networks<br>  node        Manage Swarm nodes<br>  plugin      Manage plugins<br>  secret      Manage Docker secrets<br>  service     Manage services<br>  stack       Manage Docker stacks<br>  swarm       Manage Swarm<br>  system      Manage Docker<br>  trust       Manage trust on Docker images<br>  volume      Manage volumes<br></code></pre></div></td></tr></table></figure><p>其中docker container 则是管理容器命令，老的版本中是使用docker进行容器管理，新版本兼容老版本docker命令，所以对容器管理既可用docker也可以用docker container。（一般示例代码汇总都是直接使用docker指令）</p><h3 id="1-启动容器"><a href="#1-启动容器" class="headerlink" title="1.启动容器"></a>1.启动容器</h3><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run [OPTIONS] IMAGE [COMMAND][ARG…]<br></code></pre></div></td></tr></table></figure><p>常用OPTIONS：</p><ul><li>-i：               –interactive,交互式启动</li><li>-t：                    –tty，分配终端</li><li>-v：                 –volume,挂在数据卷</li><li>-d：                 –detach，后台运行</li><li>–name：        容器名字</li><li>–network：   指定网络</li><li>–rm：             容器停止自动删除容器</li><li>-P：             自动暴露所有容器内端口，宿主随机分配端口</li><li>-p：             指定端口映射，将容器内服务的端口映射到宿主机的指定端口，可以使用多个-p<ul><li>可以使用如下三种方式：<ul><li><code>&lt;container port&gt;</code>：随机分配宿主机的一个端口作为映射端口</li><li><code>&lt;hostport&gt;:&lt;container port&gt;</code>:指明主机的端口映射为容器端口</li><li><code>&lt;hostip&gt;:&lt;hostport&gt;:&lt;container port&gt;</code>:指定主机ip和端口</li></ul></li></ul></li></ul><p>示例：运行一个名字为nginx-container的容器，使用镜像nginx，并将宿主机的8080映射到容器内部80端口，然后进入交互模式。 </p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]<span class="hljs-comment"># docker run -it --name nginx-container -p 8080:80  nginx /bin/bash</span><br>root@<span class="hljs-symbol">fd92290433da:</span>/<span class="hljs-comment"># ls</span><br>bin  boot  dev  etc  home  <span class="hljs-class"><span class="hljs-keyword">lib</span>  <span class="hljs-title">lib64</span>  <span class="hljs-title">media</span>  <span class="hljs-title">mnt</span>  <span class="hljs-title">opt</span>  <span class="hljs-title">proc</span>  <span class="hljs-title">root</span>  <span class="hljs-title">run</span>  <span class="hljs-title">sbin</span>  <span class="hljs-title">srv</span>  <span class="hljs-title">sys</span>  <span class="hljs-title">tmp</span>  <span class="hljs-title">usr</span>  <span class="hljs-title">var</span></span><br></code></pre></div></td></tr></table></figure><h3 id="2-查看容器"><a href="#2-查看容器" class="headerlink" title="2.查看容器"></a>2.查看容器</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">docker</span> ps<span class="hljs-meta"> [OPTIONS]</span><br></code></pre></div></td></tr></table></figure><p>常用选项：</p><ul><li>-a：–all ，查看所有容器，包括退出和其他状态的</li><li>-n:：–last int，显示最后n个创建的容器</li><li>-l, ：–latest ，显示最近的容器</li></ul><p>示例 :</p><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">root<span class="hljs-variable">@app51</span> ~]<span class="hljs-comment"># docker ps -n 2</span><br>CONTAINER ID        IMAGE               COMMAND                  CREATED             STATUS              PORTS                  NAMES<br><span class="hljs-number">4d51</span>a1cdf4b4        busybox             <span class="hljs-string">"/bin/sh"</span>                <span class="hljs-number">11</span> seconds ago      Up <span class="hljs-number">9</span> seconds                               busybox<br><span class="hljs-number">383f31</span>ff8f01        nginx               <span class="hljs-string">"nginx -g 'daemon of…"</span>   <span class="hljs-number">3</span> minutes ago       Up <span class="hljs-number">3</span> minutes        0.0.0.0<span class="hljs-symbol">:</span><span class="hljs-number">8080</span>-&gt;<span class="hljs-number">80</span>/tcp   nginx-container<br>[root<span class="hljs-variable">@app51</span> ~]<span class="hljs-comment"># docker ps -l</span><br>CONTAINER ID        IMAGE               COMMAND             CREATED             STATUS              PORTS               NAMES<br><span class="hljs-number">4d51</span>a1cdf4b4        busybox             <span class="hljs-string">"/bin/sh"</span>           <span class="hljs-number">41</span> seconds ago      Up <span class="hljs-number">39</span> seconds                           busybox<br>[root<span class="hljs-variable">@app51</span> ~]<span class="hljs-comment">#</span><br></code></pre></div></td></tr></table></figure><h3 id="3-查看容器具体信息"><a href="#3-查看容器具体信息" class="headerlink" title="3.查看容器具体信息"></a>3.查看容器具体信息</h3><figure class="highlight coq"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker inspect [OPTIONS] NAME|<span class="hljs-type">ID</span> [NAME|<span class="hljs-type">ID</span>…]<br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[<span class="hljs-meta">root@app51 ~</span>]<span class="hljs-meta"># docker inspect busybox</span><br>[<span class="hljs-meta"><br>    &#123;<br>        <span class="hljs-meta-string">"Id"</span>: <span class="hljs-meta-string">"4d51a1cdf4b4e06831faa6e54a32f1f8eb544e349028083b12f5b3f87af075c9"</span>,<br>        <span class="hljs-meta-string">"Created"</span>: <span class="hljs-meta-string">"2019-02-23T09:10:20.907074902Z"</span>,<br>        <span class="hljs-meta-string">"Path"</span>: <span class="hljs-meta-string">"/bin/sh"</span>,<br>        <span class="hljs-meta-string">"Args"</span>: [</span>],<br></code></pre></div></td></tr></table></figure><h3 id="4-停止容器"><a href="#4-停止容器" class="headerlink" title="4.停止容器"></a>4.停止容器</h3><p>方式一：<code>docker stop [OPTIONS] CONTAINER [CONTAINER…]</code></p><p>方式二： <code>docker kill [OPTIONS] CONTAINER [CONTAINER…]</code></p><p>区别：docker stop 相当于发送15停止信号，而kill是强制终止对应信号9</p><p>示例：</p><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">[root@app51 ~]</span># docker stop nginx-<span class="hljs-keyword">container</span> <br>nginx-<span class="hljs-keyword">container</span><br></code></pre></div></td></tr></table></figure><h3 id="5-启动已停止的容器"><a href="#5-启动已停止的容器" class="headerlink" title="5.启动已停止的容器"></a>5.启动已停止的容器</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker start <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[CONTAINER…]</span><br></code></pre></div></td></tr></table></figure><p>常用选项：</p><ul><li>-a：–attach 附加终端</li><li>-I：–interactive 交互式 </li></ul><figure class="highlight tcl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker start -ia busybox<br>/ # ls<br>bin   dev   etc   home  <span class="hljs-keyword">proc</span><span class="hljs-title">  root</span> <span class="hljs-title"> sys</span> <span class="hljs-title">  tmp</span> <span class="hljs-title">  usr</span> <span class="hljs-title">  var</span><br>/ #<span class="hljs-title"> ps</span> <span class="hljs-title"><br>PID</span> <span class="hljs-title">  USER</span> <span class="hljs-title">    TIME</span> <span class="hljs-title"> COMMAND</span><br>    1<span class="hljs-title"> root</span>      0:00 /bin/sh<br>    7<span class="hljs-title"> root</span>      0:00<span class="hljs-title"> ps</span><br></code></pre></div></td></tr></table></figure><h3 id="6-删除容器"><a href="#6-删除容器" class="headerlink" title="6.删除容器"></a>6.删除容器</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rm <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[CONTAINER…]</span> <br>或者<br>docker <span class="hljs-keyword">container</span> rm<br></code></pre></div></td></tr></table></figure><p>如果删除的容器正在运行则需要指定-f进行强制删除</p><p>常用选项：</p><ul><li>-f： –force 强制删除</li></ul><p>示例： </p><figure class="highlight axapta"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rm nginx-<span class="hljs-keyword">container</span><br></code></pre></div></td></tr></table></figure><p>Ps:删除所有容器</p><figure class="highlight powershell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker rm <span class="hljs-operator">-f</span> `docker ps <span class="hljs-literal">-a</span> <span class="hljs-literal">-q</span>`<br>docker ps <span class="hljs-literal">-a</span> |awk <span class="hljs-operator">-F</span> <span class="hljs-string">' '</span> <span class="hljs-string">'&#123;print $1&#125;'</span> |xargs docker rm <span class="hljs-operator">-f</span><br></code></pre></div></td></tr></table></figure><h3 id="7-暂停某个容器"><a href="#7-暂停某个容器" class="headerlink" title="7. 暂停某个容器"></a>7. 暂停某个容器</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker pause <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[CONTAINER…]</span><br></code></pre></div></td></tr></table></figure><p>示例：</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker <span class="hljs-keyword">pause</span> nginx-<span class="hljs-keyword">container</span><br>nginx-<span class="hljs-keyword">container</span><br></code></pre></div></td></tr></table></figure><h3 id="8-恢复暂停的容器"><a href="#8-恢复暂停的容器" class="headerlink" title="8.恢复暂停的容器"></a>8.恢复暂停的容器</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker unpause <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[CONTAINER…]</span><br></code></pre></div></td></tr></table></figure><p>示例</p><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker <span class="hljs-keyword">pause</span> nginx-<span class="hljs-keyword">container</span><br>nginx-<span class="hljs-keyword">container</span><br></code></pre></div></td></tr></table></figure><h3 id="9-查看容器日志"><a href="#9-查看容器日志" class="headerlink" title="9.查看容器日志"></a>9.查看容器日志</h3><p>docker logs [OPTIONS] CONTAINER</p><p>常用选项：</p><ul><li>-t, –timestamps ：显示日志时间</li></ul><figure class="highlight accesslog"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">root@app51 ~]# docker logs nginx-container <br> <span class="hljs-number">10</span>.<span class="hljs-number">1</span>.<span class="hljs-number">201</span>.<span class="hljs-number">30</span> - - <span class="hljs-string">[23/Feb/2019:10:55:33 +0000]</span> <span class="hljs-string">"<span class="hljs-keyword">GET</span> / HTTP/1.1"</span> <span class="hljs-number">304</span> <span class="hljs-number">0</span> <span class="hljs-string">"-"</span> <span class="hljs-string">"Mozilla/5.0 (Macintosh; Intel Mac OS X 10_12_6) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/72.0.3626.109 Safari/537.36"</span> <span class="hljs-string">"-"</span><br></code></pre></div></td></tr></table></figure><h3 id="10-在已运行的容器中运行命令"><a href="#10-在已运行的容器中运行命令" class="headerlink" title="10.在已运行的容器中运行命令"></a>10.在已运行的容器中运行命令</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker exec <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> COMMAND <span class="hljs-comment">[ARG…]</span><br></code></pre></div></td></tr></table></figure><p>常用选项：</p><ul><li>-d：–detach ，后台运行命令</li><li>-e, –env list             设置env</li><li>-i, –interactive         启用交互式</li><li>-t, –tty                     启用终端</li><li>-u, –user string        指定用户 (格式: &lt;name|uid&gt;[:&lt;group|gid&gt;])</li><li>-w, –workdir string       指定工作目录 </li></ul><p>示例：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker exec -it -u nginx nginx-container /bin/sh<br>$ id<br><span class="hljs-attribute">uid</span>=101(nginx) <span class="hljs-attribute">gid</span>=101(nginx) <span class="hljs-attribute">groups</span>=101(nginx)<br>$<br></code></pre></div></td></tr></table></figure><h3 id="11-容器导出"><a href="#11-容器导出" class="headerlink" title="11.容器导出"></a>11.容器导出</h3><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-title">docker</span> ex<span class="hljs-keyword">port</span> [OPTIONS] CONTAINER<br></code></pre></div></td></tr></table></figure><p>容器导出类似于容器快照,导出的是容器的在宿主机上的文件系统压缩包，导出的文件系统可使用docker import进行导入，在其他机器导入时候会以镜像的方式存在。</p><p>常用参数</p><ul><li>-o, –output  导出的文件名称</li></ul><p>示例 ：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">export</span> <span class="hljs-selector-tag">nginx-container</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">nginx</span><span class="hljs-selector-class">.tar</span><br><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">ls</span> <span class="hljs-selector-tag">-lh</span> <span class="hljs-selector-tag">ningx</span><span class="hljs-selector-class">.tar</span><br><span class="hljs-selector-tag">-rw-------</span> 1 <span class="hljs-selector-tag">root</span> <span class="hljs-selector-tag">root</span> 107<span class="hljs-selector-tag">M</span> 2月  23 19<span class="hljs-selector-pseudo">:18</span> <span class="hljs-selector-tag">ningx</span><span class="hljs-selector-class">.tar</span><br></code></pre></div></td></tr></table></figure><h3 id="12-将导出的容器导入为镜像"><a href="#12-将导出的容器导入为镜像" class="headerlink" title="12.将导出的容器导入为镜像"></a>12.将导出的容器导入为镜像</h3><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">import</span> [<span class="hljs-keyword">OPTIONS</span>] <span class="hljs-keyword">file</span>|URL|- [REPOSITORY[:TAG]]<br></code></pre></div></td></tr></table></figure><p>容器导入可以是文件、文件url、镜像仓库</p><p>示例： </p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">import</span> <span class="hljs-selector-tag">nginx</span><span class="hljs-selector-class">.tar</span> <span class="hljs-selector-tag">nginx</span><span class="hljs-selector-pseudo">:v154</span> <br><span class="hljs-selector-tag">sha256</span><span class="hljs-selector-pseudo">:fd4931710d35765edb9bbd0ea84a886e0901aa7a2de03ab2eefd9aedea0e8646</span><br><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">images</span><br><span class="hljs-selector-tag">REPOSITORY</span>          <span class="hljs-selector-tag">TAG</span>                 <span class="hljs-selector-tag">IMAGE</span> <span class="hljs-selector-tag">ID</span>            <span class="hljs-selector-tag">CREATED</span>             <span class="hljs-selector-tag">SIZE</span><br><span class="hljs-selector-tag">nginx</span>               <span class="hljs-selector-tag">v154</span>                <span class="hljs-selector-tag">fd4931710d35</span>        10 <span class="hljs-selector-tag">seconds</span> <span class="hljs-selector-tag">ago</span>      108<span class="hljs-selector-tag">MB</span><br>&lt;<span class="hljs-selector-tag">none</span>&gt;              &lt;<span class="hljs-selector-tag">none</span>&gt;              940<span class="hljs-selector-tag">cdf68f69d</span>        7 <span class="hljs-selector-tag">minutes</span> <span class="hljs-selector-tag">ago</span>       108<span class="hljs-selector-tag">MB</span><br><span class="hljs-selector-tag">busybox</span>             <span class="hljs-selector-tag">latest</span>              <span class="hljs-selector-tag">d8233ab899d4</span>        8 <span class="hljs-selector-tag">days</span> <span class="hljs-selector-tag">ago</span>          1<span class="hljs-selector-class">.2MB</span><br><span class="hljs-selector-tag">nginx</span>               <span class="hljs-selector-tag">latest</span>              <span class="hljs-selector-tag">f09fe80eb0e7</span>        2 <span class="hljs-selector-tag">weeks</span> <span class="hljs-selector-tag">ago</span>         109<span class="hljs-selector-tag">MB</span><br></code></pre></div></td></tr></table></figure><p>其他导入示例</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">import</span> <span class="hljs-string">http:</span><span class="hljs-comment">//example.com/image.tar.gz  repository:tag</span><br></code></pre></div></td></tr></table></figure><h3 id="13-将容器提交为镜像"><a href="#13-将容器提交为镜像" class="headerlink" title="13.将容器提交为镜像"></a>13.将容器提交为镜像</h3><figure class="highlight inform7"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker commit <span class="hljs-comment">[OPTIONS]</span> <span class="hljs-keyword">CONTAINER</span> <span class="hljs-comment">[REPOSITORY<span class="hljs-comment">[:TAG]</span>]</span><br></code></pre></div></td></tr></table></figure><p>常用选项：</p><ul><li>-a,–author     指定作者</li><li>-m, –message 本次提交的信息</li><li>-p, –pause      提交为镜像时候暂停容器</li><li>-c, –change list 修改镜像某些属性，列如启动命令</li></ul><p>示例： </p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root<span class="hljs-title">@app51</span> ~]# docker commit -p -m 'build nginx image' nginx-container nginx:test<br>sha<span class="hljs-number">256</span>:<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">68885804</span>ca<span class="hljs-number">69970</span>d<span class="hljs-number">747</span><span class="hljs-keyword">cc</span><span class="hljs-number">6</span><span class="hljs-keyword">cc</span><span class="hljs-number">8050</span>ed<span class="hljs-number">7</span>a<span class="hljs-number">1</span>b<span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">24838695</span>ec<span class="hljs-number">11</span>b<span class="hljs-number">18348318809</span>a<span class="hljs-number">6</span><br>[root<span class="hljs-title">@app51</span> ~]# docker images<br>REPOSITORY          TAG                 IMAGE ID            CREATED             SIZE<br>nginx               test                <span class="hljs-number">6</span><span class="hljs-keyword">c</span><span class="hljs-number">68885804</span>ca        <span class="hljs-number">6</span> seconds ago       <span class="hljs-number">109</span>MB<br>nginx               v<span class="hljs-number">154</span>                fd<span class="hljs-number">4931710</span>d<span class="hljs-number">35</span>        <span class="hljs-number">2</span> hours ago         <span class="hljs-number">108</span>MB<br></code></pre></div></td></tr></table></figure><h2 id="镜像相关指令"><a href="#镜像相关指令" class="headerlink" title="镜像相关指令"></a>镜像相关指令</h2><p>在老版本中镜像操作也是使用的docker命令，新版本进行了分组，可使用docker image 来进行镜像操作。</p><h3 id="1-搜索镜像"><a href="#1-搜索镜像" class="headerlink" title="1.搜索镜像"></a>1.搜索镜像</h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">search</span> <span class="hljs-selector-attr">[OPTIONS]</span> <span class="hljs-selector-tag">TERM</span><br></code></pre></div></td></tr></table></figure><p>常用选项：</p><ul><li>–limit 限制搜索的结果条目数量，默认显示25条 </li></ul><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker search centos<br>NAME                               DESCRIPTION                                     STARS               OFFICIAL            AUTOMATED<br>centos                             The official build of CentOS.                   <span class="hljs-number">5179</span>                [OK]                <br>ansible/centos7-ansible            Ansible on Centos7                              <span class="hljs-number">120</span>                                     [OK]<br>jdeathe/centos-ssh                 CentOS<span class="hljs-number">-6</span> <span class="hljs-number">6.10</span> x86_64 / CentOS<span class="hljs-number">-7</span> <span class="hljs-number">7.5</span><span class="hljs-number">.1804</span> x86…   <span class="hljs-number">106</span>                                     [OK]<br>consol/centos-xfce-vnc             Centos container with <span class="hljs-string">"headless"</span> VNC session…   <span class="hljs-number">80</span>                                      [OK]<br></code></pre></div></td></tr></table></figure><p>结果字段含义：</p><p>NAME：镜像名称</p><p>DESCRIPTION :镜像描述</p><p>STARS ：获赞数量</p><p>OFFICIAL ：是否为官方镜像</p><p>AUTOMATED：是否为自动构建 </p><h3 id="2-下载镜像"><a href="#2-下载镜像" class="headerlink" title="2.下载镜像"></a>2.下载镜像</h3><figure class="highlight elixir"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker image pull  &lt;IMAGE_NAME&gt;<span class="hljs-symbol">:&lt;TAG&gt;</span>  或者docker pull<br></code></pre></div></td></tr></table></figure><p>TAG不写默认为最新版本latest</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]# docker pull centos<br>Using<span class="hljs-built_in"> default </span>tag: latest<br>latest: Pulling <span class="hljs-keyword">from</span> library/centos<br>a02a4930cb5d: Pull complete<br>Digest: sha256:184e5f35598e333bfa7de10d8fb1cebb5ee4df5bc0f970bf2b1e7c7345136426<br>Status: Downloaded newer image <span class="hljs-keyword">for</span> centos:latest<br></code></pre></div></td></tr></table></figure><h3 id="3-查看镜像"><a href="#3-查看镜像" class="headerlink" title="3.查看镜像"></a>3.查看镜像</h3><figure class="highlight mel"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-keyword">image</span> <span class="hljs-keyword">ls</span> <br>或者<br>docker images<br></code></pre></div></td></tr></table></figure><p>常用选项:</p><ul><li>-a: 查看所有已下载的镜像</li><li>-f: –filter,过滤某些镜像 </li></ul><figure class="highlight crmsh"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root@app51 ~]<span class="hljs-comment"># docker image ls -a</span><br>REPOSITORY          <span class="hljs-keyword">TAG</span>                 <span class="hljs-title">IMAGE</span> ID            CREATED             SIZE<br>centos              latest              <span class="hljs-number">1</span>e1148e4cc2c        <span class="hljs-number">2</span> months ago        <span class="hljs-number">202M</span>B<br></code></pre></div></td></tr></table></figure><h3 id="4-删除镜像"><a href="#4-删除镜像" class="headerlink" title="4.删除镜像"></a>4.删除镜像</h3> <figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">image</span> rm [OPTIONS] <span class="hljs-built_in">IMAGE</span> [<span class="hljs-built_in">IMAGE</span>...]  或者docker rmi <span class="hljs-built_in">IMAGE</span><br></code></pre></div></td></tr></table></figure><p>示例代码：</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root<span class="hljs-title">@app51</span> ~]# docker image rm centos<br>Untagged: centos:latest<br>Untagged: centos<span class="hljs-title">@sha256</span>:<span class="hljs-number">184e5</span>f<span class="hljs-number">35598e333</span>bfa<span class="hljs-number">7</span>de<span class="hljs-number">10</span>d<span class="hljs-number">8</span>fb<span class="hljs-number">1</span>cebb<span class="hljs-number">5</span>ee<span class="hljs-number">4</span>df<span class="hljs-number">5</span>bc<span class="hljs-number">0</span>f<span class="hljs-number">970</span>bf<span class="hljs-number">2</span>b<span class="hljs-number">1e7</span><span class="hljs-keyword">c</span><span class="hljs-number">7345136426</span><br>Deleted: sha<span class="hljs-number">256</span>:<span class="hljs-number">1e1148</span>e<span class="hljs-number">4</span><span class="hljs-keyword">cc</span><span class="hljs-number">2</span><span class="hljs-keyword">c</span><span class="hljs-number">148</span><span class="hljs-keyword">c</span><span class="hljs-number">6890</span>a<span class="hljs-number">18e3</span>b<span class="hljs-number">2</span>d<span class="hljs-number">2</span>dde<span class="hljs-number">41</span>a<span class="hljs-number">6745</span>ceb<span class="hljs-number">4e5</span>fe<span class="hljs-number">94</span>a<span class="hljs-number">923</span>d<span class="hljs-number">811</span>bf<span class="hljs-number">82</span>ddb<br>Deleted: sha<span class="hljs-number">256</span>:<span class="hljs-number">071</span>d<span class="hljs-number">8</span>bd<span class="hljs-number">765171080</span>d<span class="hljs-number">01682844524</span>be<span class="hljs-number">57</span>ac<span class="hljs-number">9883e53079</span>b<span class="hljs-number">6</span>ac<span class="hljs-number">66707e192</span>ea<span class="hljs-number">25956</span><br></code></pre></div></td></tr></table></figure><h3 id="5-镜像导出"><a href="#5-镜像导出" class="headerlink" title="5. 镜像导出"></a><strong>5. 镜像导出</strong></h3><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">save</span> <span class="hljs-selector-attr">[OPTIONS]</span> <span class="hljs-selector-tag">IMAGE</span> <span class="hljs-selector-attr">[IMAGE...]</span><br></code></pre></div></td></tr></table></figure><p>将镜像打包为压缩包，可在其他docker主机进行导入,一次可打包多个</p><p>常用选项：</p><ul><li>-o,–output   输出到文件</li></ul><p>示例：</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">save</span> <span class="hljs-selector-tag">-o</span> <span class="hljs-selector-tag">nginx-bus</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span> <span class="hljs-selector-tag">busybox</span><span class="hljs-selector-pseudo">:latest</span> <span class="hljs-selector-tag">nginx</span><span class="hljs-selector-pseudo">:latest</span><br></code></pre></div></td></tr></table></figure><h3 id="6-镜像导入"><a href="#6-镜像导入" class="headerlink" title="6.镜像导入"></a>6.镜像导入</h3><figure class="highlight apache"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">docker</span> load<span class="hljs-meta"> [OPTIONS]</span><br></code></pre></div></td></tr></table></figure><p>将已经导出的镜像压缩文件导入为镜像</p><p>常用选项：</p><ul><li>-i, –input 指定文件来源 </li></ul><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-attr">[root@app51 ~]</span># <span class="hljs-selector-tag">docker</span> <span class="hljs-selector-tag">load</span> <span class="hljs-selector-tag">-i</span> <span class="hljs-selector-tag">nginx-bus</span><span class="hljs-selector-class">.tar</span><span class="hljs-selector-class">.gz</span><br><span class="hljs-selector-tag">Loaded</span> <span class="hljs-selector-tag">image</span>: <span class="hljs-selector-tag">nginx</span><span class="hljs-selector-pseudo">:latest</span><br><span class="hljs-selector-tag">Loaded</span> <span class="hljs-selector-tag">image</span>: <span class="hljs-selector-tag">busybox</span><span class="hljs-selector-pseudo">:latest</span><br></code></pre></div></td></tr></table></figure><h3 id="7-查看镜像信息"><a href="#7-查看镜像信息" class="headerlink" title="7.查看镜像信息"></a>7.查看镜像信息</h3><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">docker <span class="hljs-built_in">image</span> inspect [OPTIONS] <span class="hljs-built_in">IMAGE</span> [<span class="hljs-built_in">IMAGE</span>...]<br></code></pre></div></td></tr></table></figure><p>示例代码：</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[<span class="hljs-meta">root@app51 ~</span>]<span class="hljs-meta"># docker image inspect nginx</span><br>[<span class="hljs-meta"><br>    &#123;<br>        <span class="hljs-meta-string">"Id"</span>: <span class="hljs-meta-string">"sha256:f09fe80eb0e75e97b04b9dfb065ac3fda37a8fac0161f42fca1e6fe4d0977c80"</span>,<br>        <span class="hljs-meta-string">"RepoTags"</span>: [<br>            <span class="hljs-meta-string">"nginx:latest"</span><br>        </span>],<br>        <span class="hljs-string">"RepoDigests"</span>: [<br>            <span class="hljs-string">"nginx@sha256:dd2d0ac3fff2f007d99e033b64854be0941e19a2ad51f174d9240dda20d9f534"</span><br>        ],<br></code></pre></div></td></tr></table></figure><h3 id="其他"><a href="#其他" class="headerlink" title="其他"></a>其他</h3><p>运行信息查看docker info</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">[root@app51</span> <span class="hljs-string">~]#</span> <span class="hljs-string">docker</span> <span class="hljs-string">info</span> <br><span class="hljs-attr">Containers:</span> <span class="hljs-number">1</span><br> <span class="hljs-attr">Running:</span> <span class="hljs-number">1</span><br> <span class="hljs-attr">Paused:</span> <span class="hljs-number">0</span><br> <span class="hljs-attr">Stopped:</span> <span class="hljs-number">0</span><br><span class="hljs-attr">Images:</span> <span class="hljs-number">4</span><br><span class="hljs-attr">Server Version:</span> <span class="hljs-number">18.09</span><span class="hljs-number">.2</span><br><span class="hljs-attr">Storage Driver:</span> <span class="hljs-string">overlay2</span><br> <span class="hljs-attr">Backing Filesystem:</span> <span class="hljs-string">xfs</span><br> <span class="hljs-attr">Supports d_type:</span> <span class="hljs-literal">true</span><br> <span class="hljs-attr">Native Overlay Diff:</span> <span class="hljs-literal">true</span><br></code></pre></div></td></tr></table></figure><p>版本信息查看 docker version</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">root@app51</span> <span class="hljs-string">~]#</span> <span class="hljs-string">docker</span>  <span class="hljs-string">version</span><br><span class="hljs-attr">Client:</span><br><span class="hljs-attr">Version:</span>           <span class="hljs-number">18.09</span><span class="hljs-number">.2</span><br><span class="hljs-attr">API version:</span>       <span class="hljs-number">1.39</span><br><span class="hljs-attr">Go version:</span>        <span class="hljs-string">go1.10.6</span><br><span class="hljs-attr">Git commit:</span>        <span class="hljs-number">6247962</span><br><span class="hljs-attr">Built:</span>             <span class="hljs-string">Sun</span> <span class="hljs-string">Feb</span> <span class="hljs-number">10</span> <span class="hljs-number">04</span><span class="hljs-string">:13:27</span> <span class="hljs-number">2019</span><br><span class="hljs-attr">OS/Arch:</span>           <span class="hljs-string">linux/amd64</span><br><span class="hljs-attr">Experimental:</span>      <span class="hljs-literal">false</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机操作系统 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>django rest_framework 序列化组件详解</title>
      <link href="2019/05/05/django%20rest_framework%20%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/"/>
      <url>2019/05/05/django%20rest_framework%20%E5%BA%8F%E5%88%97%E5%8C%96%E7%BB%84%E4%BB%B6%E8%AF%A6%E8%A7%A3/</url>
      
        <content type="html"><![CDATA[<h4 id="为什么要用序列化组件"><a href="#为什么要用序列化组件" class="headerlink" title="为什么要用序列化组件"></a>为什么要用序列化组件</h4><p>当我们做前后端分离的项目,我们前后端交互一般都选择JSON数据格式，JSON是一个轻量级的数据交互格式。</p><p>那么我们给前端数据的时候都要转成json格式，那就需要对我们从数据库拿到的数据进行序列化。</p><p>接下来我们看下django序列化和rest_framework序列化的对比<br><a id="more"></a></p><h2 id="Django的序列化方法"><a href="#Django的序列化方法" class="headerlink" title="Django的序列化方法"></a>Django的序列化方法</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksView</span><span class="hljs-params">(View)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span><br>        book_list = Book.objects.values(<span class="hljs-string">"id"</span>, <span class="hljs-string">"title"</span>, <span class="hljs-string">"chapter"</span>, <span class="hljs-string">"pub_time"</span>, <span class="hljs-string">"publisher"</span>)<br>        book_list = list(book_list)<br>        <span class="hljs-comment"># 如果我们需要取外键关联的字段信息 需要循环获取外键 再去数据库查然后拼接成我们想要的</span><br>        ret = []<br>        <span class="hljs-keyword">for</span> book <span class="hljs-keyword">in</span> book_list:<br>            pub_dict = &#123;&#125;<br>            pub_obj = Publish.objects.filter(pk=book[<span class="hljs-string">"publisher"</span>]).first()<br>            pub_dict[<span class="hljs-string">"id"</span>] = pub_obj.pk<br>            pub_dict[<span class="hljs-string">"title"</span>] = pub_obj.title<br>            book[<span class="hljs-string">"publisher"</span>] = pub_dict<br>            ret.append(book)<br>        ret = json.dumps(book_list, ensure_ascii=<span class="hljs-literal">False</span>, cls=MyJson)<br>        <span class="hljs-keyword">return</span> HttpResponse(ret)<br><br><br><span class="hljs-comment"># json.JSONEncoder.default()</span><br><span class="hljs-comment"># 解决json不能序列化时间字段的问题</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">MyJson</span><span class="hljs-params">(json.JSONEncoder)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">default</span><span class="hljs-params">(self, field)</span>:</span><br>        <span class="hljs-keyword">if</span> isinstance(field, datetime.datetime):<br>            <span class="hljs-keyword">return</span> field.strftime(<span class="hljs-string">'%Y-%m-%d %H:%M:%S'</span>)<br>        <span class="hljs-keyword">elif</span> isinstance(field, datetime.date):<br>            <span class="hljs-keyword">return</span> field.strftime(<span class="hljs-string">'%Y-%m-%d'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> json.JSONEncoder.default(self, field)<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.core <span class="hljs-keyword">import</span> serializers<br><br><br><span class="hljs-comment"># 能够得到我们要的效果 结构有点复杂</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BooksView</span><span class="hljs-params">(View)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span><br>        book_list = Book.objects.all()<br>        ret = serializers.serialize(<span class="hljs-string">"json"</span>, book_list)<br>        <span class="hljs-keyword">return</span> HttpResponse(ret)<br></code></pre></div></td></tr></table></figure><h2 id="DRF序列化的方法"><a href="#DRF序列化的方法" class="headerlink" title="DRF序列化的方法"></a>DRF序列化的方法</h2><p>首先，我们要用DRF的序列化，就要遵循人家框架的一些标准，</p><ul><li><p>Django我们CBV继承类是View，现在DRF我们要用APIView</p></li><li><p>Django中返回的时候我们用HTTPResponse，JsonResponse，render ，DRF我们用Response</p></li></ul><p>为什么这么用~我们之后会详细讲我们继续来看序列化</p><h3 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h3><p>serializer:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField()<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    CHOICES = ((<span class="hljs-number">1</span>, <span class="hljs-string">"Linux"</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">"Django"</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">"Python"</span>))<br>    chapter = serializers.ChoiceField(choices=CHOICES, source=<span class="hljs-string">"get_chapter_display"</span>)<br>    pub_time = serializers.DateField()<br></code></pre></div></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span><br>        book_list = Book.objects.all()<br>        ret = BookSerializer(book_list, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(ret.data)<br></code></pre></div></td></tr></table></figure><h3 id="外键关系的序列化"><a href="#外键关系的序列化" class="headerlink" title="外键关系的序列化"></a>外键关系的序列化</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> serializers<br><span class="hljs-keyword">from</span> .models <span class="hljs-keyword">import</span> Book<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">PublisherSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    name = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    age = serializers.IntegerField()<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    CHOICES = ((<span class="hljs-number">1</span>, <span class="hljs-string">"Linux"</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">"Django"</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">"Python"</span>))<br>    chapter = serializers.ChoiceField(choices=CHOICES, source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    pub_time = serializers.DateField()<br><br>    publisher = PublisherSerializer(read_only=<span class="hljs-literal">True</span>)<br>    user = UserSerializer(many=<span class="hljs-literal">True</span>, read_only=<span class="hljs-literal">True</span>)<br></code></pre></div></td></tr></table></figure><h3 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h3><p>当前端给我们发post的请求的时候,我们要进行一些校验然后保存到数据库</p><p>这些校验以及保存工作，DRF的Serializer也给我们提供了一些方法了</p><p>首先~我们要写反序列化用的一些字段~有些字段要跟序列化区分开</p><p>Serializer提供了.is_valid()  和.save()方法</p><p>serializers:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># serializers.py 文件</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    CHOICES = ((<span class="hljs-number">1</span>, <span class="hljs-string">"Linux"</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">"Django"</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">"Python"</span>))<br>    chapter = serializers.ChoiceField(choices=CHOICES, source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    w_chapter = serializers.IntegerField(write_only=<span class="hljs-literal">True</span>)<br>    pub_time = serializers.DateField()<br><br>    publisher = PublisherSerializer(read_only=<span class="hljs-literal">True</span>)<br>    user = UserSerializer(many=<span class="hljs-literal">True</span>, read_only=<span class="hljs-literal">True</span>)<br><br>    users = serializers.ListField(write_only=<span class="hljs-literal">True</span>)<br>    publisher_id = serializers.IntegerField(write_only=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(self, validated_data)</span>:</span><br>        book = Book.objects.create(title=validated_data[<span class="hljs-string">"title"</span>], chapter=validated_data[<span class="hljs-string">"w_chapter"</span>], pub_time=validated_data[<span class="hljs-string">"pub_time"</span>],                                  publisher_id=validated_data[<span class="hljs-string">"publisher_id"</span>])<br>        book.user.add(*validated_data[<span class="hljs-string">"users"</span>])<br>        <span class="hljs-keyword">return</span> book<br></code></pre></div></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request)</span>:</span><br>        book_list = Book.objects.all()<br>        ret = BookSerializer(book_list, many=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">return</span> Response(ret.data)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self, request)</span>:</span><br>        <span class="hljs-comment"># book_obj = request.data</span><br>        print(request.data)<br>        serializer = BookSerializer(data=request.data)<br>        <span class="hljs-keyword">if</span> serializer.is_valid():<br>            print(<span class="hljs-number">12341253</span>)<br>            serializer.save()<br>            <span class="hljs-keyword">return</span> Response(serializer.validated_data)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></div></td></tr></table></figure><p>当前端给我们发送patch请求的时候，前端传给我们用户要更新的数据，我们要对数据进行部分验证~~</p><p>Serializer:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    CHOICES = ((<span class="hljs-number">1</span>, <span class="hljs-string">"Linux"</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">"Django"</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">"Python"</span>))<br>    chapter = serializers.ChoiceField(choices=CHOICES, source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    w_chapter = serializers.IntegerField(write_only=<span class="hljs-literal">True</span>)<br>    pub_time = serializers.DateField()<br><br>    publisher = PublisherSerializer(read_only=<span class="hljs-literal">True</span>)<br>    user = UserSerializer(many=<span class="hljs-literal">True</span>, read_only=<span class="hljs-literal">True</span>)<br><br>    users = serializers.ListField(write_only=<span class="hljs-literal">True</span>)<br>    publisher_id = serializers.IntegerField(write_only=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">create</span><span class="hljs-params">(self, validated_data)</span>:</span><br>        book = Book.objects.create(title=validated_data[<span class="hljs-string">"title"</span>], chapter=validated_data[<span class="hljs-string">"w_chapter"</span>], pub_time=validated_data[<span class="hljs-string">"pub_time"</span>],<br>                                   publisher_id=validated_data[<span class="hljs-string">"publisher_id"</span>])<br>        book.user.add(*validated_data[<span class="hljs-string">"users"</span>])<br>        <span class="hljs-keyword">return</span> book<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update</span><span class="hljs-params">(self, instance, validated_data)</span>:</span><br>        instance.title = validated_data.get(<span class="hljs-string">"title"</span>, instance.title)<br>        instance.chapter = validated_data.get(<span class="hljs-string">"w_chapter"</span>, instance.chapter)<br>        instance.pub_time = validated_data.get(<span class="hljs-string">"pub_time"</span>, instance.pub_time)<br>        instance.publisher_id = validated_data.get(<span class="hljs-string">"publisher_id"</span>, instance.publisher_id)<br>        <span class="hljs-keyword">if</span> validated_data.get(<span class="hljs-string">"users"</span>):<br>            instance.user.set(validated_data.get(<span class="hljs-string">"users"</span>))<br>        instance.save()<br>        <span class="hljs-keyword">return</span> instance<br></code></pre></div></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookView</span><span class="hljs-params">(APIView)</span>:</span><br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">patch</span><span class="hljs-params">(self, request)</span>:</span><br>        print(request.data)<br>        book_id = request.data[<span class="hljs-string">"id"</span>]<br>        book_info = request.data[<span class="hljs-string">"book_info"</span>]<br>        book_obj = Book.objects.filter(pk=book_id).first()<br>        serializer = BookSerializer(book_obj, data=book_info, partial=<span class="hljs-literal">True</span>)<br>        <span class="hljs-keyword">if</span> serializer.is_valid():<br>            serializer.save()<br>            <span class="hljs-keyword">return</span> Response(serializer.data)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> Response(serializer.errors)<br></code></pre></div></td></tr></table></figure><h3 id="验证"><a href="#验证" class="headerlink" title="验证"></a>验证</h3><p>如果我们需要对一些字段进行自定义的验证~DRF也给我们提供了钩子方法~~</p><p>Serializer:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    <span class="hljs-comment"># 省略了一些字段 跟上面代码里一样的</span><br>    <span class="hljs-comment"># 。。。。。</span><br>     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate_title</span><span class="hljs-params">(self, value)</span>:</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-string">"python"</span> <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> value.lower():<br>            <span class="hljs-keyword">raise</span> serializers.ValidationError(<span class="hljs-string">"标题必须含有Python"</span>)<br>        <span class="hljs-keyword">return</span> value<br></code></pre></div></td></tr></table></figure><p>view:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>)<br>    CHOICES = ((<span class="hljs-number">1</span>, <span class="hljs-string">"Linux"</span>), (<span class="hljs-number">2</span>, <span class="hljs-string">"Django"</span>), (<span class="hljs-number">3</span>, <span class="hljs-string">"Python"</span>))<br>    chapter = serializers.ChoiceField(choices=CHOICES, source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    w_chapter = serializers.IntegerField(write_only=<span class="hljs-literal">True</span>)<br>    pub_time = serializers.DateField()<br>    date_added = serializers.DateField(write_only=<span class="hljs-literal">True</span>)<br>    <span class="hljs-comment"># 新增了一个上架时间字段  </span><br>    <span class="hljs-comment"># 省略一些字段。。都是在原基础代码上增加的</span><br>    <span class="hljs-comment"># 。。。。。。</span><br><br>    <span class="hljs-comment"># 对多个字段进行验证 要求上架日期不能早于出版日期 上架日期要大</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">validate</span><span class="hljs-params">(self, attrs)</span>:</span><br>        <span class="hljs-keyword">if</span> attrs[<span class="hljs-string">"pub_time"</span>] &gt; attrs[<span class="hljs-string">"date_added"</span>]:<br>            <span class="hljs-keyword">raise</span> serializers.ValidationError(<span class="hljs-string">"上架日期不能早于出版日期"</span>)<br>        <span class="hljs-keyword">return</span> attrs<br></code></pre></div></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_validate</span><span class="hljs-params">(value)</span>:</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-string">"敏感词汇"</span> <span class="hljs-keyword">in</span> value.lower:<br>        <span class="hljs-keyword">raise</span> serializers.ValidationError(<span class="hljs-string">"包含敏感词汇，请重新提交"</span>)<br>    <span class="hljs-keyword">return</span> value<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.Serializer)</span>:</span><br>    id = serializers.IntegerField(read_only=<span class="hljs-literal">True</span>)<br>    title = serializers.CharField(max_length=<span class="hljs-number">32</span>, validators=[my_validate])<br>    <span class="hljs-comment"># 。。。。。。</span><br></code></pre></div></td></tr></table></figure><h2 id="ModelSerializer"><a href="#ModelSerializer" class="headerlink" title="ModelSerializer"></a>ModelSerializer</h2><p>现在我们已经清楚了Serializer的用法，会发现我们所有的序列化跟我们的模型都紧密相关~</p><p>那么，DRF也给我们提供了跟模型紧密相关的序列化器<del>ModelSerializer</del></p><ul><li><p>它会根据模型自动生成一组字段</p></li><li><p>它简单的默认实现了.update()以及.create()方法</p></li></ul><h3 id="定义一个ModelSerializer序列化器"><a href="#定义一个ModelSerializer序列化器" class="headerlink" title="定义一个ModelSerializer序列化器"></a>定义一个ModelSerializer序列化器</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br></code></pre></div></td></tr></table></figure><h3 id="外键关系的序列化-1"><a href="#外键关系的序列化-1" class="headerlink" title="外键关系的序列化"></a>外键关系的序列化</h3><p>注意：当序列化类MATE中定义了depth时，这个序列化类中引用字段（外键）则自动变为只读</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        depth = <span class="hljs-number">1</span><br><span class="hljs-comment"># depth 代表找嵌套关系的第几层</span><br></code></pre></div></td></tr></table></figure><h3 id="自定义字段"><a href="#自定义字段" class="headerlink" title="自定义字段"></a>自定义字段</h3><p>我们可以声明一些字段来覆盖默认字段，来进行自定制~</p><p>比如我们的选择字段，默认显示的是选择的key，我们要给用户展示的是value。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    chapter = serializers.CharField(source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    <br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        depth = <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h3 id="Meta中其它关键字参数"><a href="#Meta中其它关键字参数" class="headerlink" title="Meta中其它关键字参数"></a>Meta中其它关键字参数</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    chapter = serializers.CharField(source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        depth = <span class="hljs-number">1</span><br>        read_only_fields = [<span class="hljs-string">"id"</span>]<br>        extra_kwargs = &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"validators"</span>: [my_validate,]&#125;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="post以及patch请求"><a href="#post以及patch请求" class="headerlink" title="post以及patch请求"></a>post以及patch请求</h3><p>由于depth会让我们外键变成只读，所以我们再定义一个序列化的类，其实只要去掉depth就可以了~~</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    chapter = serializers.CharField(source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        read_only_fields = [<span class="hljs-string">"id"</span>]<br>        extra_kwargs = &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"validators"</span>: [my_validate,]&#125;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="SerializerMethodField"><a href="#SerializerMethodField" class="headerlink" title="SerializerMethodField"></a>SerializerMethodField</h3><p>外键关联的对象有很多字段我们是用不到的~都传给前端会有数据冗余~就需要我们自己去定制序列化外键对象的哪些字段~~</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    chapter = serializers.CharField(source=<span class="hljs-string">"get_chapter_display"</span>, read_only=<span class="hljs-literal">True</span>)<br>    user = serializers.SerializerMethodField()<br>    publisher = serializers.SerializerMethodField()<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_user</span><span class="hljs-params">(self, obj)</span>:</span><br>        <span class="hljs-comment"># obj是当前序列化的book对象</span><br>        users_query_set = obj.user.all()<br>        <span class="hljs-keyword">return</span> [&#123;<span class="hljs-string">"id"</span>: user_obj.pk, <span class="hljs-string">"name"</span>: user_obj.name&#125; <span class="hljs-keyword">for</span> user_obj <span class="hljs-keyword">in</span> users_query_set]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_publisher</span><span class="hljs-params">(self, obj)</span>:</span><br>        publisher_obj = obj.publisher<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">"id"</span>: publisher_obj.pk, <span class="hljs-string">"title"</span>: publisher_obj.title&#125;<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        fields = <span class="hljs-string">"__all__"</span><br>        <span class="hljs-comment"># fields = ["id", "title", "pub_time"]</span><br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        read_only_fields = [<span class="hljs-string">"id"</span>]<br>        extra_kwargs = &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"validators"</span>: [my_validate,]&#125;&#125;<br></code></pre></div></td></tr></table></figure><h3 id="用ModelSerializer改进上面Serializer的完整版"><a href="#用ModelSerializer改进上面Serializer的完整版" class="headerlink" title="用ModelSerializer改进上面Serializer的完整版"></a>用ModelSerializer改进上面Serializer的完整版</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BookSerializer</span><span class="hljs-params">(serializers.ModelSerializer)</span>:</span><br>    dis_chapter = serializers.SerializerMethodField(read_only=<span class="hljs-literal">True</span>)<br>    users = serializers.SerializerMethodField(read_only=<span class="hljs-literal">True</span>)<br>    publishers = serializers.SerializerMethodField(read_only=<span class="hljs-literal">True</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_users</span><span class="hljs-params">(self, obj)</span>:</span><br>        <span class="hljs-comment"># obj是当前序列化的book对象</span><br>        users_query_set = obj.user.all()<br>        <span class="hljs-keyword">return</span> [&#123;<span class="hljs-string">"id"</span>: user_obj.pk, <span class="hljs-string">"name"</span>: user_obj.name&#125; <span class="hljs-keyword">for</span> user_obj <span class="hljs-keyword">in</span> users_query_set]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_publishers</span><span class="hljs-params">(self, obj)</span>:</span><br>        publisher_obj = obj.publisher<br>        <span class="hljs-keyword">return</span> &#123;<span class="hljs-string">"id"</span>: publisher_obj.pk, <span class="hljs-string">"title"</span>: publisher_obj.title&#125;<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_dis_chapter</span><span class="hljs-params">(self, obj)</span>:</span><br>        <span class="hljs-keyword">return</span> obj.get_chapter_display()<br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Meta</span>:</span><br>        model = Book<br>        <span class="hljs-comment"># fields = "__all__"</span><br>        <span class="hljs-comment"># 字段是有序的</span><br>        fields = [<span class="hljs-string">"id"</span>, <span class="hljs-string">"title"</span>,<span class="hljs-string">"dis_chapter"</span>, <span class="hljs-string">"pub_time"</span>, <span class="hljs-string">"publishers"</span>, <span class="hljs-string">"users"</span>,<span class="hljs-string">"chapter"</span>, <span class="hljs-string">"user"</span>, <span class="hljs-string">"publisher"</span>]<br>        <span class="hljs-comment"># exclude = ["user"]</span><br>        <span class="hljs-comment"># 分别是所有字段 包含某些字段 排除某些字段</span><br>        read_only_fields = [<span class="hljs-string">"id"</span>, <span class="hljs-string">"dis_chapter"</span>, <span class="hljs-string">"users"</span>, <span class="hljs-string">"publishers"</span>]<br>        extra_kwargs = &#123;<span class="hljs-string">"title"</span>: &#123;<span class="hljs-string">"validators"</span>: [my_validate,]&#125;, <span class="hljs-string">"user"</span>: &#123;<span class="hljs-string">"write_only"</span>: <span class="hljs-literal">True</span>&#125;, <span class="hljs-string">"publisher"</span>: &#123;<span class="hljs-string">"write_only"</span>: <span class="hljs-literal">True</span>&#125;,<br>                        <span class="hljs-string">"chapter"</span>: &#123;<span class="hljs-string">"write_only"</span>: <span class="hljs-literal">True</span>&#125;&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析Python日志重复输出问题</title>
      <link href="2019/05/05/logging/"/>
      <url>2019/05/05/logging/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/868097/pexels-photo-868097.jpeg?cs=srgb&amp;dl=adventure-backpack-blue-mountains-868097.jpg&amp;fm=jpg" alt></p><a id="more"></a><h2 id="问题起源："><a href="#问题起源：" class="headerlink" title="问题起源："></a>问题起源：</h2><p>​    在学习了python的函数式编程后，又接触到了logging这样一个强大的日志模块。为了减少重复代码，应该不少同学和我一样便迫不及待的写了一个自己的日志函数，比如下面这样：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-comment"># 这里为了便于理解，简单的展示了一个输出到屏幕的日志函数</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">()</span>:</span><br>    logger = logging.getLogger(<span class="hljs-string">'mysql.log'</span>)<br><br>    ch = logging.StreamHandler()<br>    ch.setLevel(logging.ERROR)<br>    fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>    ch.setFormatter(fmt)<br>    logger.addHandler(ch)<br><br>    <span class="hljs-keyword">return</span> logger<br><br><br>my_log().error(<span class="hljs-string">'run one'</span>)<br>my_log().error(<span class="hljs-string">'run two'</span>)<br>my_log().error(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><p>函数写好了，看起来似乎也没有问题，我们来运行一下！</p><p>结果如下：</p><blockquote><p>2018-06-21 13:06:37,569 - mysql.log - ERROR - run one<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three</p></blockquote><p>日志居然重复输出了，且数量递增。</p><hr><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><ul><li><p>实际上<code>logger = logging.getLogger(&#39;mysql.log&#39;)</code>在执行时，没有每次生成一个新的logger，而是先检查内存中是否存在一个叫做‘mysql.log’的logger对象，存在则取出，不存在则新建。</p></li><li><p>实例化的logger对象具有‘handlers’这样一个属性来存储 Handler，代码演示如下：</p></li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">()</span>:</span><br>logger = logging.getLogger(<span class="hljs-string">'mysql.log'</span>)<br><span class="hljs-comment"># 每次被调用后打印出logger的handlers列表</span><br>print(logger.handlers)<br><br>ch = logging.StreamHandler()<br>ch.setLevel(logging.ERROR)<br>fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>ch.setFormatter(fmt)<br><br>logger.addHandler(ch)<br><br><span class="hljs-keyword">return</span> logger<br><br><br>my_log().error(<span class="hljs-string">'run one'</span>)<br>my_log().error(<span class="hljs-string">'run two'</span>)<br>my_log().error(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><blockquote><p>[]<br>2018-06-21 13:26:14,059 - mysql.log - ERROR - run one<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;, &lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three</stderr></stderr></stderr></p></blockquote><ol><li><code>logger.handlers</code>最初是一个空列表，执行‘logger.addHandler(ch)’添加一个‘StreamHandler’，输出一条日志</li><li>在第二次被调用时，<code>logger.handlers</code>已经存在一个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个‘StreamHandler’，此时的logger有两个‘StreamHandler’，输出两条重复的日志</li><li>在第三次被调用时，<code>logger.handlers</code>已经存在两个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个，此时的logger有三个‘StreamHandler’，输出三条重复的日志</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-改名换姓"><a href="#1-改名换姓" class="headerlink" title="1.改名换姓"></a>1.改名换姓</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-comment"># 为日志函数添加一个name，每次调用时传入不同的日志名</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">(name)</span>:</span><br>    logger = logging.getLogger(name)<br><br>    ch = logging.StreamHandler()<br>    ch.setLevel(logging.ERROR)<br>    fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>    ch.setFormatter(fmt)<br>    logger.addHandler(ch)<br><br>    <span class="hljs-keyword">return</span> logger<br><br><br>my_log(<span class="hljs-string">'log1'</span>).error(<span class="hljs-string">'run one'</span>)<br>my_log(<span class="hljs-string">'log2'</span>).error(<span class="hljs-string">'run two'</span>)<br>my_log(<span class="hljs-string">'log3'</span>).error(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><p>运行结果：</p><blockquote><p>2018-06-21 13:40:51,685 - log1 - ERROR - run one<br>2018-06-21 13:40:51,685 - log2 - ERROR - run two<br>2018-06-21 13:40:51,685 - log3 - ERROR - run three</p></blockquote><h3 id="2-及时清理（logger-handlers-clear）"><a href="#2-及时清理（logger-handlers-clear）" class="headerlink" title="2.及时清理（logger.handlers.clear）"></a>2.及时清理（logger.handlers.clear）</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">()</span>:</span><br>    logger = logging.getLogger(<span class="hljs-string">'mysql.log'</span>)<br>    <span class="hljs-comment"># 每次被调用后，清空已经存在handler</span><br>    logger.handlers.clear()<br><br>    ch = logging.StreamHandler()<br>    ch.setLevel(logging.ERROR)<br>    fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>    ch.setFormatter(fmt)<br><br>    logger.addHandler(ch)<br><br>    <span class="hljs-keyword">return</span> logger<br><br><br>my_log().error(<span class="hljs-string">'run one'</span>)<br>my_log().error(<span class="hljs-string">'run two'</span>)<br>my_log().error(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><p><strong>ps：removeHandler方法（兼容性较差）</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 这种写法下的可以使用removeHandler方法(logger.handlers.clear也可以使用在这种写法的函数内)</span><br><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">(msg)</span>:</span><br>    logger = logging.getLogger(<span class="hljs-string">'mysql.log'</span>)<br><br>    ch = logging.StreamHandler()<br>    ch.setLevel(logging.ERROR)<br>    fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>    ch.setFormatter(fmt)<br><br>    logger.addHandler(ch)<br>    logger.error(msg)<br>    <br>    <span class="hljs-comment"># 在使用完ch后从移除Handler</span><br>    logger.removeHandler(ch)<br><br><br>my_log(<span class="hljs-string">'run one'</span>)<br>my_log(<span class="hljs-string">'run two'</span>)<br>my_log(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><h3 id="3-用前判断"><a href="#3-用前判断" class="headerlink" title="3.用前判断"></a>3.用前判断</h3><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> logging<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">my_log</span><span class="hljs-params">()</span>:</span><br>    logger = logging.getLogger(<span class="hljs-string">'mysql.log'</span>)<br>    <span class="hljs-comment"># 判断logger是否已经添加过handler，是则直接返回logger对象，否则执行handler设定以及addHandler(ch)</span><br>    <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> logger.handlers:<br>        ch = logging.StreamHandler()<br>        ch.setLevel(logging.ERROR)<br>        fmt = logging.Formatter(<span class="hljs-string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span>)<br>        ch.setFormatter(fmt)<br><br>        logger.addHandler(ch)<br><br>    <span class="hljs-keyword">return</span> logger<br><br><br>my_log().error(<span class="hljs-string">'run one'</span>)<br>my_log().error(<span class="hljs-string">'run two'</span>)<br>my_log().error(<span class="hljs-string">'run three'</span>)<br></code></pre></div></td></tr></table></figure><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    第一次遇到日志重复输出问题，那时还没有学习到面向对象编程的内容，当时并没有真正理解logging模块。学习完面向对象编程后，回过头来再思考这些问题有了豁然开朗的感觉。</p><p>​        比如起初对<code>logging.getLogger</code>的实际原理不是很理解，在学习了面向对象编程中的hasattr、getattr、setattr这样一些方法后就恍然大悟了。所以诸君如果现在还是对logging模块不太理解，不妨先不纠结于这些细节，继续学下去。</p><p>​    知识面扩充后，曾经的一些难题自然就会迎刃而解：）</p><hr><blockquote><p>参考内容：<br>luffycity : <a href="https://www.luffycity.com/home" target="_blank" rel="noopener">https://www.luffycity.com/home</a><br><a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a><br><a href="https://blog.csdn.net/huilan_same" target="_blank" rel="noopener">huilan_same</a> ：<a href="https://blog.csdn.net/huilan_same/article/details/51858817" target="_blank" rel="noopener">https://blog.csdn.net/huilan_same/article/details/51858817</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>第4章 数据安全与性能保障</title>
      <link href="2019/05/05/note1/"/>
      <url>2019/05/05/note1/</url>
      
        <content type="html"><![CDATA[<p>目的：理解Redis的运作原理<br><a id="more"></a></p><h2 id="4-1-持久化选项"><a href="#4-1-持久化选项" class="headerlink" title="4.1 持久化选项"></a>4.1 持久化选项</h2><p>一句话概括持久化概念：将内存中的数据保存到硬盘。</p><p>Redis的<strong>持久化方式</strong>：</p><ol><li><p><strong>快照（snapshotting)</strong></p><p>将某一时刻的所有数据保存到硬盘</p></li><li><p><strong>只追加文件（append-only file,  AOF)</strong></p><p>在执行写命令时，将被执行的写命令复制到硬盘中。</p></li></ol><p>上述两种方法可以灵活的选择、结合使用。</p><p>使用Redis数据<strong>持久化的原因</strong>：</p><ol><li>重用数据</li><li>防止系统故障</li><li>针对复杂计算得出的结果，进行持久化，可以节省时间</li></ol><h3 id="4-1-1-快照的持久化"><a href="#4-1-1-快照的持久化" class="headerlink" title="4.1.1 快照的持久化"></a>4.1.1 快照的持久化</h3><p>创建快照——获得存储在内存里面的数据在某个时间点上的副本</p><p>创建快照的方法</p><ol><li><p>BGSAVE（由于需要调用unix的fork，windows没有）</p></li><li><p>SAVE</p><p>该命令完成前将不会执行其他指令</p></li><li><p>配置了SAVE选项，满足条件调用BGSAVE</p></li><li><p>收到SHUTDOWN或者TERM信号，会调用SAVE</p></li><li><p>链接另一个服务器，并执行SYNC命令</p></li></ol><p><strong>要点：</strong></p><p>​    <strong>如果系统发生崩溃，用户将丢失最近一次生成快照之后更改的数据</strong></p><p>使用场景：</p><ul><li><p>个人开发</p></li><li><p>对日志进行聚合计算</p></li><li><p>大数据</p><p>创建子进程将会消耗大量的时间</p></li></ul><p>如果能接受并处理好数据丢失的情况，快照是一个不错的持久化方案，否则应该考虑AOF</p><h3 id="4-1-2-AOF持久化"><a href="#4-1-2-AOF持久化" class="headerlink" title="4.1.2 AOF持久化"></a>4.1.2 AOF持久化</h3><p>AOF持久化会将被执行的命令写到AOF文件的末尾，以此来记录数据发生的改变。</p><p>只需要从头到尾执行AOF文件所包含的命令，就可以恢复数据集。</p><p>启用：</p><p>​    <code>appendonly yes</code></p><p><code>appendfsync everysec</code> 可以兼顾数据安全与写入性能</p><p>缺陷：</p><p>​    AOF文件的大小</p><h3 id="4-1-3-重写-压缩AOF文件"><a href="#4-1-3-重写-压缩AOF文件" class="headerlink" title="4.1.3 重写/压缩AOF文件"></a>4.1.3 重写/压缩AOF文件</h3><p>问题：</p><p>​    Redis会不断将命令写入AOF文件，随着运行时间的增长，AOF文件的体积会不断变大，如果不做处理，将会占用大量的硬盘资源。</p><p>解决方案：</p><p>​    <code>BGREWRITEAOF</code>命令——通过此命令可以移除AOF中冗余的命令记录，从而达到重写AOF来减小体积。</p><p>​    <code>auto-aof-rewrite-percentage</code>与<code>auto-aof-rewrite-min-size</code>选项来配置自动执行<code>BGREWRITEAOF</code></p><p>随着负载的上升，可以考虑复制特性</p><h2 id="4-2-复制"><a href="#4-2-复制" class="headerlink" title="4.2 复制"></a>4.2 复制</h2>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>13.找出数组中重复的数字</title>
      <link href="2019/05/05/offer13/"/>
      <url>2019/05/05/offer13/</url>
      
        <content type="html"><![CDATA[<h2 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h2><p>给定一个长度为 nn 的整数数组 <code>nums</code>，数组中所有的数字都在 0∼n−10∼n−1 的范围内。</p><p>数组中某些数字是重复的，但不知道有几个数字重复了，也不知道每个数字重复了几次。</p><p>请找出数组中任意一个重复的数字。<br><a id="more"></a></p><p><strong>注意</strong>：如果某些数字不在 0∼n−10∼n−1 的范围内，或数组中不包含重复数字，则返回 -1；</p><h4 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h4><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">给定 nums = [<span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">5</span>, <span class="hljs-number">4</span>, <span class="hljs-number">3</span>, <span class="hljs-number">2</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>]。<br><br>返回 <span class="hljs-number">2</span> 或 <span class="hljs-number">3</span>。<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>思路：</p><p>创建一个字典用来保存已经出现过的数字，逐个比对即可。比较简单</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicateInArray</span><span class="hljs-params">(self, nums)</span>:</span><br>        <span class="hljs-string">"""<br>        :type nums: List[int]<br>        :rtype int<br>        """</span><br>        ser_dict = &#123;&#125;<br>        length = len(nums)<br>        res = <span class="hljs-number">-1</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> nums:<br>            <span class="hljs-keyword">if</span> i &lt;<span class="hljs-number">0</span> <span class="hljs-keyword">or</span> i&gt;=length:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>            <span class="hljs-keyword">if</span> i <span class="hljs-keyword">in</span> ser_dict:<br>                res = i<br>            <span class="hljs-keyword">else</span>:<br>                ser_dict[i]=i<br>        <span class="hljs-keyword">return</span> res<br></code></pre></div></td></tr></table></figure><p>时间复杂度： O(n)</p><p>空间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 剑指offer </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python虚拟环境--virtualenv</title>
      <link href="2019/05/05/pythonenv/"/>
      <url>2019/05/05/pythonenv/</url>
      
        <content type="html"><![CDATA[<h2 id="1-virtualenv"><a href="#1-virtualenv" class="headerlink" title="1. virtualenv"></a>1. virtualenv</h2><p>　　virtualenv 是一个创建隔绝的Python环境的工具。virtualenv创建一个包含所有必要的可执行文件的文件夹，用来使用Python工程所需的包。<br><a id="more"></a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> virtualenv<br></code></pre></div></td></tr></table></figure><h3 id="1-2基本使用"><a href="#1-2基本使用" class="headerlink" title="1.2基本使用"></a>1.2基本使用</h3><ol><li>为一个工程创建一个虚拟环境：</li></ol><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">$</span><span class="bash"> <span class="hljs-built_in">cd</span> my_project_dir</span><br><span class="hljs-meta">$</span><span class="bash"> virtualenv venv　　<span class="hljs-comment">#venv为虚拟环境目录名，目录名自定义</span></span><br></code></pre></div></td></tr></table></figure><p><code>virtualenv venv</code> 将会在当前的目录中创建一个文件夹，包含了Python可执行文件，以及 <code>pip</code> 库的一份拷贝，这样就能安装其他包了。虚拟环境的名字（此例中是 <code>venv</code> ）可以是任意的；若省略名字将会把文件均放在当前目录。</p><p>　　在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 <code>venv</code> 的文件中。</p><p>　　你可以选择使用一个Python解释器：</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ virtualenv -p <span class="hljs-meta-keyword">/usr/</span>bin/python2<span class="hljs-number">.7</span> venv　　　　<span class="hljs-meta"># -p参数指定Python解释器程序路径</span><br></code></pre></div></td></tr></table></figure><p>　　这将会使用 <code>/usr/bin/python2.7</code> 中的Python解释器。</p><ol><li>要开始使用虚拟环境，其需要被激活：</li></ol><figure class="highlight gradle"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ <span class="hljs-keyword">source</span> venv<span class="hljs-regexp">/bin/</span>activate<br></code></pre></div></td></tr></table></figure><p><code>从现在起，任何你使用pip安装的包将会放在 venv</code> 文件夹中，与全局安装的Python隔绝开。</p><p>像平常一样安装包，比如：</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ pip <span class="hljs-keyword">install</span> requests<br></code></pre></div></td></tr></table></figure><ol><li>如果你在虚拟环境中暂时完成了工作，则可以停用它：</li></ol><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$ . venv<span class="hljs-regexp">/bin/</span>deactivate<br></code></pre></div></td></tr></table></figure><p>这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。</p><p>要删除一个虚拟环境，只需删除它的文件夹。（执行 <code>rm -rf venv</code> ）。</p><p>这里virtualenv 有些不便，因为virtual的启动、停止脚本都在特定文件夹，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。</p><h2 id="2-virtualenvwrapper"><a href="#2-virtualenvwrapper" class="headerlink" title="2. virtualenvwrapper"></a>2. virtualenvwrapper</h2><p>　　鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。</p><h3 id="2-1-安装virtualenvwrapper"><a href="#2-1-安装virtualenvwrapper" class="headerlink" title="2.1 安装virtualenvwrapper"></a>2.1 安装virtualenvwrapper</h3><p>(确保virtualenv已安装)</p><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> virtualenvwrapper<br>pip <span class="hljs-keyword">install</span> virtualenvwrapper-win　　<span class="hljs-comment">#Windows使用该命令</span><br></code></pre></div></td></tr></table></figure><p>安装完成后，在~/.bashrc写入以下内容</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-builtin-name">export</span> <span class="hljs-attribute">WORKON_HOME</span>=~/Envs<br>source /usr/local/bin/virtualenvwrapper.sh<br></code></pre></div></td></tr></table></figure><p>第一行：<strong>virtualenvwrapper</strong>存放虚拟环境目录</p><p>第二行：<strong>virtrualenvwrapper</strong>会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-built_in">source</span> ~/.bashrc　　　　<span class="hljs-comment">#读入配置文件，立即生效</span><br></code></pre></div></td></tr></table></figure><p>　</p><h3 id="2-2-virtualenvwrapper基本使用"><a href="#2-2-virtualenvwrapper基本使用" class="headerlink" title="2.2 virtualenvwrapper基本使用"></a>2.2 virtualenvwrapper基本使用</h3><ol><li>创建虚拟环境——<strong>mkvirtualenv</strong></li></ol><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">mkvirtualenv venv</span><br></code></pre></div></td></tr></table></figure><p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。</p><p>若想指定python版本，可通过”–python”指定python解释器</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">mkvirtualenv --<span class="hljs-keyword">python</span>=/usr/local/<span class="hljs-keyword">python3</span>.<span class="hljs-number">5.3</span>/bin/<span class="hljs-keyword">python</span> venv<br></code></pre></div></td></tr></table></figure><ol start="2"><li>基本命令 　</li></ol><p>　　查看当前的虚拟环境目录</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># workon</span><br>py2<br>py3<br></code></pre></div></td></tr></table></figure><p>　　切换到虚拟环境</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># workon py3</span><br>(py3) [root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#</span><br></code></pre></div></td></tr></table></figure><p>　　退出虚拟环境</p><figure class="highlight autoit"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">(py3) [root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta"># deactivate</span><br>[root<span class="hljs-symbol">@localhost</span> ~]<span class="hljs-meta">#</span><br></code></pre></div></td></tr></table></figure><p>　　删除虚拟环境</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">rmvirtualenv venv</span><br></code></pre></div></td></tr></table></figure><blockquote><p>本文参考链接：<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python与Golang协程异同</title>
      <link href="2019/05/05/pyt$go/"/>
      <url>2019/05/05/pyt$go/</url>
      
        <content type="html"><![CDATA[<h2 id="背景知识"><a href="#背景知识" class="headerlink" title="背景知识"></a>背景知识</h2><a id="more"></a><p>这里先给出一些常用的知识点简要说明，以便理解后面的文章内容。</p><p><strong>进程的定义：</strong></p><p>进程，是计算机中已运行程序的实体。程序本身只是指令、数据及其组织形式的描述，进程才是程序的真正运行实例。</p><p><strong>线程的定义：</strong></p><p>操作系统能够进行运算调度的最小单位。它被包含在进程之中，是进程中的实际运作单位。</p><p><strong>进程和线程的关系：</strong></p><p>一条线程指的是进程中一个单一顺序的控制流，一个进程中可以并发多个线程，每条线程并行执行不同的任务。<br>CPU的最小调度单元是线程不是进程，所以单进程多线程也可以利用多核CPU.</p><p><strong>协程的定义：</strong></p><p>协程通过在线程中实现调度，避免了陷入内核级别的上下文切换造成的性能损失，进而突破了线程在IO上的性能瓶颈。</p><p><strong>协程和线程的关系</strong></p><p>协程是在语言层面实现对线程的调度，避免了内核级别的上下文消耗。</p><p><img src="https://s1.ax1x.com/2020/10/03/01gjYD.jpg" alt="01gjYD.jpg"></p><h2 id="python协程"><a href="#python协程" class="headerlink" title="python协程"></a>python协程</h2><p>Python的协程源于yield指令。yield有两个功能:</p><ul><li>yield item用于产出一个值，反馈给next()的调用方。</li><li>作出让步，暂停执行生成器，让调用方继续工作，直到需要使用另一个值时再调用next()。</li></ul><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">import</span> asyncio<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">compute</span><span class="hljs-params">(x, y)</span>:</span><br>    print(<span class="hljs-string">"Compute %s + %s ..."</span> % (x, y))<br>    <span class="hljs-keyword">await</span> asyncio.sleep(x + y)<br>    <span class="hljs-keyword">return</span> x + y<br><br><br><span class="hljs-keyword">async</span> <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">print_sum</span><span class="hljs-params">(x, y)</span>:</span><br>    result = <span class="hljs-keyword">await</span> compute(x, y)<br>    print(<span class="hljs-string">"%s + %s = %s"</span> % (x, y, result))<br><br><br>loop = asyncio.get_event_loop()<br>tasks = [print_sum(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>), print_sum(<span class="hljs-number">3</span>, <span class="hljs-number">4</span>)]<br>loop.run_until_complete(asyncio.wait(tasks))<br>loop.close()<br></code></pre></div></td></tr></table></figure><p>协程是对线程的调度，yield类似惰性求值方式可以视为一种流程控制工具，实现协作式多任务,在Python3.5正式引入了<code>async/await</code>表达式，使得协程正式在语言层面得到支持和优化，大大简化之前的yield写法。<br>线程是内核进行抢占式的调度的，这样就确保了每个线程都有执行的机会。<br>而 <code>coroutine</code>运行在同一个线程中，由语言的运行时中的 <code>EventLoop</code>（事件循环）来进行调度。<br>和大多数语言一样，在 Python 中，协程的调度是非抢占式的，也就是说一个协程必须主动让出执行机会，其他协程才有机会运行。<br>让出执行的关键字就是 await。也就是说一个协程如果阻塞了，持续不让出 CPU，那么整个线程就卡住了，没有任何并发。</p><p>简而言之，任何时候只有一个协程正在运行。</p><p><em>PS: 作为服务端，event loop最核心的就是IO多路复用技术，所有来自客户端的请求都由IO多路复用函数来处理;作为客户端，event loop的核心在于利用Future对象延迟执行，并使用send函数激发协程,挂起,等待服务端处理完成返回后再调用CallBack函数继续下面的流程</em></p><h2 id="Go的协程"><a href="#Go的协程" class="headerlink" title="Go的协程"></a>Go的协程</h2><p>Go天生在语言层面支持，和Python类似都是采用了关键字，而Go语言使用了go这个关键字，可能是想表明协程是Go语言中最重要的特性。<br>go协程之间的通信，Go采用了channel关键字。</p><p>Go实现了两种并发形式:</p><ul><li>多线程共享内存。如Java或者C++等在多线程中共享数据（例如数组、Map、或者某个结构体或对象）的时候，通过锁来访问.</li><li>Go语言特有的，也是Go语言推荐的：CSP（communicating sequential processes）并发模型。</li></ul><p>Go的CSP并发模型实现：M, P, G : [<a href="https://www.cnblogs.com/sunsky303/p/9115530.html" target="_blank" rel="noopener">https://www.cnblogs.com/sunsk…</a>]</p><figure class="highlight go"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs go"><span class="hljs-keyword">package</span> main<br><br><span class="hljs-keyword">import</span> (<br>    <span class="hljs-string">"fmt"</span><br>)<br><br><span class="hljs-comment">//Go 协程（goroutines）和协程（coroutines）</span><br><span class="hljs-comment">//Go 协程意味着并行（或者可以以并行的方式部署），协程一般来说不是这样的</span><br><span class="hljs-comment">//Go 协程通过通道来通信；协程通过让出和恢复操作来通信</span><br><br><span class="hljs-comment">// 进程退出时不会等待并发任务结束，可用通道（channel）阻塞，然后发出退出信号</span><br><span class="hljs-function"><span class="hljs-keyword">func</span> <span class="hljs-title">main</span><span class="hljs-params">()</span></span> &#123;<br>    jobs := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">int</span>)<br>    done := <span class="hljs-built_in">make</span>(<span class="hljs-keyword">chan</span> <span class="hljs-keyword">bool</span>) <span class="hljs-comment">// 结束标志</span><br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> &#123;<br>            j, more := &lt;-jobs <span class="hljs-comment">//  利用more这个值来判断通道是否关闭，如果关闭了，那么more的值为false，并且通知给通道done</span><br>            fmt.Println(<span class="hljs-string">"-----&gt;:"</span>, j, more)<br>            <span class="hljs-keyword">if</span> more &#123;<br>                fmt.Println(<span class="hljs-string">"received job"</span>, j)<br>            &#125; <span class="hljs-keyword">else</span> &#123;<br>                fmt.Println(<span class="hljs-string">"end received jobs"</span>)<br>                done &lt;- <span class="hljs-literal">true</span><br>                <span class="hljs-keyword">return</span><br>            &#125;<br>        &#125;<br>    &#125;()<br><br>    <span class="hljs-keyword">go</span> <span class="hljs-function"><span class="hljs-keyword">func</span><span class="hljs-params">()</span></span> &#123;<br>        <span class="hljs-keyword">for</span> j := <span class="hljs-number">1</span>; j &lt;= <span class="hljs-number">3</span>; j++ &#123;<br>            jobs &lt;- j<br>            fmt.Println(<span class="hljs-string">"sent job"</span>, j)<br>        &#125;<br>        <span class="hljs-built_in">close</span>(jobs) <span class="hljs-comment">// 写完最后的数据,紧接着就close掉</span><br>        fmt.Println(<span class="hljs-string">"close(jobs)"</span>)<br>    &#125;()<br><br>    fmt.Println(<span class="hljs-string">"sent all jobs"</span>)<br>    &lt;-done <span class="hljs-comment">// 让main等待全部协程完成工作</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>通过在函数调用前使用关键字<code>go</code>，我们即可让该函数以 <code>goroutine</code> 方式执行。<code>goroutine</code>是一种 比线程更加轻盈、更省资源的协程。<br>Go 语言通过系统的线程来多路派遣这些函数的执行，使得 每个用 go 关键字执行的函数可以运行成为一个单位协程。<br>当一个协程阻塞的时候，调度器就会自 动把其他协程安排到另外的线程中去执行，从而实现了程序无等待并行化运行。<br>而且调度的开销非常小，一颗 CPU 调度的规模不下于每秒百万次，这使得我们能够创建大量的 <code>goroutine</code>，从而可以很轻松地编写高并发程序，达到我们想要的目的。 —- 某书</p><p><strong>协程的4种状态</strong></p><ul><li>Pending</li><li>Running</li><li>Done</li><li>Cacelled</li></ul><p><strong>和系统线程之间的映射关系</strong></p><p>go的协程本质上还是系统的线程调用，而Python中的协程是eventloop模型实现，所以虽然都叫协程，但并不是一个东西.<br>Python 中的协程是严格的 1:N 关系，也就是一个线程对应了多个协程。虽然可以实现异步I/O，但是不能有效利用多核(GIL)。<br>而 Go 中是 M:N 的关系，也就是 N 个协程会映射分配到 M 个线程上，这样带来了两点好处：</p><ul><li>多个线程能分配到不同核心上,CPU 密集的应用使用 goroutine 也会获得加速.</li><li>即使有少量阻塞的操作，也只会阻塞某个 worker 线程，而不会把整个程序阻塞。</li></ul><p><em>PS: Go中很少提及线程或进程,也就是因为上面的原因.</em></p><h2 id="Python与Golang协程对比"><a href="#Python与Golang协程对比" class="headerlink" title="Python与Golang协程对比:"></a>Python与Golang协程对比:</h2><ul><li>Python中的<code>async</code>是非抢占式的,一旦开始采用 <code>async</code>函数，那么你整个程序都必须是 <code>async</code> 的，不然总会有阻塞的地方(一遇阻塞对于没有实现异步特性的库就无法主动让调度器调度其他协程了)，也就是说 <code>async</code> 具有传染性。</li><li>Python 整个异步编程生态的问题，之前标准库和各种第三方库的阻塞性函数都不能用了，如:requests,redis.py,open 函数等。所以 Python3.5后加入协程的最大问题不是不好用，而是生态环境不好,历史包袱再次上演,动态语言基础上再加上多核之间的任务调度,应该是很难的技术吧,真心希望python4.0能优化或者放弃GIL锁,使用多核提升性能。</li><li><code>goroutine</code>是 Go 与生俱来的特性，所以几乎所有库都是可以直接用的，避免了 Python 中需要把所有库重写一遍的问题。</li><li><code>goroutine</code> 中不需要显式使用<code>await</code>交出控制权，但是 Go 也不会严格按照时间片去调度 <code>goroutine</code>，而是会在可能阻塞的地方插入调度。<code>goroutine</code> 的调度可以看做是半抢占式的。</li></ul><h4 id="PS-python异步库列表-https-github-com-timofurrer…"><a href="#PS-python异步库列表-https-github-com-timofurrer…" class="headerlink" title="PS: python异步库列表 [https://github.com/timofurrer…]"></a>PS: python异步库列表 [<a href="https://github.com/timofurrer/awesome-asyncio" target="_blank" rel="noopener">https://github.com/timofurrer…</a>]</h4><hr><p>Do not communicate by sharing memory; instead, share memory by communicating.(不要以共享内存的方式来通信，相反，要通过通信来共享内存) – CSP并发模型</p><hr><h2 id="扩展与总结"><a href="#扩展与总结" class="headerlink" title="扩展与总结"></a>扩展与总结</h2><p>erlang和golang都是采用了CSP(Communicating Sequential Processes)模式(Python中的协程是eventloop模型)<br>但是erlang是基于进程的消息通信，go是基于goroutine和channel的通信。<br>Python和Go都引入了消息调度系统模型，来避免锁的影响和进程/线程开销大的问题。<br>协程从本质上来说是一种用户态的线程，不需要系统来执行抢占式调度，而是在语言层面实现线程的调度。<br>因为协程不再使用共享内存/数据，而是使用通信来共享内存/锁，因为在一个超级大系统里具有无数的锁，<br>共享变量等等会使得整个系统变得无比的臃肿，而通过消息机制来交流，可以使得每个并发的单元都成为一个独立的个体，<br>拥有自己的变量，单元之间变量并不共享，对于单元的输入输出只有消息。<br>开发者只需要关心在一个并发单元的输入与输出的影响，而不需要再考虑类似于修改共享内存/数据对其它程序的影响。</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> golang </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ZeroMQ自查手册</title>
      <link href="2019/05/05/zeromq/"/>
      <url>2019/05/05/zeromq/</url>
      
        <content type="html"><![CDATA[<h2 id="简介"><a href="#简介" class="headerlink" title="简介"></a>简介</h2><blockquote><p>ZMQ (以下 ZeroMQ 简称 ZMQ)是一个简单好用的传输层，像框架一样的一个 socket library，他使得 Socket 编程更加简单、简洁和性能更高。是一个消息处理队列库，可在多个线程、内核和主机盒之间弹性伸缩。ZMQ 的明确目标是“成为标准网络协议栈的一部分，之后进入 Linux 内核”。现在还未看到它们的成功。但是，它无疑是极具前景的、并且是人们更加需要的“传统”BSD 套接字之上的一层封装。ZMQ 让编写高性能网络应用程序极为简单和有趣。</p></blockquote><p><img src="https://s2.ax1x.com/2019/07/10/ZgrBBd.jpg" alt="ZgrBBd.jpg"><br><a id="more"></a><br><code>RabbitMQ</code>是一个AMQP实现，传统的messaging queue系统实现，基于Erlang。老牌MQ产品了。AMQP协议更多用在企业系统内，对数据一致性、稳定性和可靠性要求很高的场景，对性能和吞吐量还在其次。</p><p><code>Kafka</code>是linkedin开源的MQ系统，主要特点是基于Pull的模式来处理消息消费，追求高吞吐量，一开始的目的就是用于日志收集和传输，0.8开始支持复制，不支持事务，适合产生大量数据的互联网服务的数据收集业务。</p><p><code>ZeroMQ</code>只是一个网络编程的Pattern库，将常见的网络请求形式（分组管理，链接管理，发布订阅等）模式化、组件化，简而言之socket之上、MQ之下。对于MQ来说，网络传输只是它的一部分，更多需要处理的是消息存储、路由、Broker服务发现和查找、事务、消费模式（ack、重投等）、集群服务等。</p><p>综上所述，<code>Zeromq</code> 并不是类似<code>Rabbitmq</code>消息列队，它实际上只一个消息列队组件，一个库。</p><h2 id="Zeromq的几种模式"><a href="#Zeromq的几种模式" class="headerlink" title="Zeromq的几种模式"></a>Zeromq的几种模式</h2><h3 id="Request-Reply模式："><a href="#Request-Reply模式：" class="headerlink" title="Request-Reply模式："></a>Request-Reply模式：</h3><p>客户端在请求后，服务端必须回响应<br><img src="https://s2.ax1x.com/2019/07/10/ZgU6Qs.png" alt="ZgU6Qs.png"></p><p>Python实现：<br>server端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><span class="hljs-keyword">import</span> zmq<br><br>context = zmq.Context()<br>socket = context.socket(zmq.REP)<br>socket.bind(<span class="hljs-string">"tcp://*:5555"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    message = socket.recv()<br>    print(<span class="hljs-string">"Received: %s"</span> % message)<br>    socket.send(<span class="hljs-string">"I am OK!"</span>)<br></code></pre></div></td></tr></table></figure><p>client端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> sys<br><br>context = zmq.Context()<br>socket = context.socket(zmq.REQ)<br>socket.connect(<span class="hljs-string">"tcp://localhost:5555"</span>)<br><br>socket.send(<span class="hljs-string">'Are you OK?'</span>)<br>response = socket.recv();<br>print(<span class="hljs-string">"response: %s"</span> % response)<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ python app/server.py <br>Received: Are you OK?<br><br>$ python app/client1.py <br>response: I am OK!<br></code></pre></div></td></tr></table></figure><h3 id="Publish-Subscribe模式"><a href="#Publish-Subscribe模式" class="headerlink" title="Publish-Subscribe模式:"></a>Publish-Subscribe模式:</h3><p>广播所有client，没有队列缓存，断开连接数据将永远丢失。client可以进行数据过滤。</p><p><img src="https://s2.ax1x.com/2019/07/10/ZgUrWQ.png" alt="ZgUrWQ.png"></p><p>Python实现<br>server端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> time<br><br>context = zmq.Context()<br>socket = context.socket(zmq.PUB)<br>socket.bind(<span class="hljs-string">"tcp://*:5555"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    print(<span class="hljs-string">'发送消息'</span>)<br>    socket.send(<span class="hljs-string">"消息群发"</span>)<br>    time.sleep(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>client端1：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> sys<br><br>context = zmq.Context()<br>socket = context.socket(zmq.SUB)<br>socket.connect(<span class="hljs-string">"tcp://localhost:5555"</span>)<br>socket.setsockopt(zmq.SUBSCRIBE,<span class="hljs-string">''</span>)  <span class="hljs-comment"># 消息过滤</span><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = socket.recv();<br>    print(<span class="hljs-string">"response: %s"</span> % response)<br></code></pre></div></td></tr></table></figure><p>client端2：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> sys<br><br>context = zmq.Context()<br>socket = context.socket(zmq.SUB)<br>socket.connect(<span class="hljs-string">"tcp://localhost:5555"</span>)<br>socket.setsockopt(zmq.SUBSCRIBE,<span class="hljs-string">''</span>) <br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = socket.recv();<br>    print(<span class="hljs-string">"response: %s"</span> % response)<br></code></pre></div></td></tr></table></figure><p>输出：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ python app/server.py <br>发送消息<br>发送消息<br>发送消息<br><br>$ python app/client2.py <br>response: 消息群发<br>response: 消息群发<br>response: 消息群发<br><br>$ python app/client1.py <br>response: 消息群发<br>response: 消息群发<br>response: 消息群发<br></code></pre></div></td></tr></table></figure><h3 id="Parallel-Pipeline模式："><a href="#Parallel-Pipeline模式：" class="headerlink" title="Parallel Pipeline模式："></a>Parallel Pipeline模式：</h3><p>由三部分组成，push进行数据推送，work进行数据缓存，pull进行数据竞争获取处理。区别于Publish-Subscribe存在一个数据缓存和处理负载。</p><p>当连接被断开，数据不会丢失，重连后数据继续发送到对端。<br><img src="https://s2.ax1x.com/2019/07/10/ZgUszj.png" alt="ZgUszj.png"></p><p>Python实现</p><p>server端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> time<br><br>context = zmq.Context()<br>socket = context.socket(zmq.PUSH)<br>socket.bind(<span class="hljs-string">"tcp://*:5557"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    socket.send(<span class="hljs-string">"测试消息"</span>)<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"已发送"</span>    <br>    time.sleep(<span class="hljs-number">1</span>)<br></code></pre></div></td></tr></table></figure><p>work端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> zmq<br><br>context = zmq.Context()<br><br>recive = context.socket(zmq.PULL)<br>recive.connect(<span class="hljs-string">'tcp://127.0.0.1:5557'</span>)<br><br>sender = context.socket(zmq.PUSH)<br>sender.connect(<span class="hljs-string">'tcp://127.0.0.1:5558'</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    data = recive.recv()<br>    <span class="hljs-keyword">print</span> <span class="hljs-string">"正在转发..."</span><br>    sender.send(data)<br></code></pre></div></td></tr></table></figure><p>client端：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># -*- coding=utf-8 -*-</span><br><br><span class="hljs-keyword">import</span> zmq<br><span class="hljs-keyword">import</span> sys<br><br>context = zmq.Context()<br>socket = context.socket(zmq.PULL)<br>socket.bind(<span class="hljs-string">"tcp://*:5558"</span>)<br><br><span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>    response = socket.recv();<br>    print(<span class="hljs-string">"response: %s"</span> % response)<br></code></pre></div></td></tr></table></figure><p>输出结果：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">$ python app/server.py <br>已发送<br>已发送<br>已发送<br><br>$ python app/work.py <br>正在转发...<br>正在转发...<br>正在转发...<br><br>$ python app/client1.py<br>response: 测试消息<br>response: 测试消息<br>response: 测试消息<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 网络编程 </tag>
            
            <tag> 消息队列 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>python基础算法实现</title>
      <link href="2019/05/05/python%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/05/05/python%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本篇主要实现九(八)大排序算法，分别是冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序,计数排序。希望大家回顾知识的时候也能从我的这篇文章得到帮助。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>十种常见排序算法可以分为两大类：</p><ol><li>非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。</li><li>线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。</li></ol><p><strong>基础定义</strong></p><ul><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><p><strong>图示</strong><br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014194820700-1435466222.png" alt></p><p><strong>为了防止误导读者，本文所有概念性内容均截取自对应Wiki。</strong></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>原理</strong></p><p>冒泡排序(Bubble Sort)是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014185452443-1800879816.gif" alt></p><p><strong>步骤</strong></p><p>冒泡排序算法的运作如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort</span><span class="hljs-params">(list)</span>:</span><br>    length = len(list)<br>    <span class="hljs-comment"># 第一级遍历</span><br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> range(length):<br>        <span class="hljs-comment"># 第二级遍历</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length - index):<br>            <span class="hljs-keyword">if</span> list[j - <span class="hljs-number">1</span>] &gt; list[j]:<br>                <span class="hljs-comment"># 交换两者数据，这里没用temp是因为python 特性元组。</span><br>                list[j - <span class="hljs-number">1</span>], list[j] = list[j], list[j - <span class="hljs-number">1</span>]<br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><p>这种排序其实还可以稍微优化一下，添加一个标记，在排序已完成时，停止排序。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">bubble_sort_flag</span><span class="hljs-params">(list)</span>:</span><br>    length = len(list)<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> range(length):<br>        <span class="hljs-comment"># 标志位</span><br>        flag = <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, length - index):<br>            <span class="hljs-keyword">if</span> list[j - <span class="hljs-number">1</span>] &gt; list[j]:<br>                list[j - <span class="hljs-number">1</span>], list[j] = list[j], list[j - <span class="hljs-number">1</span>]<br>                flag = <span class="hljs-literal">False</span><br>        <span class="hljs-keyword">if</span> flag:<br>            <span class="hljs-comment"># 没有发生交换，直接返回list</span><br>            <span class="hljs-keyword">return</span> list<br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><strong>原理</strong></p><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理大致是将后面的元素最小元素一个个取出然后按顺序放置。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014185807987-1057233489.gif" alt></p><p><strong>步骤</strong></p><ol><li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">selection_sort</span><span class="hljs-params">(list)</span>:</span><br>    n=len(list)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range (<span class="hljs-number">0</span>,n):<br>        min = i<br>        <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i+<span class="hljs-number">1</span>,n):<br>            <span class="hljs-keyword">if</span> list[j]&lt;list[min]:<br>                min=j<br>                list[min],list[i]=list[i],list[min]<br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>原理</strong></p><p>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190107085-1652380825.gif" alt></p><p><strong>步骤</strong></p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">insert_sort</span><span class="hljs-params">(list)</span>:</span><br>    n = len(list)<br>    <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(<span class="hljs-number">1</span>, n):<br>        <span class="hljs-comment"># 后一个元素和前一个元素比较</span><br>        <span class="hljs-comment"># 如果比前一个小</span><br>        <span class="hljs-keyword">if</span> list[i] &lt; list[i - <span class="hljs-number">1</span>]:<br>            <span class="hljs-comment"># 将这个数取出</span><br>            temp = list[i]<br>            <span class="hljs-comment"># 保存下标</span><br>            index = i<br>            <span class="hljs-comment"># 从后往前依次比较每个元素</span><br>            <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> range(i - <span class="hljs-number">1</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):<br>                <span class="hljs-comment"># 和比取出元素大的元素交换</span><br>                <span class="hljs-keyword">if</span> list[j] &gt; temp:<br>                    list[j + <span class="hljs-number">1</span>] = list[j]<br>                    index = j<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>            <span class="hljs-comment"># 插入元素</span><br>            list[index] = temp<br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>原理</strong></p><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190225518-1370369504.gif" alt></p><p><strong>步骤</strong></p><p>每次以一定步长(就是跳过等距的数)进行排序，直至步长为1.</p><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">shell_sort</span><span class="hljs-params">(list)</span>:</span><br>    n = len(list)<br>    <span class="hljs-comment"># 初始步长</span><br>    gap = n // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">while</span> gap &gt; <span class="hljs-number">0</span>:<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(gap, n):<br>            <span class="hljs-comment"># 每个步长进行插入排序</span><br>            temp = list[i]<br>            j = i<br>            <span class="hljs-comment"># 插入排序</span><br>            <span class="hljs-keyword">while</span> j &gt;= gap <span class="hljs-keyword">and</span> list[j - gap] &gt; temp:<br>                list[j] = list[j - gap]<br>                j -= gap<br>            list[j] = temp<br>        <span class="hljs-comment"># 得到新的步长</span><br>        gap = gap // <span class="hljs-number">2</span><br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><blockquote><p>步长使用的是Donald Shell的建议，另外步长还可以使用Sedgewick提出的(1, 5, 19, 41, 109,…)。<br>也可以使用<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%2596%2590%25E6%25B3%25A2%25E9%2582%25A3%25E5%25A5%2591%25E6%2595%25B0%25E5%2588%2597" target="_blank" rel="noopener">斐波那契数列</a>除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列。</p></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>原理</strong></p><p>归并操作(归并算法)，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190406955-1250220054.gif" alt></p><p><strong>步骤</strong></p><p>1.迭代法</p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置<br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><p><strong>递归法</strong></p><p>假设序列共有n个元素：</p><ol><li>将序列每相邻两个数字进行归并操作，形成 {\displaystyle floor(n/2)} floor(n/2)个序列，排序后每个序列包含两个元素</li><li>将上述序列再次归并，形成 {\displaystyle floor(n/4)} floor(n/4)个序列，每个序列包含四个元素</li><li>重复步骤2，直到所有元素排序完毕</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 递归法</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge_sort</span><span class="hljs-params">(list)</span>:</span><br>    <span class="hljs-comment"># 认为长度不大于1的数列是有序的</span><br>    <span class="hljs-keyword">if</span> len(list) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> list<br>    <span class="hljs-comment"># 二分列表</span><br>    middle = len(list) // <span class="hljs-number">2</span><br>    left = merge_sort(list[:middle])<br>    right = merge_sort(list[middle:])<br>    <span class="hljs-comment"># 最后一次合并</span><br>    <span class="hljs-keyword">return</span> merge(left, right)<br><span class="hljs-comment"># 合并</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">merge</span><span class="hljs-params">(left, right)</span>:</span><br>    l,r=<span class="hljs-number">0</span>,<span class="hljs-number">0</span><br>    result=[]<br>    <span class="hljs-keyword">while</span> l&lt;len(left) <span class="hljs-keyword">and</span> r&lt;len(right):<br>        <span class="hljs-keyword">if</span> left[l] &lt;right[r]:<br>            result.append(left[l])<br>            l+=<span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            result.append(right[r])<br>            r +=<span class="hljs-number">1</span><br>        reslut +=left[l:]<br>        result+=right[r:]                <br>    <span class="hljs-keyword">return</span> result<br></code></pre></div></td></tr></table></figure><p>鄙人不才，不知归并排序的迭代法如何用Python实现，望指教。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>原理</strong></p><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190611263-753990372.gif" alt></p><p><strong>步骤</strong></p><ol><li>从数列中挑出一个元素，称为”基准”（pivot），</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p><strong>代码</strong></p><p>普通版</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">quick_sort</span><span class="hljs-params">(list)</span>:</span><br>    less = []<br>    pivotList = []<br>    more = []<br>    <span class="hljs-comment"># 递归出口</span><br>    <span class="hljs-keyword">if</span> len(list) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> list<br>    <span class="hljs-keyword">else</span>:<br>        <span class="hljs-comment"># 将第一个值做为基准</span><br>        pivot = list[<span class="hljs-number">0</span>]<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> list:<br>            <span class="hljs-comment"># 将比急转小的值放到less数列</span><br>            <span class="hljs-keyword">if</span> i &lt; pivot:<br>                less.append(i)<br>            <span class="hljs-comment"># 将比基准打的值放到more数列</span><br>            <span class="hljs-keyword">elif</span> i &gt; pivot:<br>                more.append(i)<br>            <span class="hljs-comment"># 将和基准相同的值保存在基准数列</span><br>            <span class="hljs-keyword">else</span>:<br>                pivotList.append(i)<br>        <span class="hljs-comment"># 对less数列和more数列继续进行排序</span><br>        less = quick_sort(less)<br>        more = quick_sort(more)<br>        <span class="hljs-keyword">return</span> less + pivotList + more<br></code></pre></div></td></tr></table></figure><p>分而治之的思想实现：</p><p>下面这段代码出自《算法图解》传说中的三行实现python快速排序。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">qsort</span><span class="hljs-params">(arr)</span>:</span><br>    <span class="hljs-keyword">if</span> len(arr) &lt;= <span class="hljs-number">1</span>:<br>        <span class="hljs-keyword">return</span> arr<br>    <span class="hljs-keyword">else</span>:<br>        pivot = arr[<span class="hljs-number">0</span>]<br>        less = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &lt; pivot]<br>        greater = [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> arr[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &gt;= pivot]<br>        <span class="hljs-keyword">return</span> qsort(less) + [pivot] + qsort(greater)<br></code></pre></div></td></tr></table></figure><p>一行语法糖版本:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">qs = <span class="hljs-keyword">lambda</span> xs : ( (len(xs) &lt;= <span class="hljs-number">1</span> <span class="hljs-keyword">and</span> [xs]) <span class="hljs-keyword">or</span> [ qs( [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &lt; xs[<span class="hljs-number">0</span>]] ) + [xs[<span class="hljs-number">0</span>]] + qs( [x <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> xs[<span class="hljs-number">1</span>:] <span class="hljs-keyword">if</span> x &gt;= xs[<span class="hljs-number">0</span>]] ) ] )[<span class="hljs-number">0</span>]<br></code></pre></div></td></tr></table></figure><p>是不是感受到了Python的魅力？</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><strong>原理</strong></p><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190700059-194955464.gif" alt></p><p><strong>步骤</strong></p><ol><li>创建最大堆:将堆所有数据重新排序，使其成为最大堆</li><li>最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序</li><li>堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">heap_sort</span><span class="hljs-params">(list)</span>:</span><br>    <span class="hljs-comment"># 创建最大堆</span><br>    <span class="hljs-keyword">for</span> start <span class="hljs-keyword">in</span> range((len(list) - <span class="hljs-number">2</span>) // <span class="hljs-number">2</span>, <span class="hljs-number">-1</span>, <span class="hljs-number">-1</span>):<br>        sift_down(list, start, len(list) - <span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 堆排序</span><br>    <span class="hljs-keyword">for</span> end <span class="hljs-keyword">in</span> range(len(list) - <span class="hljs-number">1</span>, <span class="hljs-number">0</span>, <span class="hljs-number">-1</span>):<br>        list[<span class="hljs-number">0</span>], list[end] = list[end], list[<span class="hljs-number">0</span>]<br>        sift_down(list, <span class="hljs-number">0</span>, end - <span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">return</span> list<br><br><span class="hljs-comment"># 最大堆调整</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">sift_down</span><span class="hljs-params">(lst, start, end)</span>:</span><br>    root = start<br>    <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>        child = <span class="hljs-number">2</span> * root + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> child &gt; end:<br>            <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">if</span> child + <span class="hljs-number">1</span> &lt;= end <span class="hljs-keyword">and</span> lst[child] &lt; lst[child + <span class="hljs-number">1</span>]:<br>            child += <span class="hljs-number">1</span><br>        <span class="hljs-keyword">if</span> lst[root] &lt; lst[child]:<br>            lst[root], lst[child] = lst[child], lst[root]<br>            root = child<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">break</span><br></code></pre></div></td></tr></table></figure><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p><strong>原理</strong></p><p>当输入的元素是n个0到k之间的整数时，它的运行时间是Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p><p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190748857-1567575212.gif" alt></p><p><strong>步骤</strong></p><ol><li>找出待排序的数组中最大和最小的元素</li><li>统计数组中每个值为i的元素出现的次数，存入数组 C 的第 i 项</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li></ol><p><strong>代码</strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">count_sort</span><span class="hljs-params">(list)</span>:</span><br>    min = <span class="hljs-number">2147483647</span><br>    max = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 取得最大值和最小值</span><br>    <span class="hljs-keyword">for</span> x <span class="hljs-keyword">in</span> list:<br>        <span class="hljs-keyword">if</span> x &lt; min:<br>            min = x<br>        <span class="hljs-keyword">if</span> x &gt; max:<br>            max = x<br>    <span class="hljs-comment"># 创建数组C</span><br>    count = [<span class="hljs-number">0</span>] * (max - min +<span class="hljs-number">1</span>)<br>    <span class="hljs-keyword">for</span> index <span class="hljs-keyword">in</span> list:<br>        count[index - min] += <span class="hljs-number">1</span><br>    index = <span class="hljs-number">0</span><br>    <span class="hljs-comment"># 填值</span><br>    <span class="hljs-keyword">for</span> a <span class="hljs-keyword">in</span> range(max - min+<span class="hljs-number">1</span>):<br>        <span class="hljs-keyword">for</span> c <span class="hljs-keyword">in</span> range(count[a]):<br>            list[index] = a + min<br>            index += <span class="hljs-number">1</span><br>    <span class="hljs-keyword">return</span> list<br></code></pre></div></td></tr></table></figure><h2 id="第九种排序"><a href="#第九种排序" class="headerlink" title="第九种排序"></a>第九种排序</h2><p>None？<br>当然不会<br>自然就是系统自带的</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">list.sort()<br></code></pre></div></td></tr></table></figure><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>维基百科: <a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">冒泡排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E9%2580%2589%25E6%258B%25A9%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">选择排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%258F%2592%25E5%2585%25A5%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">插入排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25B8%258C%25E5%25B0%2594%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">希尔排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25BD%2592%25E5%25B9%25B6%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">归并排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25BF%25AB%25E9%2580%259F%25E6%258E%2592%25E5%25BA%258F%23.E5.8E.9F.E5.9C.B0.EF.BC.88in-place.EF.BC.89.E5.88.86.E5.89.B2.E7.9A.84.E7.89.88.E6.9C.AC" target="_blank" rel="noopener">快速排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25A0%2586%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">堆排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E8%25AE%25A1%25E6%2595%25B0%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">计数排序</a></li><li>[Python Cookbook</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育——结算中心的实现</title>
      <link href="2019/05/05/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E2%80%94%E2%80%94%E7%BB%93%E7%AE%97%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/05/05/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E2%80%94%E2%80%94%E7%BB%93%E7%AE%97%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>依赖软件：Django、redis</p><a id="more"></a><p>redis数据库中的数据结构：</p><ul><li>以字典形式进行存储</li><li>“shopping_car_用户ID_课程ID”作为标识key</li><li>“payment_global_coupon_用户ID”用来保存用户所持有的全场券</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">redis = &#123;<br>payment_1_2:&#123;<br>course_id:2,<br>'title': 'CRM客户关系管理系统实战开发-专题', <br>'img': 'CRM.jpg', 'policy_id': '4', <br>'coupon': &#123;&#125;, <br>'default_coupon': 0, <br>'period': 210, 'period_display': '12个月', 'price': 122.0&#125;, <br>&#125;,<br>payment_1_1:&#123;<br>course_id:1,<br>'title': '爬虫开发-专题', <br>'img': '爬虫开发-专题.jpg', <br>'policy_id': '2', <br>'coupon': &#123;<br>4: &#123;'coupon_type': 0, 'coupon_display': '立减券', 'money_equivalent_value': 40&#125;, <br>6: &#123;'coupon_type': 1, 'coupon_display': '满减券', 'money_equivalent_value': 60, 'minimum_consume': 100&#125;<br>&#125;, <br>'default_coupon': 0, <br>'period': 60, <br>'period_display': '2个月', <br>'price': 599.0&#125;<br>&#125;,<br>payment_global_coupon_1:&#123;<br>'coupon': &#123;<br>2: &#123;'coupon_type': 1, 'coupon_display': '满减券', 'money_equivalent_value': 200, 'minimum_consume': 500&#125;<br>&#125;, <br>'default_coupon': 0<br>&#125;<br>&#125;<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>在线教育平台——购物车功能实现</title>
      <link href="2019/05/05/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E2%80%94%E2%80%94%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>2019/05/05/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E2%80%94%E2%80%94%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>依赖软件：Django\redis</p><p>测试工具：postman<br><a id="more"></a></p><h2 id="redis中购物车数据存储结构"><a href="#redis中购物车数据存储结构" class="headerlink" title="redis中购物车数据存储结构"></a>redis中购物车数据存储结构</h2><ul><li>redis最外层的key的实际意义是”luffy_shopping_car_userid_courseid”，也就是最后的两个数字分别代表的用户ID与需要加入购物车的课程ID</li><li>每个单独的课程中，包含课程名称，课程图片，课程价格策略，当前选中策略。</li></ul><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs json">redis: &#123;<br>    "luffy_shopping_car_1_1":<br>    &#123;<br>        "title": "Linux基础",<br>        "img": "2.png",<br>        "policy": &#123;<br>            "2": &#123;<br>                "period": 60,<br>                "period_display": "2个月",<br>                "price": 1500<br>            &#125;<br>        &#125;,<br>        "default_policy": "2"<br>    &#125;,<br>    "luffy_shopping_car_1_3": &#123;<br>        ...<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><img src="E:\chromedown\条件结构流程图.png" alt="条件结构流程图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在setting中设置redis配置：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">CACHES</span> = &#123;<br>    <span class="hljs-string">"default"</span>: &#123;<br>        <span class="hljs-string">"BACKEND"</span>: <span class="hljs-string">"django_redis.cache.RedisCache"</span>,<br>        <span class="hljs-string">"LOCATION"</span>: <span class="hljs-string">"redis://yourip:6379"</span>,<br>        <span class="hljs-string">"OPTIONS"</span>: &#123;<br>            <span class="hljs-string">"CLIENT_CLASS"</span>: <span class="hljs-string">"django_redis.client.DefaultClient"</span>,<br>            <span class="hljs-string">"CONNECTION_POOL_KWARGS"</span>: &#123;<span class="hljs-string">"max_connections"</span>: 100&#125;,<br>            <span class="hljs-string">"PASSWORD"</span>: <span class="hljs-string">"yourpassword"</span>,<br>        &#125;<br>    &#125;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>路由设置urls.py:</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">url(<span class="hljs-string">r'^shopping_cart/$'</span>, shopping_cart.ShoppingCart.as_view()),<br></code></pre></div></td></tr></table></figure><p>基于restframework的视图：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">"""<br>@Author    : Young<br>@Email     : hyc554@outlook.com<br>@site      : http://www.cnblogs.com/huang-yc/<br>@File      : shopping_cart.py<br>@version   : 1.0<br>@Time      : 2018/11/4 20:51<br>Description about this file: <br><br>"""</span><br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.response <span class="hljs-keyword">import</span> Response<br><span class="hljs-keyword">from</span> rest_framework.viewsets <span class="hljs-keyword">import</span> GenericViewSet, ViewSetMixin<br><span class="hljs-keyword">from</span> django_redis <span class="hljs-keyword">import</span> get_redis_connection<br><span class="hljs-keyword">from</span> utils.response_dict <span class="hljs-keyword">import</span> BaseResponse<br><span class="hljs-keyword">from</span> api.views.auth <span class="hljs-keyword">import</span> YcAuth<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><span class="hljs-keyword">from</span> utils.error <span class="hljs-keyword">import</span> PricePolicyInvalid<br><span class="hljs-keyword">from</span> django.core.exceptions <span class="hljs-keyword">import</span> ObjectDoesNotExist<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><span class="hljs-keyword">import</span> json<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ShoppingCart</span><span class="hljs-params">(APIView)</span>:</span><br>    authentication_classes = [YcAuth]<br>    conn = get_redis_connection(<span class="hljs-string">'default'</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        <span class="hljs-string">"""<br>        向购物车中添加商品<br>        :param request:<br>        :param args:<br>        :param kwargs:<br>        :return:<br>        """</span><br>        ret = BaseResponse()<br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-comment"># 在这里获得用户的课程ID与价格策略ID</span><br>            course_id = int(request.data.get(<span class="hljs-string">'course_id'</span>))<br>            policy_id = int(request.data.get(<span class="hljs-string">'policy_id'</span>))<br><br>            <span class="hljs-comment"># 2. 获取专题课信息</span><br>            course = models.Course.objects.get(id=course_id)<br><br>            <span class="hljs-comment"># 3.获取课程相关的所有价格策略</span><br>            price_policy_list = course.price_policy.all()<br>            price_policy_dict = &#123;&#125;<br>            <span class="hljs-keyword">for</span> item <span class="hljs-keyword">in</span> price_policy_list:<br>                price_policy_dict[item.id] = &#123;<br>                    <span class="hljs-string">"period"</span>: item.valid_period,<br>                    <span class="hljs-string">"period_display"</span>: item.get_valid_period_display(),<br>                    <span class="hljs-string">"price"</span>: item.price<br>                &#125;<br>            print(price_policy_dict)<br>            <span class="hljs-keyword">if</span> policy_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> price_policy_dict:<br>                <span class="hljs-keyword">raise</span> PricePolicyInvalid(<span class="hljs-string">'价格策略不合法'</span>)<br>            <span class="hljs-comment"># 5. 将购物信息添加到redis中</span><br>            <span class="hljs-comment"># self.conn</span><br>            <span class="hljs-comment"># car_key = "luffy_shopping_car_%s_%s"</span><br>            car_key = settings.SHOPPING_CART_KEY % (request.auth.user_id, course_id,)<br>            car_dict = &#123;<br>                <span class="hljs-string">'title'</span>: course.name,<br>                <span class="hljs-string">'img'</span>: course.course_img,<br>                <span class="hljs-string">'default_policy'</span>: policy_id,<br>                <span class="hljs-string">'policy'</span>: json.dumps(price_policy_dict)<br>            &#125;<br>            <span class="hljs-comment"># conn = get_redis_connection("default")</span><br>            self.conn.hmset(car_key, car_dict)<br>            ret.data = <span class="hljs-string">'添加成功'</span><br><br><br>        <span class="hljs-keyword">except</span> PricePolicyInvalid <span class="hljs-keyword">as</span> e:<br>            ret.data = <span class="hljs-number">2001</span><br>            ret.error = e.msg<br>        <span class="hljs-keyword">except</span> ObjectDoesNotExist <span class="hljs-keyword">as</span> e:<br>            ret.data = <span class="hljs-number">2002</span><br>            ret.error = <span class="hljs-string">'课程不存在'</span><br><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            ret.code = <span class="hljs-number">1001</span><br>            ret.data = <span class="hljs-string">'获取购物车数据失败'</span><br>        <span class="hljs-keyword">return</span> Response(ret.dict)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        ret = BaseResponse()<br>        <span class="hljs-keyword">try</span>:<br>            course_id_list = request.data.get(<span class="hljs-string">'courseids'</span>)<br>            key_list = [settings.SHOPPING_CART_KEY % (request.auth.user_id, course_id,) <span class="hljs-keyword">for</span> course_id <span class="hljs-keyword">in</span> course_id_list]<br>            self.conn.delete(*key_list)<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            ret.code = <span class="hljs-number">1002</span><br>            ret.error = <span class="hljs-string">"删除失败"</span><br><br>        <span class="hljs-keyword">return</span> Response(ret.dict)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">patch</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        ret = BaseResponse()<br>        <span class="hljs-keyword">try</span>:<br>            course_id = int(request.data.get(<span class="hljs-string">'course_id'</span>))<br>            policy_id = str(request.data.get(<span class="hljs-string">'policy_id'</span>))<br><br>            key = settings.SHOPPING_CART_KEY % (request.auth.user_id, course_id)<br><br>            <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> self.conn.exists(key):<br>                ret.code = <span class="hljs-number">1002</span><br>                ret.error = <span class="hljs-string">"购物车中不存在此课程"</span><br>                <span class="hljs-keyword">return</span> Response(ret.dict)<br>            <span class="hljs-comment"># 3. redis中获取所有的价格策略</span><br>            <span class="hljs-comment"># 请注意这里对redis里的数据进行读取的操作</span><br>            policy_dict = json.loads(str(self.conn.hget(key, <span class="hljs-string">'policy'</span>), encoding=<span class="hljs-string">'utf-8'</span>))<br>            <span class="hljs-keyword">if</span> policy_id <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> policy_dict:<br>                ret.code = <span class="hljs-number">1003</span><br>                ret.error = <span class="hljs-string">"价格策略不合法"</span><br>                <span class="hljs-keyword">return</span> Response(ret.dict)<br><br>            self.conn.hset(key, <span class="hljs-string">'default_policy'</span>, policy_id)<br>            ret.data = <span class="hljs-string">"修改成功"</span><br><br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            ret.code = <span class="hljs-number">2003</span><br>            ret.error = <span class="hljs-string">'修改数据失败'</span><br><br>        <span class="hljs-keyword">return</span> Response(ret.dict)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        <span class="hljs-string">"""<br>        查看购物车中所有的商品<br>        :param request:<br>        :param args:<br>        :param kwargs:<br>        :return:<br>        """</span><br>        ret = BaseResponse()<br>        <span class="hljs-keyword">try</span>:<br>            key_match = settings.SHOPPING_CART_KEY % (request.auth.user_id, <span class="hljs-string">"*"</span>)<br><br>            course_list = []<br><br>            <span class="hljs-keyword">for</span> key <span class="hljs-keyword">in</span> self.conn.scan_iter(key_match, count=<span class="hljs-number">10</span>):<br>                info = &#123;<br>                    <span class="hljs-string">"title"</span>: self.conn.hget(key, <span class="hljs-string">'title'</span>).decode(<span class="hljs-string">'utf-8'</span>),<br>                    <span class="hljs-string">"img"</span>: self.conn.hget(key, <span class="hljs-string">'img'</span>).decode(<span class="hljs-string">'utf-8'</span>),<br>                    <span class="hljs-string">"policy"</span>: json.loads(self.conn.hget(key, <span class="hljs-string">'policy'</span>).decode(<span class="hljs-string">'utf-8'</span>)),<br>                    <span class="hljs-string">"default_policy"</span>: self.conn.hget(key, <span class="hljs-string">'default_policy'</span>).decode(<span class="hljs-string">'utf-8'</span>)<br>                &#125;<br>                course_list.append(info)<br>            ret.data = course_list<br>        <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> e:<br>            ret.code = <span class="hljs-number">1002</span><br>            ret.error = <span class="hljs-string">"获取失败"</span><br>        <span class="hljs-keyword">return</span> Response(ret.dict)<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>每日一题——位和字节的关系</title>
      <link href="2019/05/05/%E5%AD%97%E4%B8%8E%E5%AD%97%E8%8A%82/"/>
      <url>2019/05/05/%E5%AD%97%E4%B8%8E%E5%AD%97%E8%8A%82/</url>
      
        <content type="html"><![CDATA[<h2 id="位和字节的关系？"><a href="#位和字节的关系？" class="headerlink" title="位和字节的关系？"></a>位和字节的关系？</h2><h3 id="位"><a href="#位" class="headerlink" title="位:"></a>位:</h3><p>位是最基本的概念，在计算机中，由于只有逻辑0和逻辑1的存在，因此很多东西、动作、数字都要表示为一串二进制的字码例如： 1001 0000 1101等等。其中每一个逻辑0或者1便是一个位。例如这个例子里的1000 1110共有八个位，它的英文名字叫（bit），是计算机中最基本的单位。</p><h3 id="字节"><a href="#字节" class="headerlink" title="字节"></a>字节</h3><p>字节 Byte，是由八个位组成的一个单元，也就是8个bit组成1个Byte。字节有什么用呢？ 在计算机科学中，用于表示ASCII字符，便是运用字节来记录表示字母和一些符号~例如字符A便用 “0100 0001”来表示。</p><h3 id="字"><a href="#字" class="headerlink" title="字"></a>字</h3><p>字：16个位为一个字，它代表计算机处理指令或数据的二进制数位数，是计算机进行数据存储和数据处理的运算的单位。通常称16位是一个字，而32位呢，则是一个双字，64位是两个双字。<br><figure class="highlight lsl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">C/C++语言中数据类型 大小（字节）<br>double <span class="hljs-number">8</span><br><span class="hljs-type">float</span> <span class="hljs-number">4</span><br>long <span class="hljs-number">4</span><br>int <span class="hljs-number">2</span> （<span class="hljs-number">32</span>位或<span class="hljs-number">64</span>位系统下int的长度为<span class="hljs-number">4</span>字节）<br>char <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>源码剖析Django REST framework的认证方式</title>
      <link href="2019/05/05/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90Django%20REST%20framework%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/"/>
      <url>2019/05/05/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90Django%20REST%20framework%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>由Django的CBV模式流程，可以知道在<code>url匹配完成后，会执行自定义的类中的as_view方法</code>。</p><p>如果自定义的类中没有定义<code>as_view方法</code>，根据面向对象中类的继承可以知道，则<code>会执行其父类View中的as_view方法</code></p><p><code>在Django的View的as_view方法中，又会调用dispatch方法</code>。</p><p>现在来看看Django rest framework的认证流程</p><a id="more"></a><blockquote><p>Django restframework是基于Django的框架，所以基于CBV的模式也会执行自定义的类中的as_view方法</p></blockquote><p>先新建一个项目，配置url</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r'^user/'</span>, views.UserView.as_view()),<br>]<br></code></pre></div></td></tr></table></figure><p>views.py文件内容</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserView</span><span class="hljs-params">(APIView)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br>        print(request.__dict__)<br>        print(request.user)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"UserView GET"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"UserView POST"</span>)<br></code></pre></div></td></tr></table></figure><p>启动项目，用浏览器向<code>http://127.0.0.1:8000/user/</code>发送get请求</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180825183747075-1935268768.png" alt="img"></p><p>可以知道请求发送成功。现在来看看源码流程，由于UserView继承APIView，查看APIView中的as_view方法</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">APIView</span><span class="hljs-params">(View)</span>:</span><br>    ...<br><span class="hljs-meta">    @classmethod</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_view</span><span class="hljs-params">(cls, **initkwargs)</span>:</span><br>        <span class="hljs-keyword">if</span> isinstance(getattr(cls, <span class="hljs-string">'queryset'</span>, <span class="hljs-literal">None</span>), models.query.QuerySet):<br>            <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">force_evaluation</span><span class="hljs-params">()</span>:</span><br>                <span class="hljs-keyword">raise</span> RuntimeError(<br>                    <span class="hljs-string">'Do not evaluate the `.queryset` attribute directly, '</span><br>                    <span class="hljs-string">'as the result will be cached and reused between requests. '</span><br>                    <span class="hljs-string">'Use `.all()` or call `.get_queryset()` instead.'</span><br>                )<br>            cls.queryset._fetch_all = force_evaluation<br><br>        view = super(APIView, cls).as_view(**initkwargs)<br>        view.cls = cls<br>        view.initkwargs = initkwargs<br>        <span class="hljs-keyword">return</span> csrf_exempt(view)<br></code></pre></div></td></tr></table></figure><p><code>通过super来执行APIView的父类Django的View中的as_view方法</code>。上一篇文章<a href="https://www.cnblogs.com/renpingsheng/p/9531649.html" target="_blank" rel="noopener">源码解析Django CBV的本质</a>中已经知道，View类的as_view方法会调用dispatch方法。</p><p>View类的as_view方法源码如下所示</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">View</span>(<span class="hljs-title">object</span>):</span><br>    ...<br>    @classonlymethod<br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">as_view</span><span class="hljs-params">(cls, **initkwargs)</span></span>:<br>        ...<br>        <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">view</span><span class="hljs-params">(request, *args, **kwargs)</span></span>:<br>            <span class="hljs-keyword">self</span> = cls(**initkwargs)<br>            <span class="hljs-keyword">if</span> hasattr(<span class="hljs-keyword">self</span>, <span class="hljs-string">'get'</span>) <span class="hljs-keyword">and</span> <span class="hljs-keyword">not</span> hasattr(<span class="hljs-keyword">self</span>, <span class="hljs-string">'head'</span>):<br>                <span class="hljs-keyword">self</span>.head = <span class="hljs-keyword">self</span>.get<br>            <span class="hljs-keyword">self</span>.request = request<br>            <span class="hljs-keyword">self</span>.args = args<br>            <span class="hljs-keyword">self</span>.kwargs = kwargs<br>            <span class="hljs-keyword">return</span> <span class="hljs-keyword">self</span>.dispatch(request, *args, **kwargs)<br>        ...<br></code></pre></div></td></tr></table></figure><p><code>as_view方法中的self实际上指的是自定义的UserView这个类</code>，上面的代码会执行UserView类中dispatch方法。</p><p>由于UserView类中并没有定义dispatch方法，而UserView类继承自Django restframework的APIView类，所以会执行APIView类中的dispatch方法</p><figure class="highlight oxygene"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">def dispatch(<span class="hljs-keyword">self</span>, request, *args, **kwargs):<br>    <span class="hljs-keyword">self</span>.args = args<br>    <span class="hljs-keyword">self</span>.kwargs = kwargs<br>    request = <span class="hljs-keyword">self</span>.initialize_request(request, *args, **kwargs)<br>    <span class="hljs-keyword">self</span>.request = request<br>    <span class="hljs-keyword">self</span>.headers = <span class="hljs-keyword">self</span>.default_response_headers  # deprecate?<br><br>    <span class="hljs-keyword">try</span>:<br>        <span class="hljs-keyword">self</span>.initial(request, *args, **kwargs)<br>        <span class="hljs-keyword">if</span> request<span class="hljs-function">.<span class="hljs-keyword">method</span>.<span class="hljs-title">lower</span><span class="hljs-params">()</span> <span class="hljs-title">in</span> <span class="hljs-title">self</span>.<span class="hljs-title">http_method_names</span>:</span><br>            handler = getattr(<span class="hljs-keyword">self</span>, request<span class="hljs-function">.<span class="hljs-keyword">method</span>.<span class="hljs-title">lower</span><span class="hljs-params">()</span>,<br>                              <span class="hljs-title">self</span>.<span class="hljs-title">http_method_not_allowed</span>)<br>        <span class="hljs-title">else</span>:</span><br>            handler = <span class="hljs-keyword">self</span>.http_method_not_allowed<br><br>        response = handler(request, *args, **kwargs)<br><br>    <span class="hljs-keyword">except</span> Exception <span class="hljs-keyword">as</span> exc:<br>        response = <span class="hljs-keyword">self</span>.handle_exception(exc)<br><br>    <span class="hljs-keyword">self</span>.response = <span class="hljs-keyword">self</span>.finalize_response(request, response, *args, **kwargs)<br>    return <span class="hljs-keyword">self</span>.response<br></code></pre></div></td></tr></table></figure><p>可以看到，<code>先执行initialize_request方法处理浏览器发送的request请求</code>。</p><p>来看看initialize_request方法的源码</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initialize_request</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>    <span class="hljs-string">"""<br>    Returns the initial request object.<br>    """</span><br>    parser_context = self.get_parser_context(request)<br><br>    <span class="hljs-keyword">return</span> Request(<br>        request,<br>        parsers=self.get_parsers(),<br>        authenticators=self.get_authenticators(),<br>        negotiator=self.get_content_negotiator(),<br>        parser_context=parser_context<br>    )<br></code></pre></div></td></tr></table></figure><p>在initialize_request方法里，把浏览器发送的request和restframework的处理器，认证，选择器等对象列表作为参数实例化Request类中得到新的request对象并返回，其中跟认证相关的对象就是authenticators。</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get_authenticators</span><span class="hljs-params">(self)</span>:</span><br>    <span class="hljs-string">"""<br>    Instantiates and returns the list of authenticators that this view can use.<br>    """</span><br>    <span class="hljs-keyword">return</span> [auth() <span class="hljs-keyword">for</span> auth <span class="hljs-keyword">in</span> self.authentication_classes]<br>get_authenticators方法通过列表生成式得到一个列表，列表中包含认证类实例化后的对象<br></code></pre></div></td></tr></table></figure><p>在这里，<code>authentication_classes来自于api_settings的配置</code></p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">authentication_classes</span> = api_settings.DEFAULT_AUTHENTICATION_CLASSES<br></code></pre></div></td></tr></table></figure><p>通过查看api_settings的源码可以知道，可以在项目的settings.py文件中进行认证相关的配置</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">api_settings = APISettings(<span class="hljs-literal">None</span>, DEFAULTS, IMPORT_STRINGS)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">reload_api_settings</span><span class="hljs-params">(*args, **kwargs)</span>:</span><br>    setting = kwargs[<span class="hljs-string">'setting'</span>]<br>    <span class="hljs-keyword">if</span> setting == <span class="hljs-string">'REST_FRAMEWORK'</span>:<br>        api_settings.reload()<br></code></pre></div></td></tr></table></figure><p>Django restframework通过initialize_request方法对原始的request进行一些封装后实例化得到新的request对象</p><p>然后执行initial方法来处理新得到的request对象，再来看看initial方法中又执行了哪些操作</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">initial</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request, *args, **kwargs)</span></span>:<br>    <span class="hljs-keyword">self</span>.format_kwarg = <span class="hljs-keyword">self</span>.get_format_suffix(**kwargs)<br>    neg = <span class="hljs-keyword">self</span>.perform_content_negotiation(request)<br>    request.accepted_renderer, request.accepted_media_type = neg<br><br>    version, scheme = <span class="hljs-keyword">self</span>.determine_version(request, *args, **kwargs)<br>    request.version, request.versioning_scheme = version, scheme<br><br>    <span class="hljs-keyword">self</span>.perform_authentication(request)<br>    <span class="hljs-keyword">self</span>.check_permissions(request)<br>    <span class="hljs-keyword">self</span>.check_throttles(request)<br></code></pre></div></td></tr></table></figure><p>由上面的源码可以知道，在initial方法中，<code>执行perform_authentication来对request对象进行认证操作</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">perform_authentication</span><span class="hljs-params">(self, request)</span>:</span><br>    request.user<br>perform_authentication方法中调用执行request中的user方法`，`这里的request是封装了原始request,认证对象列表，处理器列表等之后的request对象<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Request</span><span class="hljs-params">(object)</span>:</span><br>    ...<br><span class="hljs-meta">    @property</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""<br>        Returns the user associated with the current request, as authenticated<br>        by the authentication classes provided to the request.<br>        """</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> hasattr(self, <span class="hljs-string">'_user'</span>):<br>            <span class="hljs-keyword">with</span> wrap_attributeerrors():<br>                self._authenticate()<br>        <span class="hljs-keyword">return</span> self._user<br></code></pre></div></td></tr></table></figure><p>从request中获取<code>_user</code>的值，如果获取到则执行<code>_authenticate方法</code>，否则返回<code>_user</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">_authenticate</span><span class="hljs-params">(self)</span>:</span><br>    <span class="hljs-string">"""<br>    Attempt to authenticate the request using each authentication instance<br>    in turn.<br>    """</span><br>    <span class="hljs-keyword">for</span> authenticator <span class="hljs-keyword">in</span> self.authenticators:<br>        <span class="hljs-keyword">try</span>:<br>            user_auth_tuple = authenticator.authenticate(self)<br>        <span class="hljs-keyword">except</span> exceptions.APIException:<br>            self._not_authenticated()<br>            <span class="hljs-keyword">raise</span><br><br>        <span class="hljs-keyword">if</span> user_auth_tuple <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            self._authenticator = authenticator<br>            self.user, self.auth = user_auth_tuple<br>            <span class="hljs-keyword">return</span><br></code></pre></div></td></tr></table></figure><p>在这里<code>self.authenticators</code>实际上是<code>get_authenticators</code>方法执行完成后返回的对象列表</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-type">Request</span>(<span class="hljs-title">object</span>):<br><br>    def __init__(<span class="hljs-title">self</span>, <span class="hljs-title">request</span>, <span class="hljs-title">parsers</span>=<span class="hljs-type">None</span>, <span class="hljs-title">authenticators</span>=<span class="hljs-type">None</span>,<br>                 <span class="hljs-title">negotiator</span>=<span class="hljs-type">None</span>, <span class="hljs-title">parser_context</span>=<span class="hljs-type">None</span>):<br>        assert isinstance(<span class="hljs-title">request</span>, <span class="hljs-type">HttpRequest</span>), (<br>            '<span class="hljs-type">The</span> `<span class="hljs-title">request</span>` <span class="hljs-title">argument</span> <span class="hljs-title">must</span> <span class="hljs-title">be</span> <span class="hljs-title">an</span> <span class="hljs-title">instance</span> <span class="hljs-title">of</span> '<br>            '`<span class="hljs-title">django</span>.<span class="hljs-title">http</span>.<span class="hljs-type">HttpRequest</span>`, <span class="hljs-title">not</span> `&#123;&#125;.&#123;&#125;`.'<br>            .<span class="hljs-title">format</span>(<span class="hljs-title">request</span>.<span class="hljs-title">__class__</span>.<span class="hljs-title">__module__</span>, <span class="hljs-title">request</span>.<span class="hljs-title">__class__</span>.<span class="hljs-title">__name__</span>)<br>        )<br><br>        self._request = request<br>        self.parsers = parsers or ()<br>        self.authenticators = authenticators or ()<br>        ...</span><br></code></pre></div></td></tr></table></figure><p>循环认证的对象列表,<code>执行每一个认证方法的类中的authenticate方法</code>，得到通过认证的用户及用户的口令的元组，并返回元组完成认证的流程</p><p>在<code>_authenticate</code>方法中使用了try/except方法来捕获authenticate方法可能出现的异常</p><p>如果出现异常,就调用<code>_not_authenticated</code>方法来设置返回元组中的用户及口令并终止程序继续运行</p><p>总结，Django restframework的认证流程如下图</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180825184058007-932847314.jpg" alt="img"></p><h2 id="Django-restframework内置的认证类"><a href="#Django-restframework内置的认证类" class="headerlink" title="Django restframework内置的认证类"></a>Django restframework内置的认证类</h2><p>在上面的项目例子中，在UsersView的get方法中，打印<code>authentication_classes</code>和<code>request._user</code>的值</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-comment"># authentication_classes = [MyAuthentication,]</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br>        print(<span class="hljs-string">'authentication_classes:'</span>, self.authentication_classes)<br>        print(request._user)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"UserView GET"</span>)<br></code></pre></div></td></tr></table></figure><p>打印结果为</p><figure class="highlight fsharp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">authentication_classes: <span class="hljs-meta">[&lt;class 'rest_framework.authentication.SessionAuthentication'&gt;, &lt;class 'rest_framework.authentication.BasicAuthentication'&gt;]</span><br>AnonymousUser<br></code></pre></div></td></tr></table></figure><p>由此可以知道,<code>authentication_classes</code>默认是Django restframework内置的认证类，而request._user为AnonymousUser,因为发送GET请求，用户没有进行登录认证，所以为匿名用户</p><p>在视图函数中导入这两个类,再查看这两个类的源码,可以知道</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br><br>    www_authenticate_realm = <span class="hljs-string">'api'</span> <br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br><br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_credentials</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, userid, password)</span></span>:<br><br>        ...<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br><br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enforce_csrf</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br><br>        ...<br>        <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br>    ...<br></code></pre></div></td></tr></table></figure><p>从上面的源码可以发现,这个文件中不仅定义了<code>SessionAuthentication</code>和<code>BasicAuthentication</code>这两个类,</p><p>相关的类还有<code>TokenAuthentication</code>,而且这三个认证相关的类都是继承自<code>BaseAuthentication</code>类</p><p>从上面的源码可以大概知道,这三个继承自<code>BaseAuthentication</code>的类是Django restframework内置的认证方式.</p><h2 id="自定义认证功能"><a href="#自定义认证功能" class="headerlink" title="自定义认证功能"></a>自定义认证功能</h2><p>在上面我们知道,Request会调用认证相关的类及方法,<code>APIView</code>会设置认证相关的类及方法</p><p>所以如果想自定义认证功能,只需要重写<code>authenticate</code>方法及<code>authentication_classes</code>的对象列表即可</p><p>修改上面的例子的views.py文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><br>TOKEN_LIST = [  <span class="hljs-comment"># 定义token_list</span><br>    <span class="hljs-string">'aabbcc'</span>,<br>    <span class="hljs-string">'ddeeff'</span>,<br>]<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAuthView</span><span class="hljs-params">(BaseAuthentication)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(self, request)</span>:</span><br>        tk = request._request.GET.get(<span class="hljs-string">"tk"</span>)  <span class="hljs-comment"># request._request为原生的request</span><br><br>        <span class="hljs-keyword">if</span> tk <span class="hljs-keyword">in</span> TOKEN_LIST:<br>            <span class="hljs-keyword">return</span> (tk, <span class="hljs-literal">None</span>)  <span class="hljs-comment"># 返回一个元组</span><br>        <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(<span class="hljs-string">"用户认证失败"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(self, request)</span>:</span><br>        <span class="hljs-comment"># 如果不定义authenticate_header方法会抛出异常</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserView</span><span class="hljs-params">(APIView)</span>:</span><br>    authentication_classes = [UserAuthView, ]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        print(request.user)<br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"UserView GET"</span>)<br></code></pre></div></td></tr></table></figure><p>启动项目,在浏览器中输入<code>http://127.0.0.1:8000/users/?tk=aabbcc</code>,然后回车,在服务端后台会打印</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">aabbcc</span><br></code></pre></div></td></tr></table></figure><p>把浏览器中的url换为<code>http://127.0.0.1:8000/users/?tk=ddeeff</code>,后台打印信息则变为</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">ddeeff</span><br></code></pre></div></td></tr></table></figure><p>这样就实现REST framework的自定义认证功能</p><h2 id="Django-restframework认证的扩展"><a href="#Django-restframework认证的扩展" class="headerlink" title="Django restframework认证的扩展"></a>Django restframework认证的扩展</h2><h3 id="基于Token进行用户认证"><a href="#基于Token进行用户认证" class="headerlink" title="基于Token进行用户认证"></a>基于Token进行用户认证</h3><p>修改上面的项目，在urls.py文件中添加一条路由记录</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.conf.urls <span class="hljs-keyword">import</span> url<br><span class="hljs-keyword">from</span> django.contrib <span class="hljs-keyword">import</span> admin<br><span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> views<br><br>urlpatterns = [<br>    url(<span class="hljs-string">r'^admin/'</span>, admin.site.urls),<br>    url(<span class="hljs-string">r'^users/'</span>,views.UsersView.as_view()),<br>    url(<span class="hljs-string">r'^auth/'</span>,views.AuthView.as_view()),<br>]<br></code></pre></div></td></tr></table></figure><p>修改视图函数</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,HttpResponse<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_token</span><span class="hljs-params">(username)</span>:</span><br>    <span class="hljs-string">"""<br>    利用时间和用户名生成用户token<br>    :param username: <br>    :return: <br>    """</span><br>    <span class="hljs-keyword">import</span> time<br>    <span class="hljs-keyword">import</span> hashlib<br>    ctime=str(time.time())<br>    hash=hashlib.md5(username.encode(<span class="hljs-string">"utf-8"</span>))<br>    hash.update(ctime.encode(<span class="hljs-string">"utf-8"</span>))<br>    <span class="hljs-keyword">return</span> hash.hexdigest()<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        <span class="hljs-string">"""<br>        获取用户提交的用户名和密码，如果用户名和密码正确，则生成token，并返回给用户<br>        :param request:<br>        :param args:<br>        :param kwargs:<br>        :return:<br>        """</span><br>        res = &#123;<span class="hljs-string">'code'</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">'msg'</span>: <span class="hljs-literal">None</span>&#125;<br>        user = request.data.get(<span class="hljs-string">"user"</span>)<br>        pwd = request.data.get(<span class="hljs-string">"pwd"</span>)<br><br>        <span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br>        user_obj = models.UserInfo.objects.filter(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> user_obj:<br>            token = gen_token(user) <span class="hljs-comment"># 生成用户口令</span><br><br>            <span class="hljs-comment"># 如果数据库中存在口令则更新,如果数据库中不存在口令则创建用户口令</span><br>            models.Token.objects.update_or_create(user=user_obj, defaults=&#123;<span class="hljs-string">'token'</span>: token&#125;)<br>            print(<span class="hljs-string">"user_token:"</span>, token)<br>            res[<span class="hljs-string">'code'</span>] = <span class="hljs-number">1001</span><br>            res[<span class="hljs-string">'token'</span>] = token<br>        <span class="hljs-keyword">else</span>:<br>            res[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">"用户名或密码错误"</span><br><br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br>    <br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserAuthView</span><span class="hljs-params">(BaseAuthentication)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(self,request)</span>:</span><br>        tk=request.query_params.GET.get(<span class="hljs-string">"tk"</span>)   <span class="hljs-comment"># 获取请求头中的用户token</span><br><br>        <span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br><br>        token_obj=models.Token.objects.filter(token=tk).first()<br><br>        <span class="hljs-keyword">if</span> token_obj:   <span class="hljs-comment"># 用户数据库中已经存在用户口令返回认证元组</span><br>            <span class="hljs-keyword">return</span> (token_obj.user,token_obj)<br><br>        <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(<span class="hljs-string">"认证失败"</span>)<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UsersView</span><span class="hljs-params">(APIView)</span>:</span><br>    authentication_classes = [UserAuthView,]<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"....."</span>)<br></code></pre></div></td></tr></table></figure><p>创建用户数据库的类</p><figure class="highlight haskell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-title">from</span> django.db <span class="hljs-keyword">import</span> models<br><span class="hljs-class"><br><span class="hljs-keyword">class</span> <span class="hljs-type">UserInfo</span>(<span class="hljs-title">models</span>.<span class="hljs-type">Model</span>):<br>    user=models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=32)<br>    pwd=models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=64)<br>    email=models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=64)<br><br><span class="hljs-keyword">class</span> <span class="hljs-type">Token</span>(<span class="hljs-title">models</span>.<span class="hljs-type">Model</span>):<br>    user=models.<span class="hljs-type">OneToOneField</span>(<span class="hljs-type">UserInfo</span>)<br>    token=models.<span class="hljs-type">CharField</span>(<span class="hljs-title">max_length</span>=64)</span><br></code></pre></div></td></tr></table></figure><p>创建数据库,并添加两条用户记录</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201711/1133627-20171126000140781-1551141195.png" alt="img"></p><p>再创建一个test_client.py文件,来发送post请求</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">import requests<br><br><span class="hljs-attribute">response</span>=requests.post(<br>    <span class="hljs-attribute">url</span>=<span class="hljs-string">"http://127.0.0.1:8000/auth/"</span>,<br>    data=&#123;<span class="hljs-string">'user'</span>:<span class="hljs-string">'user1'</span>,<span class="hljs-string">'pwd'</span>:<span class="hljs-string">'user123'</span>&#125;,<br>)<br><br><span class="hljs-builtin-name">print</span>(<span class="hljs-string">"response_text:"</span>,response.text)<br></code></pre></div></td></tr></table></figure><p>启动Django项目,运行test_client.py文件,则项目的响应信息为</p><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">response_text:</span> &#123;<span class="hljs-string">"code"</span>: <span class="hljs-number">1001</span>, <span class="hljs-string">"msg"</span>: <span class="hljs-literal">null</span>, <span class="hljs-string">"token"</span>: <span class="hljs-string">"eccd2d256f44cb25b58ba602fe7eb42d"</span>&#125;<br></code></pre></div></td></tr></table></figure><p>由此,就完成了自定义的基于token的用户认证</p><p>如果想在项目中使用自定义的认证方式时,可以在<code>authentication_classes</code>继承刚才的认证的类即可</p><figure class="highlight ini"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">authentication_classes</span> = [UserAuthView,]<br></code></pre></div></td></tr></table></figure><h2 id="全局自定义认证"><a href="#全局自定义认证" class="headerlink" title="全局自定义认证"></a>全局自定义认证</h2><p>在正常的项目中，一个用户登录成功之后，进入自己的主页，可以看到很多内容，比如用户的订单，用户的收藏，用户的主页等</p><p>此时，难倒要在每个视图类中都定义authentication_classes，然后在authentication_classes中追加自定义的认证类吗？</p><p>通过对Django restframework认证的源码分析知道，可以直接在项目的settings.py配置文件中引入自定义的认证类，即可以对所有的url进行用户认证流程</p><p>在应用app01目录下创建utils包，在utils包下创建auth.py文件，内容为自定义的认证类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><span class="hljs-keyword">from</span> api <span class="hljs-keyword">import</span> models<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Authtication</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(self,request)</span>:</span><br>        token = request._request.GET.get(<span class="hljs-string">"token"</span>)       <span class="hljs-comment"># 获取浏览器传递的token</span><br>        token_obj = models.UserToken.objects.filter(token=token).first()    <span class="hljs-comment"># 到数据库中进行token查询，判断用户是否通过认证</span><br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> token_obj:<br>            <span class="hljs-keyword">raise</span> exceptions.AuthenticationFailed(<span class="hljs-string">"用户认证失败"</span>)<br><br>        <span class="hljs-comment"># restframework会将元组赋值给request,以供后面使用</span><br>        <span class="hljs-keyword">return</span> (token_obj.user,token_obj)<br>    <br>    <span class="hljs-comment"># 必须创建authenticate_header方法，否则会抛出异常</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><p>在settings.py文件中添加内容</p><figure class="highlight roboconf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">REST_FRAMEWORK = &#123;<br>    '<span class="hljs-attribute">DEFAULT_AUTHENTICATION_CLASSES'</span>:['app01<span class="hljs-variable">.utils</span><span class="hljs-variable">.auth</span><span class="hljs-variable">.Authtication</span>',]<br>&#125;<br></code></pre></div></td></tr></table></figure><p>修改views.py文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render, HttpResponse<br><span class="hljs-keyword">from</span> rest_framework.views <span class="hljs-keyword">import</span> APIView<br><span class="hljs-keyword">from</span> rest_framework.authentication <span class="hljs-keyword">import</span> BaseAuthentication<br><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> exceptions<br><span class="hljs-keyword">from</span> django.http <span class="hljs-keyword">import</span> JsonResponse<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">gen_token</span><span class="hljs-params">(username)</span>:</span><br>    <span class="hljs-string">"""<br>    利用时间和用户名生成用户token<br>    :param username:<br>    :return:<br>    """</span><br>    <span class="hljs-keyword">import</span> time<br>    <span class="hljs-keyword">import</span> hashlib<br>    ctime = str(time.time())<br>    hash = hashlib.md5(username.encode(<span class="hljs-string">"utf-8"</span>))<br>    hash.update(ctime.encode(<span class="hljs-string">"utf-8"</span>))<br>    <span class="hljs-keyword">return</span> hash.hexdigest()<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">AuthView</span><span class="hljs-params">(APIView)</span>:</span><br>    authentication_classes = []     <span class="hljs-comment"># 在这里定义authentication_classes后，用户访问auth页面不需要进行认证</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        <span class="hljs-string">"""<br>        获取用户提交的用户名和密码，如果用户名和密码正确，则生成token，并返回给用户<br>        :param request:<br>        :param args:<br>        :param kwargs:<br>        :return:<br>        """</span><br>        res = &#123;<span class="hljs-string">'code'</span>: <span class="hljs-number">1000</span>, <span class="hljs-string">'msg'</span>: <span class="hljs-literal">None</span>&#125;<br>        user = request.data.get(<span class="hljs-string">"user"</span>)<br>        pwd = request.data.get(<span class="hljs-string">"pwd"</span>)<br><br>        <span class="hljs-keyword">from</span> app01 <span class="hljs-keyword">import</span> models<br>        user_obj = models.UserInfo.objects.filter(user=user, pwd=pwd).first()<br><br>        <span class="hljs-keyword">if</span> user_obj:<br>            token = gen_token(user)  <span class="hljs-comment"># 生成用户口令</span><br><br>            <span class="hljs-comment"># 如果数据库中存在口令则更新,如果数据库中不存在口令则创建用户口令</span><br>            models.Token.objects.update_or_create(user=user_obj, defaults=&#123;<span class="hljs-string">'token'</span>: token&#125;)<br>            print(<span class="hljs-string">"user_token:"</span>, token)<br>            res[<span class="hljs-string">'code'</span>] = <span class="hljs-number">1001</span><br>            res[<span class="hljs-string">'token'</span>] = token<br>        <span class="hljs-keyword">else</span>:<br>            res[<span class="hljs-string">'msg'</span>] = <span class="hljs-string">"用户名或密码错误"</span><br><br>        <span class="hljs-keyword">return</span> JsonResponse(res)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, request, *args, **kwargs)</span>:</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"UserView GET"</span>)<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderView</span><span class="hljs-params">(APIView)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"OrderView GET"</span>)<br></code></pre></div></td></tr></table></figure><p>启动项目，使用POSTMAN向<code>http://127.0.0.1:8000/order/?token=eccd2d256f44cb25b58ba602fe7eb42d</code>和<code>http://127.0.0.1:8000/user/?token=eccd2d256f44cb25b58ba602fe7eb42d</code>发送GET请求，响应结果如下</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225750139-1198840701.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225755562-137171019.png" alt="img"></p><p>在url中不带token,使用POSTMAN向<code>http://127.0.0.1:8000/order/</code>和<code>http://127.0.0.1:8000/user/</code>发送GET请求，则会出现<code>&quot;认证失败&quot;</code>的提示</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225715170-517425689.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225720650-323643037.png" alt="img"></p><p>由此可以知道，在settings.py配置文件中配置自定义的认证类也可以实现用户认证功能</p><h2 id="配置匿名用户"><a href="#配置匿名用户" class="headerlink" title="配置匿名用户"></a>配置匿名用户</h2><p>修改settings.py文件</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">REST_FRAMEWORK = &#123;<br>    <span class="hljs-string">'DEFAULT_AUTHENTICATION_CLASSES'</span>: [<span class="hljs-string">'app01.utils.auth.Authtication'</span>, ],<br>    <span class="hljs-string">'UNAUTHENTICATED_USER'</span>: <span class="hljs-keyword">lambda</span> :<span class="hljs-string">"匿名用户"</span>,     <span class="hljs-comment"># 用户未登录时显示的名称</span><br>    <span class="hljs-string">'UNAUTHENTICATED_TOKEN'</span>: <span class="hljs-keyword">lambda</span> :<span class="hljs-string">"无效token"</span>, <span class="hljs-comment"># 用户未登录时打印的token名</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>修改views.py文件中的OrderView类</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OrderView</span><span class="hljs-params">(APIView)</span>:</span><br>    authentication_classes = []         <span class="hljs-comment"># authentication_classes为空列表表示视图类不进行认证</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request,*args,**kwargs)</span>:</span><br>        print(request.user)<br>        print(request.auth)<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">"OrderView GET"</span>)<br></code></pre></div></td></tr></table></figure><p>使用浏览器向<code>http://127.0.0.1:8000/order/</code>发送GET请求，后台打印</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225705126-1550086890.png" alt="img"></p><p>这说明在settings.py文件中配置的匿名用户和匿名用户的token起到作用</p><blockquote><p>建议把匿名用户及匿名用户的token都设置为:None</p></blockquote><h2 id="Django-restframework内置的认证类-1"><a href="#Django-restframework内置的认证类-1" class="headerlink" title="Django restframework内置的认证类"></a>Django restframework内置的认证类</h2><p>从rest_framework中导入authentication</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> rest_framework <span class="hljs-keyword">import</span> authentication<br></code></pre></div></td></tr></table></figure><p>可以看到Django restframework内置的认证类</p><figure class="highlight ruby"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BaseAuthentication</span>(<span class="hljs-title">object</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        pass<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">BasicAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_credentials</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, userid, password, request=None)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SessionAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">enforce_csrf</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">TokenAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_credentials</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, key)</span></span>:<br>        ...<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate_header</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">RemoteUserAuthentication</span>(<span class="hljs-title">BaseAuthentication</span>):</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">authenticate</span><span class="hljs-params">(<span class="hljs-keyword">self</span>, request)</span></span>:<br>        ...<br></code></pre></div></td></tr></table></figure><p>可以看到，Django restframework内置的认证包含下面的四种：</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">BasicAuthentication<br></span><span class="hljs-symbol">SessionAuthentication</span><br><span class="hljs-symbol">TokenAuthentication</span><br><span class="hljs-symbol">RemoteUserAuthentication</span><br></code></pre></div></td></tr></table></figure><p>而这四种认证类都继承自<code>BaseAuthentication</code>，<code>在BaseAuthentication中定义了两个方法：authenticate和authenticate_header</code></p><p>总结：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">为了让认证更规范，自定义的认证类要继承 BaseAuthentication类<br>自定义认证类必须要实现authenticate和authenticate_header方法<br>authenticate_header方法的作用：在认证失败的时候，给浏览器返回的响应头，可以直接<span class="hljs-keyword">pass</span>，不实现authenticate_header程序会抛出异常<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>21. 合并两个有序链表</title>
      <link href="2019/04/21/21%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2019/04/21/21%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>将两个有序链表合并为一个新的有序链表并返回。新链表是通过拼接给定的两个链表的所有节点组成的。<br><a id="more"></a><br><strong>示例：</strong></p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">输入：1-&gt;2-&gt;4, 1-&gt;3-&gt;4<br>输出：1-&gt;1-&gt;2-&gt;3-&gt;4-&gt;4<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mergeTwoLists</span><span class="hljs-params">(l1, l2)</span>:</span><br>    <span class="hljs-comment"># 处理边界情况（l1或l2为空）</span><br>    <span class="hljs-keyword">if</span> l1 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> l2<br>    <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-keyword">return</span> l1<br>    <span class="hljs-comment"># 确保l1有最小的初始值</span><br>    <span class="hljs-keyword">if</span> l2.val &lt; l1.val:<br>        l1, l2 = l2, l1<br>    <span class="hljs-comment"># 保存一个链表头用来作为返回值</span><br>    head = l1<br>    <span class="hljs-comment"># 开始迭代到l1为最后一个节点</span><br>    <span class="hljs-keyword">while</span> l1.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>        <span class="hljs-comment"># 假如l2完结，工作完成</span><br>        <span class="hljs-keyword">if</span> l2 <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> head<br>        <span class="hljs-comment"># 假如l2节点属于在l1的当前节点与下一个节点值之间</span><br>        <span class="hljs-keyword">if</span> l1.val &lt;= l2.val &lt;= l1.next.val:<br>            <span class="hljs-comment"># 在这一步我们通过设置l1.next\l2.next来拼接l2，并将L2 迭代</span><br>            l1.next, l2.next, l2 = l2, l1.next, l2.next<br>        <span class="hljs-comment"># l1迭代向前</span><br>        l1 = l1.next<br>    <span class="hljs-comment"># 以防l2较长的情况，我们在l1迭代完成后把l2加入到l1尾部</span><br>    l1.next = l2<br>    <span class="hljs-keyword">return</span> head<br></code></pre></div></td></tr></table></figure><p>时间复杂度：O(n)</p>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>狄克斯特拉算法</title>
      <link href="2019/04/08/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/"/>
      <url>2019/04/08/%E7%8B%84%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>狄克斯特拉算法——用于在加权图中找到最短路径</p><p>ps：</p><ul><li>广度优先搜索——用于解决非加权图的最短路径问题</li><li>存在负权边时——贝尔曼-福德算法</li></ul><a id="more"></a><p>下面是来自维基百科的权威解释。</p><blockquote><p><strong>戴克斯特拉算法</strong>（英语：Dijkstra’s algorithm，又译<strong>迪杰斯特拉算法</strong>）由荷兰计算机科学家<a href="https://zh.wikipedia.org/wiki/%E8%89%BE%E5%85%B9%E8%B5%AB%E5%B0%94%C2%B7%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89" target="_blank" rel="noopener">艾兹赫尔·戴克斯特拉</a>在1956年提出。戴克斯特拉算法使用了<a href="https://zh.wikipedia.org/wiki/%E5%B9%BF%E5%BA%A6%E4%BC%98%E5%85%88%E6%90%9C%E7%B4%A2" target="_blank" rel="noopener">广度优先搜索</a>解决赋权有向图的单源<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E9%97%AE%E9%A2%98" target="_blank" rel="noopener">最短路径问题</a>。该算法存在很多变体；戴克斯特拉的原始版本找到两个顶点之间的最短路径，但是更常见的变体固定了一个顶点作为源节点然后找到该顶点到图中所有其它节点的最短路径，产生一个<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84%E6%A0%91" target="_blank" rel="noopener">最短路径树</a>。该算法常用于<a href="https://zh.wikipedia.org/wiki/%E8%B7%AF%E7%94%B1" target="_blank" rel="noopener">路由</a>算法或者作为其他图算法的一个子模块。举例来说，如果图中的顶点表示城市，而边上的权重表示城市间开车行经的距离，该算法可以用来找到两个城市之间的最短路径。</p><p>该算法的输入包含了一个有权重的有向图 <em>G</em>，以及G中的一个来源<a href="https://zh.wikipedia.org/wiki/%E9%A0%82%E9%BB%9E" target="_blank" rel="noopener">顶点</a> <em>S</em>。我们以 <em>V</em> 表示 <em>G</em> 中所有顶点的集合。每一个图中的<a href="https://zh.wikipedia.org/wiki/%E9%82%8A" target="_blank" rel="noopener">边</a>，都是两个顶点所形成的有序元素对。(<em>u</em>, <em>v</em>) 表示从顶点 <em>u</em> 到 <em>v</em> 有路径相连。我们以 <em>E</em> 表示<em>G</em>中所有边的集合，而边的权重则由权重函数 <em>w</em>: <em>E</em> → [0, ∞] 定义。因此，<em>w</em>(<em>u</em>, <em>v</em>) 就是从顶点 <em>u</em> 到顶点 <em>v</em> 的非负权重（weight）。边的权重可以想像成两个顶点之间的距离。任两点间路径的权重，就是该路径上所有边的权重总和。已知 <em>V</em> 中有顶点 <em>s</em> 及 <em>t</em>，Dijkstra 算法可以找到 <em>s</em>到 <em>t</em> 的最低权重路径(例如，最短路径)。这个算法也可以在一个图中，找到从一个顶点 <em>s</em> 到任何其他顶点的最短路径。</p><p>最初的戴克斯特拉算法不采用最小<a href="https://zh.wikipedia.org/wiki/%E4%BC%98%E5%85%88%E7%BA%A7%E9%98%9F%E5%88%97" target="_blank" rel="noopener">优先级队列</a>，时间复杂度是{\displaystyle O(|V|^{2})}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/e1e99764e23be92b694aef042c6460ff921357e3" alt="O(|V|^{2})">(其中{\displaystyle |V|}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/9ddcffc28643ac01a14dd0fb32c3157859e365a7" alt="|V|">为图的顶点个数)。通过<a href="https://zh.wikipedia.org/wiki/%E6%96%90%E6%B3%A2%E9%82%A3%E5%A5%91%E5%A0%86" target="_blank" rel="noopener">斐波那契堆</a>实现的戴克斯特拉算法时间复杂度是{\displaystyle O(|E|+|V|\log |V|)}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/4fcb7644781d08e9e958d4a430a3107da04bf1b3" alt="O(|E|+|V|\log |V|)"> (其中{\displaystyle |E|}<img src="https://wikimedia.org/api/rest_v1/media/math/render/svg/d8c2b9637808cf805d411190b4ae017dbd4ef8d8" alt="|E|">是边数) （<a href="https://zh.wikipedia.org/wiki/%E6%88%B4%E5%85%8B%E6%96%AF%E7%89%B9%E6%8B%89%E7%AE%97%E6%B3%95#CITEREFFredmanTarjan1984" target="_blank" rel="noopener">Fredman &amp; Tarjan 1984</a>）。对于不含负权的<a href="https://zh.wikipedia.org/wiki/%E6%9C%89%E5%90%91%E5%9B%BE" target="_blank" rel="noopener">有向图</a>，这是当前已知的最快的单源<a href="https://zh.wikipedia.org/wiki/%E6%9C%80%E7%9F%AD%E8%B7%AF%E5%BE%84" target="_blank" rel="noopener">最短路径</a>算法。</p></blockquote><h2 id="Python实现："><a href="#Python实现：" class="headerlink" title="Python实现："></a>Python实现：</h2><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 创建图</span><br>graph = &#123;&#125;<br>graph[<span class="hljs-string">"start"</span>] = &#123;&#125;<br>graph[<span class="hljs-string">"start"</span>][<span class="hljs-string">"a"</span>] = <span class="hljs-number">6</span><br>graph[<span class="hljs-string">"start"</span>][<span class="hljs-string">"b"</span>] = <span class="hljs-number">2</span><br><br>graph[<span class="hljs-string">"a"</span>] = &#123;&#125;<br>graph[<span class="hljs-string">"a"</span>][<span class="hljs-string">"fin"</span>] = <span class="hljs-number">1</span><br>graph[<span class="hljs-string">"b"</span>] = &#123;&#125;<br>graph[<span class="hljs-string">"b"</span>][<span class="hljs-string">"a"</span>] = <span class="hljs-number">3</span><br>graph[<span class="hljs-string">"b"</span>][<span class="hljs-string">"fin"</span>] = <span class="hljs-number">5</span><br>graph[<span class="hljs-string">"fin"</span>] = &#123;&#125;<br><br>print(graph)  <span class="hljs-comment"># &#123;'start': &#123;'a': 6, 'b': 2&#125;, 'a': &#123;'fin': 1&#125;, 'b': &#123;'a': 3, 'fin': 5&#125;, 'fin': &#123;&#125;&#125;</span><br><br><span class="hljs-comment"># 创建开销表</span><br><br>infinity = float(<span class="hljs-string">"inf"</span>)<br>costs = &#123;&#125;<br>costs[<span class="hljs-string">"a"</span>] = <span class="hljs-number">6</span><br>costs[<span class="hljs-string">"b"</span>] = <span class="hljs-number">2</span><br>costs[<span class="hljs-string">"fin"</span>] = infinity<br>print(infinity, type(infinity))<br><br><span class="hljs-comment"># 创建父节点</span><br>parents = &#123;&#125;<br>parents[<span class="hljs-string">"a"</span>] = <span class="hljs-string">"start"</span><br>parents[<span class="hljs-string">"b"</span>] = <span class="hljs-string">"start"</span><br>parents[<span class="hljs-string">"fin"</span>] = <span class="hljs-literal">None</span><br><span class="hljs-comment"># 用来记录处理过的节点</span><br>processed = []<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">find_lower_cost_node</span><span class="hljs-params">(costs)</span>:</span><br>    lowest_cost = float(<span class="hljs-string">"inf"</span>)<br>    lowest_cost_node = <span class="hljs-literal">None</span><br>    <span class="hljs-keyword">for</span> node <span class="hljs-keyword">in</span> costs:<br>        cost = costs[node]<br>        <span class="hljs-keyword">if</span> cost &lt; lowest_cost <span class="hljs-keyword">and</span> node <span class="hljs-keyword">not</span> <span class="hljs-keyword">in</span> processed:<br>            lowest_cost = cost<br>            lowest_cost_node = node<br>    <span class="hljs-keyword">return</span> lowest_cost_node<br><br><br>node = find_lower_cost_node(costs)<br><br><span class="hljs-keyword">while</span> node <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>    cost = costs[node]<br>    neighbors = graph[node]<br>    <span class="hljs-keyword">for</span> n <span class="hljs-keyword">in</span> neighbors.keys():<br>        new_cost = cost + neighbors[n]<br>        <span class="hljs-keyword">if</span> costs[n] &gt; new_cost:<br>            costs[n] = new_cost<br>            parents[n] = node<br>    processed.append(node)<br>    node = find_lower_cost_node(costs)<br><br>print(costs)<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>278. 第一个错误的版本</title>
      <link href="2019/04/05/278%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2019/04/05/278%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>你是产品经理，目前正在带领一个团队开发新的产品。不幸的是，你的产品的最新版本没有通过质量检测。由于每个版本都是基于之前的版本开发的，所以错误的版本之后的所有版本都是错的。</p><p>假设你有 <code>n</code> 个版本 <code>[1, 2, ..., n]</code>，你想找出导致之后所有版本出错的第一个错误的版本。</p><p>你可以通过调用 <code>bool isBadVersion(version)</code> 接口来判断版本号 <code>version</code> 是否在单元测试中出错。实现一个函数来查找第一个错误的版本。你应该尽量减少对调用 API 的次数。<br><a id="more"></a></p><p><strong>示例:</strong></p><figure class="highlight livescript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">给定 n = <span class="hljs-number">5</span>，并且 version = <span class="hljs-number">4</span> 是第一个错误的版本。<br><br>调用 isBadVersion<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">3</span>)</span> -&gt;</span> <span class="hljs-literal">false</span><br>调用 isBadVersion<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">5</span>)</span> -&gt;</span> <span class="hljs-literal">true</span><br>调用 isBadVersion<span class="hljs-function"><span class="hljs-params">(<span class="hljs-number">4</span>)</span> -&gt;</span> <span class="hljs-literal">true</span><br><br>所以，<span class="hljs-number">4</span> 是第一个错误的版本。<br></code></pre></div></td></tr></table></figure><h2 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h2><p>解题思路：</p><ul><li>如果猜的版本为bad，那么右边界替换成当前位置</li><li>如果猜的版本不为bad，那么左边界为当前值+1</li><li>到最后一定是左边界为好的版本，右边界为Bad版本</li><li>最后返回右边界</li></ul><p>时间复杂度：O(logn)</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">firstBadVersion</span><span class="hljs-params">(self, n)</span>:</span><br>        low = <span class="hljs-number">1</span><br>        high = n<br>        <span class="hljs-keyword">while</span> low &lt; high:<br>            mid = (low + high) //<span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> isBadVersion(mid) <span class="hljs-keyword">is</span> <span class="hljs-literal">True</span>:<br>                high = mid<br>            <span class="hljs-keyword">else</span>:<br>                low = mid + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> high<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      <categories>
          
          <category> 算法 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>【Linux编程】进程间通信（IPC）</title>
      <link href="2019/03/21/%E3%80%90Linux%E7%BC%96%E7%A8%8B%E3%80%91%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%89/"/>
      <url>2019/03/21/%E3%80%90Linux%E7%BC%96%E7%A8%8B%E3%80%91%E8%BF%9B%E7%A8%8B%E9%97%B4%E9%80%9A%E4%BF%A1%EF%BC%88IPC%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<p>进程间通信（IPC，InterProcess Communication）**是指在不同进程之间传播或交换信息。IPC的方式通常有管道（包括无名管道和命名管道）、消息队列、信号量、共享存储、Socket、Streams等。其中 Socket和Streams支持不同主机上的两个进程IPC。<br><a id="more"></a></p><h2 id="一、管道"><a href="#一、管道" class="headerlink" title="一、管道"></a>一、管道</h2><p><strong>管道</strong>，通常指无名管道，是 UNIX 系统IPC最古老的形式。</p><h3 id="1、特点："><a href="#1、特点：" class="headerlink" title="1、特点："></a>1、特点：</h3><ol><li>它是半双工的（即数据只能在一个方向上流动），具有固定的读端和写端。</li><li>它只能用于具有亲缘关系的进程之间的通信（也是父子进程或者兄弟进程之间）。</li><li>它可以看成是一种特殊的文件，对于它的读写也可以使用普通的read、write 等函数。但是它不是普通的文件，并不属于其他任何文件系统，并且只存在于内存中。</li></ol><h3 id="2、原型："><a href="#2、原型：" class="headerlink" title="2、原型："></a>2、原型：</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">pipe</span><span class="hljs-params">(<span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>])</span></span>;    <span class="hljs-comment">// 返回值：若成功返回0，失败返回-1</span><br></code></pre></div></td></tr></table></figure><p>当一个管道建立时，它会创建两个文件描述符：<code>fd[0]</code>为读而打开，<code>fd[1]</code>为写而打开。如下图：</p><p><a href="http://img.blog.csdn.net/20150419222058628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150419222058628?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><p>要关闭管道只需将这两个文件描述符关闭即可。</p><h3 id="3、例子"><a href="#3、例子" class="headerlink" title="3、例子"></a>3、例子</h3><p>单个进程中的管道几乎没有任何用处。所以，通常调用 pipe 的进程接着调用 fork，这样就创建了父进程与子进程之间的 IPC 通道。如下图所示：</p><p><a href="http://img.blog.csdn.net/20150419223853807?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150419223853807?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/SouthEast" alt="img"></a></p><p>若要数据流从父进程流向子进程，则关闭父进程的读端（<code>fd[0]</code>）与子进程的写端（<code>fd[1]</code>）；反之，则可以使数据流从子进程流向父进程。</p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;unistd.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> fd[<span class="hljs-number">2</span>];  <span class="hljs-comment">// 两个文件描述符</span><br><span class="hljs-keyword">pid_t</span> pid;<br><span class="hljs-keyword">char</span> buff[<span class="hljs-number">20</span>];<br><br><span class="hljs-keyword">if</span>(pipe(fd) &lt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 创建管道</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Create Pipe Error!\n"</span>);<br><br><span class="hljs-keyword">if</span>((pid = fork()) &lt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 创建子进程</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Fork Error!\n"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid &gt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 父进程</span><br>&#123;<br><span class="hljs-built_in">close</span>(fd[<span class="hljs-number">0</span>]); <span class="hljs-comment">// 关闭读端</span><br><span class="hljs-built_in">write</span>(fd[<span class="hljs-number">1</span>], <span class="hljs-string">"hello world\n"</span>, <span class="hljs-number">12</span>);<br>&#125;<br><span class="hljs-keyword">else</span><br>&#123;<br><span class="hljs-built_in">close</span>(fd[<span class="hljs-number">1</span>]); <span class="hljs-comment">// 关闭写端</span><br><span class="hljs-built_in">read</span>(fd[<span class="hljs-number">0</span>], buff, <span class="hljs-number">20</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s"</span>, buff);<br>&#125;<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><h2 id="二、FIFO"><a href="#二、FIFO" class="headerlink" title="二、FIFO"></a>二、FIFO</h2><p><strong>FIFO</strong>，也称为命名管道，它是一种文件类型。</p><h3 id="1、特点"><a href="#1、特点" class="headerlink" title="1、特点"></a>1、特点</h3><ol><li>FIFO可以在无关的进程之间交换数据，与无名管道不同。</li><li>FIFO有路径名与之相关联，它以一种特殊设备文件形式存在于文件系统中。</li></ol><h3 id="2、原型"><a href="#2、原型" class="headerlink" title="2、原型"></a>2、原型</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-comment">// 返回值：成功返回0，出错返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">mkfifo</span><span class="hljs-params">(<span class="hljs-keyword">const</span> <span class="hljs-keyword">char</span> *pathname, <span class="hljs-keyword">mode_t</span> mode)</span></span>;<br></code></pre></div></td></tr></table></figure><p>其中的 mode 参数与<code>open</code>函数中的 mode 相同。一旦创建了一个 FIFO，就可以用一般的文件I/O函数操作它。</p><p>当 open 一个FIFO时，是否设置非阻塞标志（<code>O_NONBLOCK</code>）的区别：</p><ul><li>若没有指定<code>O_NONBLOCK</code>（默认），只读 open 要阻塞到某个其他进程为写而打开此 FIFO。类似的，只写 open 要阻塞到某个其他进程为读而打开它。</li><li>若指定了<code>O_NONBLOCK</code>，则只读 open 立即返回。而只写 open 将出错返回 -1 如果没有进程已经为读而打开该 FIFO，其errno置ENXIO。</li></ul><h3 id="3、例子-1"><a href="#3、例子-1" class="headerlink" title="3、例子"></a>3、例子</h3><p>FIFO的通信方式类似于在进程中使用文件来传输数据，只不过FIFO类型文件同时具有管道的特性。在数据读出时，FIFO管道中同时清除数据，并且“先进先出”。下面的例子演示了使用 FIFO 进行 IPC 的过程：</p><ul><li><p><strong>write_fifo.c</strong></p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;   // exit</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;    // O_WRONLY</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;time.h&gt;     // time</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> fd;<br><span class="hljs-keyword">int</span> n, i;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">1024</span>];<br><span class="hljs-keyword">time_t</span> tp;<br><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"I am %d process.\n"</span>, getpid()); <span class="hljs-comment">// 说明进程ID</span><br><br><span class="hljs-keyword">if</span>((fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">"fifo1"</span>, O_WRONLY)) &lt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 以写打开一个FIFO </span><br>&#123;<br>perror(<span class="hljs-string">"Open FIFO Failed"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">for</span>(i=<span class="hljs-number">0</span>; i&lt;<span class="hljs-number">10</span>; ++i)<br>&#123;<br>time(&amp;tp);  <span class="hljs-comment">// 取系统当前时间</span><br>n=<span class="hljs-built_in">sprintf</span>(buf,<span class="hljs-string">"Process %d's time is %s"</span>,getpid(),ctime(&amp;tp));<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Send message: %s"</span>, buf); <span class="hljs-comment">// 打印</span><br><span class="hljs-keyword">if</span>(<span class="hljs-built_in">write</span>(fd, buf, n+<span class="hljs-number">1</span>) &lt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 写入到FIFO中</span><br>&#123;<br>perror(<span class="hljs-string">"Write FIFO Failed"</span>);<br><span class="hljs-built_in">close</span>(fd);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br>sleep(<span class="hljs-number">1</span>);  <span class="hljs-comment">// 休眠1秒</span><br>&#125;<br><br><span class="hljs-built_in">close</span>(fd);  <span class="hljs-comment">// 关闭FIFO文件</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>read_fifo.c</strong></p><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;errno.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;fcntl.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/stat.h&gt;</span></span><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> fd;<br><span class="hljs-keyword">int</span> len;<br><span class="hljs-keyword">char</span> buf[<span class="hljs-number">1024</span>];<br><br><span class="hljs-keyword">if</span>(mkfifo(<span class="hljs-string">"fifo1"</span>, <span class="hljs-number">0666</span>) &lt; <span class="hljs-number">0</span> &amp;&amp; errno!=EEXIST) <span class="hljs-comment">// 创建FIFO管道</span><br>perror(<span class="hljs-string">"Create FIFO Failed"</span>);<br><br><span class="hljs-keyword">if</span>((fd = <span class="hljs-built_in">open</span>(<span class="hljs-string">"fifo1"</span>, O_RDONLY)) &lt; <span class="hljs-number">0</span>)  <span class="hljs-comment">// 以读打开FIFO</span><br>&#123;<br>perror(<span class="hljs-string">"Open FIFO Failed"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-keyword">while</span>((len = <span class="hljs-built_in">read</span>(fd, buf, <span class="hljs-number">1024</span>)) &gt; <span class="hljs-number">0</span>) <span class="hljs-comment">// 读取FIFO管道</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Read message: %s"</span>, buf);<br><br><span class="hljs-built_in">close</span>(fd);  <span class="hljs-comment">// 关闭FIFO文件</span><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><p>在两个终端里用 gcc 分别编译运行上面两个文件，可以看到输出结果如下：</p><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[songlee@localhost]$ ./write_fifo <br>I am <span class="hljs-number">5954</span> <span class="hljs-keyword">process</span>.<br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">28</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">29</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">30</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">31</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">32</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">33</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">34</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">35</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">36</span> <span class="hljs-number">2015</span><br>Send message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">37</span> <span class="hljs-number">2015</span><br></code></pre></div></td></tr></table></figure><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">[songlee@localhost]$ ./read_fifo <br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">28</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">29</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">30</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">31</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">32</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">33</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">34</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">35</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">36</span> <span class="hljs-number">2015</span><br>Read message: <span class="hljs-keyword">Process</span> <span class="hljs-number">5954</span><span class="hljs-symbol">'s</span> <span class="hljs-built_in">time</span> <span class="hljs-keyword">is</span> Mon Apr <span class="hljs-number">20</span> <span class="hljs-number">12</span>:<span class="hljs-number">37</span>:<span class="hljs-number">37</span> <span class="hljs-number">2015</span><br></code></pre></div></td></tr></table></figure><p>上述例子可以扩展成 客户进程—服务器进程 通信的实例，<code>write_fifo</code>的作用类似于客户端，可以打开多个客户端向一个服务器发送请求信息，<code>read_fifo</code>类似于服务器，它适时监控着FIFO的读端，当有数据时，读出并进行处理，但是有一个关键的问题是，每一个客户端必须预先知道服务器提供的FIFO接口，下图显示了这种安排：</p><p><a href="http://img.blog.csdn.net/20150420131002360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" target="_blank" rel="noopener"><img src="http://img.blog.csdn.net/20150420131002360?watermark/2/text/aHR0cDovL2Jsb2cuY3Nkbi5uZXQvbGlzb25nbGlzb25nbGlzb25n/font/5a6L5L2T/fontsize/400/fill/I0JBQkFCMA==/dissolve/70/gravity/Center" alt="img"></a></p><h2 id="三、消息队列"><a href="#三、消息队列" class="headerlink" title="三、消息队列"></a>三、消息队列</h2><p><strong>消息队列</strong>，是消息的链接表，存放在内核中。一个消息队列由一个标识符（即队列ID）来标识。</p><h3 id="1、特点-1"><a href="#1、特点-1" class="headerlink" title="1、特点"></a>1、特点</h3><ol><li>消息队列是面向记录的，其中的消息具有特定的格式以及特定的优先级。</li><li>消息队列独立于发送与接收进程。进程终止时，消息队列及其内容并不会被删除。</li><li>消息队列可以实现消息的随机查询,消息不一定要以先进先出的次序读取,也可以按消息的类型读取。</li></ol><h3 id="2、原型-1"><a href="#2、原型-1" class="headerlink" title="2、原型"></a>2、原型</h3><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><span class="hljs-comment">// 创建或打开消息队列：成功返回队列ID，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgget</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">// 添加消息：成功返回0，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgsnd</span><span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>, <span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">// 读取消息：成功返回消息数据的长度，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgrcv</span><span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">void</span> *ptr, <span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>, <span class="hljs-keyword">long</span> type,<span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">// 控制消息队列：成功返回0，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">msgctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> msqid, <span class="hljs-keyword">int</span> cmd, struct msqid_ds *buf)</span></span>;<br></code></pre></div></td></tr></table></figure><p>在以下两种情况下，<code>msgget</code>将创建一个新的消息队列：</p><ul><li>如果没有与键值key相对应的消息队列，并且flag中包含了<code>IPC_CREAT</code>标志位。</li><li>key参数为<code>IPC_PRIVATE</code>。</li></ul><p>函数<code>msgrcv</code>在读取消息队列时，type参数有下面几种情况：</p><ul><li><code>type == 0</code>，返回队列中的第一个消息；</li><li><code>type &gt; 0</code>，返回队列中消息类型为 type 的第一个消息；</li><li><code>type &lt; 0</code>，返回队列中消息类型值小于或等于 type 绝对值的消息，如果有多个，则取类型值最小的消息。</li></ul><p>可以看出，type值非 0 时用于以非先进先出次序读消息。也可以把 type 看做优先级的权值。（其他的参数解释，请自行Google之）</p><h3 id="3、例子-2"><a href="#3、例子-2" class="headerlink" title="3、例子"></a>3、例子</h3><p>下面写了一个简单的使用消息队列进行IPC的例子，服务端程序一直在等待特定类型的消息，当收到该类型的消息以后，发送另一种特定类型的消息作为反馈，客户端读取该反馈并打印出来。</p><ul><li><p><strong>msg_server.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-comment">// 用于创建一个唯一的key</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MSG_FILE <span class="hljs-meta-string">"/etc/passwd"</span></span><br><br><span class="hljs-comment">// 消息结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> &#123;</span><br><span class="hljs-keyword">long</span> mtype;<br><span class="hljs-keyword">char</span> mtext[<span class="hljs-number">256</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> msqid;<br><span class="hljs-keyword">key_t</span> key;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> <span class="hljs-title">msg</span>;</span><br><br><span class="hljs-comment">// 获取key值</span><br><span class="hljs-keyword">if</span>((key = ftok(MSG_FILE,<span class="hljs-string">'z'</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">"ftok error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 打印key值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Message Queue - Server key is: %d.\n"</span>, key);<br><br><span class="hljs-comment">// 创建消息队列</span><br><span class="hljs-keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="hljs-number">0777</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"msgget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 打印消息队列ID及进程ID</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"My msqid is: %d.\n"</span>, msqid);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"My pid is: %d.\n"</span>, getpid());<br><br><span class="hljs-comment">// 循环读取消息</span><br><span class="hljs-keyword">for</span>(;;) <br>&#123;<br>msgrcv(msqid, &amp;msg, <span class="hljs-number">256</span>, <span class="hljs-number">888</span>, <span class="hljs-number">0</span>);<span class="hljs-comment">// 返回类型为888的第一个消息</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Server: receive msg.mtext is: %s.\n"</span>, msg.mtext);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Server: receive msg.mtype is: %d.\n"</span>, msg.mtype);<br><br>msg.mtype = <span class="hljs-number">999</span>; <span class="hljs-comment">// 客户端接收的消息类型</span><br><span class="hljs-built_in">sprintf</span>(msg.mtext, <span class="hljs-string">"hello, I'm server %d"</span>, getpid());<br>msgsnd(msqid, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg.mtext), <span class="hljs-number">0</span>);<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li><li><p><strong>msg_client.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/msg.h&gt;</span></span><br><br><span class="hljs-comment">// 用于创建一个唯一的key</span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">define</span> MSG_FILE <span class="hljs-meta-string">"/etc/passwd"</span></span><br><br><span class="hljs-comment">// 消息结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> &#123;</span><br><span class="hljs-keyword">long</span> mtype;<br><span class="hljs-keyword">char</span> mtext[<span class="hljs-number">256</span>];<br>&#125;;<br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> msqid;<br><span class="hljs-keyword">key_t</span> key;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> <span class="hljs-title">msg</span>;</span><br><br><span class="hljs-comment">// 获取key值</span><br><span class="hljs-keyword">if</span> ((key = ftok(MSG_FILE, <span class="hljs-string">'z'</span>)) &lt; <span class="hljs-number">0</span>) <br>&#123;<br>perror(<span class="hljs-string">"ftok error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 打印key值</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Message Queue - Client key is: %d.\n"</span>, key);<br><br><span class="hljs-comment">// 打开消息队列</span><br><span class="hljs-keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="hljs-number">0777</span>)) == <span class="hljs-number">-1</span>) <br>&#123;<br>perror(<span class="hljs-string">"msgget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 打印消息队列ID及进程ID</span><br>    <span class="hljs-built_in">printf</span>(<span class="hljs-string">"My msqid is: %d.\n"</span>, msqid);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"My pid is: %d.\n"</span>, getpid());<br><br><span class="hljs-comment">// 添加消息，类型为888</span><br>msg.mtype = <span class="hljs-number">888</span>;<br><span class="hljs-built_in">sprintf</span>(msg.mtext, <span class="hljs-string">"hello, I'm client %d"</span>, getpid());<br>msgsnd(msqid, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg.mtext), <span class="hljs-number">0</span>);<br><br><span class="hljs-comment">// 读取类型为777的消息</span><br>msgrcv(msqid, &amp;msg, <span class="hljs-number">256</span>, <span class="hljs-number">999</span>, <span class="hljs-number">0</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Client: receive msg.mtext is: %s.\n"</span>, msg.mtext);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Client: receive msg.mtype is: %d.\n"</span>, msg.mtype);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure></li></ul><h2 id="四、信号量"><a href="#四、信号量" class="headerlink" title="四、信号量"></a>四、信号量</h2><p><strong>信号量（semaphore）</strong>与已经介绍过的 IPC 结构不同，它是一个计数器。信号量用于实现进程间的互斥与同步，而不是用于存储进程间通信数据。</p><h3 id="1、特点-2"><a href="#1、特点-2" class="headerlink" title="1、特点"></a>1、特点</h3><ol><li>信号量用于进程间同步，若要在进程间传递数据需要结合<em>共享内存</em>。</li><li>信号量基于操作系统的 PV 操作，程序对信号量的操作都是原子操作。</li><li>每次对信号量的 PV 操作不仅限于对信号量值加 1 或减 1，而且可以加减任意正整数。</li><li>支持信号量组。</li></ol><h3 id="2、原型-2"><a href="#2、原型-2" class="headerlink" title="2、原型"></a>2、原型</h3><p>最简单的信号量是只能取 0 和 1 的变量，这也是信号量最常见的一种形式，叫做<strong>二值信号量（Binary Semaphore）</strong>。而可以取多个正整数的信号量被称为通用信号量。</p><p>Linux 下的信号量函数都是在通用的信号量数组上进行操作，而不是在一个单一的二值信号量上进行操作。</p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><span class="hljs-comment">// 创建或获取一个信号量组：若成功返回信号量集ID，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semget</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">int</span> num_sems, <span class="hljs-keyword">int</span> sem_flags)</span></span>;<br><span class="hljs-comment">// 对信号量组进行操作，改变信号量的值：成功返回0，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semop</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid, struct sembuf semoparray[], <span class="hljs-keyword">size_t</span> numops)</span></span>;  <br><span class="hljs-comment">// 控制信号量的相关信息</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">semctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> semid, <span class="hljs-keyword">int</span> sem_num, <span class="hljs-keyword">int</span> cmd, ...)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当<code>semget</code>创建新的信号量集合时，必须指定集合中信号量的个数（即<code>num_sems</code>），通常为1； 如果是引用一个现有的集合，则将<code>num_sems</code>指定为 0 。</p><p>在<code>semop</code>函数中，<code>sembuf</code>结构的定义如下：</p><figure class="highlight cs"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">struct</span> sembuf <br>&#123;<br>    <span class="hljs-keyword">short</span> sem_num; <span class="hljs-comment">// 信号量组中对应的序号，0～sem_nums-1</span><br>    <span class="hljs-keyword">short</span> sem_op;  <span class="hljs-comment">// 信号量值在一次操作中的改变量</span><br>    <span class="hljs-keyword">short</span> sem_flg; <span class="hljs-comment">// IPC_NOWAIT, SEM_UNDO</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>其中 sem_op 是一次操作中的信号量的改变量：</p><ul><li><p>若<code>sem_op &gt; 0</code>，表示进程释放相应的资源数，将 sem_op 的值加到信号量的值上。如果有进程正在休眠等待此信号量，则换行它们。</p></li><li><p>若<code>sem_op &lt; 0</code>，请求 sem_op 的绝对值的资源。</p><ul><li><p>如果相应的资源数可以满足请求，则将该信号量的值减去sem_op的绝对值，函数成功返回。</p></li><li><p>当相应的资源数不能满足请求时，这个操作与</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">sem_flg</span><br></code></pre></div></td></tr></table></figure><p>有关。</p><ul><li><p>sem_flg 指定<code>IPC_NOWAIT</code>，则semop函数出错返回<code>EAGAIN</code>。</p></li><li><p>sem_flg 没有指定</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">IPC_NOWAIT</span><br></code></pre></div></td></tr></table></figure><p>，则将该信号量的semncnt值加1，然后进程挂起直到下述情况发生：</p><ol><li>当相应的资源数可以满足请求，此信号量的semncnt值减1，该信号量的值减去sem_op的绝对值。成功返回；</li><li>此信号量被删除，函数smeop出错返回EIDRM；</li><li>进程捕捉到信号，并从信号处理函数返回，此情况下将此信号量的semncnt值减1，函数semop出错返回EINTR</li></ol></li></ul></li></ul></li><li><p>若<code>sem_op == 0</code>，进程阻塞直到信号量的相应值为0：</p><ul><li><p>当信号量已经为0，函数立即返回。</p></li><li><p>如果信号量的值不为0，则依据</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">sem_flg</span><br></code></pre></div></td></tr></table></figure><p>决定函数动作：</p><ul><li><p>sem_flg指定<code>IPC_NOWAIT</code>，则出错返回<code>EAGAIN</code>。</p></li><li><p>sem_flg没有指定</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">IPC_NOWAIT</span><br></code></pre></div></td></tr></table></figure><p>，则将该信号量的semncnt值加1，然后进程挂起直到下述情况发生：</p><ol><li>信号量值为0，将信号量的semzcnt的值减1，函数semop成功返回；</li><li>此信号量被删除，函数smeop出错返回EIDRM；</li><li>进程捕捉到信号，并从信号处理函数返回，在此情况将此信号量的semncnt值减1，函数semop出错返回EINTR</li></ol></li></ul></li></ul></li></ul><p>在<code>semctl</code>函数中的命令有多种，这里就说两个常用的：</p><ul><li><code>SETVAL</code>：用于初始化信号量为一个已知的值。所需要的值作为联合semun的val成员来传递。在信号量第一次使用之前需要设置信号量。</li><li><code>IPC_RMID</code>：删除一个信号量集合。如果不删除信号量，它将继续在系统中存在，即使程序已经退出，它可能在你下次运行此程序时引发问题，而且信号量是一种有限的资源。</li></ul><h3 id="3、例子-3"><a href="#3、例子-3" class="headerlink" title="3、例子"></a>3、例子</h3><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/sem.h&gt;</span></span><br><br><span class="hljs-comment">// 联合体，用于semctl初始化</span><br><span class="hljs-keyword">union</span> semun<br>&#123;<br><span class="hljs-keyword">int</span>              val; <span class="hljs-comment">/*for SETVAL*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span><br><span class="hljs-keyword">unsigned</span> short  *<span class="hljs-built_in">array</span>;<br>&#125;;<br><br><span class="hljs-comment">// 初始化信号量</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_sem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id, <span class="hljs-keyword">int</span> value)</span><br></span>&#123;<br><span class="hljs-keyword">union</span> semun tmp;<br>tmp.val = value;<br><span class="hljs-keyword">if</span>(semctl(sem_id, <span class="hljs-number">0</span>, SETVAL, tmp) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"Init Semaphore Error"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// P操作:</span><br><span class="hljs-comment">//若信号量值为1，获取资源并将信号量值-1 </span><br><span class="hljs-comment">//若信号量值为0，进程挂起等待</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_p</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>sbuf.sem_op = <span class="hljs-number">-1</span>; <span class="hljs-comment">/*P操作*/</span><br>sbuf.sem_flg = SEM_UNDO;<br><br><span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"P operation Error"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// V操作：</span><br><span class="hljs-comment">//释放资源并将信号量值+1</span><br><span class="hljs-comment">//如果有进程正在挂起等待，则唤醒它们</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_v</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>sbuf.sem_op = <span class="hljs-number">1</span>;  <span class="hljs-comment">/*V操作*/</span><br>sbuf.sem_flg = SEM_UNDO;<br><br><span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"V operation Error"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除信号量集</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del_sem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br><span class="hljs-keyword">union</span> semun tmp;<br><span class="hljs-keyword">if</span>(semctl(sem_id, <span class="hljs-number">0</span>, IPC_RMID, tmp) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"Delete Semaphore Error"</span>);<br><span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">int</span> sem_id;  <span class="hljs-comment">// 信号量集ID</span><br><span class="hljs-keyword">key_t</span> key;  <br><span class="hljs-keyword">pid_t</span> pid;<br><br><span class="hljs-comment">// 获取key值</span><br><span class="hljs-keyword">if</span>((key = ftok(<span class="hljs-string">"."</span>, <span class="hljs-string">'z'</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">"ftok error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建信号量集，其中只有一个信号量</span><br><span class="hljs-keyword">if</span>((sem_id = semget(key, <span class="hljs-number">1</span>, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"semget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 初始化：初值设为0资源被占用</span><br>init_sem(sem_id, <span class="hljs-number">0</span>);<br><br><span class="hljs-keyword">if</span>((pid = fork()) == <span class="hljs-number">-1</span>)<br>perror(<span class="hljs-string">"Fork Error"</span>);<br><span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(pid == <span class="hljs-number">0</span>) <span class="hljs-comment">/*子进程*/</span> <br>&#123;<br>sleep(<span class="hljs-number">2</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Process child: pid=%d\n"</span>, getpid());<br>sem_v(sem_id);  <span class="hljs-comment">/*释放资源*/</span><br>&#125;<br><span class="hljs-keyword">else</span>  <span class="hljs-comment">/*父进程*/</span><br>&#123;<br>sem_p(sem_id);   <span class="hljs-comment">/*等待资源*/</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Process father: pid=%d\n"</span>, getpid());<br>sem_v(sem_id);   <span class="hljs-comment">/*释放资源*/</span><br>del_sem(sem_id); <span class="hljs-comment">/*删除信号量集*/</span><br>&#125;<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面的例子如果不加信号量，则父进程会先执行完毕。这里加了信号量让父进程等待子进程执行完以后再执行。</p><h2 id="五、共享内存"><a href="#五、共享内存" class="headerlink" title="五、共享内存"></a>五、共享内存</h2><p><strong>共享内存（Shared Memory）</strong>，指两个或多个进程共享一个给定的存储区。</p><h3 id="1、特点-3"><a href="#1、特点-3" class="headerlink" title="1、特点"></a>1、特点</h3><ol><li>共享内存是最快的一种 IPC，因为进程是直接对内存进行存取。</li><li>因为多个进程可以同时操作，所以需要进行同步。</li><li>信号量+共享内存通常结合在一起使用，信号量用来同步对共享内存的访问。</li></ol><h3 id="2、原型-3"><a href="#2、原型-3" class="headerlink" title="2、原型"></a>2、原型</h3><figure class="highlight arduino"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span> <span class="hljs-meta-string">&lt;sys/shm.h&gt;</span></span><br><span class="hljs-comment">// 创建或获取一个共享内存：成功返回共享内存ID，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmget</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key, <span class="hljs-keyword">size_t</span> <span class="hljs-built_in">size</span>, <span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">// 连接共享内存到当前进程的地址空间：成功返回指向共享内存的指针，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">void</span> *<span class="hljs-title">shmat</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shm_id, <span class="hljs-keyword">const</span> <span class="hljs-keyword">void</span> *addr, <span class="hljs-keyword">int</span> flag)</span></span>;<br><span class="hljs-comment">// 断开与共享内存的连接：成功返回0，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmdt</span><span class="hljs-params">(<span class="hljs-keyword">void</span> *addr)</span></span>; <br><span class="hljs-comment">// 控制共享内存的相关信息：成功返回0，失败返回-1</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">shmctl</span><span class="hljs-params">(<span class="hljs-keyword">int</span> shm_id, <span class="hljs-keyword">int</span> cmd, struct shmid_ds *buf)</span></span>;<br></code></pre></div></td></tr></table></figure><p>当用<code>shmget</code>函数创建一段共享内存时，必须指定其 size；而如果引用一个已存在的共享内存，则将 size 指定为0 。</p><p>当一段共享内存被创建以后，它并不能被任何进程访问。必须使用<code>shmat</code>函数连接该共享内存到当前进程的地址空间，连接成功后把共享内存区对象映射到调用进程的地址空间，随后可像本地空间一样访问。</p><p><code>shmdt</code>函数是用来断开<code>shmat</code>建立的连接的。注意，这并不是从系统中删除该共享内存，只是当前进程不能再访问该共享内存而已。</p><p><code>shmctl</code>函数可以对共享内存执行多种操作，根据参数 cmd 执行相应的操作。常用的是<code>IPC_RMID</code>（从系统中删除该共享内存）。</p><h3 id="3、例子-4"><a href="#3、例子-4" class="headerlink" title="3、例子"></a>3、例子</h3><p>下面这个例子，使用了<strong>【共享内存+信号量+消息队列】</strong>的组合来实现服务器进程与客户进程间的通信。</p><ul><li>共享内存用来传递数据；</li><li>信号量用来同步；</li><li>消息队列用来 在客户端修改了共享内存后 通知服务器读取。</li></ul><p><strong>Server.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/shm.h&gt;  // shared memory</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/sem.h&gt;  // semaphore</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/msg.h&gt;  // message queue</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;   // memcpy</span></span><br><br><span class="hljs-comment">// 消息队列结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> &#123;</span><br>    <span class="hljs-keyword">long</span> mtype;<br>    <span class="hljs-keyword">char</span> mtext;<br>&#125;;<br><br><span class="hljs-comment">// 联合体，用于semctl初始化</span><br><span class="hljs-keyword">union</span> semun<br>&#123;<br>    <span class="hljs-keyword">int</span>              val; <span class="hljs-comment">/*for SETVAL*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span><br>    <span class="hljs-keyword">unsigned</span> short  *<span class="hljs-built_in">array</span>;<br>&#125;;<br><br><span class="hljs-comment">// 初始化信号量</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">init_sem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id, <span class="hljs-keyword">int</span> value)</span><br></span>&#123;<br>    <span class="hljs-keyword">union</span> semun tmp;<br>    tmp.val = value;<br>    <span class="hljs-keyword">if</span>(semctl(sem_id, <span class="hljs-number">0</span>, SETVAL, tmp) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"Init Semaphore Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// P操作:</span><br><span class="hljs-comment">//  若信号量值为1，获取资源并将信号量值-1 </span><br><span class="hljs-comment">//  若信号量值为0，进程挂起等待</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_p</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>    sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>    sbuf.sem_op = <span class="hljs-number">-1</span>; <span class="hljs-comment">/*P操作*/</span><br>    sbuf.sem_flg = SEM_UNDO;<br><br>    <span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"P operation Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// V操作：</span><br><span class="hljs-comment">//  释放资源并将信号量值+1</span><br><span class="hljs-comment">//  如果有进程正在挂起等待，则唤醒它们</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_v</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>    sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>    sbuf.sem_op = <span class="hljs-number">1</span>;  <span class="hljs-comment">/*V操作*/</span><br>    sbuf.sem_flg = SEM_UNDO;<br><br>    <span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"V operation Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 删除信号量集</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">del_sem</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br>    <span class="hljs-keyword">union</span> semun tmp;<br>    <span class="hljs-keyword">if</span>(semctl(sem_id, <span class="hljs-number">0</span>, IPC_RMID, tmp) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"Delete Semaphore Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// 创建一个信号量集</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">creat_sem</span><span class="hljs-params">(<span class="hljs-keyword">key_t</span> key)</span><br></span>&#123;<br><span class="hljs-keyword">int</span> sem_id;<br><span class="hljs-keyword">if</span>((sem_id = semget(key, <span class="hljs-number">1</span>, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"semget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">-1</span>);<br>&#125;<br>init_sem(sem_id, <span class="hljs-number">1</span>);  <span class="hljs-comment">/*初值设为1资源未占用*/</span><br><span class="hljs-keyword">return</span> sem_id;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">key_t</span> key;<br><span class="hljs-keyword">int</span> shmid, semid, msqid;<br><span class="hljs-keyword">char</span> *shm;<br><span class="hljs-keyword">char</span> data[] = <span class="hljs-string">"this is server"</span>;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">shmid_ds</span> <span class="hljs-title">buf1</span>;</span>  <span class="hljs-comment">/*用于删除共享内存*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msqid_ds</span> <span class="hljs-title">buf2</span>;</span>  <span class="hljs-comment">/*用于删除消息队列*/</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> <span class="hljs-title">msg</span>;</span>  <span class="hljs-comment">/*消息队列用于通知对方更新了共享内存*/</span><br><br><span class="hljs-comment">// 获取key值</span><br><span class="hljs-keyword">if</span>((key = ftok(<span class="hljs-string">"."</span>, <span class="hljs-string">'z'</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">"ftok error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建共享内存</span><br><span class="hljs-keyword">if</span>((shmid = shmget(key, <span class="hljs-number">1024</span>, IPC_CREAT|<span class="hljs-number">0666</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"Create Shared Memory Error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 连接共享内存</span><br>shm = (<span class="hljs-keyword">char</span>*)shmat(shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>((<span class="hljs-keyword">int</span>)shm == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"Attach Shared Memory Error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><br><span class="hljs-comment">// 创建消息队列</span><br><span class="hljs-keyword">if</span> ((msqid = msgget(key, IPC_CREAT|<span class="hljs-number">0777</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"msgget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建信号量</span><br>semid = creat_sem(key);<br><br><span class="hljs-comment">// 读数据</span><br><span class="hljs-keyword">while</span>(<span class="hljs-number">1</span>)<br>&#123;<br>msgrcv(msqid, &amp;msg, <span class="hljs-number">1</span>, <span class="hljs-number">888</span>, <span class="hljs-number">0</span>); <span class="hljs-comment">/*读取类型为888的消息*/</span><br><span class="hljs-keyword">if</span>(msg.mtext == <span class="hljs-string">'q'</span>)  <span class="hljs-comment">/*quit - 跳出循环*/</span> <br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">if</span>(msg.mtext == <span class="hljs-string">'r'</span>)  <span class="hljs-comment">/*read - 读共享内存*/</span><br>&#123;<br>sem_p(semid);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"%s\n"</span>,shm);<br>sem_v(semid);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 断开连接</span><br>shmdt(shm);<br><br>    <span class="hljs-comment">/*删除共享内存、消息队列、信号量*/</span><br>shmctl(shmid, IPC_RMID, &amp;buf1);<br>msgctl(msqid, IPC_RMID, &amp;buf2);<br>del_sem(semid);<br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p><strong>Client.c</strong></p><figure class="highlight cpp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdio.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;stdlib.h&gt;</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/shm.h&gt;  // shared memory</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/sem.h&gt;  // semaphore</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;sys/msg.h&gt;  // message queue</span></span><br><span class="hljs-meta">#<span class="hljs-meta-keyword">include</span><span class="hljs-meta-string">&lt;string.h&gt;   // memcpy</span></span><br><br><span class="hljs-comment">// 消息队列结构</span><br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> &#123;</span><br>    <span class="hljs-keyword">long</span> mtype;<br>    <span class="hljs-keyword">char</span> mtext;<br>&#125;;<br><br><span class="hljs-comment">// 联合体，用于semctl初始化</span><br><span class="hljs-keyword">union</span> semun<br>&#123;<br>    <span class="hljs-keyword">int</span>              val; <span class="hljs-comment">/*for SETVAL*/</span><br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">semid_ds</span> *<span class="hljs-title">buf</span>;</span><br>    <span class="hljs-keyword">unsigned</span> short  *<span class="hljs-built_in">array</span>;<br>&#125;;<br><br><span class="hljs-comment">// P操作:</span><br><span class="hljs-comment">//  若信号量值为1，获取资源并将信号量值-1 </span><br><span class="hljs-comment">//  若信号量值为0，进程挂起等待</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_p</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>    sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>    sbuf.sem_op = <span class="hljs-number">-1</span>; <span class="hljs-comment">/*P操作*/</span><br>    sbuf.sem_flg = SEM_UNDO;<br><br>    <span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"P operation Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><span class="hljs-comment">// V操作：</span><br><span class="hljs-comment">//  释放资源并将信号量值+1</span><br><span class="hljs-comment">//  如果有进程正在挂起等待，则唤醒它们</span><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">sem_v</span><span class="hljs-params">(<span class="hljs-keyword">int</span> sem_id)</span><br></span>&#123;<br>    <span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">sembuf</span> <span class="hljs-title">sbuf</span>;</span><br>    sbuf.sem_num = <span class="hljs-number">0</span>; <span class="hljs-comment">/*序号*/</span><br>    sbuf.sem_op = <span class="hljs-number">1</span>;  <span class="hljs-comment">/*V操作*/</span><br>    sbuf.sem_flg = SEM_UNDO;<br><br>    <span class="hljs-keyword">if</span>(semop(sem_id, &amp;sbuf, <span class="hljs-number">1</span>) == <span class="hljs-number">-1</span>)<br>    &#123;<br>        perror(<span class="hljs-string">"V operation Error"</span>);<br>        <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span>;<br>    &#125;<br>    <span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br><br><br><span class="hljs-function"><span class="hljs-keyword">int</span> <span class="hljs-title">main</span><span class="hljs-params">()</span><br></span>&#123;<br><span class="hljs-keyword">key_t</span> key;<br><span class="hljs-keyword">int</span> shmid, semid, msqid;<br><span class="hljs-keyword">char</span> *shm;<br><span class="hljs-class"><span class="hljs-keyword">struct</span> <span class="hljs-title">msg_form</span> <span class="hljs-title">msg</span>;</span><br><span class="hljs-keyword">int</span> flag = <span class="hljs-number">1</span>; <span class="hljs-comment">/*while循环条件*/</span><br><br><span class="hljs-comment">// 获取key值</span><br><span class="hljs-keyword">if</span>((key = ftok(<span class="hljs-string">"."</span>, <span class="hljs-string">'z'</span>)) &lt; <span class="hljs-number">0</span>)<br>&#123;<br>perror(<span class="hljs-string">"ftok error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取共享内存</span><br><span class="hljs-keyword">if</span>((shmid = shmget(key, <span class="hljs-number">1024</span>, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"shmget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 连接共享内存</span><br>shm = (<span class="hljs-keyword">char</span>*)shmat(shmid, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>);<br><span class="hljs-keyword">if</span>((<span class="hljs-keyword">int</span>)shm == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"Attach Shared Memory Error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 创建消息队列</span><br><span class="hljs-keyword">if</span> ((msqid = msgget(key, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"msgget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 获取信号量</span><br><span class="hljs-keyword">if</span>((semid = semget(key, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>)) == <span class="hljs-number">-1</span>)<br>&#123;<br>perror(<span class="hljs-string">"semget error"</span>);<br><span class="hljs-built_in">exit</span>(<span class="hljs-number">1</span>);<br>&#125;<br><br><span class="hljs-comment">// 写数据</span><br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"***************************************\n"</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"*                 IPC                 *\n"</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"*    Input r to send data to server.  *\n"</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"*    Input q to quit.                 *\n"</span>);<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"***************************************\n"</span>);<br><br><span class="hljs-keyword">while</span>(flag)<br>&#123;<br><span class="hljs-keyword">char</span> c;<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Please input command: "</span>);<br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%c"</span>, &amp;c);<br><span class="hljs-keyword">switch</span>(c)<br>&#123;<br><span class="hljs-keyword">case</span> <span class="hljs-string">'r'</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Data to send: "</span>);<br>sem_p(semid);  <span class="hljs-comment">/*访问资源*/</span><br><span class="hljs-built_in">scanf</span>(<span class="hljs-string">"%s"</span>, shm);<br>sem_v(semid);  <span class="hljs-comment">/*释放资源*/</span><br><span class="hljs-comment">/*清空标准输入缓冲区*/</span><br><span class="hljs-keyword">while</span>((c=getchar())!=<span class="hljs-string">'\n'</span> &amp;&amp; c!=EOF);<br>msg.mtype = <span class="hljs-number">888</span>;  <br>msg.mtext = <span class="hljs-string">'r'</span>;  <span class="hljs-comment">/*发送消息通知服务器读数据*/</span><br>msgsnd(msqid, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg.mtext), <span class="hljs-number">0</span>);<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">case</span> <span class="hljs-string">'q'</span>:<br>msg.mtype = <span class="hljs-number">888</span>;<br>msg.mtext = <span class="hljs-string">'q'</span>;<br>msgsnd(msqid, &amp;msg, <span class="hljs-keyword">sizeof</span>(msg.mtext), <span class="hljs-number">0</span>);<br>flag = <span class="hljs-number">0</span>;<br><span class="hljs-keyword">break</span>;<br><span class="hljs-keyword">default</span>:<br><span class="hljs-built_in">printf</span>(<span class="hljs-string">"Wrong input!\n"</span>);<br><span class="hljs-comment">/*清空标准输入缓冲区*/</span><br><span class="hljs-keyword">while</span>((c=getchar())!=<span class="hljs-string">'\n'</span> &amp;&amp; c!=EOF);<br>&#125;<br>&#125;<br><br><span class="hljs-comment">// 断开连接</span><br>shmdt(shm);<br><br><span class="hljs-keyword">return</span> <span class="hljs-number">0</span>;<br>&#125;<br></code></pre></div></td></tr></table></figure><p>注意：当<code>scanf()</code>输入字符或字符串时，缓冲区中遗留下了<code>\n</code>，所以每次输入操作后都需要清空标准输入的缓冲区。但是由于 gcc 编译器不支持<code>fflush(stdin)</code>（它只是标准C的扩展），所以我们使用了替代方案：</p><figure class="highlight lisp"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">while((<span class="hljs-name">c=getchar</span>())!='\n' <span class="hljs-symbol">&amp;&amp;</span> c!=EOF)<span class="hljs-comment">;</span><br></code></pre></div></td></tr></table></figure><p>注释已经很详细了，所以代码的其他部分我就不解释了，下面是运行结果截图</p>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>14. 不修改数组找出重复的数字</title>
      <link href="2019/03/08/14.%20%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/"/>
      <url>2019/03/08/14.%20%E4%B8%8D%E4%BF%AE%E6%94%B9%E6%95%B0%E7%BB%84%E6%89%BE%E5%87%BA%E9%87%8D%E5%A4%8D%E7%9A%84%E6%95%B0%E5%AD%97/</url>
      
        <content type="html"><![CDATA[<h2 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h2><p>给定一个长度为 n+1n+1 的数组<code>nums</code>，数组中所有的数均在 1∼n1∼n 的范围内，其中 n≥1n≥1。</p><p>请找出数组中任意一个重复的数，但不能修改输入的数组。<br><a id="more"></a></p><h3 id="样例"><a href="#样例" class="headerlink" title="样例"></a>样例</h3><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs text">给定 nums = [2, 3, 5, 4, 3, 2, 6, 7]。<br><br>返回 2 或 3。<br></code></pre></div></td></tr></table></figure><p><strong>思考题</strong>：如果只能使用 O(1)O(1) 的额外空间，该怎么做呢？</p><h2 id="解决方案："><a href="#解决方案：" class="headerlink" title="解决方案："></a>解决方案：</h2><p>(分治，抽屉原理)<br>这道题目主要应用了抽屉原理和分治的思想。</p><p><code>抽屉原理</code>：n+1 个苹果放在 n 个抽屉里，那么至少有一个抽屉中会放两个苹果。</p><p>用在这个题目中就是，一共有 n+1 个数，每个数的取值范围是1到n，所以至少会有一个数出现两次。</p><p>然后我们采用分治的思想，将每个数的取值的区间[1, n]划分成[1, n/2]和[n/2+1, n]两个子区间，然后分别统计两个区间中数的个数。<br>注意这里的区间是指 数的取值范围，而不是 数组下标。</p><p>划分之后，左右两个区间里一定至少存在一个区间，区间中数的个数大于区间长度。<br>这个可以用反证法来说明：如果两个区间中数的个数都小于等于区间长度，那么整个区间中数的个数就小于等于n，和有n+1个数矛盾。</p><p>因此我们可以把问题划归到左右两个子区间中的一个，而且由于区间中数的个数大于区间长度，根据抽屉原理，在这个子区间中一定存在某个数出现了两次。</p><p>依次类推，每次我们可以把区间长度缩小一半，直到区间长度为1时，我们就找到了答案。</p><p><code>复杂度分析</code></p><ul><li>时间复杂度：每次会将区间长度缩小一半，一共会缩小 O(logn)O(logn) 次。每次统计两个子区间中的数时需要遍历整个数组，时间复杂度是 O(n)O(n)。所以总时间复杂度是 O(nlogn)</li><li>空间复杂度：代码中没有用到额外的数组，所以额外的空间复杂度是 O(1)。</li></ul><p><code>python实现：</code></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">duplicateInArray</span><span class="hljs-params">(self, nums)</span>:</span><br>        <span class="hljs-string">"""<br>        :type nums: List[int]<br>        :rtype int<br>        """</span><br>        m = len(nums)<br>        startN = <span class="hljs-number">1</span>  <span class="hljs-comment"># 列表数值范围最小值</span><br>        endN = m  <span class="hljs-comment"># 列表数值范围最大值</span><br><br>        <span class="hljs-keyword">while</span> startN &lt;= endN:<br>            <span class="hljs-comment"># midN = (startN+endN) &gt;&gt; 1  # 二分法中间值</span><br>            midN = (startN+endN) // <span class="hljs-number">2</span><br>            numbers = <span class="hljs-number">0</span><br>            <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(m):<br>                <span class="hljs-keyword">if</span> (nums[i] &lt;= midN) &amp; (nums[i] &gt;= startN):<br>                    numbers += <span class="hljs-number">1</span><br>            <span class="hljs-comment"># 关键(midN - startN+1)，如果没有重复元素，startN与midN范围间相差的数字个数</span><br>            <span class="hljs-keyword">if</span> numbers &gt; (midN - startN+<span class="hljs-number">1</span>):<br>                startN, endN = startN, midN<br>            <span class="hljs-keyword">else</span>:<br>                startN, endN = midN+<span class="hljs-number">1</span>, endN<br>            <span class="hljs-keyword">if</span> startN == endN:  <span class="hljs-comment"># 最后判断数组出现的次数</span><br>                number = <span class="hljs-number">0</span><br>                <span class="hljs-keyword">for</span> j <span class="hljs-keyword">in</span> nums:<br>                    <span class="hljs-keyword">if</span> j == startN:<br>                        number += <span class="hljs-number">1</span><br>                <span class="hljs-keyword">if</span> number &gt; <span class="hljs-number">1</span>:<br>                    <span class="hljs-keyword">return</span> startN<br>                <span class="hljs-keyword">else</span>:<br>                    <span class="hljs-keyword">break</span><br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">test_dup</span><span class="hljs-params">()</span>:</span><br>    a = Solution()<br>    <span class="hljs-keyword">assert</span> a.duplicateInArray(nums=[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>]) == <span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>参考资料：</p><blockquote><p>yxc <a href="https://www.acwing.com/solution/acwing/content/693/" target="_blank" rel="noopener">https://www.acwing.com/solution/acwing/content/693/</a></p></blockquote>]]></content>
      
      
      <categories>
          
          <category> 计算机技术 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> 算法 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>19. 删除链表的倒数第N个节点</title>
      <link href="2019/01/31/19%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2019/01/31/19%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>给定一个链表，删除链表的倒数第 <em>n</em> 个节点，并且返回链表的头结点。<br><a id="more"></a></p><p><strong>示例：</strong></p><figure class="highlight clean"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">给定一个链表: <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">4</span>-&gt;<span class="hljs-number">5</span>, 和 n = <span class="hljs-number">2.</span><br><br>当删除了倒数第二个节点后，链表变为 <span class="hljs-number">1</span>-&gt;<span class="hljs-number">2</span>-&gt;<span class="hljs-number">3</span>-&gt;<span class="hljs-number">5.</span><br></code></pre></div></td></tr></table></figure><p><strong>说明：</strong></p><p>给定的 <em>n</em> 保证是有效的。</p><p><strong>进阶：</strong></p><p>你能尝试使用一趟扫描实现吗？</p><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="双指针的策略"><a href="#双指针的策略" class="headerlink" title="双指针的策略"></a>双指针的策略</h4><ul><li>设置快、慢两个节点</li><li>快节点向前走N步<ul><li>如果快节点向前走了N步，此时快节点本身已经为None，说明要删除的节点是头节点</li></ul></li><li>此时慢节点启动，一起向下遍历</li><li>当快节点遍历到最后一个节点时</li><li>慢节点的下一个节点，即是要被删除的节点</li></ul><p><strong><em>show me the code</em></strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span><span class="hljs-params">(object)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(self, head, n)</span>:</span><br>        <span class="hljs-string">"""<br>        :type head: ListNode<br>        :type n: int<br>        :rtype: ListNode<br>        """</span><br>        fast = slow = head<br>        <span class="hljs-keyword">for</span> _ <span class="hljs-keyword">in</span> range(n):<br>            fast = fast.next<br>        <span class="hljs-keyword">if</span> <span class="hljs-keyword">not</span> fast:<br>            <span class="hljs-keyword">return</span> head.next<br>        <span class="hljs-keyword">while</span> fast.next:<br>            fast = fast.next<br>            slow = slow.next<br>        slow.next = slow.next.next<br>        <span class="hljs-keyword">return</span> head<br></code></pre></div></td></tr></table></figure><h4 id="另一种巧妙的方式"><a href="#另一种巧妙的方式" class="headerlink" title="另一种巧妙的方式"></a>另一种巧妙的方式</h4><p>相当于使指针设置在了头结点前，消除了一些边界情况</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">removeNthFromEnd</span><span class="hljs-params">(self, head, n)</span>:</span><br>    slow = fast = self<br>    self.next = head<br>    <span class="hljs-keyword">while</span> fast.next:<br>        <span class="hljs-keyword">if</span> n:<br>            n -= <span class="hljs-number">1</span><br>        <span class="hljs-keyword">else</span>:<br>            slow = slow.next<br>        fast = fast.next<br>    slow.next = slow.next.next<br>    <span class="hljs-keyword">return</span> self.next<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的2019计划</title>
      <link href="2018/12/31/%E6%88%91%E7%9A%842019%E8%AE%A1%E5%88%92/"/>
      <url>2018/12/31/%E6%88%91%E7%9A%842019%E8%AE%A1%E5%88%92/</url>
      
        <content type="html"><![CDATA[<p>毕业后的第一年就这样匆匆而过，<code>interesting</code>的一年。<br>今年的目标，算下来应该是完成了80%的样子吧。<br>在2018年的最后一天，给自己立一些来年的flag吧:)</p><p><img src="https://s2.ax1x.com/2019/03/21/A1IyjO.jpg" alt="A1IyjO.jpg"><br><a id="more"></a></p><p><strong>书单：</strong></p><ul><li>《Redis in action》</li><li>《流畅的Python》</li><li>《High Performanace MySQL》</li><li>《Python Cookbook》</li><li>《Python for data analysis》</li></ul><p><strong>文档阅读：</strong></p><ul><li>Vue</li><li>Django</li></ul><p><strong>学习：</strong></p><ul><li>Java</li><li>leetcode 200题</li><li>Linux</li><li>Docker</li><li>坚持每周一篇技术博客</li><li>保持github的活跃度</li></ul><p><strong>生活：</strong></p><ul><li>爬山*10</li><li>旅游*2</li><li>体重-10%</li></ul><p><strong>工作：</strong></p><ul><li>更加高效的工作</li><li>顺利的完成现在的项目</li></ul><p><strong>加强版flag：</strong></p><ul><li>不喝任何含糖量饮料</li><li>晚上9点以后不吃任何东西</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>《Redis in action》读书笔记（三）</title>
      <link href="2018/12/08/%E3%80%8ARedis-in-action%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/"/>
      <url>2018/12/08/%E3%80%8ARedis-in-action%E3%80%8B%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0%EF%BC%88%E4%B8%89%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="4-3-处理系统故障"><a href="#4-3-处理系统故障" class="headerlink" title="4.3 处理系统故障"></a>4.3 处理系统故障</h2><p>即使软件和硬件的设计完美无瑕，我们还是无法阻止停电、发电机宕机、备用电池电量耗尽的情况。</p><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fz0q636ehuj21c00uj472.jpg" alt></p><a id="more"></a><h3 id="4-3-1-验证快照文件和AOF文件"><a href="#4-3-1-验证快照文件和AOF文件" class="headerlink" title="4.3.1 验证快照文件和AOF文件"></a>4.3.1 验证快照文件和AOF文件</h3><p>命令：</p><p><code>redis-check-aof</code></p><p><code>redis-check-dump</code></p><p>AOF文件的修复步骤：</p><ul><li>扫描给定的AOF文件</li><li>寻找不正确或是不完整的命令</li><li>发现错误、不完整命令后，删除之后左右命令，留下正确的命令</li></ul><p>快照无法修复</p><p>在恢复数据时，需要做验证（SHA1或SHA26）</p><h3 id="4-3-2-更换故障主服务器"><a href="#4-3-2-更换故障主服务器" class="headerlink" title="4.3.2 更换故障主服务器"></a>4.3.2 更换故障主服务器</h3><p>服务器A——主服务器——故障</p><p>服务器B——从服务器——正常</p><p>服务器C——备胎——活跃</p><p>解决方案：</p><ul><li>B执行SAVE，创建快照</li><li>B将快照发给备胎C</li><li>备胎服务器C运行Redis</li><li>B成为昔日备胎C的从服务器</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django部署手册</title>
      <link href="2018/11/25/Django%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/"/>
      <url>2018/11/25/Django%E9%83%A8%E7%BD%B2%E6%89%8B%E5%86%8C/</url>
      
        <content type="html"><![CDATA[<h2 id="一、-安装python环境"><a href="#一、-安装python环境" class="headerlink" title="一、 安装python环境"></a>一、 安装python环境</h2><p>详情参考我的这一篇博文：</p><a id="more"></a><p><a href="https://hyyc554.github.io/2018/10/26/pythonenv/">Python虚拟环境配置</a></p><h2 id="二、Django的配置"><a href="#二、Django的配置" class="headerlink" title="二、Django的配置"></a>二、Django的配置</h2><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">pip install Django<br>django-admin.py startproject mysite<br><span class="hljs-built_in">cd</span> mysite<br></code></pre></div></td></tr></table></figure><p>我将在mysite目录下完成后续相关操作</p><h2 id="二、uWSGI的安装"><a href="#二、uWSGI的安装" class="headerlink" title="二、uWSGI的安装"></a>二、uWSGI的安装</h2><figure class="highlight cmake"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">pip <span class="hljs-keyword">install</span> uwsgi<br></code></pre></div></td></tr></table></figure><h3 id="1-基础测试："><a href="#1-基础测试：" class="headerlink" title="1. 基础测试："></a>1. 基础测试：</h3><ol><li>创建一个在mysite下创建一个<code>test.py</code>的测试文档</li></ol><figure class="highlight bash"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs bash">(dj11.7) [root@localhost ~]<span class="hljs-comment"># mkdir myporject</span><br>(dj11.7) [root@localhost ~]<span class="hljs-comment"># cd myporject/</span><br>(dj11.7) [root@localhost myporject]<span class="hljs-comment"># django-admin startproject mysite</span><br>(dj11.7) [root@localhost myporject]<span class="hljs-comment"># cd mysite</span><br>(dj11.7) [root@localhost mysite]<span class="hljs-comment"># ls</span><br>manage.py  mysite<br>(dj11.7) [root@localhost mysite]<span class="hljs-comment"># touch test.py</span><br>(dj11.7) [root@localhost mysite]<span class="hljs-comment"># ls</span><br>manage.py  mysite  test.py<br></code></pre></div></td></tr></table></figure><p>​    以上就完成了测试脚本文件的构建</p><ol><li>在<code>test.py</code>中写入以下测试内容:</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># test.py</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">application</span><span class="hljs-params">(env, start_response)</span>:</span><br>    start_response(<span class="hljs-string">'200 OK'</span>, [(<span class="hljs-string">'Content-Type'</span>,<span class="hljs-string">'text/html'</span>)])<br>    <span class="hljs-keyword">return</span> [<span class="hljs-string">b"Hello World"</span>] <span class="hljs-comment"># python3</span><br>    <span class="hljs-comment">#return ["Hello World"] # python2</span><br></code></pre></div></td></tr></table></figure><ol><li>uWSGI运行:</li></ol><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">uwsgi</span> --<span class="hljs-comment">http</span> <span class="hljs-comment">:8000</span> --<span class="hljs-comment">wsgi</span><span class="hljs-literal">-</span><span class="hljs-comment">file</span> <span class="hljs-comment">test</span><span class="hljs-string">.</span><span class="hljs-comment">py</span><br></code></pre></div></td></tr></table></figure><p>​    选项的意思是:</p><ul><li><code>http :8000</code>:使用协议http端口8000</li><li><code>wsgi-file test.py</code>:test.py加载指定的文件</li></ul><ol><li>浏览器访问你的IP加端口8000。</li></ol><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">http:</span><span class="hljs-comment">//yourIP:8000</span><br></code></pre></div></td></tr></table></figure><p>​    返回结果：</p><figure class="highlight ebnf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">hello world</span><br></code></pre></div></td></tr></table></figure><p>如果是这样,这意味着以下工作原理:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">the web<span class="hljs-built_in"> client </span>&lt;-&gt; uWSGI &lt;-&gt; Python<br></code></pre></div></td></tr></table></figure><h3 id="2-测试Django项目"><a href="#2-测试Django项目" class="headerlink" title="2. 测试Django项目"></a>2. 测试Django项目</h3><p>现在我们希望uWSGI做同样的事情,但运行Django网站而不是 <code>test.py</code>模块。</p><p>如果您还没有这样做,确保你的 <code>mysite</code>项目实际工作原理:</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">python</span> <span class="hljs-selector-tag">manage</span><span class="hljs-selector-class">.py</span> <span class="hljs-selector-tag">runserver</span> 0<span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-class">.0</span><span class="hljs-selector-pseudo">:8000</span><br></code></pre></div></td></tr></table></figure><p>如果这工作,运行它使用uWSGI:</p><figure class="highlight brainfuck"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-comment">uwsgi</span> --<span class="hljs-comment">http</span> <span class="hljs-comment">:8000</span> --<span class="hljs-comment">module</span> <span class="hljs-comment">mysite</span><span class="hljs-string">.</span><span class="hljs-comment">wsgi</span><br></code></pre></div></td></tr></table></figure><ul><li><code>模块 mysite.wsgi</code>:加载指定wsgi模块</li></ul><p>您的浏览器指向服务器; 如果网站出现,这意味着uWSGI能够，大概的页面如下</p><p><img src="https://s1.ax1x.com/2018/11/25/Fk8F61.png" alt="Fk8F61.png"></p><p>这个栈操作 正确:</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">the web<span class="hljs-built_in"> client </span>&lt;-&gt; uWSGI &lt;-&gt; Django<br></code></pre></div></td></tr></table></figure><p>现在我们通常不会有浏览器直接向uWSGI说话。 这是一份工作 的网络服务器,它将充当中间人。</p><p>nginx。。。待续  </p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Python线性表——单链表</title>
      <link href="2018/11/01/1.%20%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%AE%80%E4%BB%8B/"/>
      <url>2018/11/01/1.%20%E7%BA%BF%E6%80%A7%E8%A1%A8%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="1-线性表简介"><a href="#1-线性表简介" class="headerlink" title="1. 线性表简介"></a>1. 线性表简介</h2><p>线性表是一种线性结构，它是由零个或多个数据元素构成的<strong>有限序列</strong>。线性表的特征是在一个序列中，除了头尾元素，每个元素都有且只有一个直接前驱，有且只有一个直接后继，而序列头元素没有直接前驱，序列尾元素没有直接后继。<br><a id="more"></a></p><p>数据结构中常见的线性结构有数组、单链表、双链表、循环链表等。线性表中的元素为某种<strong>相同</strong>的抽象数据类型。可以是C语言的内置类型或结构体，也可以是C++自定义类型。</p><h2 id="2-数组"><a href="#2-数组" class="headerlink" title="2. 数组"></a>2. 数组</h2><p>数组在实际的物理内存上也是连续存储的，数组有上界和下界。C语言中定义一个数组：<br><img src="http://ww1.sinaimg.cn/large/d126accegy1g1rnnibbq2j20l307i3yj.jpg" alt></p><p>数组下标是从0开始的，a[0]对应第一个元素。其中，a[0]称为数组a的下界，a[6]称为数组a的上届。超过这个范围的下标使用数组，将造成<strong>数组越界错误</strong>。<br>数组的特点是：<strong>数据连续，支持快速随机访问。</strong><br>数组分为固定数组与动态数组。其中固定数组的大小必须在编译时就能够确认，动态数组允许在运行时申请数组内存。复杂点的数组是多维数组，多维数组实际上也是通过一维数组来实现的。在C语言中，可以通过malloc来分配动态数组，C++使用new。另外，C++的标准模板库提供了动态数组类型vector以及内置有固定数组类型array。</p><p>Python中list可以被认为是封装好的数组。</p><h2 id="3-单向链表"><a href="#3-单向链表" class="headerlink" title="3. 单向链表"></a>3. 单向链表</h2><p>单向链表是链表的一种。链表由节点所构成，节点内含一个指向下一个节点的指针，节点依次链接成为链表。因此，链表这种数据结构通常在物理内存上是不连续的。链表的通常含有一个头节点，头节点不存放实际的值，它含有一个指针，指向存放元素的第一个节点。</p><p><img src="http://ww1.sinaimg.cn/large/d126accegy1g1rnq1aam4j20l307iweh.jpg" alt></p><p><strong><em>show me the code</em></strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-string">"""<br>    单链表中的节点应该具有两个属性：val 和 next。<br>    val 是当前节点的值，<br>    next 是指向下一个节点的指针/引用。<br>    """</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, value)</span>:</span><br>        <span class="hljs-comment"># 存放元素数据</span><br>        self.val = value<br>        <span class="hljs-comment"># next是下一个节点的标识</span><br>        self.next = <span class="hljs-literal">None</span><br></code></pre></div></td></tr></table></figure><h3 id="设计链表的实现"><a href="#设计链表的实现" class="headerlink" title="设计链表的实现"></a>设计链表的实现</h3><p>您可以选择使用单链表或双链表。单链表中的节点应该具有两个属性：<code>val</code> 和 <code>next</code>。<code>val</code> 是当前节点的值，<code>next</code> 是指向下一个节点的指针/引用。如果要使用双向链表，则还需要一个属性 <code>prev</code> 以指示链表中的上一个节点。假设链表中的所有节点都是 0-index 的。</p><p>在链表类中实现这些功能：</p><ul><li>get(index)：获取链表中第 <code>index</code> 个节点的值。如果索引无效，则返回<code>-1</code>。</li><li>addAtHead(val)：在链表的第一个元素之前添加一个值为 <code>val</code> 的节点。插入后，新节点将成为链表的第一个节点。<img src="http://ww1.sinaimg.cn/large/d126accegy1g1rnv3t6cdj20l30hmmxk.jpg" alt></li><li>addAtTail(val)：将值为 <code>val</code> 的节点追加到链表的最后一个元素。</li><li>addAtIndex(index,val)：在链表中的第 <code>index</code> 个节点之前添加值为 <code>val</code>  的节点。如果 <code>index</code> 等于链表的长度，则该节点将附加到链表的末尾。如果 <code>index</code> 大于链表长度，则不会插入节点。</li><li>deleteAtIndex(index)：如果索引 <code>index</code> 有效，则删除链表中的第 <code>index</code> 个节点。<img src="http://ww1.sinaimg.cn/large/d126accegy1g1rnw27k9mj20l30hv3yv.jpg" alt></li></ul><p><strong><em>show me the code</em></strong></p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment">#!/usr/bin/env python</span><br><span class="hljs-comment"># -*- coding: utf-8 -*-</span><br><span class="hljs-string">"""<br>@Author    : Young<br>@Email     : hyc554@outlook.com<br>@site      : http://www.cnblogs.com/huang-yc/<br>@File      : linked_list2.py<br>@version   : 1.0<br>@Time      : 2019/4/5 11:06<br>Description about this file:<br><br>"""</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Node</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-string">"""<br>    单链表中的节点应该具有两个属性：val 和 next。<br>    val 是当前节点的值，<br>    next 是指向下一个节点的指针/引用。<br>    """</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, value)</span>:</span><br>        <span class="hljs-comment"># 存放元素数据</span><br>        self.val = value<br>        <span class="hljs-comment"># next是下一个节点的标识</span><br>        self.next = <span class="hljs-literal">None</span><br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SingleLinkList</span><span class="hljs-params">()</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, node=None)</span>:</span><br>        <span class="hljs-comment"># 头节点定义为私有变量</span><br>        self._head = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">is_empty</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-comment"># 判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self, index: int)</span> -&gt; int:</span><br>        <span class="hljs-string">"""<br>        获取链表中第 index 个节点的值。如果索引无效，则返回-1<br>        :param index: 索引值<br>        :return:<br>        """</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>        cur = self._head<br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(index):<br>            <span class="hljs-keyword">if</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>            cur = cur.next<br>        <span class="hljs-keyword">return</span> cur.val<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">length</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""<br>        cur游标，用来移动遍历节点<br>        count用来计数<br>        :return: 返回链表的长度<br>        """</span><br>        cur = self._head<br>        count = <span class="hljs-number">0</span><br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            count += <span class="hljs-number">1</span><br>            cur = cur.next<br>        <span class="hljs-keyword">return</span> count<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">travel</span><span class="hljs-params">(self)</span>:</span><br>        <span class="hljs-string">"""<br>        遍历整个链表<br>        :return:<br>        """</span><br>        cur = self._head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            print(cur.elem, end=<span class="hljs-string">' '</span>)<br>            cur = cur.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_at_head</span><span class="hljs-params">(self, val: int)</span> -&gt; <span class="hljs-keyword">None</span>:</span><br>        <span class="hljs-string">"""<br>        在头部添加一个节点<br>        :param val:<br>        :return: None<br>        """</span><br>        <span class="hljs-comment"># 先创建一个保存item值的节点</span><br>        node = Node(val)<br>        <span class="hljs-comment"># 判断链表是否为空</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self._head = node<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># 将新节点的链接域next指向头节点，即_head指向的位置</span><br>            node.next = self._head<br>            <span class="hljs-comment"># 将链表的头_head指向新节点</span><br>            self._head = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_at_tail</span><span class="hljs-params">(self, val: int)</span> -&gt; <span class="hljs-keyword">None</span> or int:</span><br>        <span class="hljs-string">"""<br>        在尾部添加一个节点<br>        :param item:<br>        :return:<br>        """</span><br>        node = Node(val)<br>        <span class="hljs-comment"># 若链表为空，直接将该节点作为链表的第一个元素</span><br>        <span class="hljs-keyword">if</span> self._head <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>            self._head = node<br>        <span class="hljs-keyword">else</span>:<br>            cur = self._head<br>            <span class="hljs-keyword">while</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>                cur = cur.next<br>            cur.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">add_at_index</span><span class="hljs-params">(self, index: int, val: int)</span> -&gt; <span class="hljs-keyword">None</span>:</span><br>        <span class="hljs-string">"""<br>        在指定位置pos添加节点<br>        pos从0开始<br>        :param index:<br>        :param val:<br>        :return:<br>        """</span><br>        <span class="hljs-comment"># 若指定位置pos为第一个元素之前，则执行头部插入</span><br>        <span class="hljs-keyword">if</span> index &lt;= <span class="hljs-number">0</span>:<br>            self.add_at_head(val)<br>        <span class="hljs-comment"># 若指定位置超过链表尾部，则执行尾部插入</span><br>        <span class="hljs-keyword">elif</span> index &gt;= self.length():<br>            self.add_at_tail(val)<br>        <span class="hljs-comment"># 找到指定位置</span><br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-comment"># pre用来指向指定位置pos的前一个位置pos-1，初始从头节点开始移动到指定位置</span><br>            pre = self._head<br>            count = <span class="hljs-number">0</span><br>            node = Node(val)<br>            <span class="hljs-comment"># 在目标节点的前一位停下</span><br>            <span class="hljs-keyword">while</span> count &lt; (index - <span class="hljs-number">1</span>):<br>                count += <span class="hljs-number">1</span><br>                pre = pre.next<br>            <span class="hljs-comment"># 先将新节点node的next指向插入位置的节点</span><br>            node.next = pre.next<br>            <span class="hljs-comment"># 将插入位置的前一个节点的next指向新节点</span><br>            pre.next = node<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">delete_at_index</span><span class="hljs-params">(self, index: int)</span> -&gt; <span class="hljs-keyword">None</span> or int:</span><br>        <span class="hljs-string">"""<br>        如果索引 index 有效，则删除链表中的第 index 个节点。<br>        :param index: 对应的索引值<br>        :return: -1表示为异常<br>        """</span><br>        pre = <span class="hljs-literal">None</span><br>        cur = self._head<br>        <span class="hljs-keyword">if</span> index <span class="hljs-keyword">is</span> <span class="hljs-number">0</span>:<br>            self._head = <span class="hljs-literal">None</span><br>        <span class="hljs-keyword">for</span> i <span class="hljs-keyword">in</span> range(index):<br>            <span class="hljs-keyword">if</span> cur.next <span class="hljs-keyword">is</span> <span class="hljs-literal">None</span>:<br>                <span class="hljs-comment"># raise IndexError("越界")</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-number">-1</span><br>            pre = cur<br>            cur = pre.next<br>        <span class="hljs-keyword">else</span>:<br>            pre.next = cur.next<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">search</span><span class="hljs-params">(self, val: int)</span> -&gt; True or False:</span><br>        <span class="hljs-string">"""<br>        查找节点是否存在<br>        :param val: 节点的val值<br>        :return:<br>        """</span><br>        cur = self._head<br>        <span class="hljs-keyword">while</span> cur <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-keyword">if</span> cur.val == val:<br>                <span class="hljs-keyword">return</span> <span class="hljs-literal">True</span><br>            <span class="hljs-keyword">else</span>:<br>                cur = cur.next<br>        <span class="hljs-keyword">return</span> <span class="hljs-literal">False</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    obj = SingleLinkList()<br>    obj.add_at_head(<span class="hljs-number">1</span>)<br>    obj.add_at_tail(<span class="hljs-number">3</span>)<br>    obj.add_at_index(<span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br>    obj.travel()<br>    obj.delete_at_index(<span class="hljs-number">1</span>)<br>    obj.travel()<br></code></pre></div></td></tr></table></figure><h2 id="链表与顺序表的对比"><a href="#链表与顺序表的对比" class="headerlink" title="链表与顺序表的对比"></a>链表与顺序表的对比</h2><p>链表失去了顺序表随机读取的优点，同时链表由于增加了结点的指针域，空间开销比较大，但对存储空间的使用要相对灵活。</p><p>链表与顺序表的各种操作复杂度如下所示：</p><table><thead><tr><th>操作</th><th>链表</th><th>顺序表</th></tr></thead><tbody><tr><td>访问元素</td><td>O(n)</td><td>O(1)</td></tr><tr><td>在头部插入/删除</td><td>O(1)</td><td>O(n)</td></tr><tr><td>在尾部插入/删除</td><td>O(n)</td><td>O(1)</td></tr><tr><td>在中间插入/删除</td><td>O(n)</td><td>O(n)</td></tr></tbody></table><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="https://www.cnblogs.com/QG-whz/p/5170147.html" target="_blank" rel="noopener">https://www.cnblogs.com/QG-whz/p/5170147.html</a></p><p><a href="https://blog.csdn.net/weixin_39881922/article/details/80470896" target="_blank" rel="noopener">https://blog.csdn.net/weixin_39881922/article/details/80470896</a></p><p><a href="https://leetcode-cn.com/explore/learn/card/linked-list/193/singly-linked-list/741/" target="_blank" rel="noopener">https://leetcode-cn.com/explore/learn/card/linked-list/193/singly-linked-list/741/</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CentOS下安装Docker</title>
      <link href="2018/10/21/%E4%BD%BF%E7%94%A8%20yum%20%E5%AE%89%E8%A3%85%EF%BC%88CentOS%207%E4%B8%8B%EF%BC%89/"/>
      <url>2018/10/21/%E4%BD%BF%E7%94%A8%20yum%20%E5%AE%89%E8%A3%85%EF%BC%88CentOS%207%E4%B8%8B%EF%BC%89/</url>
      
        <content type="html"><![CDATA[<h2 id="使用-yum-安装（CentOS-7下）"><a href="#使用-yum-安装（CentOS-7下）" class="headerlink" title="使用 yum 安装（CentOS 7下）"></a>使用 yum 安装（CentOS 7下）</h2><p>Docker 要求 CentOS 系统的内核版本高于 3.10 ，查看本页面的前提条件来验证你的CentOS 版本是否支持 Docker 。</p><a id="more"></a><p>通过 <code>uname -r</code>命令查看你当前的内核版本</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">uname</span> <span class="hljs-selector-tag">-r</span> 3<span class="hljs-selector-class">.10</span><span class="hljs-selector-class">.0-327</span><span class="hljs-selector-class">.el7</span><span class="hljs-selector-class">.x86_64</span><br></code></pre></div></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2016/05/docker08.png" alt="img"></p><h3 id="安装-Docker"><a href="#安装-Docker" class="headerlink" title="安装 Docker"></a>安装 Docker</h3><p>从 2017 年 3 月开始 docker 在原来的基础上分为两个分支版本: Docker CE 和 Docker EE。</p><p>Docker CE 即社区免费版，Docker EE 即企业版，强调安全，但需付费使用。</p><p>本文介绍 Docker CE 的安装使用。</p><p>移除旧的版本：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell"><span class="hljs-meta">$</span><span class="bash"> sudo yum remove docker \</span><br>                  docker-client \<br>                  docker-client-latest \<br>                  docker-common \<br>                  docker-latest \<br>                  docker-latest-logrotate \<br>                  docker-logrotate \<br>                  docker-selinux \<br>                  docker-engine-selinux \<br>                  docker-engine<br></code></pre></div></td></tr></table></figure><p>安装一些必要的系统工具：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum install -y yum-utils device-mapper-persistent-data lvm2<br></code></pre></div></td></tr></table></figure><p>添加软件源信息：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum-config-manager --add-repo http://mirrors.aliyun.com/docker-ce/linux/centos/docker-ce.repo<br></code></pre></div></td></tr></table></figure><p>更新 yum 缓存：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum makecache fast<br></code></pre></div></td></tr></table></figure><p>安装 Docker-ce：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo yum -y install docker-ce<br></code></pre></div></td></tr></table></figure><p>启动 Docker 后台服务</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">sudo systemctl start docker<br></code></pre></div></td></tr></table></figure><p>测试运行 hello-world</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">docker run hello-world<br></code></pre></div></td></tr></table></figure><p><img src="http://www.runoob.com/wp-content/uploads/2016/05/docker12.png" alt="img"></p><p>由于本地没有hello-world这个镜像，所以会下载一个hello-world的镜像，并在容器内运行。</p><h3 id="镜像加速"><a href="#镜像加速" class="headerlink" title="镜像加速"></a>镜像加速</h3><p>鉴于国内网络问题，后续拉取 Docker 镜像十分缓慢，我们可以需要配置加速器来解决，我使用的是网易的镜像地址：<a href="http://hub-mirror.c.163.com。" target="_blank" rel="noopener">http://hub-mirror.c.163.com。</a></p><p>新版的 Docker 使用 /etc/docker/daemon.json（Linux） 或者 %programdata%\docker\config\daemon.json（Windows） 来配置 Daemon。</p><p>请在该配置文件中加入（没有该文件的话，请先建一个）：</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">&#123;<br>  "registry-mirrors": ["http://hub-mirror.c.163.com"]<br>&#125;<br></code></pre></div></td></tr></table></figure><hr><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p><a href="http://www.runoob.com/docker/centos-docker-install.html" target="_blank" rel="noopener">http://www.runoob.com/docker/centos-docker-install.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> Linux </tag>
            
            <tag> Docker </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>无题1</title>
      <link href="2018/09/03/%E6%97%A0%E9%A2%981/"/>
      <url>2018/09/03/%E6%97%A0%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2018/11/09/ibtcXq.jpg" alt="ibtcXq.jpg"></p><p>今天投了十几家简历，还没有回音</p><a id="more"></a><p>晚上把做的几个项目的流程再熟悉一下</p><p>感觉简历还是有问题，明天找老师还有同学请教</p><p>感觉压力越来越大了</p><p>本来还有很多东西要学，但是状态有点差</p><p>负面情绪有点多了，需要及时调节过来，毕竟也没人可以依靠了</p><hr><p>入职第三天</p><p>后面还要继续努力</p><p>明天把数据库结构给理好</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>浅析跨域请求</title>
      <link href="2018/08/13/%E8%B7%A8%E5%9F%9F/"/>
      <url>2018/08/13/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做项目的时候遇到了一些跨域问题，虽然网上对于跨域的问题分享还挺多的。不过当我实际遇到的时候还是有点懵。趁项目刚上线完，写篇文章总结下。</p><a id="more"></a><h3 id="造成跨域的原因"><a href="#造成跨域的原因" class="headerlink" title="造成跨域的原因"></a>造成跨域的原因</h3><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种</p><ul><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</li></ul><blockquote><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p></blockquote><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p>了解完跨域之后，想必大家都会有这么一个思考，为什么要有跨域的限制，浏览器这么做是出于何种原因呢。其实仔细想一想就会明白，跨域限制主要是为了安全考虑。</p><p>AJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：</p><ol><li>用户登录了自己的银行页面 <code>http://mybank.com</code>，<code>http://mybank.com</code>向用户的cookie中添加用户标识。</li><li>用户浏览了恶意页面 <code>http://evil.com</code>。执行了页面中的恶意AJAX请求代码。</li><li><code>http://evil.com</code>向<code>http://mybank.com</code>发起AJAX HTTP请求，请求会默认把<code>http://mybank.com</code>对应cookie也同时发送过去。</li><li>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</li><li>而且由于Ajax在后台执行，用户无法感知这一过程。</li></ol><p>DOM同源策略也一样，如果iframe之间可以跨域访问，可以这样攻击：</p><ol><li>做一个假网站，里面用iframe嵌套一个银行网站 <code>http://mybank.com</code>。</li><li>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li><li>这时如果用户输入账号密码，我们的主网站可以跨域访问到<code>http://mybank.com</code>的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击。</li></ol><p>所以说有了跨域跨域限制之后，我们才能更安全的上网了。</p><h3 id="跨域的解决方式"><a href="#跨域的解决方式" class="headerlink" title="跨域的解决方式"></a>跨域的解决方式</h3><h4 id="跨域资源共享（CORS"><a href="#跨域资源共享（CORS" class="headerlink" title="跨域资源共享（CORS)"></a>跨域资源共享（CORS)</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>对于这个方式，阮一峰老师总结的文章特别好，希望深入了解的可以看一下<code>http://www.ruanyifeng.com/blog/2016/04/cors.html</code>。</p><p>通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。</p><p>实现的基础是JavaScript不能够操作HTTP Header。某些浏览器插件实际上是具有这个能力的。</p><p>服务器端在HTTP的响应头中加入（页面层次的控制模式）：</p><p><strong><em>Access-Control-Allow-Origin: example.com</em></strong><br><strong><em>Access-Control-Request-Method: GET, POST</em></strong><br><strong><em>Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin</em></strong></p><p><strong><em>Access-Control-Expose-Headers: Content-Range</em></strong></p><p><strong><em>Access-Control-Max-Age: 3600</em></strong></p><p>多个域名之间用逗号分隔，表示对所示域名提供跨域访问权限。”*”表示允许所有域名的跨域访问。</p><p><strong>客户端可以有两种行为：</strong></p><ol><li><p>发送OPTIONS请求，请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。</p></li><li><p>直接发送请求，然后检查response的Access-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。</p></li></ol><p>本质上服务端的response内容已经到达本地，JavaScript决定是否要去读取。</p><p>这里我就简单的说一说大体流程。</p><ol><li>对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>唯一需要注意的是，我们需要设置我们的xhr属性<code>withCredentials</code>为true，不然的话，cookie是带不过去的哦，设置： <code>xhr.withCredentials = true</code>;</li><li>对于服务器端，需要在 response header中设置如下两个字段:<br><code>Access-Control-Allow-Origin: http://www.yourhost.com</code><br><code>Access-Control-Allow-Credentials:true</code><br>这样，我们就可以跨域请求接口了。</li></ol><p>在django的实际项目中,跨域用CORS技术构建一个中间件，来解决跨域问题：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">CORSMiddleware</span><span class="hljs-params">(MiddlewareMixin)</span>:</span><br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">process_response</span><span class="hljs-params">(self, request, response)</span>:</span><br>        <span class="hljs-string">"""<br>        解决跨域问题<br>        :param request:<br>        :param response:<br>        :return:<br>        """</span><br>        <span class="hljs-comment"># 添加响应头</span><br><br>        <span class="hljs-comment"># 允许你的域名来获取我的数据</span><br>        response[<span class="hljs-string">'Access-Control-Allow-Origin'</span>] = <span class="hljs-string">"*"</span><br><br>        <span class="hljs-comment"># 允许你携带Content-Type请求头</span><br>        <span class="hljs-comment"># response['Access-Control-Allow-Headers'] = "Content-Type"</span><br><br>        <span class="hljs-comment"># 允许你发送DELETE,PUT</span><br>        <span class="hljs-comment"># response['Access-Control-Allow-Methods'] = "DELETE,PUT"</span><br><br>        <span class="hljs-keyword">return</span> response<br></code></pre></div></td></tr></table></figure><h4 id="jsonp实现跨域"><a href="#jsonp实现跨域" class="headerlink" title="jsonp实现跨域"></a>jsonp实现跨域</h4><p>基本原理就是通过动态创建script标签,然后利用src属性进行跨域。<br>这么说比较模糊，我们来看个例子:</p><figure class="highlight HTML"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br><span class="hljs-comment">//定义一个fun函数</span><br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">fun</span>(<span class="hljs-params">data</span>) </span>&#123; <br>    <span class="hljs-built_in">console</span>.log(data); <br>&#125; <br><br><span class="hljs-comment">// 创建一个脚本，并且告诉后端回调函数名叫fun </span><br><span class="hljs-keyword">var</span> body= <span class="hljs-built_in">document</span>.getElementsByTagName(<span class="hljs-string">'body'</span>)[<span class="hljs-number">0</span>]; <br><span class="hljs-keyword">var</span> script= <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'script'</span>); <br>script.type= <span class="hljs-string">'text/javascript'</span>; <br>script.src= <span class="hljs-string">'demo.js?callback=fun'</span>; <br>body.appendChild(script); <br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><p>返回的js脚本，直接会执行。所以就执行了事先定义好的fun函数了，并且把数据传入了进来。</p><figure class="highlight kotlin"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-title">fun</span><span class="hljs-params">(&#123;<span class="hljs-string">"name"</span>:"<span class="hljs-type">name</span>"&#125;)</span></span><br></code></pre></div></td></tr></table></figure><p>当然，这个只是一个原理演示，实际情况下，我们需要动态创建这个fun函数，并且在数据返回的时候销毁它。</p><p>因为在实际使用的时候，我们用的各种ajax库，基本都包含了jsonp的封装，不过我们还是要知道一下原理，不然就不知道为什么jsonp不能发post请求了~</p><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><blockquote><p>服务器代理是万能的。</p></blockquote><h4 id="document-domain来跨子域"><a href="#document-domain来跨子域" class="headerlink" title="document.domain来跨子域"></a>document.domain来跨子域</h4><p>对于主域名相同，而子域名不同的情况，可以使用document.domain来跨域<br>这种方式非常适用于iframe跨域的情况，直接看例子吧<br>比如a页面地址为 <code>a.yourhost.com</code> b页面为 <code>b.yourhost.com</code>。<br>这样就可以通过分别给两个页面设置 <code>document.domain = yourhost.com</code> 来实现跨域。<br>之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。</p><h4 id="使用window-name进行跨域"><a href="#使用window-name进行跨域" class="headerlink" title="使用window.name进行跨域"></a>使用window.name进行跨域</h4><p>window.name跨域同样是受到同源策略限制，父框架和子框架的src必须指向统一域名。window.name的优势在于，name的值在不同的页面(或者不同的域名)，加载后仍然存在，除非你显示的更改。并且支持的长度达到2M.</p><p>代码如下：</p><figure class="highlight HTML"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML">//a页面的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>    iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'iframe'</span>);<br>    iframe.style.display = <span class="hljs-string">'none'</span>;<br>    <span class="hljs-keyword">var</span> state = <span class="hljs-number">0</span>;<br><br>    iframe.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-keyword">var</span> data = iframe.contentWindow.name;<br>          <span class="hljs-built_in">console</span>.log(data);<br>          iframe.contentWindow.document.write(<span class="hljs-string">''</span>);<br>          iframe.contentWindow.close();<br>          <span class="hljs-built_in">document</span>.body.removeChild(iframe);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state === <span class="hljs-number">0</span>) &#123;<br>          state = <span class="hljs-number">1</span>;<br>          iframe.contentWindow.location = <br>          <span class="hljs-string">'http://m.zhuanzhuan.58.com:8887/b.html'</span>;<br>      &#125;<br>    &#125;;<br>    <span class="hljs-built_in">document</span>.body.appendChild(iframe);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><figure class="highlight HTML"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML">//b页面代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>    <span class="hljs-built_in">window</span>.name = <span class="hljs-string">"hello"</span>;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="window-location-hash跨域"><a href="#window-location-hash跨域" class="headerlink" title="window.location.hash跨域"></a>window.location.hash跨域</h4><p>location.hash方式跨域，是子框架具有修改父框架src的hash值，通过这个属性进行传递数据，且更改hash值，页面不会刷新。但是传递的数据的字节数是有限的。</p><blockquote><p>注意：父子框架受同源策略的限制</p></blockquote><p>代码如下:</p><figure class="highlight HTML"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML">//a页面的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>    iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'iframe'</span>);<br>    iframe.style.display = <span class="hljs-string">'none'</span>;<br>    <span class="hljs-keyword">var</span> state = <span class="hljs-number">0</span>;<br><br>    iframe.onload = <span class="hljs-function"><span class="hljs-keyword">function</span>(<span class="hljs-params"></span>) </span>&#123;<br>      <span class="hljs-keyword">if</span>(state === <span class="hljs-number">1</span>) &#123;<br>          <span class="hljs-keyword">var</span> data = <span class="hljs-built_in">window</span>.location.hash;<br>          <span class="hljs-built_in">console</span>.log(data);<br>          iframe.contentWindow.document.write(<span class="hljs-string">''</span>);<br>          iframe.contentWindow.close();<br>          <span class="hljs-built_in">document</span>.body.removeChild(iframe);<br>      &#125; <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span>(state === <span class="hljs-number">0</span>) &#123;<br>          state = <span class="hljs-number">1</span>;<br>          iframe.contentWindow.location = <br>          <span class="hljs-string">'http://m.zhuanzhuan.58.com:8887/b.html'</span>;<br>      &#125;<br>    &#125;;<br>    <span class="hljs-built_in">document</span>.body.appendChild(iframe);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//b页面代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="actionscript"><br>    parent.location.hash = <span class="hljs-string">"world"</span>;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="window-top"><a href="#window-top" class="headerlink" title="window.top"></a>window.top</h4><p>window.top方法可以访问最顶层的window对象，可以取到最顶层window对象的属性和方法。这样子框架就可以操作父页面的交互了。window.parent可以得到父框架的window对象。</p><p>代码如下：</p><figure class="highlight HTML"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs HTML">//a页面代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">funa</span>(<span class="hljs-params"></span>)</span>&#123;<br>        <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"a页面的方法"</span>);<br>    &#125;<br>    iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'iframe'</span>);<br>    iframe.style.display = <span class="hljs-string">'none'</span>;<br>    iframe.src = <span class="hljs-string">'http://m.zhuanzhuan.58.com:8887/b.html'</span>;<br>    <span class="hljs-built_in">document</span>.body.appendChild(iframe);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//b页面的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br><span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.top.funa());<br><span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">funb</span>(<span class="hljs-params"></span>)</span>&#123;<br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-string">"b页面的方法"</span>);<br>&#125;<br>iframe = <span class="hljs-built_in">document</span>.createElement(<span class="hljs-string">'iframe'</span>);<br>iframe.style.display = <span class="hljs-string">'none'</span>;<br>iframe.src = <span class="hljs-string">'http://m.zhuanzhuan.58.com:8887/c.html'</span>;<br><span class="hljs-built_in">document</span>.body.appendChild(iframe);<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>//c页面的代码<br><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">type</span>=<span class="hljs-string">"text/javascript"</span>&gt;</span><span class="javascript"><br>  <span class="hljs-built_in">console</span>.log(<span class="hljs-built_in">window</span>.parent.funb());<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h4 id="使用postMessage实现页面之间通信"><a href="#使用postMessage实现页面之间通信" class="headerlink" title="使用postMessage实现页面之间通信"></a>使用postMessage实现页面之间通信</h4><p>信息传递除了客户端与服务器之前的传递，还存在以下几个问题：</p><ul><li>页面和新开的窗口的数据交互。</li><li>多窗口之间的数据交互。</li><li>页面与所嵌套的iframe之间的信息传递。</li></ul><p>window.postMessage是一个HTML5的api，允许两个窗口之间进行跨域发送消息。这个应该就是以后解决dom跨域通用方法了，具体可以参照MDN。</p><blockquote><p>补充： 其实还有一些方法，比如window.name和location.hash。就很适用于iframe的跨域，不过iframe用的比较少了，所以这些方法也就有点过时了。</p></blockquote><p>这些就是我对跨域的了解了，实际情况下，一般用cors，jsonp等常见方法就可以了。不过遇到了一些非常规情况，我们还是需要知道有更多的方法可以选择的</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>(转)Google 开源项目风格指南(Python篇)</title>
      <link href="2018/07/03/(%E8%BD%AC)Google-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97(Python%E7%AF%87)/"/>
      <url>2018/07/03/(%E8%BD%AC)Google-%E5%BC%80%E6%BA%90%E9%A1%B9%E7%9B%AE%E9%A3%8E%E6%A0%BC%E6%8C%87%E5%8D%97(Python%E7%AF%87)/</url>
      
        <content type="html"><![CDATA[<p>由于目前在公司独立开发项目，为了提高自己的编码质量与品位，周末利用下午的时间阅读了<a href="https://zh-google-styleguide.readthedocs.io/en/latest/contents/" target="_blank" rel="noopener"> Google 开源项目风格指南</a>关于Python的部分，同时转发在这里，以便以后随时查阅。</p><p><img src="https://ws1.sinaimg.cn/large/d126accegy1fyx5keibjtj207k02kt8l.jpg" alt></p><a id="more"></a><h1 id="Python语言规范"><a href="#Python语言规范" class="headerlink" title="Python语言规范"></a>Python语言规范</h1><h2 id="Lint"><a href="#Lint" class="headerlink" title="Lint"></a>Lint</h2><p>Tip</p><p>对你的代码运行pylint</p><ul><li><p>定义:</p><p>pylint是一个在Python源代码中查找bug的工具. 对于C和C++这样的不那么动态的(译者注: 原文是less dynamic)语言, 这些bug通常由编译器来捕获. 由于Python的动态特性, 有些警告可能不对. 不过伪告警应该很少.</p></li><li><p>优点:</p><p>可以捕获容易忽视的错误, 例如输入错误, 使用未赋值的变量等.</p></li><li><p>缺点:</p><p>pylint不完美. 要利用其优势, 我们有时侯需要: a) 围绕着它来写代码 b) 抑制其告警 c) 改进它, 或者d) 忽略它.</p></li><li><p>结论:</p><p>确保对你的代码运行pylint.抑制不准确的警告,以便能够将其他警告暴露出来。你可以通过设置一个行注释来抑制警告. 例如:<code>dict = &#39;something awful&#39;  # Bad Idea... pylint: disable=redefined-builtin</code>pylint警告是以一个数字编号(如 <code>C0112</code> )和一个符号名(如 <code>empty-docstring</code> )来标识的. 在编写新代码或更新已有代码时对告警进行抑制, 推荐使用符号名来标识.如果警告的符号名不够见名知意，那么请对其增加一个详细解释。采用这种抑制方式的好处是我们可以轻松查找抑制并回顾它们.你可以使用命令 <code>pylint --list-msgs</code> 来获取pylint告警列表. 你可以使用命令 <code>pylint --help-msg=C6409</code> , 以获取关于特定消息的更多信息.相比较于之前使用的 <code>pylint: disable-msg</code> , 本文推荐使用 <code>pylint: disable</code> .要抑制”参数未使用”告警, 你可以用”<em>”作为参数标识符, 或者在参数名前加”unused</em>”. 遇到不能改变参数名的情况, 你可以通过在函数开头”提到”它们来消除告警. 例如:<code>def foo(a, unused_b, unused_c, d=None, e=None):     _ = d, e     return a</code></p></li></ul><h2 id="导入"><a href="#导入" class="headerlink" title="导入"></a>导入</h2><p>Tip</p><p>仅对包和模块使用导入</p><ul><li><p>定义:</p><p>模块间共享代码的重用机制.</p></li><li><p>优点:</p><p>命名空间管理约定十分简单. 每个标识符的源都用一种一致的方式指示. x.Obj表示Obj对象定义在模块x中.</p></li><li><p>缺点:</p><p>模块名仍可能冲突. 有些模块名太长, 不太方便.</p></li><li><p>结论:</p><p>使用 <code>import x</code> 来导入包和模块.使用 <code>from x import y</code> , 其中x是包前缀, y是不带前缀的模块名.使用 <code>from x import y as z</code>, 如果两个要导入的模块都叫做y或者y太长了.例如, 模块 <code>sound.effects.echo</code> 可以用如下方式导入:<code>from sound.effects import echo ... echo.EchoFilter(input, output, delay=0.7, atten=4)</code>导入时不要使用相对名称. 即使模块在同一个包中, 也要使用完整包名. 这能帮助你避免无意间导入一个包两次.</p></li></ul><h2 id="包"><a href="#包" class="headerlink" title="包"></a>包</h2><p>Tip</p><p>使用模块的全路径名来导入每个模块</p><ul><li><p>优点:</p><p>避免模块名冲突. 查找包更容易.</p></li><li><p>缺点:</p><p>部署代码变难, 因为你必须复制包层次.</p></li><li><p>结论:</p><p>所有的新代码都应该用完整包名来导入每个模块.应该像下面这样导入:<code># Reference in code with complete name. import sound.effects.echo  # Reference in code with just module name (preferred). from sound.effects import echo</code></p></li></ul><h2 id="异常"><a href="#异常" class="headerlink" title="异常"></a>异常</h2><p>Tip</p><p>允许使用异常, 但必须小心</p><ul><li><p>定义:</p><p>异常是一种跳出代码块的正常控制流来处理错误或者其它异常条件的方式.</p></li><li><p>优点:</p><p>正常操作代码的控制流不会和错误处理代码混在一起. 当某种条件发生时, 它也允许控制流跳过多个框架. 例如, 一步跳出N个嵌套的函数, 而不必继续执行错误的代码.</p></li><li><p>缺点:</p><p>可能会导致让人困惑的控制流. 调用库时容易错过错误情况.</p></li><li><p>结论:</p><p>异常必须遵守特定条件:像这样触发异常: <code>raise MyException(&quot;Error message&quot;)</code> 或者 <code>raise MyException</code> . 不要使用两个参数的形式( <code>raise MyException, &quot;Error message&quot;</code> )或者过时的字符串异常( <code>raise &quot;Error message&quot;</code> ).模块或包应该定义自己的特定域的异常基类, 这个基类应该从内建的Exception类继承. 模块的异常基类应该叫做”Error”.<code>class Error(Exception):     pass</code>永远不要使用 <code>except:</code> 语句来捕获所有异常, 也不要捕获 <code>Exception</code> 或者 <code>StandardError</code> , 除非你打算重新触发该异常, 或者你已经在当前线程的最外层(记得还是要打印一条错误消息). 在异常这方面, Python非常宽容, <code>except:</code> 真的会捕获包括Python语法错误在内的任何错误. 使用 <code>except:</code> 很容易隐藏真正的bug.尽量减少try/except块中的代码量. try块的体积越大, 期望之外的异常就越容易被触发. 这种情况下, try/except块将隐藏真正的错误.使用finally子句来执行那些无论try块中有没有异常都应该被执行的代码. 这对于清理资源常常很有用, 例如关闭文件.当捕获异常时, 使用 <code>as</code> 而不要用逗号. 例如<code>try:     raise Error except Error as error:     pass</code></p></li></ul><h2 id="全局变量"><a href="#全局变量" class="headerlink" title="全局变量"></a>全局变量</h2><p>Tip</p><p>避免全局变量</p><ul><li><p>定义:</p><p>定义在模块级的变量.</p></li><li><p>优点:</p><p>偶尔有用.</p></li><li><p>缺点:</p><p>导入时可能改变模块行为, 因为导入模块时会对模块级变量赋值.</p></li><li><p>结论:</p><p>避免使用全局变量, 用类变量来代替. 但也有一些例外:脚本的默认选项.模块级常量. 例如:　PI = 3.14159. 常量应该全大写, 用下划线连接.有时候用全局变量来缓存值或者作为函数返回值很有用.如果需要, 全局变量应该仅在模块内部可用, 并通过模块级的公共函数来访问.</p></li></ul><h2 id="嵌套-局部-内部类或函数"><a href="#嵌套-局部-内部类或函数" class="headerlink" title="嵌套/局部/内部类或函数"></a>嵌套/局部/内部类或函数</h2><p>Tip</p><p>鼓励使用嵌套/本地/内部类或函数</p><ul><li><p>定义:</p><p>类可以定义在方法, 函数或者类中. 函数可以定义在方法或函数中. 封闭区间中定义的变量对嵌套函数是只读的.</p></li><li><p>优点:</p><p>允许定义仅用于有效范围的工具类和函数.</p></li><li><p>缺点:</p><p>嵌套类或局部类的实例不能序列化(pickled).</p></li><li><p>结论:</p><p>推荐使用.</p></li></ul><h2 id="列表推导-List-Comprehensions"><a href="#列表推导-List-Comprehensions" class="headerlink" title="列表推导(List Comprehensions)"></a>列表推导(List Comprehensions)</h2><p>Tip</p><p>可以在简单情况下使用</p><ul><li><p>定义:</p><p>列表推导(list comprehensions)与生成器表达式(generator expression)提供了一种简洁高效的方式来创建列表和迭代器, 而不必借助map(), filter(), 或者lambda.</p></li><li><p>优点:</p><p>简单的列表推导可以比其它的列表创建方法更加清晰简单. 生成器表达式可以十分高效, 因为它们避免了创建整个列表.</p></li><li><p>缺点:</p><p>复杂的列表推导或者生成器表达式可能难以阅读.</p></li><li><p>结论:</p><p>适用于简单情况. 每个部分应该单独置于一行: 映射表达式, for语句, 过滤器表达式. 禁止多重for语句或过滤器表达式. 复杂情况下还是使用循环.<code>Yes:   result = []   for x in range(10):       for y in range(5):           if x * y &gt; 10:               result.append((x, y))    for x in xrange(5):       for y in xrange(5):           if x != y:               for z in xrange(5):                   if y != z:                       yield (x, y, z)    return ((x, complicated_transform(x))           for x in long_generator_function(parameter)           if x is not None)    squares = [x * x for x in range(10)]    eat(jelly_bean for jelly_bean in jelly_beans       if jelly_bean.color == &#39;black&#39;) `</code>No:   result = [(x, y) for x in range(10) for y in range(5) if x * y &gt; 10]    return ((x, y, z)           for x in xrange(5)           for y in xrange(5)           if x != y           for z in xrange(5)           if y != z) `</p></li></ul><h2 id="默认迭代器和操作符"><a href="#默认迭代器和操作符" class="headerlink" title="默认迭代器和操作符"></a>默认迭代器和操作符</h2><p>Tip</p><p>如果类型支持, 就使用默认迭代器和操作符. 比如列表, 字典及文件等.</p><ul><li><p>定义:</p><p>容器类型, 像字典和列表, 定义了默认的迭代器和关系测试操作符(in和not in)</p></li><li><p>优点:</p><p>默认操作符和迭代器简单高效, 它们直接表达了操作, 没有额外的方法调用. 使用默认操作符的函数是通用的. 它可以用于支持该操作的任何类型.</p></li><li><p>缺点:</p><p>你没法通过阅读方法名来区分对象的类型(例如, has_key()意味着字典). 不过这也是优点.</p></li><li><p>结论:</p><p>如果类型支持, 就使用默认迭代器和操作符, 例如列表, 字典和文件. 内建类型也定义了迭代器方法. 优先考虑这些方法, 而不是那些返回列表的方法. 当然，这样遍历容器时，你将不能修改容器.<code>Yes:  for key in adict: ...       if key not in adict: ...       if obj in alist: ...       for line in afile: ...       for k, v in dict.iteritems(): ... `</code>No:   for key in adict.keys(): …       if not adict.has_key(key): …       for line in afile.readlines(): … `</p></li></ul><h2 id="生成器"><a href="#生成器" class="headerlink" title="生成器"></a>生成器</h2><p>Tip</p><p>按需使用生成器.</p><ul><li><p>定义:</p><p>所谓生成器函数, 就是每当它执行一次生成(yield)语句, 它就返回一个迭代器, 这个迭代器生成一个值. 生成值后, 生成器函数的运行状态将被挂起, 直到下一次生成.</p></li><li><p>优点:</p><p>简化代码, 因为每次调用时, 局部变量和控制流的状态都会被保存. 比起一次创建一系列值的函数, 生成器使用的内存更少.</p></li><li><p>缺点:</p><p>没有.</p></li><li><p>结论:</p><p>鼓励使用. 注意在生成器函数的文档字符串中使用”Yields:”而不是”Returns:”.(译者注: 参看 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#comments" target="_blank" rel="noopener">注释</a> )</p></li></ul><h2 id="Lambda函数"><a href="#Lambda函数" class="headerlink" title="Lambda函数"></a>Lambda函数</h2><p>Tip</p><p>适用于单行函数</p><ul><li><p>定义:</p><p>与语句相反, lambda在一个表达式中定义匿名函数. 常用于为 <code>map()</code> 和 <code>filter()</code> 之类的高阶函数定义回调函数或者操作符.</p></li><li><p>优点:</p><p>方便.</p></li><li><p>缺点:</p><p>比本地函数更难阅读和调试. 没有函数名意味着堆栈跟踪更难理解. 由于lambda函数通常只包含一个表达式, 因此其表达能力有限.</p></li><li><p>结论:</p><p>适用于单行函数. 如果代码超过60-80个字符, 最好还是定义成常规(嵌套)函数.对于常见的操作符，例如乘法操作符，使用 <code>operator</code> 模块中的函数以代替lambda函数. 例如, 推荐使用 <code>operator.mul</code> , 而不是 <code>lambda x, y: x * y</code> .</p></li></ul><h2 id="条件表达式"><a href="#条件表达式" class="headerlink" title="条件表达式"></a>条件表达式</h2><p>Tip</p><p>适用于单行函数</p><ul><li><p>定义:</p><p>条件表达式是对于if语句的一种更为简短的句法规则. 例如: <code>x = 1 if cond else 2</code> .</p></li><li><p>优点:</p><p>比if语句更加简短和方便.</p></li><li><p>缺点:</p><p>比if语句难于阅读. 如果表达式很长， 难于定位条件.</p></li><li><p>结论:</p><p>适用于单行函数. 在其他情况下，推荐使用完整的if语句.</p></li></ul><h2 id="默认参数值"><a href="#默认参数值" class="headerlink" title="默认参数值"></a>默认参数值</h2><p>Tip</p><p>适用于大部分情况.</p><ul><li><p>定义:</p><p>你可以在函数参数列表的最后指定变量的值, 例如, <code>def foo(a, b = 0):</code> . 如果调用foo时只带一个参数, 则b被设为0. 如果带两个参数, 则b的值等于第二个参数.</p></li><li><p>优点:</p><p>你经常会碰到一些使用大量默认值的函数, 但偶尔(比较少见)你想要覆盖这些默认值. 默认参数值提供了一种简单的方法来完成这件事, 你不需要为这些罕见的例外定义大量函数. 同时, Python也不支持重载方法和函数, 默认参数是一种”仿造”重载行为的简单方式.</p></li><li><p>缺点:</p><p>默认参数只在模块加载时求值一次. 如果参数是列表或字典之类的可变类型, 这可能会导致问题. 如果函数修改了对象(例如向列表追加项), 默认值就被修改了.</p></li><li><p>结论:</p><p>鼓励使用, 不过有如下注意事项:不要在函数或方法定义中使用可变对象作为默认值.<code>Yes: def foo(a, b=None):          if b is None:              b = [] `</code>No:  def foo(a, b=[]):          … No:  def foo(a, b=time.time()):  # The time the module was loaded???          … No:  def foo(a, b=FLAGS.my_thing):  # sys.argv has not yet been parsed…          … `</p></li></ul><h2 id="属性-properties"><a href="#属性-properties" class="headerlink" title="属性(properties)"></a>属性(properties)</h2><p>Tip</p><p>访问和设置数据成员时, 你通常会使用简单, 轻量级的访问和设置函数. 建议用属性（properties）来代替它们.</p><ul><li><p>定义:</p><p>一种用于包装方法调用的方式. 当运算量不大, 它是获取和设置属性(attribute)的标准方式.</p></li><li><p>优点:</p><p>通过消除简单的属性(attribute)访问时显式的get和set方法调用, 可读性提高了. 允许懒惰的计算. 用Pythonic的方式来维护类的接口. 就性能而言, 当直接访问变量是合理的, 添加访问方法就显得琐碎而无意义. 使用属性(properties)可以绕过这个问题. 将来也可以在不破坏接口的情况下将访问方法加上.</p></li><li><p>缺点:</p><p>属性(properties)是在get和set方法声明后指定, 这需要使用者在接下来的代码中注意: set和get是用于属性(properties)的(除了用 <code>@property</code> 装饰器创建的只读属性). 必须继承自object类. 可能隐藏比如操作符重载之类的副作用. 继承时可能会让人困惑.</p></li><li><p>结论:</p><p>你通常习惯于使用访问或设置方法来访问或设置数据, 它们简单而轻量. 不过我们建议你在新的代码中使用属性. 只读属性应该用 <code>@property</code> <a href="http://google-styleguide.googlecode.com/svn/trunk/pyguide.html#Function_and_Method_Decorators" target="_blank" rel="noopener">装饰器</a> 来创建.如果子类没有覆盖属性, 那么属性的继承可能看上去不明显. 因此使用者必须确保访问方法间接被调用, 以保证子类中的重载方法被属性调用(使用模板方法设计模式).<code>Yes: import math       class Square(object):          &quot;&quot;&quot;A square with two properties: a writable area and a read-only perimeter.           To use:          &gt;&gt;&gt; sq = Square(3)          &gt;&gt;&gt; sq.area          9          &gt;&gt;&gt; sq.perimeter          12          &gt;&gt;&gt; sq.area = 16          &gt;&gt;&gt; sq.side          4          &gt;&gt;&gt; sq.perimeter          16          &quot;&quot;&quot;           def __init__(self, side):              self.side = side           def __get_area(self):              &quot;&quot;&quot;Calculates the &#39;area&#39; property.&quot;&quot;&quot;              return self.side ** 2           def ___get_area(self):              &quot;&quot;&quot;Indirect accessor for &#39;area&#39; property.&quot;&quot;&quot;              return self.__get_area()           def __set_area(self, area):              &quot;&quot;&quot;Sets the &#39;area&#39; property.&quot;&quot;&quot;              self.side = math.sqrt(area)           def ___set_area(self, area):              &quot;&quot;&quot;Indirect setter for &#39;area&#39; property.&quot;&quot;&quot;              self._SetArea(area)           area = property(___get_area, ___set_area,                          doc=&quot;&quot;&quot;Gets or sets the area of the square.&quot;&quot;&quot;)           @property          def perimeter(self):              return self.side * 4</code>(译者注: 老实说, 我觉得这段示例代码很不恰当, 有必要这么蛋疼吗?)</p></li></ul><h2 id="True-False的求值"><a href="#True-False的求值" class="headerlink" title="True/False的求值"></a>True/False的求值</h2><p>Tip</p><p>尽可能使用隐式false</p><ul><li><p>定义:</p><p>Python在布尔上下文中会将某些值求值为false. 按简单的直觉来讲, 就是所有的”空”值都被认为是false. 因此0， None, [], {}, “” 都被认为是false.</p></li><li><p>优点:</p><p>使用Python布尔值的条件语句更易读也更不易犯错. 大部分情况下, 也更快.</p></li><li><p>缺点:</p><p>对C/C++开发人员来说, 可能看起来有点怪.</p></li><li><p>结论:</p><p>尽可能使用隐式的false, 例如: 使用 <code>if foo:</code> 而不是 <code>if foo != []:</code> . 不过还是有一些注意事项需要你铭记在心:永远不要用==或者!=来比较单件, 比如None. 使用is或者is not.注意: 当你写下 <code>if x:</code> 时, 你其实表示的是 <code>if x is not None</code> . 例如: 当你要测试一个默认值是None的变量或参数是否被设为其它值. 这个值在布尔语义下可能是false!永远不要用==将一个布尔量与false相比较. 使用 <code>if not x:</code> 代替. 如果你需要区分false和None, 你应该用像 <code>if not x and x is not None:</code> 这样的语句.对于序列(字符串, 列表, 元组), 要注意空序列是false. 因此 <code>if not seq:</code> 或者 <code>if seq:</code> 比 <code>if len(seq):</code> 或 <code>if not len(seq):</code> 要更好.处理整数时, 使用隐式false可能会得不偿失(即不小心将None当做0来处理). 你可以将一个已知是整型(且不是len()的返回结果)的值与0比较.<code>Yes: if not users:          print &#39;no users&#39;       if foo == 0:          self.handle_zero()       if i % 10 == 0:          self.handle_multiple_of_ten() `</code>No:  if len(users) == 0:          print ‘no users’       if foo is not None and not foo:          self.handle_zero()       if not i % 10:          self.handle_multiple_of_ten() `注意‘0’(字符串)会被当做true.</p></li></ul><h2 id="过时的语言特性"><a href="#过时的语言特性" class="headerlink" title="过时的语言特性"></a>过时的语言特性</h2><p>Tip</p><p>尽可能使用字符串方法取代字符串模块. 使用函数调用语法取代apply(). 使用列表推导, for循环取代filter(), map()以及reduce().</p><ul><li><p>定义:</p><p>当前版本的Python提供了大家通常更喜欢的替代品.</p></li><li><p>结论:</p><p>我们不使用不支持这些特性的Python版本, 所以没理由不用新的方式.<code>Yes: words = foo.split(&#39;:&#39;)       [x[1] for x in my_list if x[2] == 5]       map(math.sqrt, data)    # Ok. No inlined lambda expression.       fn(*args, **kwargs) `</code>No:  words = string.split(foo, ‘:’)       map(lambda x: x[1], filter(lambda x: x[2] == 5, my_list))       apply(fn, args, kwargs) `</p></li></ul><h2 id="词法作用域-Lexical-Scoping"><a href="#词法作用域-Lexical-Scoping" class="headerlink" title="词法作用域(Lexical Scoping)"></a>词法作用域(Lexical Scoping)</h2><p>Tip</p><p>推荐使用</p><ul><li><p>定义:</p><p>嵌套的Python函数可以引用外层函数中定义的变量, 但是不能够对它们赋值. 变量绑定的解析是使用词法作用域, 也就是基于静态的程序文本. 对一个块中的某个名称的任何赋值都会导致Python将对该名称的全部引用当做局部变量, 甚至是赋值前的处理. 如果碰到global声明, 该名称就会被视作全局变量.一个使用这个特性的例子:<code>def get_adder(summand1):     &quot;&quot;&quot;Returns a function that adds numbers to a given number.&quot;&quot;&quot;     def adder(summand2):         return summand1 + summand2      return adder</code>(译者注: 这个例子有点诡异, 你应该这样使用这个函数: <code>sum = get_adder(summand1)(summand2)</code> )</p></li><li><p>优点:</p><p>通常可以带来更加清晰, 优雅的代码. 尤其会让有经验的Lisp和Scheme(还有Haskell, ML等)程序员感到欣慰.</p></li><li><p>缺点:</p><p>可能导致让人迷惑的bug. 例如下面这个依据 <a href="http://www.python.org/dev/peps/pep-0227/" target="_blank" rel="noopener">PEP-0227</a> 的例子:<code>i = 4 def foo(x):     def bar():         print i,     # ...     # A bunch of code here     # ...     for i in x:  # Ah, i *is* local to Foo, so this is what Bar sees         print i,     bar()</code>因此 <code>foo([1, 2, 3])</code> 会打印 <code>1 2 3 3</code> , 不是 <code>1 2 3 4</code> .(译者注: x是一个列表, for循环其实是将x中的值依次赋给i.这样对i的赋值就隐式的发生了, 整个foo函数体中的i都会被当做局部变量, 包括bar()中的那个. 这一点与C++之类的静态语言还是有很大差别的.)</p></li><li><p>结论:</p><p>鼓励使用.</p></li></ul><h2 id="函数与方法装饰器"><a href="#函数与方法装饰器" class="headerlink" title="函数与方法装饰器"></a>函数与方法装饰器</h2><p>Tip</p><p>如果好处很显然, 就明智而谨慎的使用装饰器</p><ul><li><p>定义:</p><p><a href="https://docs.python.org/release/2.4.3/whatsnew/node6.html" target="_blank" rel="noopener">用于函数及方法的装饰器</a> (也就是@标记). 最常见的装饰器是@classmethod 和@staticmethod, 用于将常规函数转换成类方法或静态方法. 不过, 装饰器语法也允许用户自定义装饰器. 特别地, 对于某个函数 <code>my_decorator</code> , 下面的两段代码是等效的:<code>class C(object):    @my_decorator    def method(self):        # method body ... `</code>class C(object):     def method(self):         # method body …     method = my_decorator(method) `</p></li><li><p>优点:</p><p>优雅的在函数上指定一些转换. 该转换可能减少一些重复代码, 保持已有函数不变(enforce invariants), 等.</p></li><li><p>缺点:</p><p>装饰器可以在函数的参数或返回值上执行任何操作, 这可能导致让人惊异的隐藏行为. 而且, 装饰器在导入时执行. 从装饰器代码的失败中恢复更加不可能.</p></li><li><p>结论:</p><p>如果好处很显然, 就明智而谨慎的使用装饰器. 装饰器应该遵守和函数一样的导入和命名规则. 装饰器的python文档应该清晰的说明该函数是一个装饰器. 请为装饰器编写单元测试.避免装饰器自身对外界的依赖(即不要依赖于文件, socket, 数据库连接等), 因为装饰器运行时这些资源可能不可用(由 <code>pydoc</code> 或其它工具导入). 应该保证一个用有效参数调用的装饰器在所有情况下都是成功的.装饰器是一种特殊形式的”顶级代码”. 参考后面关于 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#main" target="_blank" rel="noopener">Main</a> 的话题.</p></li></ul><h2 id="线程"><a href="#线程" class="headerlink" title="线程"></a>线程</h2><p>Tip</p><p>不要依赖内建类型的原子性.</p><p>虽然Python的内建类型例如字典看上去拥有原子操作, 但是在某些情形下它们仍然不是原子的(即: 如果<strong>hash</strong>或<strong>eq</strong>被实现为Python方法)且它们的原子性是靠不住的. 你也不能指望原子变量赋值(因为这个反过来依赖字典).</p><p>优先使用Queue模块的 <code>Queue</code> 数据类型作为线程间的数据通信方式. 另外, 使用threading模块及其锁原语(locking primitives). 了解条件变量的合适使用方式, 这样你就可以使用 <code>threading.Condition</code> 来取代低级别的锁了.</p><h2 id="威力过大的特性"><a href="#威力过大的特性" class="headerlink" title="威力过大的特性"></a>威力过大的特性</h2><p>Tip</p><p>避免使用这些特性</p><ul><li><p>定义:</p><p>Python是一种异常灵活的语言, 它为你提供了很多花哨的特性, 诸如元类(metaclasses), 字节码访问, 任意编译(on-the-fly compilation), 动态继承, 对象父类重定义(object reparenting), 导入黑客(import hacks), 反射, 系统内修改(modification of system internals), 等等.</p></li><li><p>优点:</p><p>强大的语言特性, 能让你的代码更紧凑.</p></li><li><p>缺点:</p><p>使用这些很”酷”的特性十分诱人, 但不是绝对必要. 使用奇技淫巧的代码将更加难以阅读和调试. 开始可能还好(对原作者而言), 但当你回顾代码, 它们可能会比那些稍长一点但是很直接的代码更加难以理解.</p></li><li><p>结论:</p><p>在你的代码中避免这些特性.</p></li></ul><hr><h1 id="Python风格规范"><a href="#Python风格规范" class="headerlink" title="Python风格规范"></a>Python风格规范</h1><h2 id="分号"><a href="#分号" class="headerlink" title="分号"></a>分号</h2><p>Tip</p><p>不要在行尾加分号, 也不要用分号将两条命令放在同一行.</p><h2 id="行长度"><a href="#行长度" class="headerlink" title="行长度"></a>行长度</h2><p>Tip</p><p>每行不超过80个字符</p><p>例外:</p><ol><li>长的导入模块语句</li><li>注释里的URL</li></ol><p>不要使用反斜杠连接行.</p><p>Python会将 <a href="http://docs.python.org/2/reference/lexical_analysis.html#implicit-line-joining" target="_blank" rel="noopener">圆括号, 中括号和花括号中的行隐式的连接起来</a> , 你可以利用这个特点. 如果需要, 你可以在表达式外围增加一对额外的圆括号.</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-literal">Yes</span>: foo_bar(self, width, height, <span class="hljs-attribute">color</span>=<span class="hljs-string">'black'</span>, <span class="hljs-attribute">design</span>=None, <span class="hljs-attribute">x</span>=<span class="hljs-string">'foo'</span>,<br>             <span class="hljs-attribute">emphasis</span>=None, <span class="hljs-attribute">highlight</span>=0)<br><br>     <span class="hljs-keyword">if</span> (width == 0 <span class="hljs-keyword">and</span> height == 0 <span class="hljs-keyword">and</span><br>         color == <span class="hljs-string">'red'</span> <span class="hljs-keyword">and</span> emphasis == <span class="hljs-string">'strong'</span>):<br></code></pre></div></td></tr></table></figure><p>如果一个文本字符串在一行放不下, 可以使用圆括号来实现隐式行连接:</p><figure class="highlight smali"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">x = ('This will build a very<span class="hljs-built_in"> long </span>long '<br>     'long<span class="hljs-built_in"> long </span>long<span class="hljs-built_in"> long </span>long<span class="hljs-built_in"> long </span>string')<br></code></pre></div></td></tr></table></figure><p>在注释中，如果必要，将长的URL放在一行上。</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">Yes:</span>  <span class="hljs-meta"># See details at</span><br>      <span class="hljs-meta"># http:<span class="hljs-comment">//www.example.com/us/developer/documentation/api/content/v2.0/csv_file_name_extension_full_specification.html</span></span><br><span class="hljs-symbol">No:</span>  <span class="hljs-meta"># See details at</span><br>     <span class="hljs-meta"># http:<span class="hljs-comment">//www.example.com/us/developer/documentation/api/content/\</span></span><br>     <span class="hljs-meta"># v2.0/csv_file_name_extension_full_specification.html</span><br></code></pre></div></td></tr></table></figure><p>注意上面例子中的元素缩进; 你可以在本文的 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#indentation" target="_blank" rel="noopener">缩进</a> 部分找到解释.</p><h2 id="括号"><a href="#括号" class="headerlink" title="括号"></a>括号</h2><p>Tip</p><p>宁缺毋滥的使用括号</p><p>除非是用于实现行连接, 否则不要在返回语句或条件语句中使用括号. 不过在元组两边使用括号是可以的.</p><figure class="highlight armasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">Yes</span>: <span class="hljs-meta">if</span> foo:<br>         <span class="hljs-keyword">bar()<br></span>     <span class="hljs-meta">while</span> x:<br>         x = <span class="hljs-keyword">bar()<br></span>     <span class="hljs-meta">if</span> x <span class="hljs-keyword">and </span>y:<br>         <span class="hljs-keyword">bar()<br></span>     <span class="hljs-meta">if</span> not x:<br>         <span class="hljs-keyword">bar()<br></span>     return foo<br>     for (x, y) in dict.<span class="hljs-keyword">items(): </span>...<br><span class="hljs-symbol">No</span>:  <span class="hljs-meta">if</span> (x):<br>         <span class="hljs-keyword">bar()<br></span>     <span class="hljs-meta">if</span> not(x):<br>         <span class="hljs-keyword">bar()<br></span>     return (foo)<br></code></pre></div></td></tr></table></figure><h2 id="缩进"><a href="#缩进" class="headerlink" title="缩进"></a>缩进</h2><p>Tip</p><p>用4个空格来缩进代码</p><p>绝对不要用tab, 也不要tab和空格混用. 对于行连接的情况, 你应该要么垂直对齐换行的元素(见 <a href="https://zh-google-styleguide.readthedocs.io/en/latest/google-python-styleguide/python_style_rules/#line-length" target="_blank" rel="noopener">行长度</a> 部分的示例), 或者使用4空格的悬挂式缩进(这时第一行不应该有参数):</p><figure class="highlight nix"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes:   <span class="hljs-comment"># Aligned with opening delimiter</span><br>       <span class="hljs-attr">foo</span> = long_function_name(var_one, var_two,<br>                                var_three, var_four)<br><br>       <span class="hljs-comment"># Aligned with opening delimiter in a dictionary</span><br>       <span class="hljs-attr">foo</span> = &#123;<br>           long_dictionary_key: value1 +<br>                                value2,<br>           ...<br>       &#125;<br><br>       <span class="hljs-comment"># 4-space hanging indent; nothing on first line</span><br>       <span class="hljs-attr">foo</span> = long_function_name(<br>           var_one, var_two, var_three,<br>           var_four)<br><br>       <span class="hljs-comment"># 4-space hanging indent in a dictionary</span><br>       <span class="hljs-attr">foo</span> = &#123;<br>           long_dictionary_key:<br>               long_dictionary_value,<br>           ...<br>       &#125;<br>No:    <span class="hljs-comment"># Stuff on first line forbidden</span><br>      <span class="hljs-attr">foo</span> = long_function_name(var_one, var_two,<br>          var_three, var_four)<br><br>      <span class="hljs-comment"># 2-space hanging indent forbidden</span><br>      <span class="hljs-attr">foo</span> = long_function_name(<br>        var_one, var_two, var_three,<br>        var_four)<br><br>      <span class="hljs-comment"># No hanging indent in a dictionary</span><br>      <span class="hljs-attr">foo</span> = &#123;<br>          long_dictionary_key:<br>              long_dictionary_value,<br>              ...<br>      &#125;<br></code></pre></div></td></tr></table></figure><h2 id="空行"><a href="#空行" class="headerlink" title="空行"></a>空行</h2><p>Tip</p><p>顶级定义之间空两行, 方法定义之间空一行</p><p>顶级定义之间空两行, 比如函数或者类定义. 方法定义, 类定义与第一个方法之间, 都应该空一行. 函数或方法中, 某些地方要是你觉得合适, 就空一行.</p><h2 id="空格"><a href="#空格" class="headerlink" title="空格"></a>空格</h2><p>Tip</p><p>按照标准的排版规范来使用标点两边的空格</p><p>括号内不要有空格.</p><figure class="highlight css"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">Yes</span>: <span class="hljs-selector-tag">spam</span>(<span class="hljs-selector-tag">ham</span><span class="hljs-selector-attr">[1]</span>, &#123;<span class="hljs-attribute">eggs</span>: <span class="hljs-number">2</span>&#125;, <span class="hljs-selector-attr">[]</span>)<br><span class="hljs-selector-tag">No</span>:  <span class="hljs-selector-tag">spam</span>( <span class="hljs-selector-tag">ham</span><span class="hljs-selector-attr">[ 1 ]</span>, &#123; <span class="hljs-attribute">eggs</span>: <span class="hljs-number">2</span> &#125;, <span class="hljs-selector-attr">[ ]</span> )<br></code></pre></div></td></tr></table></figure><p>不要在逗号, 分号, 冒号前面加空格, 但应该在它们后面加(除了在行尾).</p><figure class="highlight llvm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes: if <span class="hljs-keyword">x</span> == <span class="hljs-number">4</span>:<br>         print <span class="hljs-keyword">x</span>, y<br>     <span class="hljs-keyword">x</span>, y = y, <span class="hljs-keyword">x</span><br>No:  if <span class="hljs-keyword">x</span> == <span class="hljs-number">4</span> :<br>         print <span class="hljs-keyword">x</span> , y<br>     <span class="hljs-keyword">x</span> , y = y , <span class="hljs-keyword">x</span><br></code></pre></div></td></tr></table></figure><p>参数列表, 索引或切片的左括号前不应加空格.</p><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Ye<span class="hljs-variable">s:</span> spam(<span class="hljs-number">1</span>)<br><span class="hljs-keyword">no</span>: spam (<span class="hljs-number">1</span>)<br>Ye<span class="hljs-variable">s:</span> dict[<span class="hljs-string">'key'</span>] = <span class="hljs-keyword">list</span>[<span class="hljs-built_in">index</span>]<br>No:  dict [<span class="hljs-string">'key'</span>] = <span class="hljs-keyword">list</span> [<span class="hljs-built_in">index</span>]<br></code></pre></div></td></tr></table></figure><p>在二元操作符两边都加上一个空格, 比如赋值(=), 比较(==, &lt;, &gt;, !=, &lt;&gt;, &lt;=, &gt;=, in, not in, is, is not), 布尔(and, or, not). 至于算术操作符两边的空格该如何使用, 需要你自己好好判断. 不过两侧务必要保持一致.</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">Yes:</span> <span class="hljs-string">x</span> <span class="hljs-string">==</span> <span class="hljs-number">1</span><br><span class="hljs-attr">No:</span>  <span class="hljs-string">x&lt;1</span><br></code></pre></div></td></tr></table></figure><p>当’=’用于指示关键字参数或默认参数值时, 不要在其两侧使用空格.</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes: def <span class="hljs-built_in">complex</span>(<span class="hljs-built_in">real</span>, <span class="hljs-built_in">imag</span>=<span class="hljs-number">0.0</span>): <span class="hljs-keyword">return</span> <span class="hljs-built_in">magic</span>(r=<span class="hljs-built_in">real</span>, <span class="hljs-built_in">i</span>=<span class="hljs-built_in">imag</span>)<br>No:  def <span class="hljs-built_in">complex</span>(<span class="hljs-built_in">real</span>, <span class="hljs-built_in">imag</span> = <span class="hljs-number">0.0</span>): <span class="hljs-keyword">return</span> <span class="hljs-built_in">magic</span>(r = <span class="hljs-built_in">real</span>, <span class="hljs-built_in">i</span> = <span class="hljs-built_in">imag</span>)<br></code></pre></div></td></tr></table></figure><p>不要用空格来垂直对齐多行间的标记, 因为这会成为维护的负担(适用于:, #, =等):</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attr">Yes:</span><br>     <span class="hljs-string">foo</span> <span class="hljs-string">=</span> <span class="hljs-number">1000</span>  <span class="hljs-comment"># comment</span><br>     <span class="hljs-string">long_name</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span>  <span class="hljs-comment"># comment that should not be aligned</span><br><br>     <span class="hljs-string">dictionary</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>         <span class="hljs-attr">"foo":</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>         <span class="hljs-attr">"long_name":</span> <span class="hljs-number">2</span><span class="hljs-string">,</span><br>         <span class="hljs-string">&#125;</span><br><span class="hljs-attr">No:</span><br>     <span class="hljs-string">foo</span>       <span class="hljs-string">=</span> <span class="hljs-number">1000</span>  <span class="hljs-comment"># comment</span><br>     <span class="hljs-string">long_name</span> <span class="hljs-string">=</span> <span class="hljs-number">2</span>     <span class="hljs-comment"># comment that should not be aligned</span><br><br>     <span class="hljs-string">dictionary</span> <span class="hljs-string">=</span> <span class="hljs-string">&#123;</span><br>         <span class="hljs-string">"foo"</span>      <span class="hljs-string">:</span> <span class="hljs-number">1</span><span class="hljs-string">,</span><br>         <span class="hljs-attr">"long_name":</span> <span class="hljs-number">2</span><span class="hljs-string">,</span><br>         <span class="hljs-string">&#125;</span><br></code></pre></div></td></tr></table></figure><h2 id="Shebang"><a href="#Shebang" class="headerlink" title="Shebang"></a>Shebang</h2><p>Tip</p><p>大部分.py文件不必以#!作为文件的开始. 根据 <a href="http://www.python.org/dev/peps/pep-0394/" target="_blank" rel="noopener">PEP-394</a> , 程序的main文件应该以 #!/usr/bin/python2或者 #!/usr/bin/python3开始.</p><p>(译者注: 在计算机科学中, <a href="http://en.wikipedia.org/wiki/Shebang_(Unix" target="_blank" rel="noopener">Shebang</a>) (也称为Hashbang)是一个由井号和叹号构成的字符串行(#!), 其出现在文本文件的第一行的前两个字符. 在文件中存在Shebang的情况下, 类Unix操作系统的程序载入器会分析Shebang后的内容, 将这些内容作为解释器指令, 并调用该指令, 并将载有Shebang的文件路径作为该解释器的参数. 例如, 以指令#!/bin/sh开头的文件在执行时会实际调用/bin/sh程序.)</p><p>#!先用于帮助内核找到Python解释器, 但是在导入模块时, 将会被忽略. 因此只有被直接执行的文件中才有必要加入#!.</p><h2 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h2><p>Tip</p><p>确保对模块, 函数, 方法和行内注释使用正确的风格</p><p><strong>文档字符串</strong></p><blockquote><p>Python有一种独一无二的的注释方式: 使用文档字符串. 文档字符串是包, 模块, 类或函数里的第一个语句. 这些字符串可以通过对象的<strong>doc</strong>成员被自动提取, 并且被pydoc所用. (你可以在你的模块上运行pydoc试一把, 看看它长什么样). 我们对文档字符串的惯例是使用三重双引号”“”( <a href="http://www.python.org/dev/peps/pep-0257/" target="_blank" rel="noopener">PEP-257</a> ). 一个文档字符串应该这样组织: 首先是一行以句号, 问号或惊叹号结尾的概述(或者该文档字符串单纯只有一行). 接着是一个空行. 接着是文档字符串剩下的部分, 它应该与文档字符串的第一行的第一个引号对齐. 下面有更多文档字符串的格式化规范.</p></blockquote><p><strong>模块</strong></p><blockquote><p>每个文件应该包含一个许可样板. 根据项目使用的许可(例如, Apache 2.0, BSD, LGPL, GPL), 选择合适的样板.</p></blockquote><p><strong>函数和方法</strong></p><blockquote><p>下文所指的函数,包括函数, 方法, 以及生成器.</p><p>一个函数必须要有文档字符串, 除非它满足以下条件:</p><ol><li>外部不可见</li><li>非常短小</li><li>简单明了</li></ol><p>文档字符串应该包含函数做什么, 以及输入和输出的详细描述. 通常, 不应该描述”怎么做”, 除非是一些复杂的算法. 文档字符串应该提供足够的信息, 当别人编写代码调用该函数时, 他不需要看一行代码, 只要看文档字符串就可以了. 对于复杂的代码, 在代码旁边加注释会比使用文档字符串更有意义.</p><p>关于函数的几个方面应该在特定的小节中进行描述记录， 这几个方面如下文所述. 每节应该以一个标题行开始. 标题行以冒号结尾. 除标题行外, 节的其他内容应被缩进2个空格.</p><ul><li><p>Args:</p><p>列出每个参数的名字, 并在名字后使用一个冒号和一个空格, 分隔对该参数的描述.如果描述太长超过了单行80字符,使用2或者4个空格的悬挂缩进(与文件其他部分保持一致). 描述应该包括所需的类型和含义. 如果一个函数接受<em>foo(可变长度参数列表)或者**bar (任意关键字参数), 应该详细列出</em>foo和**bar.</p></li><li><p>Returns: (或者 Yields: 用于生成器)</p><p>描述返回值的类型和语义. 如果函数返回None, 这一部分可以省略.</p></li><li><p>Raises:</p><p>列出与接口有关的所有异常.</p></li></ul><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> def fetch_bigtable_rows(big_table, keys, other_silly_variable=None):</span><br><span class="hljs-meta">&gt;</span><span class="bash">     <span class="hljs-string">""</span><span class="hljs-string">"Fetches rows from a Bigtable.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     Retrieves rows pertaining to the given keys from the Table instance</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     represented by big_table.  Silly things may happen if</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     other_silly_variable is not None.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     Args:</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         big_table: An open Bigtable Table instance.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         keys: A sequence of strings representing the key of each table row</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">             to fetch.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         other_silly_variable: Another optional variable, that has a much</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">             longer name than the other args, and which does nothing.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     Returns:</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         A dict mapping keys to the corresponding table row data</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         fetched. Each row is represented as a tuple of strings. For</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         example:</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         &#123;'Serak': ('Rigel VII', 'Preparer'),</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">          'Zim': ('Irk', 'Invader'),</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">          'Lrrr': ('Omicron Persei 8', 'Emperor')&#125;</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         If a key from the keys argument is missing from the dictionary,</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         then that row was not found in the table.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string"> </span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     Raises:</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">         IOError: An error occurred accessing the bigtable.Table object.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"><span class="hljs-string">     "</span><span class="hljs-string">""</span></span><br><span class="hljs-meta">&gt;</span><span class="bash">     pass</span><br><span class="hljs-meta">&gt;</span><br></code></pre></div></td></tr></table></figure></blockquote><p><strong>类</strong></p><blockquote><p>类应该在其定义下有一个用于描述该类的文档字符串. 如果你的类有公共属性(Attributes), 那么文档中应该有一个属性(Attributes)段. 并且应该遵守和函数参数相同的格式.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">&gt; <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span><span class="hljs-params">(object)</span>:</span><br>&gt;     <span class="hljs-string">"""Summary of class here.<br>&gt; <br>&gt;     Longer class information....<br>&gt;     Longer class information....<br>&gt; <br>&gt;     Attributes:<br>&gt;         likes_spam: A boolean indicating if we like SPAM or not.<br>&gt;         eggs: An integer count of the eggs we have laid.<br>&gt;     """</span><br>&gt; <br>&gt;     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self, likes_spam=False)</span>:</span><br>&gt;         <span class="hljs-string">"""Inits SampleClass with blah."""</span><br>&gt;         self.likes_spam = likes_spam<br>&gt;         self.eggs = <span class="hljs-number">0</span><br>&gt; <br>&gt;     <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">public_method</span><span class="hljs-params">(self)</span>:</span><br>&gt;         <span class="hljs-string">"""Performs operation blah."""</span><br>&gt;<br></code></pre></div></td></tr></table></figure></blockquote><p><strong>块注释和行注释</strong></p><blockquote><p>最需要写注释的是代码中那些技巧性的部分. 如果你在下次 <a href="http://en.wikipedia.org/wiki/Code_review" target="_blank" rel="noopener">代码审查</a> 的时候必须解释一下, 那么你应该现在就给它写注释. 对于复杂的操作, 应该在其操作开始前写上若干行注释. 对于不是一目了然的代码, 应在其行尾添加注释.</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># We use a weighted dictionary search to find out where i is in</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># the array.  We extrapolate position based on the largest num</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># in the array and the array size and then do binary search to</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># get the exact number.</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> </span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-keyword">if</span> i &amp; (i-1) == 0:        <span class="hljs-comment"># True if i is 0 or a power of 2.</span></span><br><span class="hljs-meta">&gt;</span><br></code></pre></div></td></tr></table></figure></blockquote><blockquote><p>为了提高可读性, 注释应该至少离开代码2个空格.</p><p>另一方面, 绝不要描述代码. 假设阅读代码的人比你更懂Python, 他只是不知道你的代码要做什么.</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># BAD COMMENT: Now go through the b array and make sure whenever i occurs</span></span><br><span class="hljs-meta">&gt;</span><span class="bash"> <span class="hljs-comment"># the next element is i+1</span></span><br><span class="hljs-meta">&gt;</span><br></code></pre></div></td></tr></table></figure></blockquote><h2 id="类"><a href="#类" class="headerlink" title="类"></a>类</h2><p>Tip</p><p>如果一个类不继承自其它类, 就显式的从object继承. 嵌套类也一样.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span><span class="hljs-params">(object)</span>:</span><br>         <span class="hljs-keyword">pass</span><br><br><br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span><span class="hljs-params">(object)</span>:</span><br><br>         <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span><span class="hljs-params">(object)</span>:</span><br>             <span class="hljs-keyword">pass</span><br><br><br>     <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">ChildClass</span><span class="hljs-params">(ParentClass)</span>:</span><br>         <span class="hljs-string">"""Explicitly inherits from another class already."""</span><br>No: <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">SampleClass</span>:</span><br>        <span class="hljs-keyword">pass</span><br><br><br>    <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">OuterClass</span>:</span><br><br>        <span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">InnerClass</span>:</span><br>            <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><p>继承自 <code>object</code> 是为了使属性(properties)正常工作, 并且这样可以保护你的代码, 使其不受 <a href="http://www.python.org/dev/peps/pep-3000/" target="_blank" rel="noopener">PEP-3000</a>的一个特殊的潜在不兼容性影响. 这样做也定义了一些特殊的方法, 这些方法实现了对象的默认语义, 包括 <code>__new__, __init__, __delattr__, __getattribute__, __setattr__, __hash__, __repr__, and __str__</code> .</p><h2 id="字符串"><a href="#字符串" class="headerlink" title="字符串"></a>字符串</h2><p>Tip</p><p>即使参数都是字符串, 使用%操作符或者格式化方法格式化字符串. 不过也不能一概而论, 你需要在+和%之间好好判定.</p><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes: x = a + b<br>     x = <span class="hljs-string">'%s, %s!'</span> % (imperative, expletive)<br>     x = <span class="hljs-string">'&#123;&#125;, &#123;&#125;!'</span>.<span class="hljs-built_in">format</span>(imperative, expletive)<br>     x = <span class="hljs-string">'name: %s; score: %d'</span> % (<span class="hljs-built_in">name</span>, n)<br>     x = <span class="hljs-string">'name: &#123;&#125;; score: &#123;&#125;'</span>.<span class="hljs-built_in">format</span>(<span class="hljs-built_in">name</span>, n)<br>No: x = <span class="hljs-string">'%s%s'</span> % (a, b)  <span class="hljs-meta"># use + in this case</span><br>    x = <span class="hljs-string">'&#123;&#125;&#123;&#125;'</span>.<span class="hljs-built_in">format</span>(a, b)  <span class="hljs-meta"># use + in this case</span><br>    x = imperative + <span class="hljs-string">', '</span> + expletive + <span class="hljs-string">'!'</span><br>    x = <span class="hljs-string">'name: '</span> + <span class="hljs-built_in">name</span> + <span class="hljs-string">'; score: '</span> + <span class="hljs-built_in">str</span>(n)<br></code></pre></div></td></tr></table></figure><p>避免在循环中用+和+=操作符来累加字符串. 由于字符串是不可变的, 这样做会创建不必要的临时对象, 并且导致二次方而不是线性的运行时间. 作为替代方案, 你可以将每个子串加入列表, 然后在循环结束后用 <code>.join</code> 连接列表. (也可以将每个子串写入一个 <code>cStringIO.StringIO</code> 缓存中.)</p><figure class="highlight vbnet"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes: items = [<span class="hljs-comment">'<span class="hljs-doctag">&lt;table&gt;</span>']</span><br>     <span class="hljs-keyword">for</span> last_name, first_name <span class="hljs-keyword">in</span> employee_list:<br>         items.append(<span class="hljs-comment">'<span class="hljs-doctag">&lt;tr&gt;</span><span class="hljs-doctag">&lt;td&gt;</span>%s, %s<span class="hljs-doctag">&lt;/td&gt;</span><span class="hljs-doctag">&lt;/tr&gt;</span>' % (last_name, first_name))</span><br>     items.append(<span class="hljs-comment">'<span class="hljs-doctag">&lt;/table&gt;</span>')</span><br>     employee_table = <span class="hljs-comment">''.join(items)</span><br>No: employee_table = <span class="hljs-comment">'<span class="hljs-doctag">&lt;table&gt;</span>'</span><br>    <span class="hljs-keyword">for</span> last_name, first_name <span class="hljs-keyword">in</span> employee_list:<br>        employee_table += <span class="hljs-comment">'<span class="hljs-doctag">&lt;tr&gt;</span><span class="hljs-doctag">&lt;td&gt;</span>%s, %s<span class="hljs-doctag">&lt;/td&gt;</span><span class="hljs-doctag">&lt;/tr&gt;</span>' % (last_name, first_name)</span><br>    employee_table += <span class="hljs-comment">'<span class="hljs-doctag">&lt;/table&gt;</span>'</span><br></code></pre></div></td></tr></table></figure><p>在同一个文件中, 保持使用字符串引号的一致性. 使用单引号’或者双引号”之一用以引用字符串, 并在同一文件中沿用. 在字符串内可以使用另外一种引号, 以避免在字符串中使用. GPyLint已经加入了这一检查.</p><p>(译者注:GPyLint疑为笔误, 应为PyLint.)</p><figure class="highlight smalltalk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-type">Yes</span>:<br>     <span class="hljs-type">Python</span>(<span class="hljs-string">'Why are you hiding your eyes?'</span>)<br>     <span class="hljs-type">Gollum</span>(<span class="hljs-comment">"I'm scared of lint errors."</span>)<br>     <span class="hljs-type">Narrator</span>(<span class="hljs-string">'"Good!" thought a happy Python reviewer.'</span>)<br><span class="hljs-type">No</span>:<br>     <span class="hljs-type">Python</span>(<span class="hljs-comment">"Why are you hiding your eyes?"</span>)<br>     <span class="hljs-type">Gollum</span>(<span class="hljs-string">'The lint. It burns. It burns us.'</span>)<br>     <span class="hljs-type">Gollum</span>(<span class="hljs-comment">"Always the great lint. Watching. Watching."</span>)<br></code></pre></div></td></tr></table></figure><p>为多行字符串使用三重双引号”“”而非三重单引号’‘’. 当且仅当项目中使用单引号’来引用字符串时, 才可能会使用三重’‘’为非文档字符串的多行字符串来标识引用. 文档字符串必须使用三重双引号”“”. 不过要注意, 通常用隐式行连接更清晰, 因为多行字符串与程序其他部分的缩进方式不一致.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Yes:<br>    <span class="hljs-keyword">print</span> (<span class="hljs-string">"This is much nicer.\n"</span><br>           <span class="hljs-string">"Do it this way.\n"</span>)<br>No:<br>      <span class="hljs-keyword">print</span> <span class="hljs-string">"""This is pretty ugly.<br>  Don't do this.<br>  """</span><br></code></pre></div></td></tr></table></figure><h2 id="文件和sockets"><a href="#文件和sockets" class="headerlink" title="文件和sockets"></a>文件和sockets</h2><p>Tip</p><p>在文件和sockets结束时, 显式的关闭它.</p><p>除文件外, sockets或其他类似文件的对象在没有必要的情况下打开, 会有许多副作用, 例如:</p><ol><li>它们可能会消耗有限的系统资源, 如文件描述符. 如果这些资源在使用后没有及时归还系统, 那么用于处理这些对象的代码会将资源消耗殆尽.</li><li>持有文件将会阻止对于文件的其他诸如移动、删除之类的操作.</li><li>仅仅是从逻辑上关闭文件和sockets, 那么它们仍然可能会被其共享的程序在无意中进行读或者写操作. 只有当它们真正被关闭后, 对于它们尝试进行读或者写操作将会抛出异常, 并使得问题快速显现出来.</li></ol><p>而且, 幻想当文件对象析构时, 文件和sockets会自动关闭, 试图将文件对象的生命周期和文件的状态绑定在一起的想法, 都是不现实的. 因为有如下原因:</p><ol><li>没有任何方法可以确保运行环境会真正的执行文件的析构. 不同的Python实现采用不同的内存管理技术, 比如延时垃圾处理机制. 延时垃圾处理机制可能会导致对象生命周期被任意无限制的延长.</li><li>对于文件意外的引用,会导致对于文件的持有时间超出预期(比如对于异常的跟踪, 包含有全局变量等).</li></ol><p>推荐使用 <a href="http://docs.python.org/reference/compound_stmts.html#the-with-statement" target="_blank" rel="noopener">“with”语句</a> 以管理文件:</p><figure class="highlight livecodeserver"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">with</span> <span class="hljs-built_in">open</span>(<span class="hljs-string">"hello.txt"</span>) <span class="hljs-keyword">as</span> hello_file:<br>    <span class="hljs-keyword">for</span> <span class="hljs-built_in">line</span> <span class="hljs-keyword">in</span> hello_file:<br>        print <span class="hljs-built_in">line</span><br></code></pre></div></td></tr></table></figure><p>对于不支持使用”with”语句的类似文件的对象,使用 contextlib.closing():</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> contextlib<br><br><span class="hljs-keyword">with</span> contextlib.closing(urllib.urlopen(<span class="hljs-string">"http://www.python.org/"</span>)) <span class="hljs-keyword">as</span> front_page:<br>    <span class="hljs-keyword">for</span> line <span class="hljs-keyword">in</span> front_page:<br>        <span class="hljs-keyword">print</span> line<br></code></pre></div></td></tr></table></figure><p>Legacy AppEngine 中Python 2.5的代码如使用”with”语句, 需要添加 “from <strong>future</strong> import with_statement”.</p><h2 id="TODO注释"><a href="#TODO注释" class="headerlink" title="TODO注释"></a>TODO注释</h2><p>Tip</p><p>为临时代码使用TODO注释, 它是一种短期解决方案. 不算完美, 但够好了.</p><p>TODO注释应该在所有开头处包含”TODO”字符串, 紧跟着是用括号括起来的你的名字, email地址或其它标识符. 然后是一个可选的冒号. 接着必须有一行注释, 解释要做什么. 主要目的是为了有一个统一的TODO格式, 这样添加注释的人就可以搜索到(并可以按需提供更多细节). 写了TODO注释并不保证写的人会亲自解决问题. 当你写了一个TODO, 请注上你的名字.</p><figure class="highlight vhdl"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"># TODO(kl@gmail.com): <span class="hljs-keyword">Use</span> a <span class="hljs-string">"*"</span> here <span class="hljs-keyword">for</span> <span class="hljs-built_in">string</span> repetition.<br># TODO(Zeke) Change this <span class="hljs-keyword">to</span> <span class="hljs-keyword">use</span> relations.<br></code></pre></div></td></tr></table></figure><p>如果你的TODO是”将来做某事”的形式, 那么请确保你包含了一个指定的日期(“2009年11月解决”)或者一个特定的事件(“等到所有的客户都可以处理XML请求就移除这些代码”).</p><h2 id="导入格式"><a href="#导入格式" class="headerlink" title="导入格式"></a>导入格式</h2><p>Tip</p><p>每个导入应该独占一行</p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-type">Yes</span>: <span class="hljs-keyword">import</span> os<br>     <span class="hljs-keyword">import</span> sys<br><span class="hljs-type">No</span>:  <span class="hljs-keyword">import</span> os, sys<br></code></pre></div></td></tr></table></figure><p>导入总应该放在文件顶部, 位于模块注释和文档字符串之后, 模块全局变量和常量之前. 导入应该按照从最通用到最不通用的顺序分组:</p><ol><li>标准库导入</li><li>第三方库导入</li><li>应用程序指定导入</li></ol><p>每种分组中, 应该根据每个模块的完整包路径按字典序排序, 忽略大小写.</p><figure class="highlight elm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">import</span> foo<br><span class="hljs-title">from</span> foo <span class="hljs-keyword">import</span> bar<br><span class="hljs-title">from</span> foo.bar <span class="hljs-keyword">import</span> baz<br><span class="hljs-title">from</span> foo.bar <span class="hljs-keyword">import</span> Quux<br><span class="hljs-title">from</span> <span class="hljs-type">Foob</span> <span class="hljs-keyword">import</span> ar<br></code></pre></div></td></tr></table></figure><h2 id="语句"><a href="#语句" class="headerlink" title="语句"></a>语句</h2><p>Tip</p><p>通常每个语句应该独占一行</p><p>不过, 如果测试结果与测试语句在一行放得下, 你也可以将它们放在同一行. 如果是if语句, 只有在没有else时才能这样做. 特别地, 绝不要对 <code>try/except</code> 这样做, 因为try和except不能放在同一行.</p><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">Yes</span>:<br><br>  if <span class="hljs-attribute">foo</span>: bar(foo)<br><span class="hljs-attribute">No</span>:<br><br>  if <span class="hljs-attribute">foo</span>: bar(foo)<br>  <span class="hljs-attribute">else</span>:   baz(foo)<br><br>  <span class="hljs-attribute">try</span>:               bar(foo)<br>  except <span class="hljs-attribute">ValueError</span>: baz(foo)<br><br>  <span class="hljs-attribute">try</span>:<br>      bar(foo)<br>  except <span class="hljs-attribute">ValueError</span>: baz(foo)<br></code></pre></div></td></tr></table></figure><h2 id="访问控制"><a href="#访问控制" class="headerlink" title="访问控制"></a>访问控制</h2><p>Tip</p><p>在Python中, 对于琐碎又不太重要的访问函数, 你应该直接使用公有变量来取代它们, 这样可以避免额外的函数调用开销. 当添加更多功能时, 你可以用属性(property)来保持语法的一致性.</p><p>(译者注: 重视封装的面向对象程序员看到这个可能会很反感, 因为他们一直被教育: 所有成员变量都必须是私有的! 其实, 那真的是有点麻烦啊. 试着去接受Pythonic哲学吧)</p><p>另一方面, 如果访问更复杂, 或者变量的访问开销很显著, 那么你应该使用像 <code>get_foo()</code> 和 <code>set_foo()</code>这样的函数调用. 如果之前的代码行为允许通过属性(property)访问 , 那么就不要将新的访问函数与属性绑定. 这样, 任何试图通过老方法访问变量的代码就没法运行, 使用者也就会意识到复杂性发生了变化.</p><h2 id="命名"><a href="#命名" class="headerlink" title="命名"></a>命名</h2><p>Tip</p><p>module_name, package_name, ClassName, method_name, ExceptionName, function_name, GLOBAL_VAR_NAME, instance_var_name, function_parameter_name, local_var_name.</p><p><strong>应该避免的名称</strong></p><blockquote><ol><li>单字符名称, 除了计数器和迭代器.</li><li>包/模块名中的连字符(-)</li><li>双下划线开头并结尾的名称(Python保留, 例如<strong>init</strong>)</li></ol></blockquote><p><strong>命名约定</strong></p><blockquote><ol><li>所谓”内部(Internal)”表示仅模块内可用, 或者, 在类内是保护或私有的.</li><li>用单下划线(_)开头表示模块变量或函数是protected的(使用from module import *时不会包含).</li><li>用双下划线(__)开头的实例变量或方法表示类内私有.</li><li>将相关的类和顶级函数放在同一个模块里. 不像Java, 没必要限制一个类一个模块.</li><li>对类名使用大写字母开头的单词(如CapWords, 即Pascal风格), 但是模块名应该用小写加下划线的方式(如lower_with_under.py). 尽管已经有很多现存的模块使用类似于CapWords.py这样的命名, 但现在已经不鼓励这样做, 因为如果模块名碰巧和类名一致, 这会让人困扰.</li></ol></blockquote><p><strong>Python之父Guido推荐的规范</strong></p><table><thead><tr><th>Type</th><th>Public</th><th>Internal</th></tr></thead><tbody><tr><td>Modules</td><td>lower_with_under</td><td>_lower_with_under</td></tr><tr><td>Packages</td><td>lower_with_under</td><td></td></tr><tr><td>Classes</td><td>CapWords</td><td>_CapWords</td></tr><tr><td>Exceptions</td><td>CapWords</td><td></td></tr><tr><td>Functions</td><td>lower_with_under()</td><td>_lower_with_under()</td></tr><tr><td>Global/Class Constants</td><td>CAPS_WITH_UNDER</td><td>_CAPS_WITH_UNDER</td></tr><tr><td>Global/Class Variables</td><td>lower_with_under</td><td>_lower_with_under</td></tr><tr><td>Instance Variables</td><td>lower_with_under</td><td>_lower_with_under (protected) or __lower_with_under (private)</td></tr><tr><td>Method Names</td><td>lower_with_under()</td><td>_lower_with_under() (protected) or __lower_with_under() (private)</td></tr><tr><td>Function/Method Parameters</td><td>lower_with_under</td><td></td></tr><tr><td>Local Variables</td><td>lower_with_under</td></tr></tbody></table><h2 id="Main"><a href="#Main" class="headerlink" title="Main"></a>Main</h2><p>Tip</p><p>即使是一个打算被用作脚本的文件, 也应该是可导入的. 并且简单的导入不应该导致这个脚本的主功能(main functionality)被执行, 这是一种副作用. 主功能应该放在一个main()函数中.</p><p>在Python中, pydoc以及单元测试要求模块必须是可导入的. 你的代码应该在执行主程序前总是检查 <code>if __name__ == &#39;__main__&#39;</code> , 这样当模块被导入时主程序就不会被执行.</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">main</span><span class="hljs-params">()</span>:</span><br>      ...<br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">'__main__'</span>:<br>    main()<br></code></pre></div></td></tr></table></figure><p>所有的顶级代码在模块导入时都会被执行. 要小心不要去调用函数, 创建对象, 或者执行那些不应该在使用pydoc时执行的操作.</p>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>MySQL索引原理及慢查询优化</title>
      <link href="2018/06/23/%E8%83%8C%E6%99%AF/"/>
      <url>2018/06/23/%E8%83%8C%E6%99%AF/</url>
      
        <content type="html"><![CDATA[<h2 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h2><p>MySQL凭借着出色的性能、低廉的成本、丰富的资源，已经成为绝大多数互联网公司的首选关系型数据库。虽然性能出色，但所谓“好马配好鞍”，如何能够更好的使用它，已经成为开发工程师的必修课，我们经常会从职位描述上看到诸如“精通MySQL”、“SQL语句优化”、“了解数据库原理”等要求。我们知道一般的应用系统，读写比例在10:1左右，而且插入操作和一般的更新操作很少出现性能问题，遇到最多的，也是最容易出问题的，还是一些复杂的查询操作，所以查询语句的优化显然是重中之重。<br><a id="more"></a></p><p>本人从13年7月份起，一直在美团核心业务系统部做慢查询的优化工作，共计十余个系统，累计解决和积累了上百个慢查询案例。随着业务的复杂性提升，遇到的问题千奇百怪，五花八门，匪夷所思。本文旨在以开发工程师的角度来解释数据库索引的原理和如何优化慢查询。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   <span class="hljs-keyword">count</span>(*) <br><span class="hljs-keyword">from</span><br>   task <br><span class="hljs-keyword">where</span><br>   <span class="hljs-keyword">status</span>=<span class="hljs-number">2</span> <br>   <span class="hljs-keyword">and</span> operator_id=<span class="hljs-number">20839</span> <br>   <span class="hljs-keyword">and</span> operate_time&gt;<span class="hljs-number">1371169729</span> <br>   <span class="hljs-keyword">and</span> operate_time&lt;<span class="hljs-number">1371174603</span> <br>   <span class="hljs-keyword">and</span> <span class="hljs-keyword">type</span>=<span class="hljs-number">2</span>;<br></code></pre></div></td></tr></table></figure><p>系统使用者反应有一个功能越来越慢，于是工程师找到了上面的SQL。</p><p>并且兴致冲冲的找到了我，“这个SQL需要优化，给我把每个字段都加上索引”。</p><p>我很惊讶，问道：“为什么需要每个字段都加上索引？”</p><p>“把查询的字段都加上索引会更快”，工程师信心满满。</p><p>“这种情况完全可以建一个联合索引，因为是最左前缀匹配，所以operate_time需要放到最后，而且还需要把其他相关的查询都拿来，需要做一个综合评估。”</p><p>“联合索引？最左前缀匹配？综合评估？”工程师不禁陷入了沉思。</p><p>多数情况下，我们知道索引能够提高查询效率，但应该如何建立索引？索引的顺序如何？许多人却只知道大概。其实理解这些概念并不难，而且索引的原理远没有想象的那么复杂。</p><h2 id="索引目的"><a href="#索引目的" class="headerlink" title="索引目的"></a>索引目的</h2><p>索引的目的在于提高查询效率，可以类比字典，如果要查“mysql”这个单词，我们肯定需要定位到m字母，然后从下往下找到y字母，再找到剩下的sql。如果没有索引，那么你可能需要把所有单词看一遍才能找到你想要的，如果我想找到m开头的单词呢？或者ze开头的单词呢？是不是觉得如果没有索引，这个事情根本无法完成？</p><h2 id="索引原理"><a href="#索引原理" class="headerlink" title="索引原理"></a>索引原理</h2><p>除了词典，生活中随处可见索引的例子，如火车站的车次表、图书的目录等。它们的原理都是一样的，通过不断的缩小想要获得数据的范围来筛选出最终想要的结果，同时把随机的事件变成顺序的事件，也就是我们总是通过同一种查找方式来锁定数据。</p><p>数据库也是一样，但显然要复杂许多，因为不仅面临着等值查询，还有范围查询(&gt;、&lt;、between、in)、模糊查询(like)、并集查询(or)等等。数据库应该选择怎么样的方式来应对所有的问题呢？我们回想字典的例子，能不能把数据分成段，然后分段查询呢？最简单的如果1000条数据，1到100分成第一段，101到200分成第二段，201到300分成第三段……这样查第250条数据，只要找第三段就可以了，一下子去除了90%的无效数据。但如果是1千万的记录呢，分成几段比较好？稍有算法基础的同学会想到搜索树，其平均复杂度是<strong>O(logN)</strong>，具有不错的查询性能。但这里我们忽略了一个关键的问题，复杂度模型是基于每次相同的操作成本来考虑的，数据库实现比较复杂，数据保存在磁盘上，而为了提高性能，每次又可以把部分数据读入内存来计算，因为我们知道访问磁盘的成本大概是访问内存的十万倍左右，所以简单的搜索树难以满足复杂的应用场景。</p><h3 id="磁盘IO与预读"><a href="#磁盘IO与预读" class="headerlink" title="磁盘IO与预读"></a>磁盘IO与预读</h3><p>前面提到了访问磁盘，那么这里先简单介绍一下磁盘IO和预读，磁盘读取数据靠的是机械运动，每次读取数据花费的时间可以分为<code>寻道时间</code>、<code>旋转延迟</code>、<code>传输时间</code>三个部分。</p><ul><li><strong>寻道时间</strong>指的是磁臂移动到指定磁道所需要的时间，主流磁盘一般在5ms以下；</li><li><strong>旋转延迟</strong>就是我们经常听说的磁盘转速，比如一个磁盘7200转，表示每分钟能转7200次，也就是说1秒钟能转120次，旋转延迟就是1/120/2 = 4.17ms；</li><li><strong>传输时间</strong>指的是从磁盘读出或将数据写入磁盘的时间，一般在零点几毫秒，相对于前两个时间可以忽略不计。</li></ul><p>那么访问一次磁盘的时间，即一次磁盘IO的时间约等于5+4.17 = 9ms左右，听起来还挺不错的，但要知道一台500 -MIPS的机器每秒可以执行5亿条指令，因为指令依靠的是电的性质，换句话说执行一次IO的时间可以执行40万条指令，数据库动辄十万百万乃至千万级数据，每次9毫秒的时间，显然是个灾难。下图是计算机硬件延迟的对比图，供大家参考：</p><p><img src="https://awps-assets.meituan.net/mit-x/blog-images-bundle-2014/7f46a0a4.png" alt="various-system-software-hardware-latencies"></p><p>various-system-software-hardware-latencies</p><p>考虑到磁盘IO是非常高昂的操作，计算机操作系统做了一些优化，当一次IO时，不光把当前磁盘地址的数据，而是把相邻的数据也都读取到内存缓冲区内，因为局部预读性原理告诉我们，当计算机访问一个地址的数据的时候，与其相邻的数据也会很快被访问到。每一次IO读取的数据我们称之为一页(page)。具体一页有多大数据跟操作系统有关，一般为4k或8k，也就是我们读取一页内的数据时候，实际上才发生了一次IO，这个理论对于索引的数据结构设计非常有帮助。</p><h3 id="索引的数据结构"><a href="#索引的数据结构" class="headerlink" title="索引的数据结构"></a>索引的数据结构</h3><p>前面讲了生活中索引的例子，索引的基本原理，数据库的复杂性，又讲了操作系统的相关知识，目的就是让大家了解，任何一种数据结构都不是凭空产生的，一定会有它的背景和使用场景，我们现在总结一下，我们需要这种数据结构能够做些什么，其实很简单，那就是：每次查找数据时把磁盘IO次数控制在一个很小的数量级，最好是常数数量级。那么我们就想到如果一个高度可控的多路搜索树是否能满足需求呢？就这样，b+树应运而生。</p><h3 id="详解b-树"><a href="#详解b-树" class="headerlink" title="详解b+树"></a>详解b+树</h3><p><img src="https://s2.ax1x.com/2019/04/28/Elu1yD.jpg" alt="Elu1yD.jpg"></p><p>b+树</p><p>如上图，是一颗b+树，关于b+树的定义可以参见<a href="http://zh.wikipedia.org/wiki/B%2B%E6%A0%91" target="_blank" rel="noopener">B+树</a>，这里只说一些重点：</p><p>浅蓝色的块我们称之为一个磁盘块，可以看到每个磁盘块包含几个数据项（深蓝色所示）和指针（黄色所示），如磁盘块1包含数据项17和35，包含指针P1、P2、P3，P1表示小于17的磁盘块，P2表示在17和35之间的磁盘块，P3表示大于35的磁盘块。真实的数据存在于叶子节点即3、5、9、10、13、15、28、29、36、60、75、79、90、99。非叶子节点只不存储真实的数据，只存储指引搜索方向的数据项，如17、35并不真实存在于数据表中。</p><h3 id="b-树的查找过程"><a href="#b-树的查找过程" class="headerlink" title="b+树的查找过程"></a>b+树的查找过程</h3><p>如图所示，如果要查找数据项29：</p><ul><li>首先会把磁盘块1由磁盘加载到内存，此时发生一次IO，在内存中用二分查找确定29在17和35之间，锁定磁盘块1的P2指针，内存时间因为非常短（相比磁盘的IO）可以忽略不计，</li><li>通过磁盘块1的P2指针的磁盘地址把磁盘块3由磁盘加载到内存，发生第二次IO，</li><li>29在26和30之间，锁定磁盘块3的P2指针，通过指针加载磁盘块8到内存，发生第三次IO，同时内存中做二分查找找到29，结束查询，总计三次IO。<br>真实的情况是，3层的b+树可以表示上百万的数据，如果上百万的数据查找只需要三次IO，性能提高将是巨大的，如果没有索引，每个数据项都要发生一次IO，那么总共需要百万次的IO，显然成本非常非常高。</li></ul><h3 id="b-树性质"><a href="#b-树性质" class="headerlink" title="b+树性质"></a>b+树性质</h3><ol><li><p>通过上面的分析，我们知道IO次数取决于b+数的高度h，假设当前数据表的数据为N，每个磁盘块的数据项的数量是m，则有h=㏒(m+1)N，当数据量N一定的情况下，m越大，h越小；而m = 磁盘块的大小 / 数据项的大小，磁盘块的大小也就是一个数据页的大小，是固定的，如果数据项占的空间越小，数据项的数量越多，树的高度越低。这就是为什么每个数据项，即索引字段要尽量的小，比如int占4字节，要比bigint8字节少一半。这也是为什么b+树要求把真实的数据放到叶子节点而不是内层节点，一旦放到内层节点，磁盘块的数据项会大幅度下降，导致树增高。当数据项等于1时将会退化成线性表。</p></li><li><p>当b+树的数据项是复合的数据结构，比如(name,age,sex)的时候，b+数是按照从左到右的顺序来建立搜索树的，比如当(张三,20,F)这样的数据来检索的时候，b+树会优先比较name来确定下一步的所搜方向，如果name相同再依次比较age和sex，最后得到检索的数据；但当(20,F)这样的没有name的数据来的时候，b+树就不知道下一步该查哪个节点，因为建立搜索树的时候name就是第一个比较因子，必须要先根据name来搜索才能知道下一步去哪里查询。比如当(张三,F)这样的数据来检索时，b+树可以用name来指定搜索方向，但下一个字段age的缺失，所以只能把名字等于张三的数据都找到，然后再匹配性别是F的数据了， 这个是非常重要的性质，即索引的最左匹配特性。</p></li></ol><p>关于MySQL索引原理是比较枯燥的东西，大家只需要有一个感性的认识，并不需要理解得非常透彻和深入。我们回头来看看一开始我们说的慢查询，了解完索引原理之后，大家是不是有什么想法呢？先总结一下索引的几大基本原则：</p><h2 id="建索引的几大原则"><a href="#建索引的几大原则" class="headerlink" title="建索引的几大原则"></a>建索引的几大原则</h2><ol><li><p>最左前缀匹配原则，非常重要的原则，mysql会一直向右匹配直到遇到范围查询(&gt;、&lt;、between、like)就停止匹配，比如a = 1 and b = 2 and c &gt; 3 and d = 4 如果建立(a,b,c,d)顺序的索引，d是用不到索引的，如果建立(a,b,d,c)的索引则都可以用到，a,b,d的顺序可以任意调整。 </p></li><li><p>=和in可以乱序，比如a = 1 and b = 2 and c = 3 建立(a,b,c)索引可以任意顺序，mysql的查询优化器会帮你优化成索引可以识别的形式。 </p></li><li><p>尽量选择区分度高的列作为索引,区分度的公式是count(distinct col)/count(*)，表示字段不重复的比例，比例越大我们扫描的记录数越少，唯一键的区分度是1，而一些状态、性别字段可能在大数据面前区分度就是0，那可能有人会问，这个比例有什么经验值吗？使用场景不同，这个值也很难确定，一般需要join的字段我们都要求是0.1以上，即平均1条扫描10条记录。</p></li><li><p>索引列不能参与计算，保持列“干净”，比如from_unixtime(create_time) = ’2014-05-29’就不能使用到索引，原因很简单，b+树中存的都是数据表中的字段值，但进行检索时，需要把所有元素都应用函数才能比较，显然成本太大。所以语句应该写成create_time = unix_timestamp(’2014-05-29’)。</p></li><li><p>尽量的扩展索引，不要新建索引。比如表中已经有a的索引，现在要加(a,b)的索引，那么只需要修改原来的索引即可。</p></li></ol><h2 id="回到开始的慢查询"><a href="#回到开始的慢查询" class="headerlink" title="回到开始的慢查询"></a>回到开始的慢查询</h2><p>根据最左匹配原则，最开始的sql语句的索引应该是status、operator_id、type、operate_time的联合索引；其中status、operator_id、type的顺序可以颠倒，所以我才会说，把这个表的所有相关查询都找到，会综合分析； 比如还有如下查询：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> * <span class="hljs-keyword">from</span> task <span class="hljs-keyword">where</span> <span class="hljs-keyword">status</span> = <span class="hljs-number">0</span> <span class="hljs-keyword">and</span> <span class="hljs-keyword">type</span> = <span class="hljs-number">12</span> <span class="hljs-keyword">limit</span> <span class="hljs-number">10</span>;<br><span class="hljs-keyword">select</span> <span class="hljs-keyword">count</span>(*) <span class="hljs-keyword">from</span> task <span class="hljs-keyword">where</span> <span class="hljs-keyword">status</span> = <span class="hljs-number">0</span> ;<br></code></pre></div></td></tr></table></figure><p>那么索引建立成(status,type,operator_id,operate_time)就是非常正确的，因为可以覆盖到所有情况。这个就是利用了索引的最左匹配的原则</p><h2 id="查询优化神器-explain命令"><a href="#查询优化神器-explain命令" class="headerlink" title="查询优化神器 - explain命令"></a>查询优化神器 - explain命令</h2><p>关于explain命令相信大家并不陌生，具体用法和字段含义可以参考官网<a href="http://dev.mysql.com/doc/refman/5.5/en/explain-output.html" target="_blank" rel="noopener">explain-output</a>，这里需要强调rows是核心指标，绝大部分rows小的语句执行一定很快（有例外，下面会讲到）。所以优化语句基本上都是在优化rows。</p><h2 id="慢查询优化基本步骤"><a href="#慢查询优化基本步骤" class="headerlink" title="慢查询优化基本步骤"></a>慢查询优化基本步骤</h2><p>0.先运行看看是否真的很慢，注意设置SQL_NO_CACHE 1.where条件单表查，锁定最小返回记录表。这句话的意思是把查询语句的where都应用到表中返回的记录数最小的表开始查起，单表每个字段分别查询，看哪个字段的区分度最高 2.explain查看执行计划，是否与1预期一致（从锁定记录较少的表开始查询） 3.order by limit 形式的sql语句让排序的表优先查 4.了解业务方使用场景 5.加索引时参照建索引的几大原则 6.观察结果，不符合预期继续从0分析</p><h2 id="几个慢查询案例"><a href="#几个慢查询案例" class="headerlink" title="几个慢查询案例"></a>几个慢查询案例</h2><p>下面几个例子详细解释了如何分析和优化慢查询。</p><h3 id="复杂语句写法"><a href="#复杂语句写法" class="headerlink" title="复杂语句写法"></a>复杂语句写法</h3><p>很多情况下，我们写SQL只是为了实现功能，这只是第一步，不同的语句书写方式对于效率往往有本质的差别，这要求我们对mysql的执行计划和索引原则有非常清楚的认识，请看下面的语句：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   <span class="hljs-keyword">distinct</span> cert.emp_id <br><span class="hljs-keyword">from</span><br>   cm_log cl <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   (<br>      <span class="hljs-keyword">select</span><br>         emp.id <span class="hljs-keyword">as</span> emp_id,<br>         emp_cert.id <span class="hljs-keyword">as</span> cert_id <br>      <span class="hljs-keyword">from</span><br>         employee emp <br>      <span class="hljs-keyword">left</span> <span class="hljs-keyword">join</span><br>         emp_certificate emp_cert <br>            <span class="hljs-keyword">on</span> emp.id = emp_cert.emp_id <br>      <span class="hljs-keyword">where</span><br>         emp.is_deleted=<span class="hljs-number">0</span><br>   ) cert <br>      <span class="hljs-keyword">on</span> (<br>         cl.ref_table=<span class="hljs-string">'Employee'</span> <br>         <span class="hljs-keyword">and</span> cl.ref_oid= cert.emp_id<br>      ) <br>      <span class="hljs-keyword">or</span> (<br>         cl.ref_table=<span class="hljs-string">'EmpCertificate'</span> <br>         <span class="hljs-keyword">and</span> cl.ref_oid= cert.cert_id<br>      ) <br><span class="hljs-keyword">where</span><br>   cl.last_upd_date &gt;=<span class="hljs-string">'2013-11-07 15:03:00'</span> <br>   <span class="hljs-keyword">and</span> cl.last_upd_date&lt;=<span class="hljs-string">'2013-11-08 16:00:00'</span>;<br></code></pre></div></td></tr></table></figure><p>0.先运行一下，53条记录 1.87秒，又没有用聚合语句，比较慢</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">53 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">1.87</span> sec)<br></code></pre></div></td></tr></table></figure><p>1.explain</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+<br>| id | select_type | table      | type  | possible_keys                   | key                   | key_len | ref               | rows  | Extra                          |<br>+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+<br>|  1 | PRIMARY     | cl         | range | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date     | 8       | NULL              |   379 | Using where; Using temporary   |<br>|  1 | PRIMARY     | &lt;derived2&gt; | ALL   | NULL                            | NULL                  | NULL    | NULL              | 63727 | Using where; Using join buffer |<br>|  2 | DERIVED     | emp        | ALL   | NULL                            | NULL                  | NULL    | NULL              | 13317 | Using where                    |<br>|  2 | DERIVED     | emp_cert   | ref   | emp_certificate_empid           | emp_certificate_empid | 4       | meituanorg.emp.id |     1 | Using index                    |<br>+----+-------------+------------+-------+---------------------------------+-----------------------+---------+-------------------+-------+--------------------------------+<br></code></pre></div></td></tr></table></figure><p>简述一下执行计划，首先mysql根据idx_last_upd_date索引扫描cm_log表获得379条记录；然后查表扫描了63727条记录，分为两部分，derived表示构造表，也就是不存在的表，可以简单理解成是一个语句形成的结果集，后面的数字表示语句的ID。derived2表示的是ID = 2的查询构造了虚拟表，并且返回了63727条记录。我们再来看看ID = 2的语句究竟做了写什么返回了这么大量的数据，首先全表扫描employee表13317条记录，然后根据索引emp_certificate_empid关联emp_certificate表，rows = 1表示，每个关联都只锁定了一条记录，效率比较高。获得后，再和cm_log的379条记录根据规则关联。从执行过程上可以看出返回了太多的数据，返回的数据绝大部分cm_log都用不到，因为cm_log只锁定了379条记录。</p><p>如何优化呢？可以看到我们在运行完后还是要和cm_log做join,那么我们能不能之前和cm_log做join呢？仔细分析语句不难发现，其基本思想是如果cm_log的ref_table是EmpCertificate就关联emp_certificate表，如果ref_table是Employee就关联employee表，我们完全可以拆成两部分，并用union连接起来，注意这里用union，而不用union all是因为原语句有“distinct”来得到唯一的记录，而union恰好具备了这种功能。如果原语句中没有distinct不需要去重，我们就可以直接使用union all了，因为使用union需要去重的动作，会影响SQL性能。</p><p>优化过的语句如下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   emp.id <br><span class="hljs-keyword">from</span><br>   cm_log cl <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   employee emp <br>      <span class="hljs-keyword">on</span> cl.ref_table = <span class="hljs-string">'Employee'</span> <br>      <span class="hljs-keyword">and</span> cl.ref_oid = emp.id  <br><span class="hljs-keyword">where</span><br>   cl.last_upd_date &gt;=<span class="hljs-string">'2013-11-07 15:03:00'</span> <br>   <span class="hljs-keyword">and</span> cl.last_upd_date&lt;=<span class="hljs-string">'2013-11-08 16:00:00'</span> <br>   <span class="hljs-keyword">and</span> emp.is_deleted = <span class="hljs-number">0</span>  <br><span class="hljs-keyword">union</span><br><span class="hljs-keyword">select</span><br>   emp.id <br><span class="hljs-keyword">from</span><br>   cm_log cl <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   emp_certificate ec <br>      <span class="hljs-keyword">on</span> cl.ref_table = <span class="hljs-string">'EmpCertificate'</span> <br>      <span class="hljs-keyword">and</span> cl.ref_oid = ec.id  <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   employee emp <br>      <span class="hljs-keyword">on</span> emp.id = ec.emp_id  <br><span class="hljs-keyword">where</span><br>   cl.last_upd_date &gt;=<span class="hljs-string">'2013-11-07 15:03:00'</span> <br>   <span class="hljs-keyword">and</span> cl.last_upd_date&lt;=<span class="hljs-string">'2013-11-08 16:00:00'</span> <br>   <span class="hljs-keyword">and</span> emp.is_deleted = <span class="hljs-number">0</span><br></code></pre></div></td></tr></table></figure><p>4.不需要了解业务场景，只需要改造的语句和改造之前的语句保持结果一致</p><p>5.现有索引可以满足，不需要建索引</p><p>6.用改造后的语句实验一下，只需要10ms 降低了近200倍！</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+<br>| id | select_type  | table      | type   | possible_keys                   | key               | key_len | ref                   | rows | Extra       |<br>+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+<br>|  1 | PRIMARY      | cl         | range  | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date | 8       | NULL                  |  379 | Using where |<br>|  1 | PRIMARY      | emp        | eq_ref | PRIMARY                         | PRIMARY           | 4       | meituanorg.cl.ref_oid |    1 | Using where |<br>|  2 | UNION        | cl         | range  | cm_log_cls_id,idx_last_upd_date | idx_last_upd_date | 8       | NULL                  |  379 | Using where |<br>|  2 | UNION        | ec         | eq_ref | PRIMARY,emp_certificate_empid   | PRIMARY           | 4       | meituanorg.cl.ref_oid |    1 |             |<br>|  2 | UNION        | emp        | eq_ref | PRIMARY                         | PRIMARY           | 4       | meituanorg.ec.emp_id  |    1 | Using where |<br>| NULL | UNION RESULT | &lt;union1,2&gt; | ALL    | NULL                            | NULL              | NULL    | NULL                  | NULL |             |<br>+----+--------------+------------+--------+---------------------------------+-------------------+---------+-----------------------+------+-------------+<br>53 rows in set (0.01 sec)<br></code></pre></div></td></tr></table></figure><h3 id="明确应用场景"><a href="#明确应用场景" class="headerlink" title="明确应用场景"></a>明确应用场景</h3><p>举这个例子的目的在于颠覆我们对列的区分度的认知，一般上我们认为区分度越高的列，越容易锁定更少的记录，但在一些特殊的情况下，这种理论是有局限性的。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   * <br><span class="hljs-keyword">from</span><br>   stage_poi sp <br><span class="hljs-keyword">where</span><br>   sp.accurate_result=<span class="hljs-number">1</span> <br>   <span class="hljs-keyword">and</span> (<br>      sp.sync_status=<span class="hljs-number">0</span> <br>      <span class="hljs-keyword">or</span> sp.sync_status=<span class="hljs-number">2</span> <br>      <span class="hljs-keyword">or</span> sp.sync_status=<span class="hljs-number">4</span><br>   );<br></code></pre></div></td></tr></table></figure><p>0.先看看运行多长时间,951条数据6.22秒，真的很慢。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">951 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">6.22</span> sec)<br></code></pre></div></td></tr></table></figure><p>1.先explain，rows达到了361万，type = ALL表明是全表扫描。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">+<span class="hljs-comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br>| id | select_type | table | type | possible_keys | key  | key_len | ref  | rows    | Extra       |<br>+<span class="hljs-comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br>|  1 | SIMPLE      | sp    | ALL  | NULL          | NULL | NULL    | NULL | 3613155 | Using where |<br>+<span class="hljs-comment">----+-------------+-------+------+---------------+------+---------+------+---------+-------------+</span><br></code></pre></div></td></tr></table></figure><p>2.所有字段都应用查询返回记录数，因为是单表查询 0已经做过了951条。</p><p>3.让explain的rows 尽量逼近951。</p><p>看一下accurate_result = 1的记录数：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">select count(*),accurate_result from stage_poi  group by accurate_result;<br>+----------+-----------------+<br>| count(*) | accurate_result |<br>+----------+-----------------+<br>|     1023 |              -1 |<br>|  2114655 |               0 |<br>|   972815 |               1 |<br>+----------+-----------------+<br></code></pre></div></td></tr></table></figure><p>我们看到accurate_result这个字段的区分度非常低，整个表只有-1,0,1三个值，加上索引也无法锁定特别少量的数据。</p><p>再看一下sync_status字段的情况：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">select count(*),sync_status from stage_poi  group by sync_status;<br>+----------+-------------+<br>| count(*) | sync_status |<br>+----------+-------------+<br>|     3080 |           0 |<br>|  3085413 |           3 |<br>+----------+-------------+<br></code></pre></div></td></tr></table></figure><p>同样的区分度也很低，根据理论，也不适合建立索引。</p><p>问题分析到这，好像得出了这个表无法优化的结论，两个列的区分度都很低，即便加上索引也只能适应这种情况，很难做普遍性的优化，比如当sync_status 0、3分布的很平均，那么锁定记录也是百万级别的。</p><p>4.找业务方去沟通，看看使用场景。业务方是这么来使用这个SQL语句的，每隔五分钟会扫描符合条件的数据，处理完成后把sync_status这个字段变成1,五分钟符合条件的记录数并不会太多，1000个左右。了解了业务方的使用场景后，优化这个SQL就变得简单了，因为业务方保证了数据的不平衡，如果加上索引可以过滤掉绝大部分不需要的数据。</p><p>5.根据建立索引规则，使用如下语句建立索引</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">alter</span> <span class="hljs-keyword">table</span> stage_poi <span class="hljs-keyword">add</span> <span class="hljs-keyword">index</span> idx_acc_status(accurate_result,sync_status);<br></code></pre></div></td></tr></table></figure><p>6.观察预期结果,发现只需要200ms，快了30多倍。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">952 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.20</span> sec)<br></code></pre></div></td></tr></table></figure><p>我们再来回顾一下分析问题的过程，单表查询相对来说比较好优化，大部分时候只需要把where条件里面的字段依照规则加上索引就好，如果只是这种“无脑”优化的话，显然一些区分度非常低的列，不应该加索引的列也会被加上索引，这样会对插入、更新性能造成严重的影响，同时也有可能影响其它的查询语句。所以我们第4步调差SQL的使用场景非常关键，我们只有知道这个业务场景，才能更好地辅助我们更好的分析和优化查询语句。</p><h3 id="无法优化的语句"><a href="#无法优化的语句" class="headerlink" title="无法优化的语句"></a>无法优化的语句</h3><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   c.id,<br>   c.name,<br>   c.position,<br>   c.sex,<br>   c.phone,<br>   c.office_phone,<br>   c.feature_info,<br>   c.birthday,<br>   c.creator_id,<br>   c.is_keyperson,<br>   c.giveup_reason,<br>   c.status,<br>   c.data_source,<br>   from_unixtime(c.created_time) <span class="hljs-keyword">as</span> created_time,<br>   from_unixtime(c.last_modified) <span class="hljs-keyword">as</span> last_modified,<br>   c.last_modified_user_id  <br><span class="hljs-keyword">from</span><br>   contact c  <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   contact_branch cb <br>      <span class="hljs-keyword">on</span>  c.id = cb.contact_id  <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   branch_user bu <br>      <span class="hljs-keyword">on</span>  cb.branch_id = bu.branch_id <br>      <span class="hljs-keyword">and</span> bu.status <span class="hljs-keyword">in</span> (<br>         <span class="hljs-number">1</span>,<br>      <span class="hljs-number">2</span>)  <br>   <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>      org_emp_info oei <br>         <span class="hljs-keyword">on</span>  oei.data_id = bu.user_id <br>         <span class="hljs-keyword">and</span> oei.node_left &gt;= <span class="hljs-number">2875</span> <br>         <span class="hljs-keyword">and</span> oei.node_right &lt;= <span class="hljs-number">10802</span> <br>         <span class="hljs-keyword">and</span> oei.org_category = - <span class="hljs-number">1</span>  <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>      c.created_time <span class="hljs-keyword">desc</span>  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span> ,<br>      <span class="hljs-number">10</span>;<br></code></pre></div></td></tr></table></figure><p>还是几个步骤。</p><p>0.先看语句运行多长时间，10条记录用了13秒，已经不可忍受。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">10 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">13.06</span> sec)<br></code></pre></div></td></tr></table></figure><p>1.explain</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">+<span class="hljs-comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br>| id | select_type | table | type   | possible_keys                       | key                     | key_len | ref                      | rows | Extra                                        |<br>+<span class="hljs-comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br>|  1 | SIMPLE      | oei   | ref    | idx_category_left_right,idx_data_id | idx_category_left_right | 5       | const                    | 8849 | Using where; Using temporary; Using filesort |<br>|  1 | SIMPLE      | bu    | ref    | PRIMARY,idx_userid_status           | idx_userid_status       | 4       | meituancrm.oei.data_id   |   76 | Using where; Using index                     |<br>|  1 | SIMPLE      | cb    | ref    | idx_branch_id,idx_contact_branch_id | idx_branch_id           | 4       | meituancrm.bu.branch_id  |    1 |                                              |<br>|  1 | SIMPLE      | c     | eq_ref | PRIMARY                             | PRIMARY                 | 108     | meituancrm.cb.contact_id |    1 |                                              |<br>+<span class="hljs-comment">----+-------------+-------+--------+-------------------------------------+-------------------------+---------+--------------------------+------+----------------------------------------------+</span><br></code></pre></div></td></tr></table></figure><p>从执行计划上看，mysql先查org_emp_info表扫描8849记录，再用索引idx_userid_status关联branch_user表，再用索引idx_branch_id关联contact_branch表，最后主键关联contact表。</p><p>rows返回的都非常少，看不到有什么异常情况。我们在看一下语句，发现后面有order by + limit组合，会不会是排序量太大搞的？于是我们简化SQL，去掉后面的order by 和 limit，看看到底用了多少记录来排序。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>  <span class="hljs-keyword">count</span>(*)<br><span class="hljs-keyword">from</span><br>   contact c  <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   contact_branch cb <br>      <span class="hljs-keyword">on</span>  c.id = cb.contact_id  <br><span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>   branch_user bu <br>      <span class="hljs-keyword">on</span>  cb.branch_id = bu.branch_id <br>      <span class="hljs-keyword">and</span> bu.status <span class="hljs-keyword">in</span> (<br>         <span class="hljs-number">1</span>,<br>      <span class="hljs-number">2</span>)  <br>   <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>      org_emp_info oei <br>         <span class="hljs-keyword">on</span>  oei.data_id = bu.user_id <br>         <span class="hljs-keyword">and</span> oei.node_left &gt;= <span class="hljs-number">2875</span> <br>         <span class="hljs-keyword">and</span> oei.node_right &lt;= <span class="hljs-number">10802</span> <br>         <span class="hljs-keyword">and</span> oei.org_category = - <span class="hljs-number">1</span>  <br>+<span class="hljs-comment">----------+</span><br>| <span class="hljs-keyword">count</span>(*) |<br>+<span class="hljs-comment">----------+</span><br>|   <span class="hljs-number">778878</span> |<br>+<span class="hljs-comment">----------+</span><br><span class="hljs-number">1</span> <span class="hljs-keyword">row</span> <span class="hljs-keyword">in</span> <span class="hljs-keyword">set</span> (<span class="hljs-number">5.19</span> sec)<br></code></pre></div></td></tr></table></figure><p>发现排序之前居然锁定了778878条记录，如果针对70万的结果集排序，将是灾难性的，怪不得这么慢，那我们能不能换个思路，先根据contact的created_time排序，再来join会不会比较快呢？</p><p>于是改造成下面的语句，也可以用straight_join来优化：</p><figure class="highlight plain"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs mysql">select c.id, c.name, c.position, c.sex, c.phone, c.office_phone, c.feature_info, c.birthday, c.creator_id, c.is_keyperson, c.giveup_reason, c.status, c.data_source, from_unixtime(c.created_time) as created_time, from_unixtime(c.last_modified) as last_modified, c.last_modified_user_id<br>from contact c<br>where exists ( select 1 from contact_branch cb<br>inner join branch_user bu<br>on cb.branch_id = bu.branch_id<br>and bu.status in ( 1, 2)<br>inner join org_emp_info oei<br>on oei.data_id = bu.user_id<br>and oei.node_left &gt;= 2875<br>and oei.node_right &lt;= 10802<br>and oei.org_category = - 1<br>where c.id = cb.contact_id<br>)<br>order by c.created_time desc limit 0 , 10;<br></code></pre></div></td></tr></table></figure><p>验证一下效果 预计在1ms内，提升了13000多倍！<br><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql">10 rows in <span class="hljs-keyword">set</span> (<span class="hljs-number">0.00</span> sec)<br></code></pre></div></td></tr></table></figure></p><p>本以为至此大工告成，但我们在前面的分析中漏了一个细节，先排序再join和先join再排序理论上开销是一样的，为何提升这么多是因为有一个limit！大致执行过程是：mysql先按索引排序得到前10条记录，然后再去join过滤，当发现不够10条的时候，再次去10条，再次join，这显然在内层join过滤的数据非常多的时候，将是灾难的，极端情况，内层一条数据都找不到，mysql还傻乎乎的每次取10条，几乎遍历了这个数据表！</p><p>用不同参数的SQL试验下：</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs sql"><span class="hljs-keyword">select</span><br>   sql_no_cache   c.id,<br>   c.name,<br>   c.position,<br>   c.sex,<br>   c.phone,<br>   c.office_phone,<br>   c.feature_info,<br>   c.birthday,<br>   c.creator_id,<br>   c.is_keyperson,<br>   c.giveup_reason,<br>   c.status,<br>   c.data_source,<br>   from_unixtime(c.created_time) <span class="hljs-keyword">as</span> created_time,<br>   from_unixtime(c.last_modified) <span class="hljs-keyword">as</span> last_modified,<br>   c.last_modified_user_id    <br><span class="hljs-keyword">from</span><br>   contact c   <br><span class="hljs-keyword">where</span><br>   <span class="hljs-keyword">exists</span> (<br>      <span class="hljs-keyword">select</span><br>         <span class="hljs-number">1</span>        <br>      <span class="hljs-keyword">from</span><br>         contact_branch cb         <br>      <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>         branch_user bu                     <br>            <span class="hljs-keyword">on</span>  cb.branch_id = bu.branch_id                     <br>            <span class="hljs-keyword">and</span> bu.status <span class="hljs-keyword">in</span> (<br>               <span class="hljs-number">1</span>,<br>            <span class="hljs-number">2</span>)                <br>         <span class="hljs-keyword">inner</span> <span class="hljs-keyword">join</span><br>            org_emp_info oei                           <br>               <span class="hljs-keyword">on</span>  oei.data_id = bu.user_id                           <br>               <span class="hljs-keyword">and</span> oei.node_left &gt;= <span class="hljs-number">2875</span>                           <br>               <span class="hljs-keyword">and</span> oei.node_right &lt;= <span class="hljs-number">2875</span>                           <br>               <span class="hljs-keyword">and</span> oei.org_category = - <span class="hljs-number">1</span>                <br>         <span class="hljs-keyword">where</span><br>            c.id = cb.contact_id           <br>      )        <br>   <span class="hljs-keyword">order</span> <span class="hljs-keyword">by</span><br>      c.created_time <span class="hljs-keyword">desc</span>  <span class="hljs-keyword">limit</span> <span class="hljs-number">0</span> ,<br>      <span class="hljs-number">10</span>;<br>Empty <span class="hljs-keyword">set</span> (<span class="hljs-number">2</span> <span class="hljs-keyword">min</span> <span class="hljs-number">18.99</span> sec)<br></code></pre></div></td></tr></table></figure><p>2 min 18.99 sec！比之前的情况还糟糕很多。由于mysql的nested loop机制，遇到这种情况，基本是无法优化的。这条语句最终也只能交给应用系统去优化自己的逻辑了。 通过这个例子我们可以看到，并不是所有语句都能优化，而往往我们优化时，由于SQL用例回归时落掉一些极端情况，会造成比原来还严重的后果。所以，第一：不要指望所有语句都能通过SQL优化，第二：不要过于自信，只针对具体case来优化，而忽略了更复杂的情况。</p><p>慢查询的案例就分析到这儿，以上只是一些比较典型的案例。我们在优化过程中遇到过超过1000行，涉及到16个表join的“垃圾SQL”，也遇到过线上线下数据库差异导致应用直接被慢查询拖死，也遇到过varchar等值比较没有写单引号，还遇到过笛卡尔积查询直接把从库搞死。再多的案例其实也只是一些经验的积累，如果我们熟悉查询优化器、索引的内部原理，那么分析这些案例就变得特别简单了。</p><p>本文以一个慢查询案例引入了MySQL索引原理、优化慢查询的一些方法论;并针对遇到的典型案例做了详细的分析。其实做了这么长时间的语句优化后才发现，任何数据库层面的优化都抵不上应用系统的优化，同样是MySQL，可以用来支撑Google/FaceBook/Taobao应用，但可能连你的个人网站都撑不住。套用最近比较流行的话：“查询容易，优化不易，且写且珍惜！”</p><p>1.《高性能MySQL》 2.《数据结构与算法分析》</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>69. x 的平方根</title>
      <link href="2018/06/03/69%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/"/>
      <url>2018/06/03/69%E9%97%AE%E9%A2%98%E6%8F%8F%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h3 id="问题描述"><a href="#问题描述" class="headerlink" title="问题描述"></a>问题描述</h3><p>实现 <code>int sqrt(int x)</code> 函数。</p><a id="more"></a><p>计算并返回 <em>x</em> 的平方根，其中 <em>x</em> 是非负整数。</p><p>由于返回类型是整数，结果只保留整数的部分，小数部分将被舍去。</p><p><strong>示例 1:</strong></p><figure class="highlight makefile"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-section">输入: 4</span><br><span class="hljs-section">输出: 2</span><br></code></pre></div></td></tr></table></figure><p><strong>示例 2:</strong></p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">输入:</span> <span class="hljs-number">8</span><br><span class="hljs-string">输出:</span> <span class="hljs-number">2</span><br><span class="hljs-string">说明:</span> <span class="hljs-number">8</span> <span class="hljs-string">的平方根是</span> <span class="hljs-number">2.82842</span><span class="hljs-string">...,</span> <br>     <span class="hljs-string">由于返回类型是整数，小数部分将被舍去。</span><br></code></pre></div></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><h4 id="暴力解法"><a href="#暴力解法" class="headerlink" title="暴力解法"></a>暴力解法</h4><p>时间复杂度：O(N)</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(self, x)</span>:</span><br>        <span class="hljs-keyword">if</span> x &lt;= <span class="hljs-number">1</span>:<br>            <span class="hljs-keyword">return</span> x<br>        s = <span class="hljs-number">1</span><br>        <span class="hljs-keyword">while</span> <span class="hljs-literal">True</span>:<br>            <span class="hljs-keyword">if</span> s * s &gt; x:<br>                <span class="hljs-keyword">return</span> s - <span class="hljs-number">1</span><br>            s += <span class="hljs-number">1</span><br></code></pre></div></td></tr></table></figure><h4 id="二分查找"><a href="#二分查找" class="headerlink" title="二分查找"></a>二分查找</h4><p>时间复杂度：O(log(N))</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(self, x)</span>:</span><br>        l = <span class="hljs-number">1</span><br>        r = x<br>        <span class="hljs-keyword">while</span> l &lt;= r:<br>            m = (r + l) // <span class="hljs-number">2</span><br>            <span class="hljs-keyword">if</span> m * m &gt; x:<br>                r = m - <span class="hljs-number">1</span><br>            <span class="hljs-keyword">else</span>:<br>                l = m + <span class="hljs-number">1</span><br>        <span class="hljs-keyword">return</span> r<br></code></pre></div></td></tr></table></figure><h4 id="牛顿法"><a href="#牛顿法" class="headerlink" title="牛顿法"></a>牛顿法</h4><p>时间复杂度：O(log(N))</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Solution</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">mySqrt</span><span class="hljs-params">(self, x)</span>:</span><br>        a= x<br>        <span class="hljs-keyword">while</span> a * a &gt; x:<br>            a = (a + x // a) // <span class="hljs-number">2</span><br>        <span class="hljs-keyword">return</span> a<br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
            <tag> leetcode </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>我的面试笔记</title>
      <link href="2018/06/03/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>2018/06/03/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<a id="more"></a><h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><ol><li>为什么学习Python？</li></ol><h1 id="一、WEB框架"><a href="#一、WEB框架" class="headerlink" title="一、WEB框架"></a>一、WEB框架</h1><h2 id="1-请简述django请求生命周期"><a href="#1-请简述django请求生命周期" class="headerlink" title="1. 请简述django请求生命周期"></a>1. 请简述django请求生命周期</h2><ul><li>当用户在浏览器中输入url时,浏览器会生成请求头和请求体发给服务端</li><li>服务端的wsgiref模块接收用户请求并将请求进行初次封装</li><li>将请求交给Django的中间件</li><li>通过中间件之后将请求交给url,根据浏览器发送的不同url去匹配不同的视图函数</li><li>视图函数根据业务逻辑调用数据库获取相应的数据，然或根据模板渲染页面</li><li>视图函数将响应的页面依次通过中间件</li><li>到达wsgi，封装数据后反馈给客户端<br><img src="https://i.loli.net/2018/11/03/5bdc849e1d6d5.png" alt="wsgi.png"></li></ul><h2 id="2-什么wsgi"><a href="#2-什么wsgi" class="headerlink" title="2. 什么wsgi"></a>2. 什么wsgi</h2><p><strong>Web服务器网关接口</strong>（<strong>Python Web Server Gateway Interface</strong>，缩写为WSGI）是为<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>语言定义的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="noopener">Web服务器</a>和<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">Web应用程序</a>或<a href="https://zh.wikipedia.org/wiki/Web%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">框架</a>之间的一种简单而通用的<a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">接口</a>)。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。</p><p>WSGI区分为两个部分：一为“<a href="https://zh.wikipedia.org/wiki/%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="noopener">服务器</a>”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境信息及一个回调函数（Callback Function）。当应用程序完成处理请求后，透过前述的回调函数，将结果回传给服务器。</p><p>所谓的 <em>WSGI 中间件</em>同时实现了API的两方，因此可以在WSGI服务器和WSGI应用之间起调解作用：从Web服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p><ul><li>重写<a href="https://zh.wikipedia.org/wiki/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">环境变量</a>后，根据目标<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="noopener">URL</a>，将请求消息路由到不同的应用对象。</li><li>允许在一个<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>中同时运行多个应用程序或应用框架。</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1" target="_blank" rel="noopener">负载均衡</a>和远程处理，通过在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" target="_blank" rel="noopener">网络</a>上转发请求和响应消息。</li><li>进行内容后处理，例如应用<a href="https://zh.wikipedia.org/wiki/XSLT" target="_blank" rel="noopener">XSLT</a>样式表。</li></ul><p><strong>实现该协议的模块：</strong></p><ul><li>wsgiref</li><li>werkzurg</li><li>uwsig</li></ul><h2 id="3-视图的玩法"><a href="#3-视图的玩法" class="headerlink" title="3.视图的玩法"></a>3.视图的玩法</h2><p>FBV——url —— 函数</p><p>CBV——url —— view</p><h2 id="4-RESTful规范"><a href="#4-RESTful规范" class="headerlink" title="4.RESTful规范"></a>4.RESTful规范</h2><blockquote><p>什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p></blockquote><h2 id="5-django-rest-framework框架"><a href="#5-django-rest-framework框架" class="headerlink" title="5.django rest framework框架"></a>5.django rest framework框架</h2><p><strong>1. 路由</strong></p><ul><li>可以通过as_view传参数，根据请求方式不同执行相应的方法</li><li>可以在url中设置一个结尾，类似于： .json </li></ul><p><strong>2. 视图</strong></p><ul><li>帮助开发者提供了一些类，并在类中提供了多个方法以供我们使用</li></ul><p><strong>3. 版本</strong></p><ul><li>在url中设置version参数，用户请求时候传入参数。在request.version中获取版本，根据版本不同做不同处理</li></ul><p><strong>4. 认证</strong><br>写一个类并注册到认证类，在类的的authticate方法中编写认证逻辑。</p><ul><li>认证成功（user,auth）</li><li>raise AuthticateFaild(….)</li><li>None </li></ul><p><strong>5. 权限</strong><br>写一个类并注册到权限类，在类的的has_permission方法中编写认证逻辑。</p><ul><li>True </li><li>False </li></ul><p><strong>6. 频率限制</strong><br>写一个类并注册到频率类，在类的的 allow_request/wait 方法中编写认证逻辑。<br><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">allow_request<br> <span class="hljs-literal">True</span> <br> <span class="hljs-literal">False</span>  如果返回<span class="hljs-literal">False</span>，那么就要执行wait<br></code></pre></div></td></tr></table></figure></p><p><strong>7. 解析器</strong></p><ul><li><p>根据ContentType请求头，选择不同解析器对 请求体中的数据进行解析。</p></li><li><p>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:url-formendo…. \r\n\r\nuser=alex&amp;age=123</p></li><li>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:application/json\r\n\r\n{….}</li></ul><p><strong>8. 分页</strong> </p><ul><li>对从数据库中获取到的数据进行分页处理: SQL -&gt; limit offset <ul><li>根据页码：<a href="http://www.luffycity.com/api/v1/student/?page=1&amp;size=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=1&amp;size=10</a></li><li>根据索引：<a href="http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10</a></li><li>根据加密：<a href="http://www.luffycity.com/api/v1/student/?page=erd8" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=erd8</a></li></ul></li></ul><hr><h2 id="6-页码越大速度越慢，为什么以及如何解决？"><a href="#6-页码越大速度越慢，为什么以及如何解决？" class="headerlink" title="6. 页码越大速度越慢，为什么以及如何解决？"></a>6. 页码越大速度越慢，为什么以及如何解决？</h2><p>原因：页码越大向后需要扫描的行数越多，因为每次都是从0开始扫描。<br>解决：</p><div class="hljs code-wrapper"><pre><code>- 限制显示的页数- 记录当前页数据ID最大值和最小值，再次分页时，根据ID现行筛选，然后再分页。</code></pre></div><h2 id="7-三次握手与四次挥手"><a href="#7-三次握手与四次挥手" class="headerlink" title="7. 三次握手与四次挥手"></a>7. 三次握手与四次挥手</h2><p>答案详解：<a href="https://www.cnblogs.com/huang-yc/p/9859216.html" target="_blank" rel="noopener">TCP握手与挥手</a></p><h2 id="8-简述什么是FBV和CBV"><a href="#8-简述什么是FBV和CBV" class="headerlink" title="8.简述什么是FBV和CBV"></a>8.简述什么是FBV和CBV</h2><p>FBV（function base views） ——在视图里使用函数处理请求。<br>CBV（class base views） ——在视图里使用类处理请求。</p><p>其实没有本质的区别</p><p>Python是一个面向对象的编程语言，如果只用函数来开发，有很多面向对象的优点就错失了（继承、封装、多态）。所以Django在后来加入了Class-Based-View。可以让我们用类写View。这样做的优点主要下面两种：</p><p>提高了代码的复用性，可以使用面向对象的技术，比如Mixin（多继承）<br>可以用不同的函数针对不同的HTTP方法处理，而不是通过很多if判断，提高代码可读性</p><h2 id="9-谈一谈你对ORM的理解"><a href="#9-谈一谈你对ORM的理解" class="headerlink" title="9.谈一谈你对ORM的理解"></a>9.谈一谈你对ORM的理解</h2><figure class="highlight mipsasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">ORM是“对象-关系-映射”的简称。<br></span>MVC或者MVC框架中包括一个重要的部分，就是<span class="hljs-keyword">ORM，它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库，这极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动</span><br></code></pre></div></td></tr></table></figure><h1 id="二、-项目相关："><a href="#二、-项目相关：" class="headerlink" title="二、 项目相关："></a>二、 项目相关：</h1><h2 id="1-请讲一下你做的在线商城的表结构"><a href="#1-请讲一下你做的在线商城的表结构" class="headerlink" title="1. 请讲一下你做的在线商城的表结构"></a>1. 请讲一下你做的在线商城的表结构</h2><ul><li>课程（13表）<ul><li>课程大类</li><li>课程子类</li><li>学位课<ul><li>讲师</li><li>奖学金</li></ul></li><li>专题课（学位课模块表）</li><li>价格策略(contenttype)</li><li>课程详细(o2o -&gt; 水平分表)</li><li>常见问题</li><li>课程大纲</li><li>章节</li><li>课时</li><li>作业 </li></ul></li><li>深科技（4+2）<ul><li>用户表</li><li>用户token</li><li>文章来源</li><li>文章表</li><li>通用评论表</li><li>通用收藏表</li></ul></li></ul><h2 id="2-支付宝功能"><a href="#2-支付宝功能" class="headerlink" title="2. 支付宝功能"></a>2. 支付宝功能</h2><ul><li>加密方式：rsa</li><li>公钥私钥：<ul><li>商户私钥<ul><li>支付宝公钥</li></ul></li></ul></li><li>支付成功后，断电宕机<ul><li>成功：return HttpResponse(‘success’)</li></ul></li></ul><h2 id="3-数据库页数越大速度越慢，如何解决"><a href="#3-数据库页数越大速度越慢，如何解决" class="headerlink" title="3. 数据库页数越大速度越慢，如何解决"></a>3. 数据库页数越大速度越慢，如何解决</h2><ul><li>限制页数</li><li>记录当前页最大ID、最小ID</li><li>错误答案：<ul><li>扫描索引表</li><li>再去数据库表中获取数据</li></ul></li></ul><h2 id="4-redis是什么？"><a href="#4-redis是什么？" class="headerlink" title="4. redis是什么？"></a>4. redis是什么？</h2><p>用于操作内存的软件。</p><ul><li>可以做持久化：<ul><li>AOF</li><li>RDB</li></ul></li><li><p>相当于是大字典</p></li><li><p>单进程单线程</p></li></ul><h1 id="三、-Django"><a href="#三、-Django" class="headerlink" title="三、 Django"></a>三、 Django</h1><h2 id="1-讲述一些ORM操作"><a href="#1-讲述一些ORM操作" class="headerlink" title="1. 讲述一些ORM操作"></a>1. 讲述一些ORM操作</h2><ul><li><p>select_related,连表操作，相当于主动做join</p></li><li><p>prefeth_related,多次单表操作，先查询想要的数据，然后构造条件,如：id=[1,2,3]，再次查询其他表根据id做条件。</p></li><li><p>only</p></li><li><p>defer</p></li><li><p>F </p></li><li><p>Q </p></li><li><p>通过ORM写偏原生SQL：</p></li></ul><ol><li>extra</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">Entry.objects.extra(select=&#123;<span class="hljs-string">'new_id'</span>: <span class="hljs-string">"select col from sometable where othercol &gt; %s"</span>&#125;, select_params=(<span class="hljs-number">1</span>,))<br>Entry.objects.extra(where=[<span class="hljs-string">'headline=%s'</span>], params=[<span class="hljs-string">'Lennon'</span>])<br>Entry.objects.extra(where=[<span class="hljs-string">"foo='a' OR bar = 'a'"</span>, <span class="hljs-string">"baz = 'a'"</span>])<br>Entry.objects.extra(select=&#123;<span class="hljs-string">'new_id'</span>: <span class="hljs-string">"select id from tb where id &gt; %s"</span>&#125;,select_params=(<span class="hljs-number">1</span>,), order_by=[<span class="hljs-string">'-nid'</span>])<br></code></pre></div></td></tr></table></figure><ol start="2"><li>raw</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 执行原生SQL</span><br>models.UserInfo.objects.raw(<span class="hljs-string">'select * from userinfo'</span>)<br><br><span class="hljs-comment"># 如果SQL是其他表时，必须将名字设置为当前UserInfo对象的主键列名</span><br>models.UserInfo.objects.raw(<span class="hljs-string">'select id as nid from 其他表'</span>)<br><br><span class="hljs-comment"># 为原生SQL设置参数</span><br>models.UserInfo.objects.raw(<span class="hljs-string">'select id as nid from userinfo where nid&gt;%s'</span>, params=[<span class="hljs-number">12</span>,])<br><br>name_map = &#123;<span class="hljs-string">'first'</span>: <span class="hljs-string">'first_name'</span>, <span class="hljs-string">'last'</span>: <span class="hljs-string">'last_name'</span>, <span class="hljs-string">'bd'</span>: <span class="hljs-string">'birth_date'</span>, <span class="hljs-string">'pk'</span>: <span class="hljs-string">'id'</span>&#125;<br>Person.objects.raw(<span class="hljs-string">'SELECT * FROM some_other_table'</span>, translations=name_map)<br></code></pre></div></td></tr></table></figure><ol start="3"><li>原生SQL</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> connection, connections<br>cursor = connection.cursor()  <span class="hljs-comment"># cursor = connections['default'].cursor()</span><br>cursor.execute(<span class="hljs-string">"""SELECT * from auth_user where id = %s"""</span>, [<span class="hljs-number">1</span>])<br>row = cursor.fetchone() <span class="hljs-comment"># fetchall()/fetchmany(..)</span><br></code></pre></div></td></tr></table></figure><ol start="5"><li>选择数据库</li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python">queryset = models.Course.objects.using(<span class="hljs-string">'default'</span>).all()<br></code></pre></div></td></tr></table></figure><h1 id="？、其他"><a href="#？、其他" class="headerlink" title="？、其他"></a>？、其他</h1><h2 id="1-git的作用是什么"><a href="#1-git的作用是什么" class="headerlink" title="1. git的作用是什么"></a>1. git的作用是什么</h2><p>进行版本控制，实现协同开发</p><h2 id="2-git命令与意义"><a href="#2-git命令与意义" class="headerlink" title="2. git命令与意义"></a>2. git命令与意义</h2><ul><li>git init </li><li>git add </li><li>git status </li><li>git commit </li><li>git log </li><li>git reflog </li><li>git reset –hard</li><li>git checkout </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> Python </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django——支付宝支付功能</title>
      <link href="2018/05/24/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>2018/05/24/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先我们需要获得支付宝提供的权限与接口，在蚂蚁开放平台进行相关申请：<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>申请支付宝账户权限<br><a id="more"></a></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMqr4.png" alt="iHMqr4.png"></p><p>创建应用</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMIP0.png" alt="iHMIP0.png"></p><p>沙箱测试环境</p><p><img src="https://s1.ax1x.com/2018/11/08/iHM45q.png" alt="iHM45q.png"></p><p>appID：我的身份</p><p>支付宝网关：测试环境</p><p>获得相关的测试账号</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQise.png" alt="iHQise.png"></p><p>商户账号、客户账号后面可以通过这两个账号来进行测试</p><p>沙箱钱包（也可以不下载，直接在网页上登陆测试账号进行支付测试）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMoGV.png" alt="iHMoGV.png"></p><p>在安卓手机上进行安装</p><h2 id="获得SDK（pay-py）"><a href="#获得SDK（pay-py）" class="headerlink" title="获得SDK（pay.py）"></a>获得SDK（pay.py）</h2><p>就是加密算法</p><p>SDK（加密算法，阿里没有提供python版本，从github山获得）</p><p>官方</p><p>GIHUB（请注意浏览源码）——pay.py(依赖:pip install pycryptodome)</p><p>公钥私钥</p><p><img src="https://s1.ax1x.com/2018/11/08/iHM7xU.png" alt="iHM7xU.png"></p><p>在这里下载<br><img src="https://s1.ax1x.com/2018/11/08/iHMXZ9.png" alt="iHMXZ9.png"></p><p>运行<br><img src="https://s1.ax1x.com/2018/11/08/iHMbMF.png" alt="iHMbMF.png"></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMLqJ.png" alt="iHMLqJ.png"></p><p>生成公钥私钥<br><img src="https://s1.ax1x.com/2018/11/08/iHMjaR.png" alt="iHMjaR.png"></p><p>完成上传</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMzPx.png" alt="iHMzPx.png"></p><p>应用公钥上传后自动生成支付宝公钥</p><p>在django文件中进行替换成自己的key</p><p><img src="C:\Users\Administrator.000\AppData\Roaming\Typora\typora-user-images\1541664121222.png" alt="1541664121222"></p><p>django程序</p><p>演示</p><p>1.运行</p><p>2.访问去支付</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMhan.png" alt="iHMhan.png"></p><p>3.支付页面</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMT2T.png" alt="iHMT2T.png"></p><p>4.登陆测试用户，完成支付</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQpRK.png" alt="iHQpRK.png"></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMvI1.png" alt="iHMvI1.png"></p><p>最终跳转到</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQSG6.png" alt="iHQSG6.png"></p><p>说明功能正常</p><h2 id="Django实现"><a href="#Django实现" class="headerlink" title="Django实现"></a>Django实现</h2><p>代码结构</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQ9xO.png" alt="iHQ9xO.png"></p><p>views.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-keyword">from</span> django.shortcuts <span class="hljs-keyword">import</span> render,redirect,HttpResponse<br><span class="hljs-keyword">from</span> django.views.decorators.csrf <span class="hljs-keyword">import</span> csrf_exempt<br><span class="hljs-keyword">from</span> utils.pay <span class="hljs-keyword">import</span> AliPay<br><span class="hljs-keyword">import</span> time<br><span class="hljs-keyword">from</span> django.conf <span class="hljs-keyword">import</span> settings<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">aliPay</span><span class="hljs-params">()</span>:</span><br>    obj = AliPay(<br>        appid=settings.APPID,<br>        app_notify_url=settings.NOTIFY_URL,  <span class="hljs-comment"># 如果支付成功，支付宝会向这个地址发送POST请求（校验是否支付已经完成）</span><br>        return_url=settings.RETURN_URL,  <span class="hljs-comment"># 如果支付成功，重定向回到你的网站的地址。</span><br>        alipay_public_key_path=settings.PUB_KEY_PATH,  <span class="hljs-comment"># 支付宝公钥</span><br>        app_private_key_path=settings.PRI_KEY_PATH,  <span class="hljs-comment"># 应用私钥</span><br>        debug=<span class="hljs-literal">True</span>,  <span class="hljs-comment"># 默认False,</span><br>    )<br>    <span class="hljs-keyword">return</span> obj<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">index</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">'GET'</span>:<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">'index.html'</span>)<br><br><br><br>    alipay = aliPay()<br><br>    <span class="hljs-comment"># 对购买的数据进行加密</span><br>    money = float(request.POST.get(<span class="hljs-string">'price'</span>))<br>    out_trade_no = <span class="hljs-string">"x2"</span> + str(time.time())<br>    <span class="hljs-comment"># 1. 在数据库创建一条数据：状态（待支付）</span><br><br>    query_params = alipay.direct_pay(<br>        subject=<span class="hljs-string">"充气式韩红"</span>,  <span class="hljs-comment"># 商品简单描述</span><br>        out_trade_no= out_trade_no,  <span class="hljs-comment"># 商户订单号</span><br>        total_amount=money,  <span class="hljs-comment"># 交易金额(单位: 元 保留俩位小数)</span><br>    )<br><br>    pay_url = <span class="hljs-string">"https://openapi.alipaydev.com/gateway.do?&#123;&#125;"</span>.format(query_params)<br><br>    <span class="hljs-keyword">return</span> redirect(pay_url)<br><br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">pay_result</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    支付完成后，跳转回的地址<br>    :param request:<br>    :return:<br>    """</span><br>    params = request.GET.dict()<br>    sign = params.pop(<span class="hljs-string">'sign'</span>, <span class="hljs-literal">None</span>)<br><br>    alipay = aliPay()<br><br>    status = alipay.verify(params, sign)<br><br>    <span class="hljs-keyword">if</span> status:<br>        <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'支付成功'</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'支付失败'</span>)<br><br><br><br><span class="hljs-meta">@csrf_exempt</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">update_order</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-string">"""<br>    支付成功后，支付宝向该地址发送的POST请求（用于修改订单状态）<br>    :param request:<br>    :return:<br>    """</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">'POST'</span>:<br>        <span class="hljs-keyword">from</span> urllib.parse <span class="hljs-keyword">import</span> parse_qs<br><br>        body_str = request.body.decode(<span class="hljs-string">'utf-8'</span>)<br>        post_data = parse_qs(body_str)<br><br>        post_dict = &#123;&#125;<br>        <span class="hljs-keyword">for</span> k, v <span class="hljs-keyword">in</span> post_data.items():<br>            post_dict[k] = v[<span class="hljs-number">0</span>]<br><br>        alipay = aliPay()<br><br>        sign = post_dict.pop(<span class="hljs-string">'sign'</span>, <span class="hljs-literal">None</span>)<br>        status = alipay.verify(post_dict, sign)<br>        <span class="hljs-keyword">if</span> status:<br>            <span class="hljs-comment"># 修改订单状态</span><br>            out_trade_no = post_dict.get(<span class="hljs-string">'out_trade_no'</span>)<br>            print(out_trade_no)<br>            <span class="hljs-comment"># 2. 根据订单号将数据库中的数据进行更新</span><br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'支付成功'</span>)<br>        <span class="hljs-keyword">else</span>:<br>            <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">'支付失败'</span>)<br>    <span class="hljs-keyword">return</span> HttpResponse(<span class="hljs-string">''</span>)<br></code></pre></div></td></tr></table></figure><p>settings.py</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 支付相关配置</span><br>APPID = <span class="hljs-string">"2016082500309412"</span><br>NOTIFY_URL = <span class="hljs-string">"http://47.106.237.76:80/update_order/"</span><br>RETURN_URL = <span class="hljs-string">"http://47.106.237.76:80/pay_result/"</span><br>PRI_KEY_PATH = <span class="hljs-string">"keys/app_private_2048.txt"</span><br>PUB_KEY_PATH = <span class="hljs-string">"keys/alipay_public_2048.txt"</span><br></code></pre></div></td></tr></table></figure>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>RESTful协议</title>
      <link href="2018/05/09/%E4%B8%80%E3%80%81REST%E7%AE%80%E8%BF%B0/"/>
      <url>2018/05/09/%E4%B8%80%E3%80%81REST%E7%AE%80%E8%BF%B0/</url>
      
        <content type="html"><![CDATA[<h2 id="一、REST简述"><a href="#一、REST简述" class="headerlink" title="一、REST简述"></a>一、REST简述</h2><p>来自维基百科的解释：</p><a id="more"></a><blockquote><p><strong>表现层状态转换</strong>（REST，英文：<strong>Representational State Transfer</strong>）是<a href="https://zh.wikipedia.org/w/index.php?title=Roy_Thomas_Fielding&amp;action=edit&amp;redlink=1" target="_blank" rel="noopener">Roy Thomas Fielding</a>博士于2000年在他的博士论文<a href="https://zh.wikipedia.org/wiki/%E8%A1%A8%E7%8E%B0%E5%B1%82%E7%8A%B6%E6%80%81%E8%BD%AC%E6%8D%A2#cite_note-Fielding-Ch5-1" target="_blank" rel="noopener">[1]</a> 中提出来的一种<a href="https://zh.wikipedia.org/wiki/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">万维网</a><a href="https://zh.wikipedia.org/wiki/%E8%BD%AF%E4%BB%B6%E6%9E%B6%E6%9E%84" target="_blank" rel="noopener">软件架构</a>风格，目的是便于不同软件/程序在网络（例如互联网）中互相传递信息。表现层状态转换是根基于<a href="https://zh.wikipedia.org/wiki/%E8%B6%85%E6%96%87%E6%9C%AC%E4%BC%A0%E8%BE%93%E5%8D%8F%E8%AE%AE" target="_blank" rel="noopener">超文本传输协议(HTTP)</a>之上而确定的一组约束和属性，是一种设计提供万维网络服务的<a href="https://zh.wikipedia.org/wiki/%E8%BB%9F%E4%BB%B6%E6%9E%B6%E6%A7%8B" target="_blank" rel="noopener">软件构建风格</a>。匹配或兼容于这种架构风格(简称为 REST 或 RESTful)的网络服务，允许客户端发出以<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E6%A0%87%E5%BF%97%E7%AC%A6" target="_blank" rel="noopener">统一资源标识符</a>访问和操作网络资源的请求，而与预先定义好的无状态操作集一致化。因此表现层状态转换提供了在互联网络的计算系统之间，彼此资源可交互使用的协作性质(interoperability)。相对于其它种类的网络服务，例如 SOAP服务则是以本身所定义的操作集，来访问网络上的资源。</p><p>Web 应用程序最重要的 REST 原则是，客户端和服务器之间的交互在请求之间是无状态的。从客户端到服务器的每个请求都必须包含理解请求所必需的信息。如果服务器在请求之间的任何时间点重启，客户端不会得到通知。此外，无状态请求可以由任何可用服务器回答，这十分适合<a href="https://baike.baidu.com/item/%E4%BA%91%E8%AE%A1%E7%AE%97" target="_blank" rel="noopener">云计算</a>之类的环境。客户端可以缓存数据以改进性能。</p><p>在服务器端，应用程序状态和功能可以分为各种资源。资源是一个有趣的概念实体，它向客户端公开。资源的例子有：应用程序对象、数据库记录、算法等等。每个资源都使用 URI (Universal Resource Identifier) 得到一个唯一的地址。所有资源都共享统一的接口，以便在客户端和服务器之间传输状态。使用的是标准的 HTTP 方法，比如 GET、PUT、<a href="https://baike.baidu.com/item/POST" target="_blank" rel="noopener">POST</a> 和 <a href="https://baike.baidu.com/item/DELETE" target="_blank" rel="noopener">DELETE</a>。<a href="https://baike.baidu.com/item/Hypermedia" target="_blank" rel="noopener">Hypermedia</a> 是应用程序状态的<a href="https://baike.baidu.com/item/%E5%BC%95%E6%93%8E/2874935" target="_blank" rel="noopener">引擎</a>，资源表示通过<a href="https://baike.baidu.com/item/%E8%B6%85%E9%93%BE%E6%8E%A5" target="_blank" rel="noopener">超链接</a>互联。</p></blockquote><p><img src="https://s1.ax1x.com/2018/11/20/F9ZCrt.png" alt="F9ZCrt.png"></p><h2 id="二、REST的解析"><a href="#二、REST的解析" class="headerlink" title="二、REST的解析"></a>二、REST的解析</h2><p>Fielding将他对互联网软件的架构原则，定名为REST，即Representational State Transfer的缩写。我对这个词组的翻译是”表现层状态转化”。</p><p>如果一个架构符合REST原则，就称它为RESTful架构。</p><p>要理解RESTful架构，最好的方法就是去理解Representational State Transfer这个词组到底是什么意思，它的每一个词代表了什么涵义。如果你把这个名称搞懂了，也就不难体会REST是一种什么样的设计。</p><ul><li>REST从资源的角度类审视整个网络，它将分布在网络中某个节点的资源通过URL进行标识，客户端应用通过URL来获取资源的表征，获得这些表征致使这些应用转变状态</li><li>REST与技术无关，代表的是一种软件架构风格，REST是Representational State Transfer的简称，中文翻译为“表征状态转移”</li><li>所有的数据，不过是通过网络获取的还是操作（增删改查）的数据，都是资源，将一切数据视为资源是REST区别与其他架构风格的最本质属性</li><li>对于REST这种面向资源的架构风格，有人提出一种全新的结构理念，即：面向资源架构（ROA：Resource Oriented Architecture）</li></ul><h2 id="三、资源（Resources）"><a href="#三、资源（Resources）" class="headerlink" title="三、资源（Resources）"></a>三、资源（Resources）</h2><p>REST的名称”表现层状态转化”中，省略了主语。”表现层”其实指的是”资源”（Resources）的”表现层”。</p><p>所谓”资源”，就是网络上的一个实体，或者说是网络上的一个具体信息。它可以是一段文本、一张图片、一首歌曲、一种服务，总之就是一个具体的实在。你可以用一个URI（统一资源定位符）指向它，每种资源对应一个特定的URI。要获取这个资源，访问它的URI就可以，因此URI就成了每一个资源的地址或独一无二的识别符。</p><p>所谓”上网”，就是与互联网上一系列的”资源”互动，调用它的URI。</p><h2 id="四、表现层（Representation）"><a href="#四、表现层（Representation）" class="headerlink" title="四、表现层（Representation）"></a>四、表现层（Representation）</h2><p>“资源”是一种信息实体，它可以有多种外在表现形式。我们把”资源”具体呈现出来的形式，叫做它的”表现层”（Representation）。</p><p>比如，文本可以用txt格式表现，也可以用HTML格式、XML格式、JSON格式表现，甚至可以采用二进制格式；图片可以用JPG格式表现，也可以用PNG格式表现。</p><p>URI只代表资源的实体，不代表它的形式。严格地说，有些网址最后的”.html”后缀名是不必要的，因为这个后缀名表示格式，属于”表现层”范畴，而URI应该只代表”资源”的位置。它的具体表现形式，应该在HTTP请求的头信息中用Accept和Content-Type字段指定，这两个字段才是对”表现层”的描述。</p><h2 id="五、状态转化（State-Transfer）"><a href="#五、状态转化（State-Transfer）" class="headerlink" title="五、状态转化（State Transfer）"></a>五、状态转化（State Transfer）</h2><p>访问一个网站，就代表了客户端和服务器的一个互动过程。在这个过程中，势必涉及到数据和状态的变化。</p><p>互联网通信协议HTTP协议，是一个无状态协议。这意味着，所有的状态都保存在服务器端。因此，如果客户端想要操作服务器，必须通过某种手段，让服务器端发生”状态转化”（State Transfer）。而这种转化是建立在表现层之上的，所以就是”表现层状态转化”。</p><p>客户端用到的手段，只能是HTTP协议。具体来说，就是HTTP协议里面，四个表示操作方式的动词：GET、POST、PUT、DELETE。它们分别对应四种基本操作：GET用来获取资源，POST用来新建资源（也可以用于更新资源），PUT用来更新资源，DELETE用来删除资源。</p><h2 id="六、综述"><a href="#六、综述" class="headerlink" title="六、综述"></a>六、综述</h2><p>综合上面的解释，我们总结一下什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p><h2 id="七、误区"><a href="#七、误区" class="headerlink" title="七、误区"></a>七、误区</h2><p>RESTful架构有一些典型的设计误区。</p><p>最常见的一种设计错误，就是URI包含动词。因为”资源”表示一种实体，所以应该是名词，URI不应该有动词，动词应该放在HTTP协议中。</p><p>举例来说，某个URI是 /posts/show/1 ，其中 show 是动词，这个URI就设计错了，正确的写法应该是 /posts/1 ，然后用 GET 方法表示 show 。</p><p>如果某些动作是HTTP动词表示不了的，你就应该把动作做成一种资源。比如网上汇款，从账户1向账户2汇款500元，错误的URI是：</p><figure class="highlight awk"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">POST <span class="hljs-regexp">/accounts/</span><span class="hljs-number">1</span><span class="hljs-regexp">/transfer/</span><span class="hljs-number">500</span><span class="hljs-regexp">/to/</span><span class="hljs-number">2</span><br></code></pre></div></td></tr></table></figure><p>正确的写法是把动词transfer改成名词transaction，资源不能是动词，但是可以是一种服务：</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">POST</span> <span class="hljs-string">/transaction</span> <span class="hljs-string">HTTP/1.1</span><br><span class="hljs-attr">Host:</span> <span class="hljs-number">127.0</span><span class="hljs-number">.0</span><span class="hljs-number">.1</span><br>　　<br><span class="hljs-string">from=1&amp;to=2&amp;amount=500.00</span><br></code></pre></div></td></tr></table></figure><p>另一个设计误区，就是在URI中加入版本号：</p><figure class="highlight crystal"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/www.example.com/app</span><span class="hljs-regexp">/1.0/foo</span><br><br><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/www.example.com/app</span><span class="hljs-regexp">/1.1/foo</span><br><br><span class="hljs-symbol">http:</span>/<span class="hljs-regexp">/www.example.com/app</span><span class="hljs-regexp">/2.0/foo</span><br></code></pre></div></td></tr></table></figure><p>因为不同的版本，可以理解成同一种资源的不同表现形式，所以应该采用同一个URI。版本号可以在HTTP请求头信息的Accept字段中进行区分（参见<a href="http://www.informit.com/articles/article.aspx?p=1566460" target="_blank" rel="noopener">Versioning REST Services</a>）：</p><figure class="highlight avrasm"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">Accept:</span> vnd.example-<span class="hljs-keyword">com</span>.foo+json<span class="hljs-comment">; version=1.0</span><br><br><span class="hljs-symbol">Accept:</span> vnd.example-<span class="hljs-keyword">com</span>.foo+json<span class="hljs-comment">; version=1.1</span><br><br><span class="hljs-symbol">Accept:</span> vnd.example-<span class="hljs-keyword">com</span>.foo+json<span class="hljs-comment">; version=2.0</span><br></code></pre></div></td></tr></table></figure><h2 id="八、RESTful-API设计"><a href="#八、RESTful-API设计" class="headerlink" title="八、RESTful API设计"></a>八、RESTful API设计</h2><h3 id="8-1-协议"><a href="#8-1-协议" class="headerlink" title="8.1 协议"></a>8.1 协议</h3><p>API与用户的通信协议，总是使用<a href="http://www.ruanyifeng.com/blog/2014/02/ssl_tls.html" target="_blank" rel="noopener">HTTPs协议</a>。</p><h3 id="8-2-域名"><a href="#8-2-域名" class="headerlink" title="8.2 域名"></a>8.2 域名</h3><p>应该尽量将API部署在专用域名之下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">https:<span class="hljs-comment">//api.example.com</span><br></code></pre></div></td></tr></table></figure><p>如果确定API很简单，不会有进一步扩展，可以考虑放在主域名下。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">https:<span class="hljs-comment">//example.org/api/</span><br></code></pre></div></td></tr></table></figure><h3 id="8-3-版本（Versioning）"><a href="#8-3-版本（Versioning）" class="headerlink" title="8.3 版本（Versioning）"></a>8.3 版本（Versioning）</h3><p>应该将API的版本号放入URL。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">https:<span class="hljs-comment">//api.example.com/v1/</span><br></code></pre></div></td></tr></table></figure><p>另一种做法是，将版本号放在HTTP头信息中，但不如放入URL方便和直观。<a href="https://developer.github.com/v3/media/#request-specific-version" target="_blank" rel="noopener">Github</a>采用这种做法。</p><h3 id="8-4-路径（Endpoint）"><a href="#8-4-路径（Endpoint）" class="headerlink" title="8.4 路径（Endpoint）"></a>8.4 路径（Endpoint）</h3><p>路径又称”终点”（endpoint），表示API的具体网址。</p><p>在RESTful架构中，每个网址代表一种资源（resource），所以网址中不能有动词，只能有名词，而且所用的名词往往与数据库的表格名对应。一般来说，数据库中的表都是同种记录的”集合”（collection），所以API中的名词也应该使用复数。</p><p>举例来说，有一个API提供动物园（zoo）的信息，还包括各种动物和雇员的信息，则它的路径应该设计成下面这样。</p><blockquote><ul><li><a href="https://api.example.com/v1/zoos" target="_blank" rel="noopener">https://api.example.com/v1/zoos</a></li><li><a href="https://api.example.com/v1/animals" target="_blank" rel="noopener">https://api.example.com/v1/animals</a></li><li><a href="https://api.example.com/v1/employees" target="_blank" rel="noopener">https://api.example.com/v1/employees</a></li></ul></blockquote><h3 id="8-5-HTTP动词"><a href="#8-5-HTTP动词" class="headerlink" title="8.5 HTTP动词"></a>8.5 HTTP动词</h3><p>对于资源的具体操作类型，由HTTP动词表示。</p><p>常用的HTTP动词有下面五个（括号里是对应的SQL命令）。</p><ul><li>GET（SELECT）：从服务器取出资源（一项或多项）。</li><li>POST（CREATE）：在服务器新建一个资源。</li><li>PUT（UPDATE）：在服务器更新资源（客户端提供改变后的完整资源）。</li><li>PATCH（UPDATE）：在服务器更新资源（客户端提供改变的属性）。</li><li>DELETE（DELETE）：从服务器删除资源。</li></ul><p>还有两个不常用的HTTP动词。</p><ul><li>HEAD：获取资源的元数据。</li><li>OPTIONS：获取信息，关于资源的哪些属性是客户端可以改变的。</li></ul><p>下面是一些例子。</p><ul><li>GET /zoos：列出所有动物园</li><li>POST /zoos：新建一个动物园</li><li>GET /zoos/ID：获取某个指定动物园的信息</li><li>PUT /zoos/ID：更新某个指定动物园的信息（提供该动物园的全部信息）</li><li>PATCH /zoos/ID：更新某个指定动物园的信息（提供该动物园的部分信息）</li><li>DELETE /zoos/ID：删除某个动物园</li><li>GET /zoos/ID/animals：列出某个指定动物园的所有动物</li><li>DELETE /zoos/ID/animals/ID：删除某个指定动物园的指定动物</li></ul><h3 id="8-6-过滤信息（Filtering）"><a href="#8-6-过滤信息（Filtering）" class="headerlink" title="8.6 过滤信息（Filtering）"></a>8.6 过滤信息（Filtering）</h3><p>如果记录数量很多，服务器不可能都将它们返回给用户。API应该提供参数，过滤返回结果。</p><p>下面是一些常见的参数。</p><ul><li>?limit=10：指定返回记录的数量</li><li>?offset=10：指定返回记录的开始位置。</li><li>?page=2&amp;per_page=100：指定第几页，以及每页的记录数。</li><li>?sortby=name&amp;order=asc：指定返回结果按照哪个属性排序，以及排序顺序。</li><li>?animal_type_id=1：指定筛选条件</li></ul><p>参数的设计允许存在冗余，即允许API路径和URL参数偶尔有重复。比如，GET /zoo/ID/animals 与 GET /animals?zoo_id=ID 的含义是相同的。</p><h3 id="8-7-状态码（Status-Codes）"><a href="#8-7-状态码（Status-Codes）" class="headerlink" title="8.7 状态码（Status Codes）"></a>8.7 状态码（Status Codes）</h3><p>服务器向用户返回的状态码和提示信息，常见的有以下一些（方括号中是该状态码对应的HTTP动词）。</p><ul><li><strong>200 OK - [GET]：服务器成功返回用户请求的数据，该操作是幂等的（Idempotent）。</strong></li><li>201 CREATED - [POST/PUT/PATCH]：用户新建或修改数据成功。</li><li>202 Accepted - [*]：表示一个请求已经进入后台排队（异步任务）</li><li>204 NO CONTENT - [DELETE]：用户删除数据成功。</li><li>400 INVALID REQUEST - [POST/PUT/PATCH]：用户发出的请求有错误，服务器没有进行新建或修改数据的操作，该操作是幂等的。</li><li>401 Unauthorized - [*]：表示用户没有权限（令牌、用户名、密码错误）。</li><li><strong>403 Forbidden - [*] 表示用户得到授权（与401错误相对），但是访问是被禁止的。</strong></li><li><strong>404 NOT FOUND - [*]：用户发出的请求针对的是不存在的记录，服务器没有进行操作，该操作是幂等的。</strong></li><li>406 Not Acceptable - [GET]：用户请求的格式不可得（比如用户请求JSON格式，但是只有XML格式）。</li><li>410 Gone -[GET]：用户请求的资源被永久删除，且不会再得到的。</li><li>422 Unprocesable entity - [POST/PUT/PATCH] 当创建一个对象时，发生一个验证错误。</li><li><strong>500 INTERNAL SERVER ERROR - [*]：服务器发生错误，用户将无法判断发出的请求是否成功。</strong></li></ul><p>状态码的完全列表参见<a href="http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html" target="_blank" rel="noopener">这里</a>。</p><h3 id="8-8-错误处理（Error-handling）"><a href="#8-8-错误处理（Error-handling）" class="headerlink" title="8.8 错误处理（Error handling）"></a>8.8 错误处理（Error handling）</h3><p>如果状态码是4xx，就应该向用户返回出错信息。一般来说，返回的信息中将error作为键名，出错信息作为键值即可。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-attr">error</span>: <span class="hljs-string">"Invalid API key"</span><br>&#125;<br></code></pre></div></td></tr></table></figure><h3 id="8-9-返回结果"><a href="#8-9-返回结果" class="headerlink" title="8.9 返回结果"></a>8.9 返回结果</h3><p>针对不同操作，服务器向用户返回的结果应该符合以下规范。</p><ul><li>GET /collection：返回资源对象的列表（数组）</li><li>GET /collection/resource：返回单个资源对象</li><li>POST /collection：返回新生成的资源对象</li><li>PUT /collection/resource：返回完整的资源对象</li><li>PATCH /collection/resource：返回完整的资源对象</li><li>DELETE /collection/resource：返回一个空文档</li></ul><h3 id="8-10-Hypermedia-API"><a href="#8-10-Hypermedia-API" class="headerlink" title="8.10 Hypermedia API"></a>8.10 Hypermedia API</h3><p>RESTful API最好做到Hypermedia，即返回结果中提供链接，连向其他API方法，使得用户不查文档，也知道下一步应该做什么。</p><p>比如，当用户向api.example.com的根目录发出请求，会得到这样一个文档。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<span class="hljs-string">"link"</span>: &#123;<br>  <span class="hljs-string">"rel"</span>:   <span class="hljs-string">"collection https://www.example.com/zoos"</span>,<br>  <span class="hljs-string">"href"</span>:  <span class="hljs-string">"https://api.example.com/zoos"</span>,<br>  <span class="hljs-string">"title"</span>: <span class="hljs-string">"List of zoos"</span>,<br>  <span class="hljs-string">"type"</span>:  <span class="hljs-string">"application/vnd.yourformat+json"</span><br>&#125;&#125;<br></code></pre></div></td></tr></table></figure><p>上面代码表示，文档中有一个link属性，用户读取这个属性就知道下一步该调用什么API了。rel表示这个API与当前网址的关系（collection关系，并给出该collection的网址），href表示API的路径，title表示API的标题，type表示返回类型。</p><p>Hypermedia API的设计被称为<a href="http://en.wikipedia.org/wiki/HATEOAS" target="_blank" rel="noopener">HATEOAS</a>。Github的API就是这种设计，访问<a href="https://api.github.com/" target="_blank" rel="noopener">api.github.com</a>会得到一个所有可用API的网址列表。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">"current_user_url"</span>: <span class="hljs-string">"https://api.github.com/user"</span>,<br>  <span class="hljs-string">"authorizations_url"</span>: <span class="hljs-string">"https://api.github.com/authorizations"</span>,<br>  <span class="hljs-comment">// ...</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>从上面可以看到，如果想获取当前用户的信息，应该去访问<a href="https://api.github.com/user" target="_blank" rel="noopener">api.github.com/user</a>，然后就得到了下面结果。</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs javascript">&#123;<br>  <span class="hljs-string">"message"</span>: <span class="hljs-string">"Requires authentication"</span>,<br>  <span class="hljs-string">"documentation_url"</span>: <span class="hljs-string">"https://developer.github.com/v3"</span><br>&#125;<br></code></pre></div></td></tr></table></figure><p>上面代码表示，服务器给出了提示信息，以及文档的网址。</p><h3 id="8-11-其他"><a href="#8-11-其他" class="headerlink" title="8.11 其他"></a>8.11 其他</h3><p>（1）API的身份认证应该使用<a href="http://www.ruanyifeng.com/blog/2014/05/oauth_2_0.html" target="_blank" rel="noopener">OAuth 2.0</a>框架。</p><p>（2）服务器返回的数据格式，应该尽量使用JSON，避免使用XML。</p><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p>阮一峰：<a href="http://www.ruanyifeng.com/blog/2011/09/restful.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2011/09/restful.html</a></p><p>YUAN先生： <a href="https://www.cnblogs.com/yuanchenqi/articles/8742684.html" target="_blank" rel="noopener">https://www.cnblogs.com/yuanchenqi/articles/8742684.html</a></p><p>维基百科: <a href="https://en.wikipedia.org/wiki/Representational_state_transfer" target="_blank" rel="noopener">https://en.wikipedia.org/wiki/Representational_state_transfer</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Django面试总结</title>
      <link href="2018/05/05/Django%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/"/>
      <url>2018/05/05/Django%E9%9D%A2%E8%AF%95%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<p>自己整理的一些面试题，持续更新中。。。</p><a id="more"></a><h2 id="django、flask、tornado框架的比较？"><a href="#django、flask、tornado框架的比较？" class="headerlink" title="django、flask、tornado框架的比较？"></a>django、flask、tornado框架的比较？</h2><p>django：<br>优点：最全能的web开发框架，各种功能完备，可维护性高，开发速度快<br>缺点：django orm 跟数据库的交互，django同步特性导致吞吐量小的问题可以通过celery解决</p><p>tornado：<br>优点：天生异步，性能强悍<br>缺点：框架提供的功能比较少，需要自己实现，这样导致了开发速度偏慢</p><p>flask：<br>优点：自由、灵活，扩展性强，第三方库的选择面广<br>缺点：但是对程序员要求更高</p><hr><h2 id="什么是wsgi？"><a href="#什么是wsgi？" class="headerlink" title="什么是wsgi？"></a>什么是wsgi？</h2><p><a href="https://www.jianshu.com/p/679dee0a4193" target="_blank" rel="noopener">https://www.jianshu.com/p/679dee0a4193</a></p><p>WSGI，描述web server如何与web application通信的一种规范</p><p>WSGI协议主要包括server和application两部分：</p><p>WSGI server负责从客户端接收请求，将request转发给application，将application返回的response返回给客户端；<br>WSGI application接收由server转发的request，处理请求，并将处理结果返回给server。</p><p>application中可以包括多个栈式的中间件(middlewares)，这些中间件需要同时实现server与application，因此可以在WSGI服务器与WSGI应用之间起调节作用：对服务器来说，中间件扮演应用程序，对应用程序来说，中间件扮演服务器。</p><hr><h2 id="django请求的生命周期？"><a href="#django请求的生命周期？" class="headerlink" title="django请求的生命周期？"></a>django请求的生命周期？</h2><p>Django的请求生命周期是指当用户在浏览器上输入url到用户看到网页的这个时间段内,Django后台所发生的事情</p><p>而Django的生命周期内到底发生了什么呢??</p><ol><li>当用户在浏览器中输入url时,浏览器会生成请求头和请求体发给服务端<br>请求头和请求体中会包含浏览器的动作(action),这个动作通常为get或者post,体现在url之中.</li><li>url经过Django中的wsgi,再经过Django的中间件,最后url到过路由映射表,在路由中一条一条进行匹配,<br>一旦其中一条匹配成功就执行对应的视图函数,后面的路由就不再继续匹配了.</li><li>视图函数根据客户端的请求查询相应的数据.返回给Django,然后Django把客户端想要的数据做为一个字符串返回给客户端.</li><li>客户端浏览器接收到返回的数据,经过渲染后显示给用户.</li></ol><hr><h2 id="列举django的内置组件"><a href="#列举django的内置组件" class="headerlink" title="列举django的内置组件"></a>列举django的内置组件</h2><ul><li>认证组件</li><li>缓存</li><li>日志</li><li>邮件</li><li>分页</li><li>静态文件管理</li><li>资讯聚合</li><li>消息框架</li><li>数据验证</li></ul><hr><h2 id="列举django中间件的5个方法？以及django中间件的应用场景？"><a href="#列举django中间件的5个方法？以及django中间件的应用场景？" class="headerlink" title="列举django中间件的5个方法？以及django中间件的应用场景？"></a>列举django中间件的5个方法？以及django中间件的应用场景？</h2><ol><li><p>在django中，中间件其实就是一个类，在请求到来和结束后，django会根据自己的规则在合适的时机执行中间件中相应的方法</p><p>在django项目的settings模块中，有一个 MIDDLEWARE_CLASSES 变量，其中每一个元素就是一个中间件</p><p>默认的中间件有哪些</p><p>中间件中可以定义五个方法，分别是：</p></li></ol><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># 方法在请求到来的时候调用</span><br>process_request(self,request)<br><span class="hljs-comment"># 在本次将要执行的View函数被调用前调用本函数</span><br>process_view(self, request, callback, callback_args, callback_kwargs)<br><span class="hljs-comment"># 需使用render()方法才会执行process_template_response</span><br>process_template_response(self,request,response)<br><span class="hljs-comment"># View函数在抛出异常时该函数被调用，得到的exception参数是实际上抛出的异常实例。通过此方法可以进行很好的错误控制，提供友好的用户界面。</span><br>process_exception(self, request, exception)<br><span class="hljs-comment"># 在执行完View函数准备将响应发到客户端前被执行</span><br>process_response(self, request, response)<br></code></pre></div></td></tr></table></figure><ol start="2"><li><p>django中间件的使用场景</p><p>如果你想修改请求，例如被传送到view中的HttpRequest对象</p><p>或者你想修改view返回的HttpResponse对象，这些都可以通过中间件来实现</p><p>可能你还想在view执行之前做一些操作，这种情况也可以用 middleware来实现。<br>比如我们写一个判断浏览器来源，是pc还是手机，这里手机我们采用iphone，因为暂时没有其他设备。我们有不想把这个逻辑加到视图函数里，想作为一个通用服务，作为一个可插拔的组件被使用，最好的方法就是实现为中间件</p><p>或者说做一个拦截器，发现一定的时间内某个ip对网页的访问次数过多，则将其加入黑名单</p></li></ol><hr><h2 id="简述什么是FBV和CBV？"><a href="#简述什么是FBV和CBV？" class="headerlink" title="简述什么是FBV和CBV？"></a>简述什么是FBV和CBV？</h2><p><strong>FBV（function base views） 基于函数的视图</strong><br><strong>CBV（class base views） 基于类的视图</strong></p><p>使用fbv的模式,在url匹配成功之后,会直接执行对应的视图函数</p><p>使用cbv模式,在url匹配成功之后,会找到视图函数中对应的类,然后这个类回到请求头中找到对应的Request Method</p><p>用户发送url请求,Django会依次遍历路由映射表中的所有记录,一旦路由映射表其中的一条匹配成功了,就执行视图函数中对应的函数名,这是fbv的执行流程</p><p>当服务端使用cbv模式的时候,用户发给服务端的请求包含url和method,这两个信息都是字符串类型<br>服务端通过路由映射表匹配成功后会自动去找dispatch方法,然后Django会通过dispatch反射的方式找到类中对应的方法并执行<br>类中的方法执行完毕之后,会把客户端想要的数据返回给dispatch方法,由dispatch方法把数据返回经客户端</p><hr><h2 id="django的request对象是在什么时候创建的？"><a href="#django的request对象是在什么时候创建的？" class="headerlink" title="django的request对象是在什么时候创建的？"></a>django的request对象是在什么时候创建的？</h2><p>当请求一个页面时,Django创建一个 HttpRequest 对象.该对象包含 request 的元数据. 然后 Django 调用相应的 view 函数(HttpRequest 对象自动传递给该view函数&lt;作为第一个参数&gt;), 每一个 view 负责返回一个 HttpResponse 对象.</p><p>requests的元数据包括path，get，put等方法，cookies，user等等</p><hr><h2 id="如何给CBV的程序添加装饰器？"><a href="#如何给CBV的程序添加装饰器？" class="headerlink" title="如何给CBV的程序添加装饰器？"></a>如何给CBV的程序添加装饰器？</h2><p>CBV添加装饰器有两种方法</p><ol><li>在指定方法上添加装饰器</li><li>在类上添加，但是要用name来指定方法</li></ol><figure class="highlight PYTHON"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs PYTHON"><span class="hljs-comment">## CBV中添加装饰器</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">wrapper</span><span class="hljs-params">(func)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">inner</span><span class="hljs-params">(*args,**kwargs)</span>:</span><br>        <span class="hljs-keyword">return</span> func(*args,**kwargs)<br>    <span class="hljs-keyword">return</span> inner<br>    <br><span class="hljs-comment"># 1. 指定方法上添加装饰器</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span><span class="hljs-params">(View)</span>:</span><br><br><span class="hljs-meta">    @method_decorator(wrapper)</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><br><span class="hljs-number">2.</span> 在类上添加<br><br><span class="hljs-meta">@method_decorator(wrapper,name='dispatch')</span><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">Foo</span><span class="hljs-params">(View)</span>:</span><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">get</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">post</span><span class="hljs-params">(self,request)</span>:</span><br>        <span class="hljs-keyword">pass</span><br></code></pre></div></td></tr></table></figure><p>总结</p><ol><li>添加装饰器前必须导入from django.utils.decorators import method_decorator</li><li>添加装饰器的格式必须为@method_decorator()，括号里面为装饰器的函数名</li><li>给类添加是必须声明name</li><li>注意csrf-token装饰器的特殊性，它只能加在dispatch上面</li></ol><hr><h2 id="列举django-orm-中所有的方法（QuerySet对象的所有方法）"><a href="#列举django-orm-中所有的方法（QuerySet对象的所有方法）" class="headerlink" title="列举django orm 中所有的方法（QuerySet对象的所有方法）"></a>列举django orm 中所有的方法（QuerySet对象的所有方法）</h2><p>从数据库中查询出来的结果一般是一个集合，这个集合叫做 QuerySet</p><ul><li>filter 过滤</li><li>exclude 排除</li><li>annotate 聚合</li><li>order_by 排序</li><li>reverse 反向排序</li><li>distinct 去除查询结果中重复的行</li><li>values 迭代时返回字典而不是模型实例对象</li><li>values_list 迭代时返回元组而不是字典</li><li>dates 表示特定种类的所有可用日期</li><li>datetimes 表示特定种类的所有可用日期</li><li>none 不返回任何对象</li><li>all 返回所有结果</li><li>select_related 外键查询</li><li>prefetch_related 在单个批处理中自动检索每个指定查找的相关对象</li><li>defer 告诉django不要查询某些字段</li><li>using 多个数据库时控制QuerySet在哪个数据库上求值</li></ul><hr><h2 id="only和defer的区别？"><a href="#only和defer的区别？" class="headerlink" title="only和defer的区别？"></a>only和defer的区别？</h2><p>在复杂的情况下，表中可能有些字段内容非常多，取出来转化成 Python 对象会占用大量的资源。<br>这时候可以用 defer 来排除这些字段，比如我们在文章列表页，只需要文章的标题和作者，没有必要把文章的内容也获取出来（因为会转换成python对象，浪费内存）</p><p>和 defer 相反，only 用于取出需要的字段，假如我们只需要查出 作者的名称</p><hr><h2 id="select-related和prefetch-related的区别？"><a href="#select-related和prefetch-related的区别？" class="headerlink" title="select_related和prefetch_related的区别？"></a><code>select_related</code>和<code>prefetch_related</code>的区别？</h2><p><a href="https://hk.saowen.com/a/bb124ab70580b722d7840c7c0377a326ac4ce022dc653f4cbc7e0ae7fc245232" target="_blank" rel="noopener">https://hk.saowen.com/a/bb124ab70580b722d7840c7c0377a326ac4ce022dc653f4cbc7e0ae7fc245232</a></p><hr><h2 id="filter和exclude的区别？"><a href="#filter和exclude的区别？" class="headerlink" title="filter和exclude的区别？"></a>filter和exclude的区别？</h2><p>filter 设置要查询的字段<br>exclude 设置不要查询的字段</p><hr><h2 id="列举django-orm中三种能写sql语句的方法"><a href="#列举django-orm中三种能写sql语句的方法" class="headerlink" title="列举django orm中三种能写sql语句的方法"></a>列举django orm中三种能写sql语句的方法</h2><ol><li>使用extra：查询人民邮电出版社出版并且价格大于50元的书籍</li></ol><figure class="highlight less"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-selector-tag">Book</span><span class="hljs-selector-class">.objects</span><span class="hljs-selector-class">.filter</span>(publisher__name=<span class="hljs-string">'人民邮电出版社'</span>)<span class="hljs-selector-class">.extra</span>(where=[<span class="hljs-string">'price&gt;50'</span>])<br></code></pre></div></td></tr></table></figure><ol><li>使用raw</li></ol><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-attribute">books</span>=Book.objects.raw('select * <span class="hljs-keyword">from</span> hello_book<span class="hljs-string">')  <br>for book in books:  <br>   print book</span><br></code></pre></div></td></tr></table></figure><ol><li>自定义sql</li></ol><figure class="highlight vim"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">from django.db import connection  <br>  <br><span class="hljs-built_in">cursor</span> = connection.<span class="hljs-built_in">cursor</span>()  <br><span class="hljs-built_in">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-string">"insert into hello_author(name) VALUES ('郭敬明')"</span>)  <br><span class="hljs-built_in">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-string">"update hello_author set name='韩寒' WHERE name='郭敬明'"</span>)  <br><span class="hljs-built_in">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-string">"delete from hello_author where name='韩寒'"</span>)  <br><span class="hljs-built_in">cursor</span>.<span class="hljs-keyword">execute</span>(<span class="hljs-string">"select * from hello_author"</span>)  <br><span class="hljs-built_in">cursor</span>.fetchone()  <br><span class="hljs-built_in">cursor</span>.fetchall()<br></code></pre></div></td></tr></table></figure><hr><h2 id="django-orm-中如何设置读写分离？"><a href="#django-orm-中如何设置读写分离？" class="headerlink" title="django orm 中如何设置读写分离？"></a>django orm 中如何设置读写分离？</h2><p><a href="https://blog.csdn.net/Ayhan_huang/article/details/78784486" target="_blank" rel="noopener">https://blog.csdn.net/Ayhan_huang/article/details/78784486</a></p><p><a href="https://my.oschina.net/candiesyangyang/blog/203425" target="_blank" rel="noopener">https://my.oschina.net/candiesyangyang/blog/203425</a></p><hr><h2 id="F和Q的作用"><a href="#F和Q的作用" class="headerlink" title="F和Q的作用?"></a>F和Q的作用?</h2><p>F作用：操作数据表中的某列值，F()允许Django在未实际链接数据的情况下具有对数据库字段的值的引用，不用获取对象放在内存中再对字段进行操作，直接执行原生产sql语句操作</p><p>使用场景：对数据库中的所有的商品，在原价格的基础上涨价10元</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">from</span> django.db.models <span class="hljs-keyword">import</span> F<br><span class="hljs-keyword">from</span> app01.models <span class="hljs-keyword">import</span> Book<br>Book.objects.update(price=F(<span class="hljs-string">"price"</span>)+<span class="hljs-number">20</span>)  <span class="hljs-comment"># 对于book表中每本书的价格都在原价格的基础上增加20元</span><br></code></pre></div></td></tr></table></figure><p>Q作用：对对象进行复杂查询，并支持&amp;（and）,|（or），~（not）操作符</p><p>使用场景：filter查询条件只有一个，而使用Q可以设置多个查询条件</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">from django<span class="hljs-selector-class">.db</span><span class="hljs-selector-class">.models</span> import Q<br>search_obj=Asset<span class="hljs-selector-class">.objects</span>.<span class="hljs-attribute">filter</span>(Q(hostname__icontains=keyword)|Q(ip=keyword))<br></code></pre></div></td></tr></table></figure><p>当同时使用filter的关键字查询和Q查询时，一定要把Q对象放在前面</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">Asset.objects.<span class="hljs-builtin-name">get</span>(<br>Q(<span class="hljs-attribute">pub_date</span>=date(2005, 5, 2)) | Q(<span class="hljs-attribute">pub_date</span>=date(2005, 5, 6)),<span class="hljs-attribute">question__startswith</span>=<span class="hljs-string">'Who'</span>)<br></code></pre></div></td></tr></table></figure><h2 id="values和values-list的区别"><a href="#values和values-list的区别" class="headerlink" title="values和values_list的区别"></a>values和values_list的区别</h2><p>values 返回字典而不是模型查询对象</p><p>values-list 跟values一样，但是返回的是元组</p><p><a href="https://blog.csdn.net/weixin_40475396/article/details/79529256" target="_blank" rel="noopener">https://blog.csdn.net/weixin_40475396/article/details/79529256</a></p><h2 id="如何使用django-orm批量创建数据？"><a href="#如何使用django-orm批量创建数据？" class="headerlink" title="如何使用django orm批量创建数据？"></a>如何使用django orm批量创建数据？</h2><p>如果使用django save()创建数据，则每次save的时候都会访问一次数据库</p><figure class="highlight stylus"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-keyword">for</span> <span class="hljs-selector-tag">i</span> <span class="hljs-keyword">in</span> resultlist:<br>    <span class="hljs-selector-tag">p</span> = Account(name=i)<br>    <span class="hljs-selector-tag">p</span>.save()<br></code></pre></div></td></tr></table></figure><p>django1.4之后加入新特性可以批量创建对象，减少SQL查询次数</p><figure class="highlight matlab"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">querysetlist=[]<br><span class="hljs-keyword">for</span> <span class="hljs-built_in">i</span> in resultlist:<br>    querysetlist.append(Account(name=<span class="hljs-built_in">i</span>))<br>Account.objects.bulk_create(querysetlist)<br></code></pre></div></td></tr></table></figure><h2 id="django的Form和ModeForm的作用？"><a href="#django的Form和ModeForm的作用？" class="headerlink" title="django的Form和ModeForm的作用？"></a>django的Form和ModeForm的作用？</h2><p><a href="http://www.cnblogs.com/caochao-/articles/8412830.html" target="_blank" rel="noopener">http://www.cnblogs.com/caochao-/articles/8412830.html</a></p><p>表单的作用是收集元素中的内容</p><p>Form 需要自己定义表单的字段</p><p>ModelForm 根据model来生成表单的字段</p><h2 id="django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新"><a href="#django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新" class="headerlink" title="django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新"></a>django的Form组件中，如果字段中包含choices参数，请使用两种方式实现数据源实时更新</h2><p>此问题只适用于From组件，ModelFrom组件不用考虑(自身已经解决)</p><p>示例：例如choice类型字段，添加了新的数据，而在页面中不能显示出来，只有再次刷新页面才能获取最新的数据，因为程序运行时静态字段只加载一次, choice的数据如果从数据库获取可能会造成数据无法实时更新</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># models.py</span><br><span class="hljs-keyword">from</span> django.db <span class="hljs-keyword">import</span> models<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserType</span><span class="hljs-params">(models.Model)</span>:</span><br>    title = models.CharField(max_length=<span class="hljs-number">32</span>)<br>　　　<br>　　<span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__str__</span><span class="hljs-params">(self)</span>:</span><br>　　　　<span class="hljs-keyword">return</span> self.title<br><br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserInfo</span><span class="hljs-params">(models.Model)</span>:</span><br>    name = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    email = models.CharField(max_length=<span class="hljs-number">32</span>)<br>    ut = models.ForeignKey(to=<span class="hljs-string">'UserType'</span>)<br></code></pre></div></td></tr></table></figure><p>方法一：重写构造方法：</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># views.py      </span><br><br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> fields<br><br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserForm</span><span class="hljs-params">(Form)</span>:</span><br>    name = fields.CharField(label=<span class="hljs-string">'用户名'</span>,max_length=<span class="hljs-number">32</span>)<br>    email = fields.EmailField(label=<span class="hljs-string">'邮箱'</span>)<br>    ut_id = fields.ChoiceField(<br>        <span class="hljs-comment"># choices=[(1,'二笔用户'),(2,'闷骚')]</span><br>        choices=[]<br>    )<br><br>    <span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">__init__</span><span class="hljs-params">(self,*args,**kwargs)</span>:</span><br>        super(UserForm,self).__init__(*args,**kwargs)<br>        <br>        <span class="hljs-comment"># 每次实例化，重新去数据库获取数据并更新</span><br>        self.fields[<span class="hljs-string">'ut_id'</span>].choices = models.UserType.objects.all().values_list(<span class="hljs-string">'id'</span>,<span class="hljs-string">'title'</span>)<br><br><span class="hljs-function"><span class="hljs-keyword">def</span> <span class="hljs-title">user</span><span class="hljs-params">(request)</span>:</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">"GET"</span>:<br>        form = UserForm()<br>        <span class="hljs-keyword">return</span> render(request,<span class="hljs-string">'user.html'</span>,&#123;<span class="hljs-string">'form'</span>:form&#125;)<br></code></pre></div></td></tr></table></figure><p>方法二：使用ModelChoiceField字段</p><figure class="highlight python"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs python"><span class="hljs-comment"># views.py</span><br><br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> Form<br><span class="hljs-keyword">from</span> django.forms <span class="hljs-keyword">import</span> fields<br><span class="hljs-keyword">from</span> django.forms.models <span class="hljs-keyword">import</span> ModelChoiceField<br><span class="hljs-class"><span class="hljs-keyword">class</span> <span class="hljs-title">UserForm</span><span class="hljs-params">(Form)</span>:</span><br>    name = fields.CharField(label=<span class="hljs-string">'用户名'</span>,max_length=<span class="hljs-number">32</span>)<br>    email = fields.EmailField(label=<span class="hljs-string">'邮箱'</span>)<br>    ut_id = ModelChoiceField(queryset=models.UserType.objects.all())<br></code></pre></div></td></tr></table></figure><h3 id="django的Model中的ForeignKey字段中的on-delete参数有什么作用？"><a href="#django的Model中的ForeignKey字段中的on-delete参数有什么作用？" class="headerlink" title="django的Model中的ForeignKey字段中的on_delete参数有什么作用？"></a>django的Model中的ForeignKey字段中的on_delete参数有什么作用？</h3><p>当一个被ForeignKey引用的对象删除后，django将会通过指定on_delete参数来仿真sql约束的行为</p><p>例如，如果你有一个可以为空的ForeignKey，在其引用的对象被删除的时你想把这个ForeignKey 设置为空：</p><figure class="highlight routeros"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">user = models.ForeignKey(User, <span class="hljs-attribute">blank</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">null</span>=<span class="hljs-literal">True</span>, <span class="hljs-attribute">on_delete</span>=models.SET_NULL)<br></code></pre></div></td></tr></table></figure><p><code>on_delete</code>有<code>CASCADE</code>、<code>PROTECT</code>、<code>SET_NULL</code>、<code>SET_DEFAULT</code>、<code>SET()</code>五个可选择的值</p><ol><li>CASCADE: 级联删除；默认值</li><li>PROTECT: 抛出ProtectedError 以阻止被引用对象的删除，它是django.db.IntegrityError 的一个子类</li><li>SET_NULL: 把ForeignKey 设置为null； null 参数为True 时才可以这样做</li><li>SET_DEFAULT: ForeignKey 值设置成它的默认值；此时必须设置ForeignKey 的default 参数</li><li>SET: 设置ForeignKey 为传递给SET() 的值，如果传递的是一个可调用对象，则为调用后的结果。在大部分情形下，<a href="http://xn--models-9m7igl44aw5bf6lb5io91a1s4fba7274gzkb249ap2b.py/" target="_blank" rel="noopener">传递一个可调用对象用于避免models.py</a> 在导入时执行查询</li></ol><h2 id="django中csrf的实现机制？"><a href="#django中csrf的实现机制？" class="headerlink" title="django中csrf的实现机制？"></a>django中csrf的实现机制？</h2><p><a href="https://blog.csdn.net/u011715678/article/details/48752873" target="_blank" rel="noopener">https://blog.csdn.net/u011715678/article/details/48752873</a></p><p><a href="https://www.jianshu.com/p/991df812e2a5?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation" target="_blank" rel="noopener">https://www.jianshu.com/p/991df812e2a5?utm_campaign=maleskine&amp;utm_content=note&amp;utm_medium=seo_notes&amp;utm_source=recommendation</a></p><h2 id="django如何实现websocket？"><a href="#django如何实现websocket？" class="headerlink" title="django如何实现websocket？"></a>django如何实现websocket？</h2><p><a href="http://www.ruanyifeng.com/blog/2017/05/websocket.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2017/05/websocket.html</a></p><p>HTTP 协议有一个缺陷：通信只能由客户端发起</p><p>WebSocket 协议它的最大特点就是，服务器可以主动向客户端推送信息，客户端也可以主动向服务器发送信息，是真正的双向平等对话，属于服务器推送技术的一种</p><p>django实现websocket有多种方式：</p><ol><li>使用Channels实现websocket</li></ol><p><a href="https://www.jianshu.com/p/3de90e457bb4" target="_blank" rel="noopener">https://www.jianshu.com/p/3de90e457bb4</a></p><ol><li>使用dwebsocket实现Websocket</li></ol><p><a href="https://www.cnblogs.com/huguodong/p/6611602.html" target="_blank" rel="noopener">https://www.cnblogs.com/huguodong/p/6611602.html</a></p><p><a href="http://gtcsq.readthedocs.io/en/latest/others/websocket.html" target="_blank" rel="noopener">http://gtcsq.readthedocs.io/en/latest/others/websocket.html</a></p><h2 id="基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？"><a href="#基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf-token？" class="headerlink" title="基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？"></a>基于django使用ajax发送post请求时，都可以使用哪种方法携带csrf token？</h2><p>1、写在Ajax beforeSend</p><figure class="highlight actionscript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">ajax（｛<br>　　xxx:xxx,<br>　　beforeSend:<span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(xhr, settings)</span></span>&#123;<br>　　　　xhr.setRequestHeader(<span class="hljs-string">"x-CSRFToken"</span>, <span class="hljs-string">"&#123;&#123; csrf_token &#125;&#125;"</span>);<br>　　&#125;,<br>｝）<br></code></pre></div></td></tr></table></figure><p>2、写到Ajax Data</p><figure class="highlight dts"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">ajax（｛<br><span class="hljs-symbol">　　xxx:</span>xxx,<br><span class="hljs-symbol">　　data:</span> $(<span class="hljs-string">"#form"</span>).serialize(),<br>｝）<br></code></pre></div></td></tr></table></figure><p>3、写到ajaxSetup</p><figure class="highlight javascript"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">$(<span class="hljs-string">"#add-business-form"</span>).submit(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            $.ajaxSetup(&#123;<br>            <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">csrfmiddlewaretoken</span>: <span class="hljs-string">'&#123;&#123; csrf_token &#125;&#125;'</span>&#125;<br>            &#125;);<br>            $.ajax(&#123;<br>               <span class="hljs-attr">xxx</span>:xxxx,<br>            &#125;);<br>            <span class="hljs-keyword">return</span> <span class="hljs-literal">false</span>;<br>        &#125;);<br></code></pre></div></td></tr></table></figure><p>4、KindEditor携带CSRF</p><figure class="highlight xml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-tag">&lt;<span class="hljs-name">script</span>&gt;</span><span class="javascript"><br>    <span class="hljs-keyword">var</span> csrfitems = <span class="hljs-built_in">document</span>.getElementsByName(<span class="hljs-string">"csrfmiddlewaretoken"</span>);<br>    <span class="hljs-keyword">var</span> csrftoken = <span class="hljs-string">""</span>;<br>    <span class="hljs-keyword">if</span>(csrfitems.length &gt; <span class="hljs-number">0</span>)<br>    &#123;<br>        csrftoken = csrfitems[<span class="hljs-number">0</span>].value;<br>    &#125;<br>    $(<span class="hljs-function"><span class="hljs-keyword">function</span> (<span class="hljs-params"></span>) </span>&#123;<br>            initKindEditor();<br>        &#125;);<br>    <span class="hljs-function"><span class="hljs-keyword">function</span> <span class="hljs-title">initKindEditor</span>(<span class="hljs-params"></span>) </span>&#123;<br>        $.ajaxSetup(&#123;<br>        <span class="hljs-attr">data</span>: &#123;<span class="hljs-attr">csrfmiddlewaretoken</span>: <span class="hljs-string">'&#123;&#123; csrf_token &#125;&#125;'</span>&#125;<br>        &#125;);<br>        <span class="hljs-keyword">var</span> kind = KindEditor.create(<span class="hljs-string">'#content'</span>, &#123;<br>            <span class="hljs-attr">width</span>: <span class="hljs-string">'100%'</span>,       <span class="hljs-comment">// 文本框宽度(可以百分比或像素)</span><br>            <span class="hljs-attr">height</span>: <span class="hljs-string">'300px'</span>,     <span class="hljs-comment">// 文本框高度(只能像素)</span><br>            <span class="hljs-attr">minWidth</span>: <span class="hljs-number">200</span>,       <span class="hljs-comment">// 最小宽度（数字）</span><br>            <span class="hljs-attr">minHeight</span>: <span class="hljs-number">400</span>,      <span class="hljs-comment">// 最小高度（数字）</span><br>            <span class="hljs-attr">uploadJson</span>: <span class="hljs-string">'&#123;% url "upload_image" %&#125;'</span>,<br>            <span class="hljs-attr">extraFileUploadParams</span> : &#123;<br>                <span class="hljs-attr">csrfmiddlewaretoken</span>:csrftoken<br>            &#125;<br>        &#125;);<br>    &#125;<br></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br></code></pre></div></td></tr></table></figure><h2 id="django中如何实现orm表中添加数据时创建一条日志记录"><a href="#django中如何实现orm表中添加数据时创建一条日志记录" class="headerlink" title="django中如何实现orm表中添加数据时创建一条日志记录"></a>django中如何实现orm表中添加数据时创建一条日志记录</h2><ol><li>使用信号记录</li><li>使用logger</li></ol><p><a href="https://blog.csdn.net/apple9005/article/details/73608994" target="_blank" rel="noopener">https://blog.csdn.net/apple9005/article/details/73608994</a></p><h2 id="django缓存如何设置？"><a href="#django缓存如何设置？" class="headerlink" title="django缓存如何设置？"></a>django缓存如何设置？</h2><p><a href="https://www.cnblogs.com/linxiyue/p/7494540.html" target="_blank" rel="noopener">https://www.cnblogs.com/linxiyue/p/7494540.html</a></p><h2 id="django的缓存能使用redis吗？如果可以的话，如何配置？"><a href="#django的缓存能使用redis吗？如果可以的话，如何配置？" class="headerlink" title="django的缓存能使用redis吗？如果可以的话，如何配置？"></a>django的缓存能使用redis吗？如果可以的话，如何配置？</h2><p><a href="https://www.jianshu.com/p/04ef84c3fe3b" target="_blank" rel="noopener">https://www.jianshu.com/p/04ef84c3fe3b</a></p><h2 id="django路由系统中name的作用？"><a href="#django路由系统中name的作用？" class="headerlink" title="django路由系统中name的作用？"></a>django路由系统中name的作用？</h2><p><a href="https://www.cnblogs.com/no13bus/p/3767521.html" target="_blank" rel="noopener">https://www.cnblogs.com/no13bus/p/3767521.html</a></p><p><a href="https://code.ziqiangxuetang.com/django/django-url-name.html" target="_blank" rel="noopener">https://code.ziqiangxuetang.com/django/django-url-name.html</a></p><h2 id="django的模板中filter和simple-tag的区别？"><a href="#django的模板中filter和simple-tag的区别？" class="headerlink" title="django的模板中filter和simple_tag的区别？"></a>django的模板中filter和simple_tag的区别？</h2><p><a href="https://blog.csdn.net/huanhuanq1209/article/details/77756446" target="_blank" rel="noopener">https://blog.csdn.net/huanhuanq1209/article/details/77756446</a></p><h2 id="django-debug-toolbar的作用？"><a href="#django-debug-toolbar的作用？" class="headerlink" title="django-debug-toolbar的作用？"></a>django-debug-toolbar的作用？</h2><p><a href="https://www.cnblogs.com/Lands-ljk/p/5506766.html" target="_blank" rel="noopener">https://www.cnblogs.com/Lands-ljk/p/5506766.html</a></p><h2 id="django中如何实现单元测试？"><a href="#django中如何实现单元测试？" class="headerlink" title="django中如何实现单元测试？"></a>django中如何实现单元测试？</h2><p><a href="https://www.jianshu.com/p/15af33d2c2c4" target="_blank" rel="noopener">https://www.jianshu.com/p/15af33d2c2c4</a></p><h2 id="解释orm中-db-first-和-code-first的含义"><a href="#解释orm中-db-first-和-code-first的含义" class="headerlink" title="解释orm中 db first 和 code first的含义"></a>解释orm中 db first 和 code first的含义</h2><p>db first：现有数据库，<a href="http://xn--models-ht8i645axqa6a510yi0i5neuviwr3c2cn.py/" target="_blank" rel="noopener">然后从数据库反向生成models.py</a></p><p>code first: <a href="http://xn--models-283m094f.py/" target="_blank" rel="noopener">现有models.py</a> 再进行数据库操作</p><h2 id="django中如何根据数据库表生成model中的类"><a href="#django中如何根据数据库表生成model中的类" class="headerlink" title="django中如何根据数据库表生成model中的类"></a>django中如何根据数据库表生成model中的类</h2><p><a href="https://www.jianshu.com/p/037bd7e20a7a" target="_blank" rel="noopener">https://www.jianshu.com/p/037bd7e20a7a</a></p><h2 id="使用orm和原生sql的优缺点？"><a href="#使用orm和原生sql的优缺点？" class="headerlink" title="使用orm和原生sql的优缺点？"></a>使用orm和原生sql的优缺点？</h2><p>使用 ORM 最大的优点就是快速开发，让我们将更多的精力放在业务上而不是数据库上，下面是 ORM 的几个优点</p><ol><li>隐藏了数据访问细节，使通用数据库交互变得简单易行。同时 ORM 避免了不规范、冗余、风格不统一的 SQL 语句，可以避免很多人为的 bug，方便编码风格的统一和后期维护。</li><li>将数据库表和对象模型关联，我们只需针对相关的对象模型进行编码，无须考虑对象模型和数据库表之间的转化，大大提高了程序的开发效率。</li><li>方便数据库的迁移。当需要迁移到新的数据库时，不需要修改对象模型，只需要修改数据库的配置。</li></ol><p>ORM 的最令人诟病的地方就是性能问题，不过现在已经提高了很多，下面是 ORM 的几个缺点</p><ol><li>性能问题<ol><li>自动化进行数据库关系的映射需要消耗系统资源</li><li>程序员编码</li><li>在处理多表联查、where 条件复杂的查询时，ORM 可能会生成的效率低下的 SQL</li><li>通过 Lazy load 和 Cache 很大程度上改善了性能问题</li></ol></li><li>SQL 调优，SQL 语句是由 ORM 框架自动生成，虽然减少了 SQL 语句错误的发生，但是也给 SQL 调优带来了困难。</li><li>越是功能强大的 ORM 越消耗内存，因为一个 ORM Object 会带有很多成员变量和成员函数。</li><li>对象和关系之间并不是完美映射<br>一般来说 ORM 足以满足我们的需求，如果对性能要求特别高或者查询十分复杂，可以考虑使用原生 SQL 和 ORM 共用的方式</li></ol><p>使用原生sql优点：</p><ol><li>进行复杂的查询时更加灵活</li><li>可以根据需要编写特殊的sql语句</li></ol><p>使用原生sql缺点：</p><ol><li>需要对输入进行严格的检测</li><li>自己写的sql语句，很多时候使用的是字符串拼接，可能会有sql注入的漏洞</li><li>不能使用django orm相关的一些特性</li></ol><h2 id="简述MVC和MTV"><a href="#简述MVC和MTV" class="headerlink" title="简述MVC和MTV"></a>简述MVC和MTV</h2><p><a href="http://www.dongwm.com/archives/%E6%B5%85%E8%B0%88MVC%E3%80%81MTV%E5%92%8CMVVM/" target="_blank" rel="noopener">http://www.dongwm.com/archives/浅谈MVC、MTV和MVVM/</a></p><h2 id="django的contenttype组件的作用？"><a href="#django的contenttype组件的作用？" class="headerlink" title="django的contenttype组件的作用？"></a>django的contenttype组件的作用？</h2><p><a href="https://blog.csdn.net/Ayhan_huang/article/details/78626957" target="_blank" rel="noopener">https://blog.csdn.net/Ayhan_huang/article/details/78626957</a></p><p><a href="https://juejin.im/entry/581da04f128fe1005afdf618" target="_blank" rel="noopener">https://juejin.im/entry/581da04f128fe1005afdf618</a></p><h2 id="谈谈你对restfull-规范的认识？"><a href="#谈谈你对restfull-规范的认识？" class="headerlink" title="谈谈你对restfull 规范的认识？"></a>谈谈你对restfull 规范的认识？</h2><p><a href="http://www.ruanyifeng.com/blog/2014/05/restful_api.html" target="_blank" rel="noopener">http://www.ruanyifeng.com/blog/2014/05/restful_api.html</a></p><h2 id="接口的幂等性是什么意思？"><a href="#接口的幂等性是什么意思？" class="headerlink" title="接口的幂等性是什么意思？"></a>接口的幂等性是什么意思？</h2><p><a href="https://www.jianshu.com/p/b09a2e9bcd29" target="_blank" rel="noopener">https://www.jianshu.com/p/b09a2e9bcd29</a></p><h2 id="什么是RPC？"><a href="#什么是RPC？" class="headerlink" title="什么是RPC？"></a>什么是RPC？</h2><p><a href="https://www.jianshu.com/p/2accc2840a1b" target="_blank" rel="noopener">https://www.jianshu.com/p/2accc2840a1b</a></p><h2 id="Http和Https的区别？"><a href="#Http和Https的区别？" class="headerlink" title="Http和Https的区别？"></a>Http和Https的区别？</h2><p><a href="https://juejin.im/entry/58d7635e5c497d0057fae036" target="_blank" rel="noopener">https://juejin.im/entry/58d7635e5c497d0057fae036</a></p><h2 id="为什么要使用django-rest-framework框架？"><a href="#为什么要使用django-rest-framework框架？" class="headerlink" title="为什么要使用django rest framework框架？"></a>为什么要使用django rest framework框架？</h2><p>为什么要使用REST framework？</p><ul><li>在线可视的API，对于赢得你的开发者们十分有用</li></ul><p>验证策略涵盖了OAuth1a和OAuth2</p><p>同时支持ORM和非ORM数据源的序列化</p><p>可以配置各个环节，若无需更多强大的特性，使用一般基于方法（function-based）的视图（views）即可</p><p>大量的文档，强力的社区支持</p><p>大公司如同Mozilla和Eventbrite，也是忠实的使用者</p><h2 id="django-rest-framework框架中都有那些组件？"><a href="#django-rest-framework框架中都有那些组件？" class="headerlink" title="django rest framework框架中都有那些组件？"></a>django rest framework框架中都有那些组件？</h2><p><strong>1. 路由</strong></p><ul><li>可以通过as_view传参数，根据请求方式不同执行相应的方法</li><li>可以在url中设置一个结尾，类似于： .json</li></ul><p><strong>2. 视图</strong></p><ul><li>帮助开发者提供了一些类，并在类中提供了多个方法以供我们使用</li></ul><p><strong>3. 版本</strong></p><ul><li>在url中设置version参数，用户请求时候传入参数。在request.version中获取版本，根据版本不同做不同处理</li></ul><p><strong>4. 认证</strong><br>写一个类并注册到认证类，在类的的authticate方法中编写认证逻辑。</p><ul><li>认证成功（user,auth）</li><li>raise AuthticateFaild(….)</li><li>None</li></ul><p><strong>5. 权限</strong><br>写一个类并注册到权限类，在类的的has_permission方法中编写认证逻辑。</p><ul><li>True</li><li>False</li></ul><p><strong>6. 频率限制</strong><br>写一个类并注册到频率类，在类的的 allow_request/wait 方法中编写认证逻辑。</p><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">allow_request</span><br> <span class="hljs-literal">True</span> <br> <span class="hljs-literal">False</span>  <span class="hljs-string">如果返回False，那么就要执行wait</span><br></code></pre></div></td></tr></table></figure><p><strong>7. 解析器</strong></p><ul><li>根据ContentType请求头，选择不同解析器对 请求体中的数据进行解析。</li><li>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:url-formendo…. \r\n\r\nuser=alex&amp;age=123</li><li>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:application/json\r\n\r\n{….}</li></ul><p><strong>8. 分页</strong></p><ul><li>对从数据库中获取到的数据进行分页处理: SQL -&gt; limit offset<ul><li>根据页码：<a href="http://www.luffycity.com/api/v1/student/?page=1&amp;size=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=1&amp;size=10</a></li><li>根据索引：<a href="http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10</a></li><li>根据加密：&lt;<a href="http://www.luffycity.com/api/v1/student/?page=erd8" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=erd8</a></li></ul></li></ul><h2 id="django-models中null和blank得区别"><a href="#django-models中null和blank得区别" class="headerlink" title="django models中null和blank得区别"></a>django models中null和blank得区别</h2><p><code>null</code> 是针对数据库而言，如果 <code>null=True</code>, 表示数据库的该字段可以为空</p><p><code>blank</code> 是针对表单的，如果 <code>blank=True</code>，表示你的表单填写该字段的时候可以不填，比如 <code>admin</code> 界面下增加 <code>model</code> 一条记录的时候。直观的看到就是该字段不是粗体</p><h3 id="django-rest-framework框架中的视图都可以继承哪些类？"><a href="#django-rest-framework框架中的视图都可以继承哪些类？" class="headerlink" title="django rest framework框架中的视图都可以继承哪些类？"></a>django rest framework框架中的视图都可以继承哪些类？</h3><p>APIview、ViewSets、Generic views</p><h3 id="简述-django-rest-framework框架的认证流程。"><a href="#简述-django-rest-framework框架的认证流程。" class="headerlink" title="简述 django rest framework框架的认证流程。"></a>简述 django rest framework框架的认证流程。</h3><p><a href="https://www.cnblogs.com/renpingsheng/p/9534984.html" target="_blank" rel="noopener">https://www.cnblogs.com/renpingsheng/p/9534984.html</a></p><h3 id="django-rest-framework如何实现的用户访问频率控制？"><a href="#django-rest-framework如何实现的用户访问频率控制？" class="headerlink" title="django rest framework如何实现的用户访问频率控制？"></a>django rest framework如何实现的用户访问频率控制？</h3>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
            <tag> 面试 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Redis降低内存占用(一)</title>
      <link href="2018/04/25/REDIS%E5%BC%95%E5%AD%901/"/>
      <url>2018/04/25/REDIS%E5%BC%95%E5%AD%901/</url>
      
        <content type="html"><![CDATA[<h2 id="引子"><a href="#引子" class="headerlink" title="引子"></a>引子</h2><p>深圳，雨，单休周末。午觉醒来，重新打开许久没看的《redis实战》，今天下午就看看 redis 性能优化部分。<br><a id="more"></a><br>降低Redis的内存占用所带来的好处：</p><ul><li>减少创建、加载快照的耗时</li><li>提升载入、重写AOF文件的效率</li><li>缩短从服务器的同步耗时</li><li>提高Redis的内存使用效率</li></ul><p>书中所提到的主要优化策略有：</p><ul><li>短结构</li><li>分片结构</li><li>打包存储二进制位和字节</li></ul><p>下面一一道来。</p><h2 id="一、-短结构"><a href="#一、-短结构" class="headerlink" title="一、 短结构"></a>一、 短结构</h2><p>在列表、散列和有序集合的长度较短或者体积较小的时候，Redis 可以选择使用一种名为压缩列表的（ziplist）的紧凑存储方式来存储这些结构。</p><p><code>压缩列表</code>是列表、散列和有序集合这三种不同类型的对象的一种非结构化表示：</p><p>普通情况下，Redis中数据结构的底层实现方式（这一部分知识在《redis实战》一书中提及的很少，在《redis设计与实现》一书中有比较详细的阐述）：</p><ul><li>列表——双链表</li><li>散列——散列表</li><li>有序集合——散列表+跳跃表</li></ul><p>启用压缩列表的情况下：</p><ul><li>序列化的方式保存数据</li><li>每次读取需要解码</li><li>每次保存需要重新编码</li><li>可能对内存中的数据进行移动</li></ul><h3 id="1-压缩列表的实现"><a href="#1-压缩列表的实现" class="headerlink" title="1. 压缩列表的实现"></a>1. 压缩列表的实现</h3><p>不使用压缩列表的额情况下，以列表数据结构为例：</p><ul><li>用来实现列表的双向链表，由于需要保存前后节点的指针信息，以及当前数据指针，加上保存自己的数据长度、剩余空间的两个整数。</li><li>举个例子：在32位系统上。一个列表中的一个长度为3个字节元素，需要至少21字节的额外空间</li></ul><p>而启用压缩列表的情况下：</p><ul><li>压缩列表是由节点组成的序列。每个节点需要两个额外的描述数据：一个用来记录上一个节点长度，一个用来记录当前节点的长度</li><li>举个例子：在32位系统上。一个列表中的一个长度为3个字节元素，只需要2字节的额外空间</li></ul><p>显而易见的，Redis中当保存的每个数据长度都很短时，如果不做处理，那么Redis用来描述这个数据位置的数据可能远远大于数据的本身，这就是为什么需要使用压缩列表。</p><p>启用压缩列表</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">list-max-ziplist-entries 512    # 列表结构使用压缩列表表示的限制条件。<br>list-max-ziplist-value 64       #<br>hash-max-ziplist-entries 512    # 散列结构使用压缩列表表示的限制条件<br>hash-max-ziplist-value 64       #（Redis 2.6 以前的版本会为散列结构使用不同的编码表示，并且选项的名字也与此不同）。<br>zset-max-ziplist-entries 128    # 有序集合使用压缩列表表示的限制条件。<br>zset-max-ziplist-value 64       #<br></code></pre></div></td></tr></table></figure><p>列表、散列、有序集合可以使用压缩列表实现，而集合则不太相同。</p><h3 id="2-集合的整数集合编码"><a href="#2-集合的整数集合编码" class="headerlink" title="2. 集合的整数集合编码"></a>2. 集合的整数集合编码</h3><p>集合当满足以下条件时可以进行优化：</p><ul><li>所有成员都可以被解释成十进制整数</li><li>处于平台的有符号整数范围之内</li><li>集合成员足够少</li></ul><p>满足上述条件的集合，Redis将会以<code>整数集合</code>这种底层数据结构来实现当前集合。</p><figure class="highlight shell"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs shell">set-max-intset-entries 512      # 集合使用整数集合表示的限制条件。<br></code></pre></div></td></tr></table></figure><p>超过以上设置的集合会被换为用散列表来实现。</p><h3 id="3-不成熟的优化所带来的的问题"><a href="#3-不成熟的优化所带来的的问题" class="headerlink" title="3. 不成熟的优化所带来的的问题"></a>3. 不成熟的优化所带来的的问题</h3><p>在开始的时候我们提到过压缩列表需要额外的编码、解码过程。</p><p>可以看到加入我们错误的设置了一个阈值，比如将一些很长的数据用压缩列表来保存，而且同时这一部分的数据属于热点数据，读写次数高。</p><p>那么每次编码解码所带来的性能损失，将大于空间占用的降低。</p><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><blockquote><p>《Redis实战》源码：<a href="https://github.com/huangz1990/riacn-code/blob/master/ch09_listing_source.py" target="_blank" rel="noopener">https://github.com/huangz1990/riacn-code/blob/master/ch09_listing_source.py</a></p></blockquote><hr><p>后续将介绍分片、打包，待续。。。</p>]]></content>
      
      
      <categories>
          
          <category> Nosql </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Redis </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>关于HTTP协议的总结</title>
      <link href="2018/04/22/%E5%85%B3%E4%BA%8EHTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%BB%E7%BB%93/"/>
      <url>2018/04/22/%E5%85%B3%E4%BA%8EHTTP%E5%8D%8F%E8%AE%AE%E7%9A%84%E6%80%BB%E7%BB%93/</url>
      
        <content type="html"><![CDATA[<h2 id="HTTP简介"><a href="#HTTP简介" class="headerlink" title="HTTP简介"></a>HTTP简介</h2><ul><li>HTTP协议是Hyper Text Transfer Protocol（超文本传输协议）的缩写,是用于从万维网（WWW:World Wide Web ）服务器传输超文本到本地浏览器的传送协议。</li></ul><a id="more"></a><ul><li>HTTP是一个基于<strong>TCP/IP通信协议</strong>来传递数据（HTML 文件, 图片文件, 查询结果等）。</li><li>HTTP是一个属于<strong>应用层的面向对象的协议</strong>，由于其简捷、快速的方式，适用于分布式超媒体信息系统。它于1990年提出，经过几年的使用与发展，得到不断地完善和扩展。目前在WWW中使用的是HTTP/1.0的第六版，HTTP/1.1的规范化工作正在进行之中，而且HTTP-NG(Next Generation of HTTP)的建议已经提出。</li><li>HTTP协议工作于<strong>客户端-服务端架构</strong>为上。浏览器作为HTTP客户端通过URL向HTTP服务端即WEB服务器发送所有请求。Web服务器根据接收到的请求后，向客户端发送响应信息。</li></ul><p><img src="https://s1.ax1x.com/2018/11/23/FiWzx1.jpg" alt="FiWzx1.jpg"></p><h2 id="主要特点"><a href="#主要特点" class="headerlink" title="主要特点"></a>主要特点</h2><ol><li><p>简单快速：</p><p>客户向服务器请求服务时，只需传送请求方法和路径。请求方法常用的有GET、HEAD、POST。每种方法规定了客户与服务器联系的类型不同。由于HTTP协议简单，使得HTTP服务器的程序规模小，因而通信速度很快。</p></li><li><p>灵活：</p><p>HTTP允许传输任意类型的数据对象。正在传输的类型由Content-Type加以标记。</p></li><li><p>无连接：</p><p>无连接的含义是限制每次连接只处理一个请求。服务器处理完客户的请求，并收到客户的应答后，即断开连接。采用这种方式可以节省传输时间。</p></li><li><p>无状态：</p><p>HTTP协议是无状态协议。无状态是指协议对于事务处理没有记忆能力。缺少状态意味着如果后续处理需要前面的信息，则它必须重传，这样可能导致每次连接传送的数据量增大。另一方面，在服务器不需要先前信息时它的应答就较快。</p></li><li><p>支持B/S及C/S模式。</p></li></ol><h2 id="HTTP之URL"><a href="#HTTP之URL" class="headerlink" title="HTTP之URL"></a>HTTP之URL</h2><p>HTTP使用统一资源标识符（Uniform Resource Identifiers, URI）来传输数据和建立连接。URL是一种特殊类型的URI，包含了用于查找某个资源的足够的信息</p><p>URL,全称是UniformResourceLocator, 中文叫统一资源定位符,是互联网上用来标识某一处资源的地址。以下面这个URL为例，介绍下普通URL的各部分组成：</p><figure class="highlight"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs http">http://www.aspxfans.com:8080/news/index.asp?boardID=5&amp;ID=24618&amp;page=1#name<br></code></pre></div></td></tr></table></figure><p>从上面的URL可以看出，一个完整的URL包括以下几部分：</p><ol><li><p><strong>协议部分</strong>：该URL的协议部分为“http：”，这代表网页使用的是HTTP协议。在Internet中可以使用多种协议，如HTTP，FTP等等本例中使用的是HTTP协议。在”HTTP”后面的“//”为分隔符</p></li><li><p><strong>域名部分</strong>：该URL的域名部分为“<a href="http://www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用" target="_blank" rel="noopener">www.aspxfans.com”。一个URL中，也可以使用IP地址作为域名使用</a></p></li><li><p><strong>端口部分</strong>：跟在域名后面的是端口，域名和端口之间使用“:”作为分隔符。端口不是一个URL必须的部分，如果省略端口部分，将采用默认端口</p></li><li><p><strong>虚拟目录部分</strong>：从域名后的第一个“/”开始到最后一个“/”为止，是虚拟目录部分。虚拟目录也不是一个URL必须的部分。本例中的虚拟目录是“/news/”</p></li><li><p><strong>文件名部分</strong>：从域名后的最后一个“/”开始到“？”为止，是文件名部分，如果没有“?”,则是从域名后的最后一个“/”开始到“#”为止，是文件部分，如果没有“？”和“#”，那么从域名后的最后一个“/”开始到结束，都是文件名部分。本例中的文件名是“index.asp”。文件名部分也不是一个URL必须的部分，如果省略该部分，则使用默认的文件名</p></li><li><p><strong>锚部分</strong>：从“#”开始到最后，都是锚部分。本例中的锚部分是“name”。锚部分也不是一个URL必须的部分</p></li><li><p><strong>参数部分</strong>：从“？”开始到“#”为止之间的部分为参数部分，又称搜索部分、查询部分。本例中的参数部分为“boardID=5&amp;ID=24618&amp;page=1”。参数可以允许有多个参数，参数与参数之间用“&amp;”作为分隔符。</p></li></ol><p>（原文：<a href="http://blog.csdn.net/ergouge/article/details/8185219" target="_blank" rel="noopener">http://blog.csdn.net/ergouge/article/details/8185219</a> ）</p><h2 id="URI和URL的区别"><a href="#URI和URL的区别" class="headerlink" title="URI和URL的区别"></a>URI和URL的区别</h2><p><strong>URI，是uniform resource identifier，统一资源标识符，用来唯一的标识一个资源。</strong></p><p>Web上可用的每种资源如HTML文档、图像、视频片段、程序等都是一个来URI来定位的<br>URI一般由三部组成：<br>①访问资源的命名机制<br>②存放资源的主机名<br>③资源自身的名称，由路径表示，着重强调于资源。</p><p><strong>URL是uniform resource locator，统一资源定位器，它是一种具体的URI，即URL可以用来标识一个资源，而且还指明了如何locate这个资源。</strong></p><p>URL是Internet上用来描述信息资源的字符串，主要用在各种WWW客户程序和服务器程序上，特别是著名的Mosaic。<br>采用URL可以用一种统一的格式来描述各种信息资源，包括文件、服务器的地址和目录等。URL一般由三部组成：<br>①协议(或称为服务方式)<br>②存有该资源的主机IP地址(有时也包括端口号)<br>③主机资源的具体地址。如目录和文件名等</p><p><strong>URN，uniform resource name，统一资源命名，是通过名字来标识资源，比如mailto:<a href="mailto:java-net@java.sun.com" target="_blank" rel="noopener">java-net@java.sun.com</a>。</strong></p><p>URI是以一种抽象的，高层次概念定义统一资源标识，而URL和URN则是具体的资源标识的方式。URL和URN都是一种URI。笼统地说，每个 URL 都是 URI，但不一定每个 URI 都是 URL。这是因为 URI 还包括一个子类，即统一资源名称 (URN)，它命名资源但不指定如何定位资源。上面的 mailto、news 和 isbn URI 都是 URN 的示例。</p><p>在Java的URI中，一个URI实例可以代表绝对的，也可以是相对的，只要它符合URI的语法规则。而URL类则不仅符合语义，还包含了定位该资源的信息，因此它不能是相对的。<br>在Java类库中，URI类不包含任何访问资源的方法，它唯一的作用就是解析。<br>相反的是，URL类可以打开一个到达资源的流。</p><h2 id="HTTP之请求消息Request"><a href="#HTTP之请求消息Request" class="headerlink" title="HTTP之请求消息Request"></a>HTTP之请求消息Request</h2><p>客户端发送一个HTTP请求到服务器的请求消息包括以下格式：</p><ol><li>请求行（request line）</li><li>请求头部（header）</li><li>空行</li><li>请求数据</li></ol><p><img src="https://s1.ax1x.com/2018/11/23/FiWx2R.png" alt="FiWx2R.png"></p><ul><li>请求行以一个方法符号开头，以空格分开，后面跟着请求的URI和协议的版本。</li></ul><h3 id="Get请求例子，使用Charles抓取的request："><a href="#Get请求例子，使用Charles抓取的request：" class="headerlink" title="Get请求例子，使用Charles抓取的request："></a>Get请求例子，使用Charles抓取的request：</h3><figure class="highlight sqf"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">GET /<span class="hljs-number">562</span>f25980001b1b106000338.jpg HTTP/<span class="hljs-number">1.1</span><br>Host    img.mukewang.com<br>User-<span class="hljs-built_in">Agent</span>    Mozilla/<span class="hljs-number">5.0</span> (Windows NT <span class="hljs-number">10.0</span>; WOW64) AppleWebKit/<span class="hljs-number">537.36</span> (KHTML, like Gecko) Chrome/<span class="hljs-number">51.0</span>.<span class="hljs-number">2704.106</span> Safari/<span class="hljs-number">537.36</span><br>Accept    <span class="hljs-built_in">image</span>/webp,<span class="hljs-built_in">image</span><span class="hljs-comment">/*,*/</span>*;q=<span class="hljs-number">0.8</span><br>Referer    http:<span class="hljs-comment">//www.imooc.com/</span><br>Accept-Encoding    gzip, deflate, sdch<br>Accept-<span class="hljs-built_in">Language</span>    zh-CN,zh;q=<span class="hljs-number">0.8</span><br></code></pre></div></td></tr></table></figure><p><strong>第一部分：请求行，用来说明请求类型,要访问的资源以及所使用的HTTP版本.</strong></p><p>GET说明请求类型为GET,[/562f25980001b1b106000338.jpg]为要访问的资源，该行的最后一部分说明使用的是HTTP1.1版本。</p><p><strong>第二部分：请求头部，紧接着请求行（即第一行）之后的部分，用来说明服务器要使用的附加信息</strong></p><p>从第二行起为请求头部，HOST将指出请求的目的地.User-Agent,服务器端和客户端脚本都能访问它,它是浏览器类型检测逻辑的重要基础.该信息由你的浏览器来定义,并且在每个请求中自动发送等等</p><p><strong>第三部分：空行，请求头部后面的空行是必须的</strong></p><p>即使第四部分的请求数据为空，也必须有空行。</p><p><strong>第四部分：请求数据也叫主体，可以添加任意的其他数据</strong>。</p><p>这个例子的请求数据为空。</p><h3 id="POST请求例子，使用Charles抓取的request："><a href="#POST请求例子，使用Charles抓取的request：" class="headerlink" title="POST请求例子，使用Charles抓取的request："></a>POST请求例子，使用Charles抓取的request：</h3><figure class="highlight yaml"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-string">POST</span> <span class="hljs-string">/</span> <span class="hljs-string">HTTP1.1</span><br><span class="hljs-string">Host:www.wrox.com</span><br><span class="hljs-string">User-Agent:Mozilla/4.0</span> <span class="hljs-string">(compatible;</span> <span class="hljs-string">MSIE</span> <span class="hljs-number">6.0</span><span class="hljs-string">;</span> <span class="hljs-string">Windows</span> <span class="hljs-string">NT</span> <span class="hljs-number">5.1</span><span class="hljs-string">;</span> <span class="hljs-string">SV1;</span> <span class="hljs-string">.NET</span> <span class="hljs-string">CLR</span> <span class="hljs-number">2.0</span><span class="hljs-number">.50727</span><span class="hljs-string">;</span> <span class="hljs-string">.NET</span> <span class="hljs-string">CLR</span> <span class="hljs-number">3.0</span><span class="hljs-number">.04506</span><span class="hljs-number">.648</span><span class="hljs-string">;</span> <span class="hljs-string">.NET</span> <span class="hljs-string">CLR</span> <span class="hljs-number">3.5</span><span class="hljs-number">.21022</span><span class="hljs-string">)</span><br><span class="hljs-string">Content-Type:application/x-www-form-urlencoded</span><br><span class="hljs-string">Content-Length:40</span><br><span class="hljs-attr">Connection:</span> <span class="hljs-string">Keep-Alive</span><br><br><span class="hljs-string">name=Professional%20Ajax&amp;publisher=Wiley</span><br></code></pre></div></td></tr></table></figure><p>第一部分：请求行，第一行明了是post请求，以及http1.1版本。<br>第二部分：请求头部，第二行至第六行。<br>第三部分：空行，第七行的空行。<br>第四部分：请求数据，第八行。</p><h2 id="HTTP之响应消息Response"><a href="#HTTP之响应消息Response" class="headerlink" title="HTTP之响应消息Response"></a>HTTP之响应消息Response</h2><p>一般情况下，服务器接收并处理客户端发过来的请求后会返回一个HTTP的响应消息。</p><h5 id="HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"><a href="#HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。" class="headerlink" title="HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。"></a>HTTP响应也由四个部分组成，分别是：状态行、消息报头、空行和响应正文。</h5><p><img src="https://s1.ax1x.com/2018/11/23/FifpKx.jpg" alt="FifpKx.jpg"></p><p>http响应消息格式.jpg</p><p><strong>例子</strong></p><figure class="highlight http"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">HTTP/1.1 <span class="hljs-number">200</span> OK<br><span class="hljs-attribute">Date</span>: Fri, 22 May 2009 06:07:21 GMT<br><span class="hljs-attribute">Content-Type</span>: text/html; charset=UTF-8<br><br><span class="xml"><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>      <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>            <span class="hljs-comment">&lt;!--body goes here--&gt;</span><br>      <span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span></span><br></code></pre></div></td></tr></table></figure><h5 id="第一部分：状态行，由HTTP协议版本号，-状态码，-状态消息-三部分组成。"><a href="#第一部分：状态行，由HTTP协议版本号，-状态码，-状态消息-三部分组成。" class="headerlink" title="第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。"></a>第一部分：状态行，由HTTP协议版本号， 状态码， 状态消息 三部分组成。</h5><p>第一行为状态行，（HTTP/1.1）表明HTTP版本为1.1版本，状态码为200，状态消息为（ok）</p><h5 id="第二部分：消息报头，用来说明客户端要使用的一些附加信息"><a href="#第二部分：消息报头，用来说明客户端要使用的一些附加信息" class="headerlink" title="第二部分：消息报头，用来说明客户端要使用的一些附加信息"></a>第二部分：消息报头，用来说明客户端要使用的一些附加信息</h5><p>第二行和第三行为消息报头，<br>Date:生成响应的日期和时间；Content-Type:指定了MIME类型的HTML(text/html),编码类型是UTF-8</p><h5 id="第三部分：空行，消息报头后面的空行是必须的"><a href="#第三部分：空行，消息报头后面的空行是必须的" class="headerlink" title="第三部分：空行，消息报头后面的空行是必须的"></a>第三部分：空行，消息报头后面的空行是必须的</h5><h5 id="第四部分：响应正文，服务器返回给客户端的文本信息。"><a href="#第四部分：响应正文，服务器返回给客户端的文本信息。" class="headerlink" title="第四部分：响应正文，服务器返回给客户端的文本信息。"></a>第四部分：响应正文，服务器返回给客户端的文本信息。</h5><p>空行后面的html部分为响应正文。</p><h2 id="HTTP之状态码"><a href="#HTTP之状态码" class="headerlink" title="HTTP之状态码"></a>HTTP之状态码</h2><p>状态代码有三位数字组成，第一个数字定义了响应的类别，共分五种类别:</p><h6 id="1xx：指示信息–表示请求已接收，继续处理"><a href="#1xx：指示信息–表示请求已接收，继续处理" class="headerlink" title="1xx：指示信息–表示请求已接收，继续处理"></a>1xx：指示信息–表示请求已接收，继续处理</h6><h6 id="2xx：成功–表示请求已被成功接收、理解、接受"><a href="#2xx：成功–表示请求已被成功接收、理解、接受" class="headerlink" title="2xx：成功–表示请求已被成功接收、理解、接受"></a>2xx：成功–表示请求已被成功接收、理解、接受</h6><h6 id="3xx：重定向–要完成请求必须进行更进一步的操作"><a href="#3xx：重定向–要完成请求必须进行更进一步的操作" class="headerlink" title="3xx：重定向–要完成请求必须进行更进一步的操作"></a>3xx：重定向–要完成请求必须进行更进一步的操作</h6><h6 id="4xx：客户端错误–请求有语法错误或请求无法实现"><a href="#4xx：客户端错误–请求有语法错误或请求无法实现" class="headerlink" title="4xx：客户端错误–请求有语法错误或请求无法实现"></a>4xx：客户端错误–请求有语法错误或请求无法实现</h6><h6 id="5xx：服务器端错误–服务器未能实现合法的请求"><a href="#5xx：服务器端错误–服务器未能实现合法的请求" class="headerlink" title="5xx：服务器端错误–服务器未能实现合法的请求"></a>5xx：服务器端错误–服务器未能实现合法的请求</h6><p>常见状态码：</p><figure class="highlight basic"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined"><span class="hljs-symbol">200 </span>OK                        //客户端请求成功<br><span class="hljs-symbol">400 </span>Bad Request               //客户端请求有语法错误，不能被服务器所理解<br><span class="hljs-symbol">401 </span>Unauthorized              //请求未经授权，这个状态代码必须和WWW-Authenticate报头域一起使用 <br><span class="hljs-symbol">403 </span>Forbidden                 //服务器收到请求，但是拒绝提供服务<br><span class="hljs-symbol">404 </span><span class="hljs-keyword">Not</span> Found                 //请求资源不存在，eg：输入了错误的URL<br><span class="hljs-symbol">500 </span>Internal Server <span class="hljs-keyword">Error</span>     //服务器发生不可预期的错误<br><span class="hljs-symbol">503 </span>Server Unavailable        //服务器当前不能处理客户端的请求，一段时间后可能恢复正常<br></code></pre></div></td></tr></table></figure><p>更多状态码<a href="http://www.runoob.com/http/http-status-codes.html" target="_blank" rel="noopener">http://www.runoob.com/http/http-status-codes.html</a></p><h2 id="HTTP请求方法"><a href="#HTTP请求方法" class="headerlink" title="HTTP请求方法"></a>HTTP请求方法</h2><p>根据HTTP标准，HTTP请求可以使用多种请求方法。<br>HTTP1.0定义了三种请求方法： GET, POST 和 HEAD方法。<br>HTTP1.1新增了五种请求方法：OPTIONS, PUT, DELETE, TRACE 和 CONNECT 方法。</p><figure class="highlight sql"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">GET     请求指定的页面信息，并返回实体主体。<br>HEAD     类似于get请求，只不过返回的响应中没有具体的内容，用于获取报头<br>POST     向指定资源提交数据进行处理请求（例如提交表单或者上传文件）。数据被包含在请求体中。POST请求可能会导致新的资源的建立和/或已有资源的修改。<br>PUT     从客户端向服务器传送的数据取代指定的文档的内容。<br><span class="hljs-keyword">DELETE</span>      请求服务器删除指定的页面。<br><span class="hljs-keyword">CONNECT</span>     <span class="hljs-keyword">HTTP</span>/<span class="hljs-number">1.1</span>协议中预留给能够将连接改为管道方式的代理服务器。<br>OPTIONS     允许客户端查看服务器的性能。<br><span class="hljs-keyword">TRACE</span>     回显服务器收到的请求，主要用于测试或诊断。<br></code></pre></div></td></tr></table></figure><h2 id="HTTP工作原理"><a href="#HTTP工作原理" class="headerlink" title="HTTP工作原理"></a>HTTP工作原理</h2><p>HTTP协议定义Web客户端如何从Web服务器请求Web页面，以及服务器如何把Web页面传送给客户端。HTTP协议采用了请求/响应模型。客户端向服务器发送一个请求报文，请求报文包含请求的方法、URL、协议版本、请求头部和请求数据。服务器以一个状态行作为响应，响应的内容包括协议的版本、成功或者错误代码、服务器信息、响应头部和响应数据。</p><p>以下是 HTTP 请求/响应的步骤：</p><h6 id="1、客户端连接到Web服务器"><a href="#1、客户端连接到Web服务器" class="headerlink" title="1、客户端连接到Web服务器"></a>1、客户端连接到Web服务器</h6><p>一个HTTP客户端，通常是浏览器，与Web服务器的HTTP端口（默认为80）建立一个TCP套接字连接。例如，<a href="http://www.oakcms.cn./" target="_blank" rel="noopener">http://www.oakcms.cn。</a></p><h6 id="2、发送HTTP请求"><a href="#2、发送HTTP请求" class="headerlink" title="2、发送HTTP请求"></a>2、发送HTTP请求</h6><p>通过TCP套接字，客户端向Web服务器发送一个文本的请求报文，一个请求报文由请求行、请求头部、空行和请求数据4部分组成。</p><h6 id="3、服务器接受请求并返回HTTP响应"><a href="#3、服务器接受请求并返回HTTP响应" class="headerlink" title="3、服务器接受请求并返回HTTP响应"></a>3、服务器接受请求并返回HTTP响应</h6><p>Web服务器解析请求，定位请求资源。服务器将资源复本写到TCP套接字，由客户端读取。一个响应由状态行、响应头部、空行和响应数据4部分组成。</p><h6 id="4、释放连接TCP连接"><a href="#4、释放连接TCP连接" class="headerlink" title="4、释放连接TCP连接"></a>4、释放连接<a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP连接</a></h6><p>若connection 模式为close，则服务器主动关闭<a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP连接</a>，客户端被动关闭连接，释放<a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP连接</a>;若connection 模式为keepalive，则该连接会保持一段时间，在该时间内可以继续接收请求;</p><h6 id="5、客户端浏览器解析HTML内容"><a href="#5、客户端浏览器解析HTML内容" class="headerlink" title="5、客户端浏览器解析HTML内容"></a>5、客户端浏览器解析HTML内容</h6><p>客户端浏览器首先解析状态行，查看表明请求是否成功的状态代码。然后解析每一个响应头，响应头告知以下为若干字节的HTML文档和文档的字符集。客户端浏览器读取响应数据HTML，根据HTML的语法对其进行格式化，并在浏览器窗口中显示。</p><p>例如：在浏览器地址栏键入URL，按下回车之后会经历以下流程：</p><p>1、浏览器向 DNS 服务器请求解析该 URL 中的域名所对应的 IP 地址;</p><p>2、解析出 IP 地址后，根据该 IP 地址和默认端口 80，和服务器建立<a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP连接</a>;</p><p>3、浏览器发出读取文件(URL 中域名后面部分对应的文件)的HTTP 请求，该请求报文作为 <a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP 三次握手</a>的第三个报文的数据发送给服务器;</p><p>4、服务器对浏览器请求作出响应，并把对应的 html 文本发送给浏览器;</p><p>5、释放 <a href="http://www.jianshu.com/p/ef892323e68f" target="_blank" rel="noopener">TCP连接</a>;</p><p>6、浏览器将该 html 文本并显示内容; 　　</p><h1 id="GET和POST请求的区别"><a href="#GET和POST请求的区别" class="headerlink" title="GET和POST请求的区别"></a>GET和POST请求的区别</h1><h6 id="GET请求"><a href="#GET请求" class="headerlink" title="GET请求"></a>GET请求</h6><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">GET <span class="hljs-regexp">/books/</span>?sex=man&amp;name=Professional HTTP/1.1<br>Host: www.wrox.com<br>User-<span class="hljs-string">Agent:</span> Mozilla/<span class="hljs-number">5.0</span> (Windows; U; Windows NT <span class="hljs-number">5.1</span>; en-US; <span class="hljs-string">rv:</span><span class="hljs-number">1.7</span><span class="hljs-number">.6</span>)<br>Gecko<span class="hljs-regexp">/20050225 Firefox/</span><span class="hljs-number">1.0</span><span class="hljs-number">.1</span><br><span class="hljs-string">Connection:</span> Keep-Alive<br></code></pre></div></td></tr></table></figure><p>注意最后一行是空行</p><h6 id="POST请求"><a href="#POST请求" class="headerlink" title="POST请求"></a>POST请求</h6><figure class="highlight groovy"><table><tr><td class="gutter hljs"><div class="hljs code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></div></td><td class="code"><div class="hljs code-wrapper"><pre><code class="hljs undefined">POST <span class="hljs-regexp">/ HTTP/</span><span class="hljs-number">1.1</span><br><span class="hljs-string">Host:</span> www.wrox.com<br>User-<span class="hljs-string">Agent:</span> Mozilla/<span class="hljs-number">5.0</span> (Windows; U; Windows NT <span class="hljs-number">5.1</span>; en-US; <span class="hljs-string">rv:</span><span class="hljs-number">1.7</span><span class="hljs-number">.6</span>)<br>Gecko<span class="hljs-regexp">/20050225 Firefox/</span><span class="hljs-number">1.0</span><span class="hljs-number">.1</span><br>Content-<span class="hljs-string">Type:</span> application/x-www-form-urlencoded<br>Content-<span class="hljs-string">Length:</span> <span class="hljs-number">40</span><br><span class="hljs-string">Connection:</span> Keep-Alive<br><br>name=Professional%<span class="hljs-number">20</span>Ajax&amp;publisher=Wiley<br></code></pre></div></td></tr></table></figure><p>1、GET提交，请求的数据会附在URL之后（就是把数据放置在HTTP协议头中），以?分割URL和传输数据，多个参数用&amp;连接；例 如：login.action?name=hyddd&amp;password=idontknow&amp;verify=%E4%BD%A0 %E5%A5%BD。如果数据是英文字母/数字，原样发送，如果是空格，转换为+，如果是中文/其他字符，则直接把字符串用BASE64加密，得出如： %E4%BD%A0%E5%A5%BD，其中％XX中的XX为该符号以16进制表示的ASCII。</p><p>POST提交：把提交的数据放置在是HTTP包的包体中。上文示例中红色字体标明的就是实际的传输数据</p><h6 id="因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变"><a href="#因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变" class="headerlink" title="因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变"></a>因此，GET提交的数据会在地址栏中显示出来，而POST提交，地址栏不会改变</h6><p>2、传输数据的大小：首先声明：HTTP协议没有对传输的数据大小进行限制，HTTP协议规范也没有对URL长度进行限制。</p><p>而在实际开发中存在的限制主要有：</p><p><strong>GET</strong>:特定浏览器和服务器对URL长度有限制，例如 IE对URL长度的限制是2083字节(2K+35)。对于其他浏览器，如Netscape、FireFox等，理论上没有长度限制，其限制取决于操作系 统的支持。</p><p>因此对于GET提交时，传输数据就会受到URL长度的 限制。</p><p><strong>POST</strong>:由于不是通过URL传值，理论上数据不受 限。但实际各个WEB服务器会规定对post提交数据大小进行限制，Apache、IIS6都有各自的配置。</p><p>3、安全性</p><p>POST的安全性要比GET的安全性高。比如：通过GET提交数据，用户名和密码将明文出现在URL上，因为(1)登录页面有可能被浏览器缓存；(2)其他人查看浏览器的历史纪录，那么别人就可以拿到你的账号和密码了，除此之外，使用GET提交数据还可能会造成Cross-site request forgery攻击</p><p>4、Http get,post,soap协议都是在http上运行的</p><p>（1）get：请求参数是作为一个key/value对的序列（查询字符串）附加到URL上的<br>查询字符串的长度受到web浏览器和web服务器的限制（如IE最多支持2048个字符），不适合传输大型数据集同时，它很不安全</p><p>（2）post：请求参数是在http标题的一个不同部分（名为entity body）传输的，这一部分用来传输表单信息，因此必须将Content-type设置为:application/x-www-form- urlencoded。post设计用来支持web窗体上的用户字段，其参数也是作为key/value对传输。<br>但是：它不支持复杂数据类型，因为post没有定义传输数据结构的语义和规则。</p><p>（3）soap：是http post的一个专用版本，遵循一种特殊的xml消息格式<br>Content-type设置为: text/xml 任何数据都可以xml化。</p><p>Http协议定义了很多与服务器交互的方法，最基本的有4种，分别是GET,POST,PUT,DELETE. 一个URL地址用于描述一个网络上的资源，而HTTP中的GET, POST, PUT, DELETE就对应着对这个资源的查，改，增，删4个操作。 我们最常见的就是GET和POST了。GET一般用于获取/查询资源信息，而POST一般用于更新资源信息.</p><p>我们看看GET和POST的区别</p><ol><li><ol><li>GET提交的数据会放在URL之后，以?分割URL和传输数据，参数之间以&amp;相连，如EditPosts.aspx?name=test1&amp;id=123456. POST方法是把提交的数据放在HTTP包的Body中.</li><li>GET提交的数据大小有限制（因为浏览器对URL的长度有限制），而POST方法提交的数据没有限制.</li><li>GET方式需要使用Request.QueryString来取得变量的值，而POST方式通过Request.Form来获取变量的值。</li><li>GET方式提交数据，会带来安全问题，比如一个登录页面，通过GET方式提交数据时，用户名和密码将出现在URL上，如果页面可以被缓存或者其他人可以访问这台机器，就可以从历史记录获得该用户的账号和密码.</li></ol></li></ol><h2 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h2><p>原文链接：</p><blockquote><p><a href="https://www.cnblogs.com/ranyonsue/p/5984001.html" target="_blank" rel="noopener">关于HTTP协议，一篇就够了</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 网络协议 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
    
    
    <entry>
      <title>关于</title>
      <link href="about/index.html"/>
      <url>about/index.html</url>
      
        <content type="html"><![CDATA[<ul><li>黄咏驰</li><li>男</li><li>是一个程序猿，关注物联网领域</li><li>爱好：coding、阅读</li><li>E-mail:  <a href="mailto:ychuang92@foxmail.com" target="_blank" rel="noopener">ychuang92@foxmail.com</a></li><li>技术博客：<a href="https://www.cnblogs.com/huang-yc/" target="_blank" rel="noopener">https://www.cnblogs.com/huang-yc/</a></li><li>Github：<a href="https://github.com/hyyc554" target="_blank" rel="noopener">https://github.com/hyyc554</a></li></ul><p><a href="https://imgchr.com/i/mdYyWV" target="_blank" rel="noopener"><img src="https://s2.ax1x.com/2019/08/22/mdYyWV.md.jpg" alt="mdYyWV.md.jpg"></a></p><h2 id="感谢每一个浏览本页面的人"><a href="#感谢每一个浏览本页面的人" class="headerlink" title="感谢每一个浏览本页面的人"></a>感谢每一个浏览本页面的人</h2>]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>tags</title>
      <link href="tags/index.html"/>
      <url>tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>categories</title>
      <link href="categories/index.html"/>
      <url>categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    
    
    <entry>
      <title>友链</title>
      <link href="friendlink/index.html"/>
      <url>friendlink/index.html</url>
      
        <content type="html"><![CDATA[<h1 id="友情链接"><a href="#友情链接" class="headerlink" title="友情链接"></a>友情链接</h1><blockquote><p>以下为Madlife的友情站点，如需交换友链，可邮我：ychuang92#foxmail.com</p></blockquote><ul><li><a href="https://xieboke.net/" target="_blank" rel="noopener">JoyoBlog</a></li><li><a href="https://borber.cn/" target="_blank" rel="noopener">borber</a></li><li><a href="https://todebug.com/" target="_blank" rel="noopener">?之大护法</a></li></ul><h1 id="推荐网站"><a href="#推荐网站" class="headerlink" title="推荐网站"></a>推荐网站</h1><blockquote><p>以下为博主常去的优秀网站</p></blockquote><ul><li><a href="https://github.com/" target="_blank" rel="noopener">GitHub</a> - 全球最大的同志兴趣交流网站[英文]</li><li><a href="https://stackoverflow.com/" target="_blank" rel="noopener">Stack Overflow</a> - 优秀的技术问答社区[英文]</li><li><a href="https://segmentfault.com/" target="_blank" rel="noopener">SegmentFault</a> - 中文技术交流社区，类 Stack Overflow</li><li><a href="https://www.oschina.net/" target="_blank" rel="noopener">开源中国</a> - 号称国内最大的开源技术社区</li><li><a href="https://www.v2ex.com/" target="_blank" rel="noopener">V2EX</a> - 程序员为主的分享交流网站</li><li><a href="https://juejin.im/" target="_blank" rel="noopener">掘金</a> - 专注于技术文章分享的开发者社区</li><li><a href="https://www.lintcode.com/" target="_blank" rel="noopener">LintCode</a> - 全球最好的编程题目训练平台</li><li><a href="https://www.cnblogs.com/" target="_blank" rel="noopener">博客园</a> - 老牌的技术分享博客平台</li><li><a href="https://github.com/sindresorhus/awesome" target="_blank" rel="noopener">Awesome</a> - 汇集了最丰富的技术资源</li><li><a href="https://sspai.com/" target="_blank" rel="noopener">少数派</a> - 发现更多优秀的应用、网站、使用技巧</li></ul>]]></content>
      
    </entry>
    
    
  
</search>
