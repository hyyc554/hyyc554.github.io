<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>源码剖析Django REST framework的认证方式</title>
      <link href="/2018/11/19/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90Django%20REST%20framework%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/"/>
      <url>/2018/11/19/%E6%BA%90%E7%A0%81%E5%89%96%E6%9E%90Django%20REST%20framework%E7%9A%84%E8%AE%A4%E8%AF%81%E6%96%B9%E5%BC%8F/</url>
      
        <content type="html"><![CDATA[<p>由Django的CBV模式流程，可以知道在<code>url匹配完成后，会执行自定义的类中的as_view方法</code>。</p><p>如果自定义的类中没有定义<code>as_view方法</code>，根据面向对象中类的继承可以知道，则<code>会执行其父类View中的as_view方法</code></p><p><code>在Django的View的as_view方法中，又会调用dispatch方法</code>。</p><p>现在来看看Django rest framework的认证流程</p><a id="more"></a><blockquote><p>Django restframework是基于Django的框架，所以基于CBV的模式也会执行自定义的类中的as_view方法</p></blockquote><p>先新建一个项目，配置url</p><pre><code>from django.conf.urls import urlfrom django.contrib import adminfrom app01 import viewsurlpatterns = [    url(r&#39;^user/&#39;, views.UserView.as_view()),]</code></pre><p>views.py文件内容</p><pre><code>from django.shortcuts import render,HttpResponsefrom rest_framework.views import APIViewclass UserView(APIView):    def get(self,request,*args,**kwargs):        print(request.__dict__)        print(request.user)        return HttpResponse(&quot;UserView GET&quot;)    def post(self,request,*args,**kwargs):        return HttpResponse(&quot;UserView POST&quot;)</code></pre><p>启动项目，用浏览器向<code>http://127.0.0.1:8000/user/</code>发送get请求</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180825183747075-1935268768.png" alt="img"></p><p>可以知道请求发送成功。现在来看看源码流程，由于UserView继承APIView，查看APIView中的as_view方法</p><pre><code>class APIView(View):    ...    @classmethod    def as_view(cls, **initkwargs):        if isinstance(getattr(cls, &#39;queryset&#39;, None), models.query.QuerySet):            def force_evaluation():                raise RuntimeError(                    &#39;Do not evaluate the `.queryset` attribute directly, &#39;                    &#39;as the result will be cached and reused between requests. &#39;                    &#39;Use `.all()` or call `.get_queryset()` instead.&#39;                )            cls.queryset._fetch_all = force_evaluation        view = super(APIView, cls).as_view(**initkwargs)        view.cls = cls        view.initkwargs = initkwargs        return csrf_exempt(view)</code></pre><p><code>通过super来执行APIView的父类Django的View中的as_view方法</code>。上一篇文章<a href="https://www.cnblogs.com/renpingsheng/p/9531649.html" target="_blank" rel="noopener">源码解析Django CBV的本质</a>中已经知道，View类的as_view方法会调用dispatch方法。</p><p>View类的as_view方法源码如下所示</p><pre><code>class View(object):    ...    @classonlymethod    def as_view(cls, **initkwargs):        ...        def view(request, *args, **kwargs):            self = cls(**initkwargs)            if hasattr(self, &#39;get&#39;) and not hasattr(self, &#39;head&#39;):                self.head = self.get            self.request = request            self.args = args            self.kwargs = kwargs            return self.dispatch(request, *args, **kwargs)        ...</code></pre><p><code>as_view方法中的self实际上指的是自定义的UserView这个类</code>，上面的代码会执行UserView类中dispatch方法。</p><p>由于UserView类中并没有定义dispatch方法，而UserView类继承自Django restframework的APIView类，所以会执行APIView类中的dispatch方法</p><pre><code>def dispatch(self, request, *args, **kwargs):    self.args = args    self.kwargs = kwargs    request = self.initialize_request(request, *args, **kwargs)    self.request = request    self.headers = self.default_response_headers  # deprecate?    try:        self.initial(request, *args, **kwargs)        if request.method.lower() in self.http_method_names:            handler = getattr(self, request.method.lower(),                              self.http_method_not_allowed)        else:            handler = self.http_method_not_allowed        response = handler(request, *args, **kwargs)    except Exception as exc:        response = self.handle_exception(exc)    self.response = self.finalize_response(request, response, *args, **kwargs)    return self.response</code></pre><p>可以看到，<code>先执行initialize_request方法处理浏览器发送的request请求</code>。</p><p>来看看initialize_request方法的源码</p><pre><code>def initialize_request(self, request, *args, **kwargs):    &quot;&quot;&quot;    Returns the initial request object.    &quot;&quot;&quot;    parser_context = self.get_parser_context(request)    return Request(        request,        parsers=self.get_parsers(),        authenticators=self.get_authenticators(),        negotiator=self.get_content_negotiator(),        parser_context=parser_context    )</code></pre><p>在initialize_request方法里，把浏览器发送的request和restframework的处理器，认证，选择器等对象列表作为参数实例化Request类中得到新的request对象并返回，其中跟认证相关的对象就是authenticators。</p><pre><code>def get_authenticators(self):    &quot;&quot;&quot;    Instantiates and returns the list of authenticators that this view can use.    &quot;&quot;&quot;    return [auth() for auth in self.authentication_classes]get_authenticators方法通过列表生成式得到一个列表，列表中包含认证类实例化后的对象</code></pre><p>在这里，<code>authentication_classes来自于api_settings的配置</code></p><pre><code>authentication_classes = api_settings.DEFAULT_AUTHENTICATION_CLASSES</code></pre><p>通过查看api_settings的源码可以知道，可以在项目的settings.py文件中进行认证相关的配置</p><pre><code>api_settings = APISettings(None, DEFAULTS, IMPORT_STRINGS)def reload_api_settings(*args, **kwargs):    setting = kwargs[&#39;setting&#39;]    if setting == &#39;REST_FRAMEWORK&#39;:        api_settings.reload()</code></pre><p>Django restframework通过initialize_request方法对原始的request进行一些封装后实例化得到新的request对象</p><p>然后执行initial方法来处理新得到的request对象，再来看看initial方法中又执行了哪些操作</p><pre><code>def initial(self, request, *args, **kwargs):    self.format_kwarg = self.get_format_suffix(**kwargs)    neg = self.perform_content_negotiation(request)    request.accepted_renderer, request.accepted_media_type = neg    version, scheme = self.determine_version(request, *args, **kwargs)    request.version, request.versioning_scheme = version, scheme    self.perform_authentication(request)    self.check_permissions(request)    self.check_throttles(request)</code></pre><p>由上面的源码可以知道，在initial方法中，<code>执行perform_authentication来对request对象进行认证操作</code></p><pre><code>def perform_authentication(self, request):    request.userperform_authentication方法中调用执行request中的user方法`，`这里的request是封装了原始request,认证对象列表，处理器列表等之后的request对象class Request(object):    ...    @property    def user(self):        &quot;&quot;&quot;        Returns the user associated with the current request, as authenticated        by the authentication classes provided to the request.        &quot;&quot;&quot;        if not hasattr(self, &#39;_user&#39;):            with wrap_attributeerrors():                self._authenticate()        return self._user</code></pre><p>从request中获取<code>_user</code>的值，如果获取到则执行<code>_authenticate方法</code>，否则返回<code>_user</code></p><pre><code>def _authenticate(self):    &quot;&quot;&quot;    Attempt to authenticate the request using each authentication instance    in turn.    &quot;&quot;&quot;    for authenticator in self.authenticators:        try:            user_auth_tuple = authenticator.authenticate(self)        except exceptions.APIException:            self._not_authenticated()            raise        if user_auth_tuple is not None:            self._authenticator = authenticator            self.user, self.auth = user_auth_tuple            return</code></pre><p>在这里<code>self.authenticators</code>实际上是<code>get_authenticators</code>方法执行完成后返回的对象列表</p><pre><code>class Request(object):    def __init__(self, request, parsers=None, authenticators=None,                 negotiator=None, parser_context=None):        assert isinstance(request, HttpRequest), (            &#39;The `request` argument must be an instance of &#39;            &#39;`django.http.HttpRequest`, not `{}.{}`.&#39;            .format(request.__class__.__module__, request.__class__.__name__)        )        self._request = request        self.parsers = parsers or ()        self.authenticators = authenticators or ()        ...</code></pre><p>循环认证的对象列表,<code>执行每一个认证方法的类中的authenticate方法</code>，得到通过认证的用户及用户的口令的元组，并返回元组完成认证的流程</p><p>在<code>_authenticate</code>方法中使用了try/except方法来捕获authenticate方法可能出现的异常</p><p>如果出现异常,就调用<code>_not_authenticated</code>方法来设置返回元组中的用户及口令并终止程序继续运行</p><p>总结，Django restframework的认证流程如下图</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180825184058007-932847314.jpg" alt="img"></p><h2 id="Django-restframework内置的认证类"><a href="#Django-restframework内置的认证类" class="headerlink" title="Django restframework内置的认证类"></a>Django restframework内置的认证类</h2><p>在上面的项目例子中，在UsersView的get方法中，打印<code>authentication_classes</code>和<code>request._user</code>的值</p><pre><code>class UserView(APIView):    # authentication_classes = [MyAuthentication,]    def get(self,request,*args,**kwargs):        print(&#39;authentication_classes:&#39;, self.authentication_classes)        print(request._user)        return HttpResponse(&quot;UserView GET&quot;)</code></pre><p>打印结果为</p><pre><code>authentication_classes: [&lt;class &#39;rest_framework.authentication.SessionAuthentication&#39;&gt;, &lt;class &#39;rest_framework.authentication.BasicAuthentication&#39;&gt;]AnonymousUser</code></pre><p>由此可以知道,<code>authentication_classes</code>默认是Django restframework内置的认证类，而request._user为AnonymousUser,因为发送GET请求，用户没有进行登录认证，所以为匿名用户</p><p>在视图函数中导入这两个类,再查看这两个类的源码,可以知道</p><pre><code>class BasicAuthentication(BaseAuthentication):    www_authenticate_realm = &#39;api&#39;     def authenticate(self, request):        ...    def authenticate_credentials(self, userid, password):        ...class SessionAuthentication(BaseAuthentication):    def authenticate(self, request):        ...    def enforce_csrf(self, request):        ...class TokenAuthentication(BaseAuthentication):    ...</code></pre><p>从上面的源码可以发现,这个文件中不仅定义了<code>SessionAuthentication</code>和<code>BasicAuthentication</code>这两个类,</p><p>相关的类还有<code>TokenAuthentication</code>,而且这三个认证相关的类都是继承自<code>BaseAuthentication</code>类</p><p>从上面的源码可以大概知道,这三个继承自<code>BaseAuthentication</code>的类是Django restframework内置的认证方式.</p><h2 id="自定义认证功能"><a href="#自定义认证功能" class="headerlink" title="自定义认证功能"></a>自定义认证功能</h2><p>在上面我们知道,Request会调用认证相关的类及方法,<code>APIView</code>会设置认证相关的类及方法</p><p>所以如果想自定义认证功能,只需要重写<code>authenticate</code>方法及<code>authentication_classes</code>的对象列表即可</p><p>修改上面的例子的views.py文件</p><pre><code>from django.shortcuts import render, HttpResponsefrom rest_framework.views import APIViewfrom rest_framework.authentication import BaseAuthenticationfrom rest_framework import exceptionsTOKEN_LIST = [  # 定义token_list    &#39;aabbcc&#39;,    &#39;ddeeff&#39;,]class UserAuthView(BaseAuthentication):    def authenticate(self, request):        tk = request._request.GET.get(&quot;tk&quot;)  # request._request为原生的request        if tk in TOKEN_LIST:            return (tk, None)  # 返回一个元组        raise exceptions.AuthenticationFailed(&quot;用户认证失败&quot;)    def authenticate_header(self, request):        # 如果不定义authenticate_header方法会抛出异常        passclass UserView(APIView):    authentication_classes = [UserAuthView, ]    def get(self, request, *args, **kwargs):        print(request.user)        return HttpResponse(&quot;UserView GET&quot;)</code></pre><p>启动项目,在浏览器中输入<code>http://127.0.0.1:8000/users/?tk=aabbcc</code>,然后回车,在服务端后台会打印</p><pre><code>aabbcc</code></pre><p>把浏览器中的url换为<code>http://127.0.0.1:8000/users/?tk=ddeeff</code>,后台打印信息则变为</p><pre><code>ddeeff</code></pre><p>这样就实现REST framework的自定义认证功能</p><h2 id="Django-restframework认证的扩展"><a href="#Django-restframework认证的扩展" class="headerlink" title="Django restframework认证的扩展"></a>Django restframework认证的扩展</h2><h3 id="基于Token进行用户认证"><a href="#基于Token进行用户认证" class="headerlink" title="基于Token进行用户认证"></a>基于Token进行用户认证</h3><p>修改上面的项目，在urls.py文件中添加一条路由记录</p><pre><code>from django.conf.urls import urlfrom django.contrib import adminfrom app01 import viewsurlpatterns = [    url(r&#39;^admin/&#39;, admin.site.urls),    url(r&#39;^users/&#39;,views.UsersView.as_view()),    url(r&#39;^auth/&#39;,views.AuthView.as_view()),]</code></pre><p>修改视图函数</p><pre><code>from django.shortcuts import render,HttpResponsefrom rest_framework.views import APIViewfrom rest_framework.authentication import BaseAuthenticationfrom rest_framework import exceptionsfrom django.http import JsonResponsedef gen_token(username):    &quot;&quot;&quot;    利用时间和用户名生成用户token    :param username:     :return:     &quot;&quot;&quot;    import time    import hashlib    ctime=str(time.time())    hash=hashlib.md5(username.encode(&quot;utf-8&quot;))    hash.update(ctime.encode(&quot;utf-8&quot;))    return hash.hexdigest()class AuthView(APIView):    def post(self, request, *args, **kwargs):        &quot;&quot;&quot;        获取用户提交的用户名和密码，如果用户名和密码正确，则生成token，并返回给用户        :param request:        :param args:        :param kwargs:        :return:        &quot;&quot;&quot;        res = {&#39;code&#39;: 1000, &#39;msg&#39;: None}        user = request.data.get(&quot;user&quot;)        pwd = request.data.get(&quot;pwd&quot;)        from app01 import models        user_obj = models.UserInfo.objects.filter(user=user, pwd=pwd).first()        if user_obj:            token = gen_token(user) # 生成用户口令            # 如果数据库中存在口令则更新,如果数据库中不存在口令则创建用户口令            models.Token.objects.update_or_create(user=user_obj, defaults={&#39;token&#39;: token})            print(&quot;user_token:&quot;, token)            res[&#39;code&#39;] = 1001            res[&#39;token&#39;] = token        else:            res[&#39;msg&#39;] = &quot;用户名或密码错误&quot;        return JsonResponse(res)class UserAuthView(BaseAuthentication):    def authenticate(self,request):        tk=request.query_params.GET.get(&quot;tk&quot;)   # 获取请求头中的用户token        from app01 import models        token_obj=models.Token.objects.filter(token=tk).first()        if token_obj:   # 用户数据库中已经存在用户口令返回认证元组            return (token_obj.user,token_obj)        raise exceptions.AuthenticationFailed(&quot;认证失败&quot;)    def authenticate_header(self,request):        passclass UsersView(APIView):    authentication_classes = [UserAuthView,]    def get(self,request,*args,**kwargs):        return HttpResponse(&quot;.....&quot;)</code></pre><p>创建用户数据库的类</p><pre><code>from django.db import modelsclass UserInfo(models.Model):    user=models.CharField(max_length=32)    pwd=models.CharField(max_length=64)    email=models.CharField(max_length=64)class Token(models.Model):    user=models.OneToOneField(UserInfo)    token=models.CharField(max_length=64)</code></pre><p>创建数据库,并添加两条用户记录</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201711/1133627-20171126000140781-1551141195.png" alt="img"></p><p>再创建一个test_client.py文件,来发送post请求</p><pre><code>import requestsresponse=requests.post(    url=&quot;http://127.0.0.1:8000/auth/&quot;,    data={&#39;user&#39;:&#39;user1&#39;,&#39;pwd&#39;:&#39;user123&#39;},)print(&quot;response_text:&quot;,response.text)</code></pre><p>启动Django项目,运行test_client.py文件,则项目的响应信息为</p><pre><code>response_text: {&quot;code&quot;: 1001, &quot;msg&quot;: null, &quot;token&quot;: &quot;eccd2d256f44cb25b58ba602fe7eb42d&quot;}</code></pre><p>由此,就完成了自定义的基于token的用户认证</p><p>如果想在项目中使用自定义的认证方式时,可以在<code>authentication_classes</code>继承刚才的认证的类即可</p><pre><code>authentication_classes = [UserAuthView,]</code></pre><h2 id="全局自定义认证"><a href="#全局自定义认证" class="headerlink" title="全局自定义认证"></a>全局自定义认证</h2><p>在正常的项目中，一个用户登录成功之后，进入自己的主页，可以看到很多内容，比如用户的订单，用户的收藏，用户的主页等</p><p>此时，难倒要在每个视图类中都定义authentication_classes，然后在authentication_classes中追加自定义的认证类吗？</p><p>通过对Django restframework认证的源码分析知道，可以直接在项目的settings.py配置文件中引入自定义的认证类，即可以对所有的url进行用户认证流程</p><p>在应用app01目录下创建utils包，在utils包下创建auth.py文件，内容为自定义的认证类</p><pre><code>from rest_framework import exceptionsfrom api import modelsclass Authtication(object):    def authenticate(self,request):        token = request._request.GET.get(&quot;token&quot;)       # 获取浏览器传递的token        token_obj = models.UserToken.objects.filter(token=token).first()    # 到数据库中进行token查询，判断用户是否通过认证        if not token_obj:            raise exceptions.AuthenticationFailed(&quot;用户认证失败&quot;)        # restframework会将元组赋值给request,以供后面使用        return (token_obj.user,token_obj)    # 必须创建authenticate_header方法，否则会抛出异常    def authenticate_header(self,request):        pass</code></pre><p>在settings.py文件中添加内容</p><pre><code>REST_FRAMEWORK = {    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;:[&#39;app01.utils.auth.Authtication&#39;,]}</code></pre><p>修改views.py文件</p><pre><code>from django.shortcuts import render, HttpResponsefrom rest_framework.views import APIViewfrom rest_framework.authentication import BaseAuthenticationfrom rest_framework import exceptionsfrom django.http import JsonResponsedef gen_token(username):    &quot;&quot;&quot;    利用时间和用户名生成用户token    :param username:    :return:    &quot;&quot;&quot;    import time    import hashlib    ctime = str(time.time())    hash = hashlib.md5(username.encode(&quot;utf-8&quot;))    hash.update(ctime.encode(&quot;utf-8&quot;))    return hash.hexdigest()class AuthView(APIView):    authentication_classes = []     # 在这里定义authentication_classes后，用户访问auth页面不需要进行认证    def post(self, request, *args, **kwargs):        &quot;&quot;&quot;        获取用户提交的用户名和密码，如果用户名和密码正确，则生成token，并返回给用户        :param request:        :param args:        :param kwargs:        :return:        &quot;&quot;&quot;        res = {&#39;code&#39;: 1000, &#39;msg&#39;: None}        user = request.data.get(&quot;user&quot;)        pwd = request.data.get(&quot;pwd&quot;)        from app01 import models        user_obj = models.UserInfo.objects.filter(user=user, pwd=pwd).first()        if user_obj:            token = gen_token(user)  # 生成用户口令            # 如果数据库中存在口令则更新,如果数据库中不存在口令则创建用户口令            models.Token.objects.update_or_create(user=user_obj, defaults={&#39;token&#39;: token})            print(&quot;user_token:&quot;, token)            res[&#39;code&#39;] = 1001            res[&#39;token&#39;] = token        else:            res[&#39;msg&#39;] = &quot;用户名或密码错误&quot;        return JsonResponse(res)class UserView(APIView):    def get(self, request, *args, **kwargs):        return HttpResponse(&quot;UserView GET&quot;)class OrderView(APIView):    def get(self,request,*args,**kwargs):        return HttpResponse(&quot;OrderView GET&quot;)</code></pre><p>启动项目，使用POSTMAN向<code>http://127.0.0.1:8000/order/?token=eccd2d256f44cb25b58ba602fe7eb42d</code>和<code>http://127.0.0.1:8000/user/?token=eccd2d256f44cb25b58ba602fe7eb42d</code>发送GET请求，响应结果如下</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225750139-1198840701.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225755562-137171019.png" alt="img"></p><p>在url中不带token,使用POSTMAN向<code>http://127.0.0.1:8000/order/</code>和<code>http://127.0.0.1:8000/user/</code>发送GET请求，则会出现<code>&quot;认证失败&quot;</code>的提示</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225715170-517425689.png" alt="img"></p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225720650-323643037.png" alt="img"></p><p>由此可以知道，在settings.py配置文件中配置自定义的认证类也可以实现用户认证功能</p><h2 id="配置匿名用户"><a href="#配置匿名用户" class="headerlink" title="配置匿名用户"></a>配置匿名用户</h2><p>修改settings.py文件</p><pre><code>REST_FRAMEWORK = {    &#39;DEFAULT_AUTHENTICATION_CLASSES&#39;: [&#39;app01.utils.auth.Authtication&#39;, ],    &#39;UNAUTHENTICATED_USER&#39;: lambda :&quot;匿名用户&quot;,     # 用户未登录时显示的名称    &#39;UNAUTHENTICATED_TOKEN&#39;: lambda :&quot;无效token&quot;, # 用户未登录时打印的token名}</code></pre><p>修改views.py文件中的OrderView类</p><pre><code>class OrderView(APIView):    authentication_classes = []         # authentication_classes为空列表表示视图类不进行认证    def get(self,request,*args,**kwargs):        print(request.user)        print(request.auth)        return HttpResponse(&quot;OrderView GET&quot;)</code></pre><p>使用浏览器向<code>http://127.0.0.1:8000/order/</code>发送GET请求，后台打印</p><p><img src="https://images2018.cnblogs.com/blog/1133627/201808/1133627-20180826225705126-1550086890.png" alt="img"></p><p>这说明在settings.py文件中配置的匿名用户和匿名用户的token起到作用</p><blockquote><p>建议把匿名用户及匿名用户的token都设置为:None</p></blockquote><h2 id="Django-restframework内置的认证类-1"><a href="#Django-restframework内置的认证类-1" class="headerlink" title="Django restframework内置的认证类"></a>Django restframework内置的认证类</h2><p>从rest_framework中导入authentication</p><pre><code>from rest_framework import authentication</code></pre><p>可以看到Django restframework内置的认证类</p><pre><code>class BaseAuthentication(object):    def authenticate(self, request):        ...    def authenticate_header(self, request):        passclass BasicAuthentication(BaseAuthentication):    def authenticate(self, request):        ...    def authenticate_credentials(self, userid, password, request=None):        ...    def authenticate_header(self, request):        ...class SessionAuthentication(BaseAuthentication):    def authenticate(self, request):        ...    def enforce_csrf(self, request):        ...class TokenAuthentication(BaseAuthentication):    def authenticate(self, request):        ...    def authenticate_credentials(self, key):        ...    def authenticate_header(self, request):        ...class RemoteUserAuthentication(BaseAuthentication):    def authenticate(self, request):        ...</code></pre><p>可以看到，Django restframework内置的认证包含下面的四种：</p><pre><code>BasicAuthenticationSessionAuthenticationTokenAuthenticationRemoteUserAuthentication</code></pre><p>而这四种认证类都继承自<code>BaseAuthentication</code>，<code>在BaseAuthentication中定义了两个方法：authenticate和authenticate_header</code></p><p>总结：</p><pre><code>为了让认证更规范，自定义的认证类要继承 BaseAuthentication类自定义认证类必须要实现authenticate和authenticate_header方法authenticate_header方法的作用：在认证失败的时候，给浏览器返回的响应头，可以直接pass，不实现authenticate_header程序会抛出异常</code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>MySQL分页limit速度太慢的优化方法</title>
      <link href="/2018/11/19/MySQL%E5%88%86%E9%A1%B5limit%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/"/>
      <url>/2018/11/19/MySQL%E5%88%86%E9%A1%B5limit%E9%80%9F%E5%BA%A6%E5%A4%AA%E6%85%A2%E7%9A%84%E4%BC%98%E5%8C%96%E6%96%B9%E6%B3%95/</url>
      
        <content type="html"><![CDATA[<h2 id="limit用法"><a href="#limit用法" class="headerlink" title="limit用法"></a>limit用法</h2><p>在我们使用查询语句的时候，经常要返回前几条或者中间某几行数据，这个时候怎么办呢？不用担心，mysql已经为我们提供了这样一个功能。</p><a id="more"></a><pre><code>SELECT * FROM table LIMIT [offset,] rows | rows OFFSET offset </code></pre><p>LIMIT 子句可以被用于强制 SELECT 语句返回指定的记录数。LIMIT 接受一个或两个数字参数。参数必须是一个整数常量。如果给定两个参数，第一个参数指定第一个返回记录行的<code>偏移量</code>，第二个参数指定返回记录行的最大数目。<code>初始记录行的偏移量是 0(而不是 1)</code>： 为了与 PostgreSQL 兼容，MySQL 也支持句法： LIMIT # OFFSET #。</p><pre><code>mysql&gt; SELECT * FROM table LIMIT 5,10; // 检索记录行 6-15 </code></pre><p>为了检索从某一个偏移量到记录集的结束所有的记录行，可以指定第二个参数为 -1：</p><pre><code>mysql&gt; SELECT * FROM table LIMIT 95,-1; // 检索记录行 96-last. </code></pre><p>如果只给定一个参数，它表示返回最大的记录行数目： </p><pre><code>mysql&gt; SELECT * FROM table LIMIT 5; //检索前 5 个记录行 </code></pre><p>换句话说，<code>LIMIT n</code> 等价于<code>LIMIT 0,n</code>。</p><h2 id="Mysql的分页查询语句的性能分析"><a href="#Mysql的分页查询语句的性能分析" class="headerlink" title="Mysql的分页查询语句的性能分析"></a><strong>Mysql的分页查询语句的性能分析</strong></h2><p>MySql分页sql语句，如果和MSSQL的TOP语法相比，那么MySQL的LIMIT语法要显得优雅了许多。使用它来分页是再自然不过的事情了。</p><h3 id="最基本的分页方式："><a href="#最基本的分页方式：" class="headerlink" title="最基本的分页方式："></a><strong>最基本的分页方式：</strong></h3><pre><code>SELECT ... FROM ... WHERE ... ORDER BY ... LIMIT ... </code></pre><p>在中小数据量的情况下，这样的SQL足够用了，唯一需要注意的问题就是确保使用了索引：举例来说，如果实际SQL类似下面语句，那么在category_id, id两列上建立复合索引比较好：</p><pre><code>SELECT * FROM articles WHERE category_id = 123 ORDER BY id LIMIT 50, 10 </code></pre><h3 id="子查询的分页方式："><a href="#子查询的分页方式：" class="headerlink" title="子查询的分页方式："></a><strong>子查询的分页方式：</strong></h3><p>随着数据量的增加，页数会越来越多，查看后几页的SQL就可能类似：</p><pre><code>SELECT * FROM articles WHERE category_id = 123 ORDER BY id LIMIT 10000, 10 </code></pre><p>一言以蔽之，就是越往后分页，<code>LIMIT语句的偏移量就会越大，速度也会明显变慢</code>。</p><p>此时，我们可以通过子查询的方式来提高分页效率，大致如下：</p><pre><code>SELECT * FROM articles WHERE id &gt;= (SELECT id FROM articles WHERE category_id = 123 ORDER BY id LIMIT 10000, 1) LIMIT 10 </code></pre><h3 id="JOIN分页方式"><a href="#JOIN分页方式" class="headerlink" title="JOIN分页方式"></a>JOIN分页方式</h3><pre><code>SELECT * FROM `content` AS t1 JOIN (SELECT id FROM `content` ORDER BY id desc LIMIT &quot;.($page-1)*$pagesize.&quot;, 1) AS t2 WHERE t1.id &lt;= t2.id ORDER BY t1.id desc LIMIT $pagesize; </code></pre><p>经过我的测试，join分页和子查询分页的效率基本在一个等级上，消耗的时间也基本一致。 explain SQL语句：</p><pre><code>id select_type table type possible_keys key key_len ref rows Extra1 PRIMARY &lt;derived2&gt; system NULL NULL NULL NULL 1 1 PRIMARY t1 range PRIMARY PRIMARY 4 NULL 6264 Using where2 DERIVED content index NULL PRIMARY 4 NULL 27085 Using index</code></pre><p>为什么会这样呢？因为子查询是在索引上完成的，而普通的查询时在数据文件上完成的，通常来说，索引文件要比数据文件小得多，所以操作起来也会更有效率。</p><p>实际可以利用类似策略模式的方式去处理分页，比如判断如果是一百页以内，就使用最基本的分页方式，大于一百页，则使用子查询的分页方式。</p>]]></content>
      
      
      
        <tags>
            
            <tag> MySQL </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Python——回顾常用的库</title>
      <link href="/2018/11/16/Python%E2%80%94%E2%80%94%E5%9B%9E%E9%A1%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/"/>
      <url>/2018/11/16/Python%E2%80%94%E2%80%94%E5%9B%9E%E9%A1%BE%E5%B8%B8%E7%94%A8%E7%9A%84%E5%BA%93/</url>
      
        <content type="html"><![CDATA[<p>这些最基础的面试想不起来会很尴尬</p><a id="more"></a><h2 id="Python-map-函数"><a href="#Python-map-函数" class="headerlink" title="Python map() 函数"></a>Python map() 函数</h2><h3 id="描述"><a href="#描述" class="headerlink" title="描述"></a>描述</h3><p><strong>map()</strong> 会根据提供的函数对指定序列做映射。</p><p>第一个参数 function 以参数序列中的每一个元素调用 function 函数，返回包含每次 function 函数返回值的新列表。</p><p>语法</p><h3 id="map-函数语法："><a href="#map-函数语法：" class="headerlink" title="map() 函数语法："></a>map() 函数语法：</h3><pre class="line-numbers language-python"><code class="language-python">map<span class="token punctuation">(</span>function<span class="token punctuation">,</span> iterable<span class="token punctuation">,</span> <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="参数"><a href="#参数" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 函数</li><li>iterable – 一个或多个序列</li></ul><h3 id="返回值"><a href="#返回值" class="headerlink" title="返回值"></a>返回值</h3><p>Python 2.x 返回列表。</p><p>Python 3.x 返回迭代器。</p><h3 id="实例"><a href="#实例" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 map() 的使用方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">square</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 计算平方数</span>    <span class="token keyword">return</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token operator">>></span><span class="token operator">></span>map<span class="token punctuation">(</span>square<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计算列表各个元素的平方</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span class="token operator">>></span><span class="token operator">></span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">:</span> x <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 lambda 匿名函数</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="提供了两个列表，对相同位置的列表数据进行相加"><a href="#提供了两个列表，对相同位置的列表数据进行相加" class="headerlink" title="提供了两个列表，对相同位置的列表数据进行相加"></a>提供了两个列表，对相同位置的列表数据进行相加</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span>map<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x <span class="token operator">+</span> y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">>></span><span class="token operator">></span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><h2 id="Python-filter-函数"><a href="#Python-filter-函数" class="headerlink" title="Python filter() 函数"></a>Python filter() 函数</h2><h3 id="描述-1"><a href="#描述-1" class="headerlink" title="描述"></a>描述</h3><p><strong>filter()</strong> 函数用于过滤序列，过滤掉不符合条件的元素，返回由符合条件元素组成的新列表。</p><p>该接收两个参数，第一个为函数，第二个为序列，序列的每个元素作为参数传递给函数进行判，然后返回 True 或 False，最后将返回 True 的元素放到新列表中。</p><blockquote><p><strong>注意:</strong> Pyhton2.7 返回列表，Python3.x 返回迭代器对象，具体内容可以查看：<a href="http://www.runoob.com/python3/python3-func-filter.html" target="_blank" rel="noopener">Python3 filter() 函数</a></p></blockquote><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><p>以下是 filter() 方法的语法:</p><pre><code>filter(function, iterable)</code></pre><h3 id="参数-1"><a href="#参数-1" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 判断函数。</li><li>iterable – 可迭代对象。</li></ul><h3 id="返回值-1"><a href="#返回值-1" class="headerlink" title="返回值"></a>返回值</h3><p>返回列表。</p><hr><h3 id="实例-1"><a href="#实例-1" class="headerlink" title="实例"></a>实例</h3><p>以下展示了使用 filter 函数的实例：</p><h3 id="过滤出列表中的所有奇数："><a href="#过滤出列表中的所有奇数：" class="headerlink" title="过滤出列表中的所有奇数："></a>过滤出列表中的所有奇数：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python </span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-   </span><span class="token keyword">def</span> <span class="token function">is_odd</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> n <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">==</span> <span class="token number">1</span>newlist <span class="token operator">=</span> filter<span class="token punctuation">(</span>is_odd<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果 ：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h3 id="过滤出1-100中平方根是整数的数："><a href="#过滤出1-100中平方根是整数的数：" class="headerlink" title="过滤出1~100中平方根是整数的数："></a>过滤出1~100中平方根是整数的数：</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/python </span><span class="token comment" spellcheck="true"># -*- coding: UTF-8 -*-   </span><span class="token keyword">import</span> math <span class="token keyword">def</span> <span class="token function">is_sqr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>         <span class="token keyword">return</span> math<span class="token punctuation">.</span>sqrt<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">1</span> <span class="token operator">==</span> <span class="token number">0</span>newlist <span class="token operator">=</span> filter<span class="token punctuation">(</span>is_sqr<span class="token punctuation">,</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span>newlist<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>输出结果 ：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="Python-reduce-函数"><a href="#Python-reduce-函数" class="headerlink" title="Python reduce() 函数"></a>Python reduce() 函数</h2><h3 id="描述-2"><a href="#描述-2" class="headerlink" title="描述"></a>描述</h3><p><strong>reduce()</strong> 函数会对参数序列中元素进行累积。</p><p>函数将一个数据集合（链表，元组等）中的所有数据进行下列操作：用传给 reduce 中的函数 function（有两个参数）先对集合中的第 1、2 个元素进行操作，得到的结果再与第三个数据用 function 函数运算，最后得到一个结果。</p><h3 id="语法-1"><a href="#语法-1" class="headerlink" title="语法"></a>语法</h3><p>reduce() 函数语法：</p><pre><code>reduce(function, iterable[, initializer])</code></pre><h3 id="参数-2"><a href="#参数-2" class="headerlink" title="参数"></a>参数</h3><ul><li>function – 函数，有两个参数</li><li>iterable – 可迭代对象</li><li>initializer – 可选，初始参数</li></ul><h3 id="返回值-2"><a href="#返回值-2" class="headerlink" title="返回值"></a>返回值</h3><p>返回函数计算结果。</p><h3 id="实例-2"><a href="#实例-2" class="headerlink" title="实例"></a>实例</h3><p>以下实例展示了 reduce() 的使用方法：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token operator">>></span><span class="token operator">></span><span class="token keyword">def</span> add<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 两数相加 ...     </span>    <span class="token keyword">return</span> x <span class="token operator">+</span> y <span class="token punctuation">.</span><span class="token punctuation">.</span><span class="token punctuation">.</span>  <span class="token operator">>></span><span class="token operator">></span> reduce<span class="token punctuation">(</span>add<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>   <span class="token comment" spellcheck="true"># 计算列表和：1+2+3+4+5 15 </span><span class="token operator">>></span><span class="token operator">></span> reduce<span class="token punctuation">(</span><span class="token keyword">lambda</span> x<span class="token punctuation">,</span> y<span class="token punctuation">:</span> x<span class="token operator">+</span>y<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># 使用 lambda 匿名函数 15</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Centos7环境 Mongodb 的安装及远程连接</title>
      <link href="/2018/11/13/Centos7%E7%8E%AF%E5%A2%83-Mongodb-%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/"/>
      <url>/2018/11/13/Centos7%E7%8E%AF%E5%A2%83-Mongodb-%E7%9A%84%E5%AE%89%E8%A3%85%E5%8F%8A%E8%BF%9C%E7%A8%8B%E8%BF%9E%E6%8E%A5/</url>
      
        <content type="html"><![CDATA[<p>此流程仅本人测试，没有报错。折腾了一会，出了解决不了的BUG还是卸载重装比较方便。</p><a id="more"></a><h2 id="一、安装"><a href="#一、安装" class="headerlink" title="一、安装"></a>一、安装</h2><p>① 把Mongo的安装配置添加的yum中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">vi</span> /etc/yum.repos.d/mongodb-org-4.0.repo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>把下面配置复制到文件中</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token punctuation">[</span>mongodb-org-4.0<span class="token punctuation">]</span>name<span class="token operator">=</span>MongoDB Repositorybaseurl<span class="token operator">=</span>https://repo.mongodb.org/yum/redhat/<span class="token variable">$releasever</span>/mongodb-org/4.0/x86_64/gpgcheck<span class="token operator">=</span>1enabled<span class="token operator">=</span>1gpgkey<span class="token operator">=</span>https://www.mongodb.org/static/pgp/server-4.0.asc<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 运行安装命令</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> yum <span class="token function">install</span> -y mongodb-org<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>③ 设置数据储存路径<br>默认下mongo的储存路径是 /data/db ，如果此时系统中没有这个文件，是不会启动成功的。所以要手动穿件这个文件夹</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">mkdir</span> -p /data/db<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>④ 启动Mongo</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token function">sudo</span> <span class="token function">service</span> mongod start<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>⑤ 连接本地的Mongo</p><pre class="line-numbers language-bash"><code class="language-bash">mongo<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>此时Mongo的安装已经完成，上面日志中有警告啥的可以通过配置解决，但不影响使用。</p><p>参考资料：<a href="https://docs.mongodb.com/master/mongo/" target="_blank" rel="noopener">https://docs.mongodb.com/master/mongo/</a></p><h2 id="二、Mongo的远程连接"><a href="#二、Mongo的远程连接" class="headerlink" title="二、Mongo的远程连接"></a>二、Mongo的远程连接</h2><p>注意：Mongo的远程连接需要打开权限控制<br>本教程是不过多涉及权限问题，权限详情可参考：<br><a href="http://www.cnblogs.com/hanyinglong/archive/2016/07/25/5704320.html" target="_blank" rel="noopener">http://www.cnblogs.com/hanyinglong/archive/2016/07/25/5704320.html</a></p><p>① 添加新的用户<br>首先添加个管理员账号（root权限）：</p><pre class="line-numbers language-javascript"><code class="language-javascript"> db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>    user<span class="token punctuation">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>    pwd<span class="token punctuation">:</span><span class="token string">"password"</span><span class="token punctuation">,</span>    roles<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>role<span class="token punctuation">:</span><span class="token string">"root"</span><span class="token punctuation">,</span>db<span class="token punctuation">:</span><span class="token string">"admin"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>    <span class="token punctuation">}</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>添加个普通账号（读写权限）： (需要先用root登陆)<br>（命令中的db 代表用户所分配的数据库）</p><pre class="line-numbers language-javascript"><code class="language-javascript">db<span class="token punctuation">.</span><span class="token function">createUser</span><span class="token punctuation">(</span><span class="token punctuation">{</span>                　　user<span class="token punctuation">:</span><span class="token string">"hyc"</span><span class="token punctuation">,</span>                                                   　　pwd<span class="token punctuation">:</span><span class="token string">"123456"</span><span class="token punctuation">,</span>                　　roles<span class="token punctuation">:</span><span class="token punctuation">[</span><span class="token punctuation">{</span>role<span class="token punctuation">:</span><span class="token string">"readWrite"</span><span class="token punctuation">,</span>db<span class="token punctuation">:</span><span class="token string">"test"</span><span class="token punctuation">}</span><span class="token punctuation">]</span>           　　<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>② 修改配置文件</p><pre><code>vi /etc/mongod.conf</code></pre><p>注释掉：</p><pre class="line-numbers language-bash"><code class="language-bash"><span class="token comment" spellcheck="true"># bindIp: 127.0.0.1  # Listen to local interface only, comment to listen on all interfaces.</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>添加：</p><pre class="line-numbers language-bash"><code class="language-bash">security:    authorization: enabled<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>③ 重启Mongo 远程连接</p><pre><code>service mongod restart</code></pre><p>④ 开启端口访问</p><pre class="line-numbers language-bash"><code class="language-bash">firewall-cmd --zone<span class="token operator">=</span>public --permanent --add-port<span class="token operator">=</span>27017/tcp<span class="token punctuation">;</span> firewall-cmd --reload<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>打开ROBO（mongo 可视化工具）：</p><p><a href="https://imgchr.com/i/iXEZcD" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/13/iXEZcD.png" alt="iXEZcD.png"></a></p><p><img src="https://s1.ax1x.com/2018/11/13/iXArOH.png" alt="iXArOH.png"></p><h2 id="最后点击Save就可以愉快的使用啦"><a href="#最后点击Save就可以愉快的使用啦" class="headerlink" title="最后点击Save就可以愉快的使用啦"></a>最后点击Save就可以愉快的使用啦</h2>]]></content>
      
      
      
        <tags>
            
            <tag> 数据库 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>无题1</title>
      <link href="/2018/11/09/%E6%97%A0%E9%A2%981/"/>
      <url>/2018/11/09/%E6%97%A0%E9%A2%981/</url>
      
        <content type="html"><![CDATA[<p><img src="https://s1.ax1x.com/2018/11/09/ibtcXq.jpg" alt="ibtcXq.jpg"></p><p>今天投了十几家简历，还没有回音</p><a id="more"></a><p>晚上把做的几个项目的流程再熟悉一下</p><p>感觉简历还是有问题，明天找老师还有同学请教</p><p>感觉压力越来越大了</p><p>本来还有很多东西要学，但是状态有点差</p><p>负面情绪有点多了，需要及时调节过来，毕竟也没人可以依靠了</p><p>加油吧！YC</p>]]></content>
      
      
      
        <tags>
            
            <tag> 杂记 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django——微信消息推送</title>
      <link href="/2018/11/08/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/"/>
      <url>/2018/11/08/%E5%BE%AE%E4%BF%A1%E6%B6%88%E6%81%AF%E6%8E%A8%E9%80%81/</url>
      
        <content type="html"><![CDATA[<h2 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h2><p>微信公众号的分类</p><a id="more"></a><ul><li><p>微信消息推送</p><ul><li><p>公众号</p><ul><li><p>已认证公众号</p></li><li><p>服务号</p></li><li><p>已认证服务号</p></li><li><p>企业号</p></li></ul></li></ul></li></ul><p>基于：微信认证服务号 主动推送微信消息。<br>前提：关注服务号<br>环境：沙箱环境</p><p>沙箱环境地址： <a href="https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login" target="_blank" rel="noopener">https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</a></p><h2 id="流程："><a href="#流程：" class="headerlink" title="流程："></a>流程：</h2><ol><li><p>注册开发者账号</p><p>获得：appID、appsecret</p><p>网页授权获取用户基本信息：47.98.134.86 或 域名 </p></li><li><p>关注公众号（已认证的服务号）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHwTKA.png" alt="iHwTKA.png"></p></li><li><p>生成二维码，用户扫描；<br> 将用户信息发送给微信，微信再将数据发送给设置redirect_uri地址(md5值)</p><p><a href="https://imgchr.com/i/iH09rn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH09rn.png" alt="iH09rn.png"></a></p></li><li><p>回调地址：47.98.134.86/callback/</p><p><img src="https://s1.ax1x.com/2018/11/08/iHfnQP.png" alt="iHfnQP.png"></p><ul><li>授权 </li><li>用户md5</li><li>获取wx_id<br>在数据库中更新设置：wx_id </li></ul></li><li><p>发送消息（模板消息）</p><ul><li><p>wx_id </p></li><li><p>access_token（2小时有效期）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHfZRI.png" alt="iHfZRI.png"></p></li></ul></li></ol><h2 id="核心代码"><a href="#核心代码" class="headerlink" title="核心代码"></a>核心代码</h2><p>models.py </p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> hashlib<span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> models<span class="token keyword">class</span> <span class="token class-name">UserInfo</span><span class="token punctuation">(</span>models<span class="token punctuation">.</span>Model<span class="token punctuation">)</span><span class="token punctuation">:</span>    username <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">"用户名"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    password <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span><span class="token string">"密码"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">)</span>    uid <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">'个人唯一ID'</span><span class="token punctuation">,</span>max_length<span class="token operator">=</span><span class="token number">64</span><span class="token punctuation">,</span> unique<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    wx_id <span class="token operator">=</span> models<span class="token punctuation">.</span>CharField<span class="token punctuation">(</span>verbose_name<span class="token operator">=</span><span class="token string">"微信ID"</span><span class="token punctuation">,</span> max_length<span class="token operator">=</span><span class="token number">128</span><span class="token punctuation">,</span> blank<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> null<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span> db_index<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">save</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 创建用户时，为用户自动生成个人唯一ID</span>        <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>pk<span class="token punctuation">:</span>            m <span class="token operator">=</span> hashlib<span class="token punctuation">.</span>md5<span class="token punctuation">(</span><span class="token punctuation">)</span>            m<span class="token punctuation">.</span>update<span class="token punctuation">(</span>self<span class="token punctuation">.</span>username<span class="token punctuation">.</span>encode<span class="token punctuation">(</span>encoding<span class="token operator">=</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>uid <span class="token operator">=</span> m<span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span>        super<span class="token punctuation">(</span>UserInfo<span class="token punctuation">,</span> self<span class="token punctuation">)</span><span class="token punctuation">.</span>save<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>settings.py</p><pre class="line-numbers language-python"><code class="language-python">WECHAT_CONFIG <span class="token operator">=</span> <span class="token punctuation">{</span>    <span class="token string">'app_id'</span><span class="token punctuation">:</span> <span class="token string">'wx3d0d44e8d59b5b8c'</span><span class="token punctuation">,</span>    <span class="token string">'appsecret'</span><span class="token punctuation">:</span> <span class="token string">'a4ede68946e9a2e7e36480d23865a64d'</span><span class="token punctuation">,</span>    <span class="token string">'redirect_uri'</span><span class="token punctuation">:</span> <span class="token string">'http://47.106.237.76/callback/'</span><span class="token punctuation">,</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>views.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> json<span class="token keyword">import</span> functools<span class="token keyword">import</span> requests<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span> redirect<span class="token punctuation">,</span> HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>http <span class="token keyword">import</span> JsonResponse<span class="token keyword">from</span> app01 <span class="token keyword">import</span> models<span class="token comment" spellcheck="true"># 沙箱环境地质：https://mp.weixin.qq.com/debug/cgi-bin/sandbox?t=sandbox/login</span><span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index.html'</span><span class="token punctuation">,</span><span class="token punctuation">{</span><span class="token string">'obj'</span><span class="token punctuation">:</span>obj<span class="token punctuation">}</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">auth</span><span class="token punctuation">(</span>func<span class="token punctuation">)</span><span class="token punctuation">:</span>    @functools<span class="token punctuation">.</span>wraps<span class="token punctuation">(</span>func<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">inner</span><span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        user_info <span class="token operator">=</span> request<span class="token punctuation">.</span>session<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user_info'</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token operator">not</span> user_info<span class="token punctuation">:</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span><span class="token string">'/login/'</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> func<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span>    <span class="token keyword">return</span> inner<span class="token keyword">def</span> <span class="token function">login</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户登录    :param request:     :return:     """</span>    <span class="token comment" spellcheck="true"># models.UserInfo.objects.create(username='luffy',password=123)</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">"POST"</span><span class="token punctuation">:</span>        user <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'user'</span><span class="token punctuation">)</span>        pwd <span class="token operator">=</span> request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'pwd'</span><span class="token punctuation">)</span>        obj <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>username<span class="token operator">=</span>user<span class="token punctuation">,</span> password<span class="token operator">=</span>pwd<span class="token punctuation">)</span><span class="token punctuation">.</span>first<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> obj<span class="token punctuation">:</span>            request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'id'</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>id<span class="token punctuation">,</span> <span class="token string">'name'</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>username<span class="token punctuation">,</span> <span class="token string">'uid'</span><span class="token punctuation">:</span> obj<span class="token punctuation">.</span>uid<span class="token punctuation">}</span>            <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>to<span class="token operator">=</span><span class="token string">'/bind/'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'login.html'</span><span class="token punctuation">)</span>@auth<span class="token keyword">def</span> <span class="token function">bind</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户登录后，关注公众号，并绑定个人微信（用于以后消息推送）    :param request:     :return:     """</span>    <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span> <span class="token string">'bind.html'</span><span class="token punctuation">)</span>@auth<span class="token keyword">def</span> <span class="token function">bind_qcode</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    生成二维码    :param request:     :return:     """</span>    ret <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'code'</span><span class="token punctuation">:</span> <span class="token number">1000</span><span class="token punctuation">}</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        access_url <span class="token operator">=</span> <span class="token string">"https://open.weixin.qq.com/connect/oauth2/authorize?appid={appid}&amp;redirect_uri={redirect_uri}&amp;response_type=code&amp;scope=snsapi_userinfo&amp;state={state}#wechat_redirect"</span>        access_url <span class="token operator">=</span> access_url<span class="token punctuation">.</span>format<span class="token punctuation">(</span>            appid<span class="token operator">=</span>settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">"app_id"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 'wx89085e915d351cae',</span>            redirect_uri<span class="token operator">=</span>settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">"redirect_uri"</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token comment" spellcheck="true"># 'http://47.93.4.198/test/',</span>            state<span class="token operator">=</span>request<span class="token punctuation">.</span>session<span class="token punctuation">[</span><span class="token string">'user_info'</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token string">'uid'</span><span class="token punctuation">]</span> <span class="token comment" spellcheck="true"># 为当前用户生成MD5值</span>        <span class="token punctuation">)</span>        ret<span class="token punctuation">[</span><span class="token string">'data'</span><span class="token punctuation">]</span> <span class="token operator">=</span> access_url    <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>        ret<span class="token punctuation">[</span><span class="token string">'code'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token number">1001</span>        ret<span class="token punctuation">[</span><span class="token string">'msg'</span><span class="token punctuation">]</span> <span class="token operator">=</span> str<span class="token punctuation">(</span>e<span class="token punctuation">)</span>    <span class="token keyword">return</span> JsonResponse<span class="token punctuation">(</span>ret<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">callback</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    用户在手机微信上扫码后，微信自动调用该方法。    用于获取扫码用户的唯一ID，以后用于给他推送消息。    :param request:     :return:     """</span>    code <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"code"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 用户md5值</span>    state <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"state"</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取该用户openId(用户唯一，用于给用户发送消息)</span>    res <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>        url<span class="token operator">=</span><span class="token string">"https://api.weixin.qq.com/sns/oauth2/access_token"</span><span class="token punctuation">,</span>        params<span class="token operator">=</span><span class="token punctuation">{</span>            <span class="token string">"appid"</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">'app_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"secret"</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">'appsecret'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token string">"code"</span><span class="token punctuation">:</span> code<span class="token punctuation">,</span>            <span class="token string">"grant_type"</span><span class="token punctuation">:</span> <span class="token string">'authorization_code'</span><span class="token punctuation">,</span>        <span class="token punctuation">}</span>    <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 获取的到openid表示用户授权成功</span>    openid <span class="token operator">=</span> res<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"openid"</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span>    <span class="token keyword">if</span> openid<span class="token punctuation">:</span>        models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>filter<span class="token punctuation">(</span>uid<span class="token operator">=</span>state<span class="token punctuation">)</span><span class="token punctuation">.</span>update<span class="token punctuation">(</span>wx_id<span class="token operator">=</span>openid<span class="token punctuation">)</span>        response <span class="token operator">=</span> <span class="token string">"&lt;h1>授权成功 %s &lt;/h1>"</span> <span class="token operator">%</span> openid    <span class="token keyword">else</span><span class="token punctuation">:</span>        response <span class="token operator">=</span> <span class="token string">"&lt;h1>用户扫码之后，手机上的提示&lt;/h1>"</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span>response<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sendmsg</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">get_access_token</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        获取微信全局接口的凭证(默认有效期俩个小时)        如果不每天请求次数过多, 通过设置缓存即可        """</span>        result <span class="token operator">=</span> requests<span class="token punctuation">.</span>get<span class="token punctuation">(</span>            url<span class="token operator">=</span><span class="token string">"https://api.weixin.qq.com/cgi-bin/token"</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">"grant_type"</span><span class="token punctuation">:</span> <span class="token string">"client_credential"</span><span class="token punctuation">,</span>                <span class="token string">"appid"</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">'app_id'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>                <span class="token string">"secret"</span><span class="token punctuation">:</span> settings<span class="token punctuation">.</span>WECHAT_CONFIG<span class="token punctuation">[</span><span class="token string">'appsecret'</span><span class="token punctuation">]</span><span class="token punctuation">,</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span><span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">"access_token"</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            access_token <span class="token operator">=</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'access_token'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            access_token <span class="token operator">=</span> None        <span class="token keyword">return</span> access_token    access_token <span class="token operator">=</span> get_access_token<span class="token punctuation">(</span><span class="token punctuation">)</span>    openid <span class="token operator">=</span> models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">.</span>wx_id    <span class="token keyword">print</span><span class="token punctuation">(</span>openid<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">send_custom_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        body <span class="token operator">=</span> <span class="token punctuation">{</span>            <span class="token string">"touser"</span><span class="token punctuation">:</span> openid<span class="token punctuation">,</span>            <span class="token string">"msgtype"</span><span class="token punctuation">:</span> <span class="token string">"text"</span><span class="token punctuation">,</span>            <span class="token string">"text"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                <span class="token string">"content"</span><span class="token punctuation">:</span> <span class="token string">'云姐好美呀'</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span>        response <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token operator">=</span><span class="token string">"https://api.weixin.qq.com/cgi-bin/message/custom/send"</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">'access_token'</span><span class="token punctuation">:</span> access_token            <span class="token punctuation">}</span><span class="token punctuation">,</span>            data<span class="token operator">=</span>bytes<span class="token punctuation">(</span>json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>body<span class="token punctuation">,</span> ensure_ascii<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        <span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 这里可根据回执code进行判定是否发送成功(也可以根据code根据错误信息)</span>        result <span class="token operator">=</span> response<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token keyword">def</span> <span class="token function">send_template_msg</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        发送模版消息        """</span>        res <span class="token operator">=</span> requests<span class="token punctuation">.</span>post<span class="token punctuation">(</span>            url<span class="token operator">=</span><span class="token string">"https://api.weixin.qq.com/cgi-bin/message/template/send"</span><span class="token punctuation">,</span>            params<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">'access_token'</span><span class="token punctuation">:</span> access_token            <span class="token punctuation">}</span><span class="token punctuation">,</span>            json<span class="token operator">=</span><span class="token punctuation">{</span>                <span class="token string">"touser"</span><span class="token punctuation">:</span> openid<span class="token punctuation">,</span>                <span class="token string">"template_id"</span><span class="token punctuation">:</span> <span class="token string">'NcN_W_aEIwu-FHyJx8djU99Z70AvwwGcEufXiTzj-NM'</span><span class="token punctuation">,</span>                <span class="token string">"data"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                    <span class="token string">"first"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"冰姐"</span><span class="token punctuation">,</span>                        <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#173177"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                    <span class="token string">"keyword1"</span><span class="token punctuation">:</span> <span class="token punctuation">{</span>                        <span class="token string">"value"</span><span class="token punctuation">:</span> <span class="token string">"美女"</span><span class="token punctuation">,</span>                        <span class="token string">"color"</span><span class="token punctuation">:</span> <span class="token string">"#173177"</span>                    <span class="token punctuation">}</span><span class="token punctuation">,</span>                <span class="token punctuation">}</span>            <span class="token punctuation">}</span>        <span class="token punctuation">)</span>        result <span class="token operator">=</span> res<span class="token punctuation">.</span>json<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> result    <span class="token comment" spellcheck="true"># 在这里编辑要发送的函数中的内容</span>    result <span class="token operator">=</span> send_template_msg<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> result<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'errcode'</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'发送成功'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'发送失败'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="功能演示"><a href="#功能演示" class="headerlink" title="功能演示"></a>功能演示</h2><p>1登陆：</p><p><a href="https://imgchr.com/i/iHwYBq" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHwYBq.png" alt="iHwYBq.png"></a></p><p>2客户扫码关注我们的公众号</p><p><a href="https://imgchr.com/i/iHwTKA" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iHwTKA.png" alt="iHwTKA.png"></a></p><p>为了获得用户的微信ID，我们需要客户再次扫码，向微信授权把ID给我们</p><p><a href="https://imgchr.com/i/iH09rn" target="_blank" rel="noopener"><img src="https://s1.ax1x.com/2018/11/08/iH09rn.png" alt="iH09rn.png"></a></p><h2 id="源码："><a href="#源码：" class="headerlink" title="源码："></a>源码：</h2><p><a href="https://github.com/hyyc554/wxbox" target="_blank" rel="noopener">https://github.com/hyyc554/wxbox</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Django——支付宝支付功能</title>
      <link href="/2018/11/08/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/"/>
      <url>/2018/11/08/%E5%89%8D%E6%9C%9F%E5%87%86%E5%A4%87/</url>
      
        <content type="html"><![CDATA[<h1 id="前期准备"><a href="#前期准备" class="headerlink" title="前期准备"></a>前期准备</h1><p>首先我们需要获得支付宝提供的权限与接口，在蚂蚁开放平台进行相关申请：<a href="https://openhome.alipay.com/platform/appDaily.htm?tab=info" target="_blank" rel="noopener">https://openhome.alipay.com/platform/appDaily.htm?tab=info</a></p><p>申请支付宝账户权限<br><a id="more"></a></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMqr4.png" alt="iHMqr4.png"></p><p>创建应用</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMIP0.png" alt="iHMIP0.png"></p><p>沙箱测试环境</p><p><img src="https://s1.ax1x.com/2018/11/08/iHM45q.png" alt="iHM45q.png"></p><p>appID：我的身份</p><p>支付宝网关：测试环境</p><p>获得相关的测试账号</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQise.png" alt="iHQise.png"></p><p>商户账号、客户账号后面可以通过这两个账号来进行测试</p><p>沙箱钱包（也可以不下载，直接在网页上登陆测试账号进行支付测试）</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMoGV.png" alt="iHMoGV.png"></p><p>在安卓手机上进行安装</p><h2 id="获得SDK（pay-py）"><a href="#获得SDK（pay-py）" class="headerlink" title="获得SDK（pay.py）"></a>获得SDK（pay.py）</h2><p>就是加密算法</p><p>SDK（加密算法，阿里没有提供python版本，从github山获得）</p><p>官方</p><p>GIHUB（请注意浏览源码）——pay.py(依赖:pip install pycryptodome)</p><p>公钥私钥</p><p><img src="https://s1.ax1x.com/2018/11/08/iHM7xU.png" alt="iHM7xU.png"></p><p>在这里下载<br><img src="https://s1.ax1x.com/2018/11/08/iHMXZ9.png" alt="iHMXZ9.png"></p><p>运行<br><img src="https://s1.ax1x.com/2018/11/08/iHMbMF.png" alt="iHMbMF.png"></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMLqJ.png" alt="iHMLqJ.png"></p><p>生成公钥私钥<br><img src="https://s1.ax1x.com/2018/11/08/iHMjaR.png" alt="iHMjaR.png"></p><p>完成上传</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMzPx.png" alt="iHMzPx.png"></p><p>应用公钥上传后自动生成支付宝公钥</p><p>在django文件中进行替换成自己的key</p><p><img src="C:\Users\Administrator.000\AppData\Roaming\Typora\typora-user-images\1541664121222.png" alt="1541664121222"></p><p>django程序</p><p>演示</p><p>1.运行</p><p>2.访问去支付</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMhan.png" alt="iHMhan.png"></p><p>3.支付页面</p><p><img src="https://s1.ax1x.com/2018/11/08/iHMT2T.png" alt="iHMT2T.png"></p><p>4.登陆测试用户，完成支付</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQpRK.png" alt="iHQpRK.png"></p><p><img src="https://s1.ax1x.com/2018/11/08/iHMvI1.png" alt="iHMvI1.png"></p><p>最终跳转到</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQSG6.png" alt="iHQSG6.png"></p><p>说明功能正常</p><h2 id="Django实现"><a href="#Django实现" class="headerlink" title="Django实现"></a>Django实现</h2><p>代码结构</p><p><img src="https://s1.ax1x.com/2018/11/08/iHQ9xO.png" alt="iHQ9xO.png"></p><p>views.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>shortcuts <span class="token keyword">import</span> render<span class="token punctuation">,</span>redirect<span class="token punctuation">,</span>HttpResponse<span class="token keyword">from</span> django<span class="token punctuation">.</span>views<span class="token punctuation">.</span>decorators<span class="token punctuation">.</span>csrf <span class="token keyword">import</span> csrf_exempt<span class="token keyword">from</span> utils<span class="token punctuation">.</span>pay <span class="token keyword">import</span> AliPay<span class="token keyword">import</span> time<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">def</span> <span class="token function">aliPay</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    obj <span class="token operator">=</span> AliPay<span class="token punctuation">(</span>        appid<span class="token operator">=</span>settings<span class="token punctuation">.</span>APPID<span class="token punctuation">,</span>        app_notify_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>NOTIFY_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 如果支付成功，支付宝会向这个地址发送POST请求（校验是否支付已经完成）</span>        return_url<span class="token operator">=</span>settings<span class="token punctuation">.</span>RETURN_URL<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 如果支付成功，重定向回到你的网站的地址。</span>        alipay_public_key_path<span class="token operator">=</span>settings<span class="token punctuation">.</span>PUB_KEY_PATH<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 支付宝公钥</span>        app_private_key_path<span class="token operator">=</span>settings<span class="token punctuation">.</span>PRI_KEY_PATH<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 应用私钥</span>        debug<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 默认False,</span>    <span class="token punctuation">)</span>    <span class="token keyword">return</span> obj<span class="token keyword">def</span> <span class="token function">index</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'GET'</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> render<span class="token punctuation">(</span>request<span class="token punctuation">,</span><span class="token string">'index.html'</span><span class="token punctuation">)</span>    alipay <span class="token operator">=</span> aliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 对购买的数据进行加密</span>    money <span class="token operator">=</span> float<span class="token punctuation">(</span>request<span class="token punctuation">.</span>POST<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'price'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    out_trade_no <span class="token operator">=</span> <span class="token string">"x2"</span> <span class="token operator">+</span> str<span class="token punctuation">(</span>time<span class="token punctuation">.</span>time<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 1. 在数据库创建一条数据：状态（待支付）</span>    query_params <span class="token operator">=</span> alipay<span class="token punctuation">.</span>direct_pay<span class="token punctuation">(</span>        subject<span class="token operator">=</span><span class="token string">"充气式韩红"</span><span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 商品简单描述</span>        out_trade_no<span class="token operator">=</span> out_trade_no<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 商户订单号</span>        total_amount<span class="token operator">=</span>money<span class="token punctuation">,</span>  <span class="token comment" spellcheck="true"># 交易金额(单位: 元 保留俩位小数)</span>    <span class="token punctuation">)</span>    pay_url <span class="token operator">=</span> <span class="token string">"https://openapi.alipaydev.com/gateway.do?{}"</span><span class="token punctuation">.</span>format<span class="token punctuation">(</span>query_params<span class="token punctuation">)</span>    <span class="token keyword">return</span> redirect<span class="token punctuation">(</span>pay_url<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pay_result</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    支付完成后，跳转回的地址    :param request:    :return:    """</span>    params <span class="token operator">=</span> request<span class="token punctuation">.</span>GET<span class="token punctuation">.</span>dict<span class="token punctuation">(</span><span class="token punctuation">)</span>    sign <span class="token operator">=</span> params<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>    alipay <span class="token operator">=</span> aliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>    status <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>params<span class="token punctuation">,</span> sign<span class="token punctuation">)</span>    <span class="token keyword">if</span> status<span class="token punctuation">:</span>        <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'支付成功'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'支付失败'</span><span class="token punctuation">)</span>@csrf_exempt<span class="token keyword">def</span> <span class="token function">update_order</span><span class="token punctuation">(</span>request<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    支付成功后，支付宝向该地址发送的POST请求（用于修改订单状态）    :param request:    :return:    """</span>    <span class="token keyword">if</span> request<span class="token punctuation">.</span>method <span class="token operator">==</span> <span class="token string">'POST'</span><span class="token punctuation">:</span>        <span class="token keyword">from</span> urllib<span class="token punctuation">.</span>parse <span class="token keyword">import</span> parse_qs        body_str <span class="token operator">=</span> request<span class="token punctuation">.</span>body<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>        post_data <span class="token operator">=</span> parse_qs<span class="token punctuation">(</span>body_str<span class="token punctuation">)</span>        post_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>        <span class="token keyword">for</span> k<span class="token punctuation">,</span> v <span class="token keyword">in</span> post_data<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            post_dict<span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">=</span> v<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        alipay <span class="token operator">=</span> aliPay<span class="token punctuation">(</span><span class="token punctuation">)</span>        sign <span class="token operator">=</span> post_dict<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token string">'sign'</span><span class="token punctuation">,</span> None<span class="token punctuation">)</span>        status <span class="token operator">=</span> alipay<span class="token punctuation">.</span>verify<span class="token punctuation">(</span>post_dict<span class="token punctuation">,</span> sign<span class="token punctuation">)</span>        <span class="token keyword">if</span> status<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 修改订单状态</span>            out_trade_no <span class="token operator">=</span> post_dict<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'out_trade_no'</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>out_trade_no<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 2. 根据订单号将数据库中的数据进行更新</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'支付成功'</span><span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">'支付失败'</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> HttpResponse<span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>settings.py</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 支付相关配置</span>APPID <span class="token operator">=</span> <span class="token string">"2016082500309412"</span>NOTIFY_URL <span class="token operator">=</span> <span class="token string">"http://47.106.237.76:80/update_order/"</span>RETURN_URL <span class="token operator">=</span> <span class="token string">"http://47.106.237.76:80/pay_result/"</span>PRI_KEY_PATH <span class="token operator">=</span> <span class="token string">"keys/app_private_2048.txt"</span>PUB_KEY_PATH <span class="token operator">=</span> <span class="token string">"keys/alipay_public_2048.txt"</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在线教育平台项目总结</title>
      <link href="/2018/11/07/%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/"/>
      <url>/2018/11/07/%E9%A1%B9%E7%9B%AE%E7%AE%80%E4%BB%8B/</url>
      
        <content type="html"><![CDATA[<h2 id="项目简介"><a href="#项目简介" class="headerlink" title="项目简介"></a>项目简介</h2><p>在线教育平台</p><a id="more"></a><p><strong>软件依赖：</strong></p><ul><li>WEB框架：Django（1.11.7）、Django REST framework</li><li>前端框架：Vue（2.5.16）</li><li>数据库: MySql、redis</li><li>支付平台：支付宝</li><li>消息推送平台：微信服务号，电子邮件</li></ul><p><strong>主要功能如下：</strong></p><ul><li>允许学生注册、登陆</li><li>浏览本在线教育平台所提供的课程列表、课程介绍（课程大纲，）</li><li>学生将课程加入购物车</li><li>完成购物后，进入结算中心，通过支付宝支付购买课程</li><li>完成课程购买后，分配导师</li><li>开始学习，观看本站提供的教学视频</li><li>通过答疑系统，提交学习中遇到的问题，与同学讨论或者导师答疑</li><li>完成章节学习后，提交作业</li><li>导师批改作业并打分</li><li>模块学习完成后进行考核</li></ul><h2 id="项目意义"><a href="#项目意义" class="headerlink" title="项目意义"></a>项目意义</h2><p><strong>目标：</strong></p><p>通过互联技术，变革传统教育方式，依赖强大的导师服务系统，提高在线教育的效率与成功率。</p><p><strong>项目策略:</strong></p><ul><li>提供具有时间限制的教学服务</li><li>安排合理的模块化学习</li><li>聘用高素质的导师，提供优质服务</li><li>导师对学员一对一在线考核</li><li>学习周期中全程导师监督（跟进记录）</li><li>提供高效的答疑解惑服务（12小时）</li><li>建立完善的奖学金制度<ul><li>是否按学习计划完成学业</li><li>每章节作业完成情况</li></ul></li></ul><h2 id="项目开发团队与进度"><a href="#项目开发团队与进度" class="headerlink" title="项目开发团队与进度"></a>项目开发团队与进度</h2><p><strong>团队构成：</strong></p><ul><li>开发<ul><li>导师后台，stark组件+rbac ： 1人</li><li>管理后台，stark组件+rbac ： 1人</li><li>主站<ul><li>vue.js 1人</li><li>api 村长+1/2文州+1/2Alex+其他 + 村长</li></ul></li></ul></li><li>运维(1人)</li><li>测试(1人)</li><li>产品经理(1人)</li><li>UI设计(1人)</li><li>运营(1人)</li><li>销售(4人)</li><li>全职导师(2人)</li><li>签约讲师（…）</li></ul><p><strong>周期：</strong></p><ul><li>7月份项目开始</li><li>11月份上线</li><li>11月份~次年5月份： 修Bug，活动支持，广告。。。</li><li>6月份：开发题库系统</li></ul><h2 id="数据库设计"><a href="#数据库设计" class="headerlink" title="数据库设计"></a>数据库设计</h2><p><strong>简要描述如下：</strong></p><ul><li><p>课程（13表）</p><ul><li>课程大类</li><li>课程子类</li><li>学位课<ul><li>讲师</li><li>奖学金</li></ul></li><li>专题课（学位课模块表）</li><li>价格策略(contenttype)</li><li>课程详细(o2o -&gt; 水平分表)</li><li>常见问题</li><li>课程大纲</li><li>章节</li><li>课时</li><li>作业</li></ul></li><li><p>深科技（4+2）</p><ul><li>用户表</li><li>用户token</li><li>文章来源</li><li>文章表</li><li>通用评论表</li><li>通用收藏表</li></ul></li><li><p>支付相关（4+2）</p></li><li><ul><li>优惠券表</li><li>订单表</li><li>订单详情表</li><li>文章表</li><li>通用评论表</li><li>通用收藏表</li></ul></li></ul><p><strong>Django中实现:</strong></p><p><img src="https://images.cnblogs.com/OutliningIndicators/ContractedBlock.gif" alt="img"> models.py</p><h2 id="支付流程复盘"><a href="#支付流程复盘" class="headerlink" title="支付流程复盘"></a>支付流程复盘</h2><p>支付需求起始于用户点击立即支付或者加入购物车</p><h3 id="1-添加到购物车"><a href="#1-添加到购物车" class="headerlink" title="1.添加到购物车"></a>1.添加到购物车</h3><p>当用户选择需要购买的课程和价格策略后，有两种方式购买课程:</p><h3 id="1-1-立即购买"><a href="#1-1-立即购买" class="headerlink" title="1.1 立即购买"></a><strong>1.1 立即购买</strong></h3><p>将课程id和选择的价格策略放到redis中，跳到去支付页面，从redis中获取购买课程的id和价格策略id,如果该用户要使用优惠券和贝利,则选择当前用户所拥有并且未使用和没过期的优惠券,得到折后价格,点击去支付完成支付,</p><h3 id="1-2-添加到购物车中完成支付-post"><a href="#1-2-添加到购物车中完成支付-post" class="headerlink" title="1.2 添加到购物车中完成支付(post)"></a><strong>1.2 添加到购物车中完成支付(post)</strong></h3><p>前端需要提供的数据包括：所选课程的id和所选择的价格策略id。约定的数据格式如下：</p><pre><code>{    &quot;course_id&quot;:1,    &quot;policy_id&quot;:3}</code></pre><p>后端获取到所选课程的id和所选择的价格策略id，根据课程id获取到当前课程,然后根据当前课程获取到当前课程所有的价格策略,判断在后端获取到的价格策略id在不在当前课程的价格策略中,不在的话则抛出异常价格策略不存在，在的话继续执行，将该课程所有价格策略的id，时间周期和价格存放到price_policy_list中</p><pre><code># 1.在这里获得用户的课程ID与价格策略IDcourse_id = int(request.data.get(&#39;course_id&#39;))policy_id = int(request.data.get(&#39;policy_id&#39;))# 2. 获取专题课信息course = models.Course.objects.get(id=course_id)# 3.获取课程相关的所有价格策略price_policy_list = course.price_policy.all()price_policy_dict = {}for item in price_policy_list:    price_policy_dict[item.id] = {        &quot;period&quot;: item.valid_period,        &quot;period_display&quot;: item.get_valid_period_display(),        &quot;price&quot;: item.price    }if policy_id not in price_policy_dict:    raise PricePolicyInvalid(&#39;价格策略不合法&#39;)</code></pre><p>继续将该课程的所有信息主要包括:课程id,课程图片地址,课程标题，所有价格策略，默认价格策略封装在car_dict中</p><p>下面是redis中保存用户数据的key</p><pre><code>SHOPPING_CART_KEY = &quot;luffy_shopping_cart_%s_%s&quot;PAYMENT_KEY = &quot;luffy_payment_%s_%s&quot;PAYMENT_COUPON_KEY = &quot;luffy_payment_coupon_%s&quot;</code></pre><pre><code>car_key = settings.SHOPPING_CART_KEY % (request.auth.user_id, course_id,)car_dict = {    &#39;title&#39;: course.name,    &#39;img&#39;: course.course_img,    &#39;default_policy&#39;: policy_id,    &#39;policy&#39;: json.dumps(price_policy_dict)}</code></pre><p>完成后，在redis中用户购物车的数据如下：</p><pre><code>{    luffy_shopping_car_6_11:{        &#39;title&#39;:&#39;21天入门到放弃&#39;,        &#39;src&#39;:&#39;xxx.png&#39;,        &#39;policy&#39;:{            1:{id:&#39;xx&#39;.....},            2:{id:&#39;xx&#39;.....},            3:{id:&#39;xx&#39;.....},            4:{id:&#39;xx&#39;.....},        },        &#39;default_policy&#39;:3    },    luffy_shopping_car_6_13:{        ...    }}</code></pre><p>修改购物车总的价格策略(patch):</p><p>向后台发课程id和要修改为的价格策略id,判断课程是否在购物车中,判断传递过来的价格策略是否在当前课程的价格策略中,在的话将 redis中的当前课程的默认价格策略修改为当前的价格策略具体将上面代码</p><h2 id="结算中心"><a href="#结算中心" class="headerlink" title="结算中心"></a>结算中心</h2><p>在用户完成购物车的后，点击结算，前端服务器发送结算数据（”courseids”:[“1”,”2”]，1和2对应的就是课程的ID）给我们后端的Django服务器，约定的数据格如下：</p><pre><code>{    &quot;courseids&quot;:[&quot;1&quot;,&quot;2&quot;]}</code></pre><p><strong>1.获取用户提交的课程id, [1,2]</strong></p><p>判断是否选择要结算的课程,没选择则抛出异常</p><pre><code>course_id_list = request.data.get(&#39;course_list&#39;)if not course_id_list or not isinstance(course_id_list, list):    raise Exception(&#39;请选择要结算的课程&#39;)</code></pre><p><strong>2.检测购物车中检查是否已经有课程（应该有课程的）</strong></p><pre><code>product_dict = redis_pool.conn.hget(settings.LUFFY_SHOPPING_CAR, request.user.id)if not product_dict:    raise Exception(&#39;购物车无课程&#39;)</code></pre><p><strong>3.检测购物车中是否有用户要购买的课程</strong></p><pre><code>            product_dict = json.loads(product_dict.decode(&#39;utf-8&#39;))            # ###### 课程、价格和优惠券 #######            policy_course_dict = {}            # 循环用户传递过来的要结算的课程ID列表            for course_id in course_id_list:                course_id = str(course_id)                product = product_dict.get(course_id)                if not product:                    raise Exception(&#39;购买的课程必须先加入购物车&#39;)</code></pre><p>如果所结算的课程在购物车中，</p><p>4.<strong>获取选中价格策略的价格详细，</strong></p><p>选择购物车中当前课程下的所有价格策略和当前课程的所选择的价格策略相等的价格策略，获取其信息,</p><pre><code>            # c. 购物车中是否有用户要购买的课程            product_dict = json.loads(product_dict.decode(&#39;utf-8&#39;))            # ###### 课程、价格和优惠券 #######            policy_course_dict = {}            # 循环用户传递过来的要结算的课程ID列表            for course_id in course_id_list:                course_id = str(course_id)                product = product_dict.get(course_id)                if not product:                    raise Exception(&#39;购买的课程必须先加入购物车&#39;)                # 获取选中价格策略的价格详细                policy_exist = False                for policy in product[&#39;price_policy_list&#39;]:                    if policy[&#39;id&#39;] == product[&#39;choice_policy_id&#39;]:                        policy_price = policy[&#39;price&#39;]                        policy_period = policy[&#39;period&#39;]                        policy_valid_period = policy[&#39;valid_period&#39;]                        policy_exist = True                        break                if not policy_exist:                    raise Exception(&#39;购物车中的课程无此价格&#39;)</code></pre><p>将上面我们获取的课程信息和价格策略信息封装在policy_course中</p><pre><code>                policy_course = {                    &#39;course_id&#39;: course_id,                    &#39;course_name&#39;: product[&#39;name&#39;],                    &#39;course_img&#39;: product[&#39;course_img&#39;],                    &#39;policy_id&#39;: product[&#39;choice_policy_id&#39;],                    &#39;policy_price&#39;: policy_price,                    &#39;policy_period&#39;: policy_period,                    &#39;policy_valid_period&#39;: policy_valid_period,                    &#39;default_coupon_id&#39;: 0,                    &#39;coupon_record_list&#39;: {                        0:{&#39;id&#39;: 0, &#39;text&#39;: &#39;请选择优惠券&#39;},                    },                }</code></pre><p><strong>5.获取当前用户所有的优惠券</strong></p><pre><code>  user_coupon_list = models.CouponRecord.objects.filter(account=request.user,status=0)</code></pre><p><strong>6.区分用户的优惠券种类,课程优惠券添加到课程中；全局优惠券添加到全局</strong></p><pre><code>  # ###### 全局优惠券 #######            global_coupon_record_dict = {}</code></pre><p>循环遍历当前用户的所有优惠券,判断他们是否过期</p><pre><code>                begin_date = record.coupon.valid_begin_date                end_date = record.coupon.valid_end_date                if begin_date:                    if current_date &lt; begin_date:                        continue                if end_date:                    if current_date &gt; end_date:                        continue</code></pre><p>,如果没过期,判断他们是全局优惠券还是针对某个课程的优惠券,区分好是什么优惠券以后还的区分该优惠券是什么类型，</p><p>如果是通用券</p><pre><code> if record.coupon.coupon_type == 0:                        temp = {&#39;type&#39;: 0, &#39;text&#39;: &quot;通用优惠券&quot;, &#39;id&#39;: record.id,                                &#39;begin_date&#39;: begin_date, &#39;end_date&#39;: end_date,                                &#39;money_equivalent_value&#39;: record.coupon.money_equivalent_value}</code></pre><p>如果是满减券:</p><pre><code>  elif record.coupon.coupon_type == 1:                        temp = {&#39;type&#39;: 1, &#39;text&#39;: &quot;满减券&quot;, &#39;id&#39;: record.id,                                &#39;begin_date&#39;: begin_date, &#39;end_date&#39;: end_date,                                &#39;minimum_consume&#39;: record.coupon.minimum_consume,                                &#39;money_equivalent_value&#39;: record.coupon.money_equivalent_value}</code></pre><p>如果是折扣券：</p><pre><code> elif record.coupon.coupon_type == 2:                        temp = {&#39;type&#39;: 2, &#39;text&#39;: &quot;折扣券&quot;, &#39;id&#39;: record.id,                                &#39;begin_date&#39;: begin_date, &#39;end_date&#39;: end_date,                                &#39;off_percent&#39;: record.coupon.off_percent}</code></pre><p>如果是全局优惠券,则</p><pre><code>global_coupon_record_dict[record.id] = temp</code></pre><p>如果但是针对课程的优惠券：</p><pre><code> policy_course_dict[cid][&#39;coupon_record_list&#39;][record.id] = temp</code></pre><p>最后将所有数据封装在user_pay中放到redis上</p><pre><code>user_pay = {                &#39;policy_course_dict&#39;: policy_course_dict,                &#39;global_coupon_record_dict&#39;: global_coupon_record_dict,                &#39;default_global_coupon_id&#39;: 0,            }redis_pool.conn.hset(settings.LUFFY_PAYMENT, request.user.id, json.dumps(user_pay))</code></pre><p> user_pay数据结构</p><pre><code>结算中心 =  {    用户ID: {        policy_course_dict:{            1:{                &#39;course_id&#39;: course_id,                &#39;course_name&#39;: product[&#39;name&#39;],                &#39;course_img&#39;: product[&#39;course_img&#39;],                &#39;policy_id&#39;: product[&#39;choice_policy_id&#39;],                &#39;policy_price&#39;: policy_price,                &#39;policy_&#39;: policy_period, # 30/                &#39;default_coupon_id&#39;: 1,                &#39;coupon_record_list&#39;: {                    0:{&#39;id&#39;: 0, &#39;text&#39;: &#39;请选择优惠券&#39;},                    1:{&#39;id&#39;: 1, &#39;type&#39;:1, &#39;text&#39;: &#39;优惠券1&#39;, ..},                    2:{&#39;id&#39;: 2, &#39;type&#39;:2, &#39;text&#39;: &#39;优惠券1&#39;, ..},                    3: {&#39;id&#39;: 3, &#39;type&#39;:3, &#39;text&#39;: &#39;优惠券1&#39;, ..},                },            },            2:{                &#39;course_id&#39;: course_id,                &#39;course_name&#39;: product[&#39;name&#39;],                &#39;course_img&#39;: product[&#39;course_img&#39;],                &#39;policy_id&#39;: product[&#39;choice_policy_id&#39;],                &#39;policy_price&#39;: policy_price,                &#39;policy_&#39;: policy_period,                &#39;default_coupon_id&#39;: 0,                &#39;coupon_record_list&#39;: {                    0:{&#39;id&#39;: 0, &#39;text&#39;: &#39;请选择优惠券&#39;},                    1:{&#39;id&#39;: 1, &#39;type&#39;:1, &#39;text&#39;: &#39;优惠券1&#39;, ..},                    2:{&#39;id&#39;: 2, &#39;type&#39;:2, &#39;text&#39;: &#39;优惠券1&#39;, ..},                    3: {&#39;id&#39;: 3, &#39;type&#39;:3, &#39;text&#39;: &#39;优惠券1&#39;, ..},                },            }        },        global_coupon_dict:{            1:{&#39;type&#39;: 0, &#39;text&#39;: &quot;通用优惠券&quot;, &#39;id&#39;: 1, ..},            2:{&#39;type&#39;: 0, &#39;text&#39;: &quot;通用优惠券&quot;, &#39;id&#39;: 2, ..},            3:{&#39;type&#39;: 0, &#39;text&#39;: &quot;通用优惠券&quot;, &#39;id&#39;: 3, ...},            4:{&#39;type&#39;: 0, &#39;text&#39;: &quot;通用优惠券&quot;, &#39;id&#39;: 4, ...},        },        choice_global_coupon:3    }         }</code></pre><h2 id="去支付"><a href="#去支付" class="headerlink" title="去支付"></a><strong>去支付</strong></h2><p><strong>1.去结算中心获取要结算的所有课程和优惠券</strong></p><p><strong>2.循环遍历每一个课程</strong></p><p>开始总价格<strong>totalprice</strong>和折扣价<strong>totaldiscount</strong>都为0,</p><pre><code>总价 = 0总折扣 = 0</code></pre><p>2.1.如果该课程没有使用优惠券,则总价格=<strong>totalprice+课程原价,totaldiscount=0，</strong></p><pre><code>b. 循环购买的所有课程    当前时间 = datetime.datetime.now()    当前日期 = datetime.datetime.now().date    ****课程信息 = [] *****    ****使用的优惠券ID列表 = [] *****    for course_id,values in policy_course_dict.items():        课程原价 = values[&#39;policy_price&#39;]        使用的优惠券ID = values[&#39;default_coupon_id&#39;]        discount = 0        # 未使用优惠券            temp = {                课程ID: 1,                原价: 10,                折扣价：10,                有效期：30            }            课程信息.append(temp)            总价 += 课程原价            折扣 += discount</code></pre><p>2.3.如果使用了优惠券,则需要去判断所使用的优惠券是否已经过期，或是否已经被使用,如果过期了或者被使用了就抛出异常,否则继续往下执行,判断该优惠券的类型</p><pre><code>如果使用了优惠券:            去数据库查询:指定优惠券是否已经使用、是否已经过期            如果优惠券可不用：                raise Exception(&#39;优惠券不可用&#39;)            如果是通用优惠券：                discount = 通用优惠券(如果大于课程原价，课程原价)            elif 如果是满减优惠券：                if 价格是否大于最小满减要求:                    discount = 通用优惠券(如果大于课程原价，课程原价)            elif 如果是折扣优惠券：                discount = 课程原价 * (1-折扣)            使用的优惠券ID列表.append(绑定可以的优惠券ID)            temp = {                课程ID: 1,                原价: 10,                折扣价：9,                有效期：30            }            课程信息.append(temp)            总价 += 课程原价            折扣 += discount</code></pre><p>到此为止 </p><pre><code>pay = 总价 - 总折扣</code></pre><p><strong>3.继续计算看是否使用全局优惠券</strong></p><pre><code>全站优惠券ID = choice_global_coupon    数据库获取并检查是否可用（优惠券是否已经使用、是否已经过期）    如果优惠券可不用:        raise(&#39;全站优惠券不可用&#39;)    g_discount = 0    如果是通用优惠券：        g_discount = 通用优惠券(如果大于pay，pay)    elif 如果是满减优惠券：        if 价格是否大于最小满减要求:            g_discount = 通用优惠券(如果大于pay，pay)    elif 如果是折扣优惠券：        g_discount = pay * (1- 折扣)    总折扣 += g_discount    使用的优惠券ID列表.append(全站优惠券ID)</code></pre><p><strong>4.贝利支付</strong></p><pre><code>    if balance &lt;= request.user.balance:        总折扣 += balance</code></pre><p><strong>5.总结算</strong></p><pre><code>总价 - 总折扣 = alipayif alipay ==0:        贝里&amp;优惠券         pay_type = 0    else:        支付宝支付        pay_type = 1</code></pre><p>如果最后支付=0，就直接修改支付状态为已支付，否则改为待支付</p><p><strong>6.点击立即支付以后 进行数据库操作</strong></p><pre><code>事务：        # 1. 创建订单表             order_obj = models.Order.objects.create(....status=0) # pay_type = 0             或             order_obj = models.Order.objects.create(....status=1) # pay_type = 1        # 2. 生成订单详细            for item in 课程信息：                detail_obj = models.OrderDetail.objects.create(order_obj,课程ID,原价和折扣价)                models.EnrolledCourse.objects.create(...当前时间,当前时间+30,status=1)        # 3. 处理优惠券            models.CouponRecord.objects.filter(account=request.user,status=0,id__in=使用的优惠券ID列表]).update(status=1,order=order_obj)        # 4. 处理贝里交易            models.Account.objects.filter(id=reuqest.user.id).update(balance=F(balance)-balance)            models.TransactionRecord.objects.create(amount=balance,balance=request.user.balance,transaction_type=1,content_object=order_obj)      </code></pre><p>点击立即支付要生成订单，订单根据前面支付是否等于0来判断支付状态是否要修改为已支付或者待支付；生成订单详情，循环课程信息，写入课程的原价，折后价，视频的有效期，即订单的有效期，对优惠券进行处理，把该用户已使用的优惠券状态改为已使用；：修改贝里，该账户的贝里减去使用的贝里，并更新贝里消费记录表，显示账户的消费金额，账户的余额等。</p><p><strong>最后</strong></p><pre><code>if pay_type==1:        生成支付宝链接（自动生成自己的订单号），并返回给前端Vue# ##################################### 支付宝的回调 ######################################def callback(request,*args,**kwargs):models.Order.objects.filter(订单号).update(status=0)</code></pre><h2 id="项目源码"><a href="#项目源码" class="headerlink" title="项目源码"></a>项目源码</h2><p><a href="https://github.com/hyyc554/mycity" target="_blank" rel="noopener">我的GitHub</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在线教育平台——购物车功能实现</title>
      <link href="/2018/11/07/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E2%80%94%E2%80%94%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/07/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E5%B9%B3%E5%8F%B0%E2%80%94%E2%80%94%E8%B4%AD%E7%89%A9%E8%BD%A6%E5%8A%9F%E8%83%BD%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>依赖软件：Django\redis</p><p>测试工具：postman<br><a id="more"></a></p><h2 id="redis中购物车数据存储结构"><a href="#redis中购物车数据存储结构" class="headerlink" title="redis中购物车数据存储结构"></a>redis中购物车数据存储结构</h2><ul><li>redis最外层的key的实际意义是”luffy_shopping_car_userid_courseid”，也就是最后的两个数字分别代表的用户ID与需要加入购物车的课程ID</li><li>每个单独的课程中，包含课程名称，课程图片，课程价格策略，当前选中策略。</li></ul><pre class="line-numbers language-json"><code class="language-json">redis<span class="token operator">:</span> <span class="token punctuation">{</span>    <span class="token property">"luffy_shopping_car_1_1"</span><span class="token operator">:</span>    <span class="token punctuation">{</span>        <span class="token property">"title"</span><span class="token operator">:</span> <span class="token string">"Linux基础"</span><span class="token punctuation">,</span>        <span class="token property">"img"</span><span class="token operator">:</span> <span class="token string">"2.png"</span><span class="token punctuation">,</span>        <span class="token property">"policy"</span><span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token property">"2"</span><span class="token operator">:</span> <span class="token punctuation">{</span>                <span class="token property">"period"</span><span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>                <span class="token property">"period_display"</span><span class="token operator">:</span> <span class="token string">"2个月"</span><span class="token punctuation">,</span>                <span class="token property">"price"</span><span class="token operator">:</span> <span class="token number">1500</span>            <span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>        <span class="token property">"default_policy"</span><span class="token operator">:</span> <span class="token string">"2"</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    <span class="token property">"luffy_shopping_car_1_3"</span><span class="token operator">:</span> <span class="token punctuation">{</span>        ...    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="实现思路"><a href="#实现思路" class="headerlink" title="实现思路"></a>实现思路</h2><p><img src="E:\chromedown\条件结构流程图.png" alt="条件结构流程图"></p><h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><p>在setting中设置redis配置：</p><pre><code>CACHES = {    &quot;default&quot;: {        &quot;BACKEND&quot;: &quot;django_redis.cache.RedisCache&quot;,        &quot;LOCATION&quot;: &quot;redis://yourip:6379&quot;,        &quot;OPTIONS&quot;: {            &quot;CLIENT_CLASS&quot;: &quot;django_redis.client.DefaultClient&quot;,            &quot;CONNECTION_POOL_KWARGS&quot;: {&quot;max_connections&quot;: 100},            &quot;PASSWORD&quot;: &quot;yourpassword&quot;,        }    }}</code></pre><p>路由设置urls.py:</p><pre class="line-numbers language-python"><code class="language-python">url<span class="token punctuation">(</span>r<span class="token string">'^shopping_cart/$'</span><span class="token punctuation">,</span> shopping_cart<span class="token punctuation">.</span>ShoppingCart<span class="token punctuation">.</span>as_view<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>基于restframework的视图：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true">#!/usr/bin/env python</span><span class="token comment" spellcheck="true"># -*- coding: utf-8 -*-</span><span class="token triple-quoted-string string">"""@Author    : Young@Email     : hyc554@outlook.com@site      : http://www.cnblogs.com/huang-yc/@File      : shopping_cart.py@version   : 1.0@Time      : 2018/11/4 20:51Description about this file: """</span><span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>views <span class="token keyword">import</span> APIView<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>response <span class="token keyword">import</span> Response<span class="token keyword">from</span> rest_framework<span class="token punctuation">.</span>viewsets <span class="token keyword">import</span> GenericViewSet<span class="token punctuation">,</span> ViewSetMixin<span class="token keyword">from</span> django_redis <span class="token keyword">import</span> get_redis_connection<span class="token keyword">from</span> utils<span class="token punctuation">.</span>response_dict <span class="token keyword">import</span> BaseResponse<span class="token keyword">from</span> api<span class="token punctuation">.</span>views<span class="token punctuation">.</span>auth <span class="token keyword">import</span> YcAuth<span class="token keyword">from</span> api <span class="token keyword">import</span> models<span class="token keyword">from</span> utils<span class="token punctuation">.</span>error <span class="token keyword">import</span> PricePolicyInvalid<span class="token keyword">from</span> django<span class="token punctuation">.</span>core<span class="token punctuation">.</span>exceptions <span class="token keyword">import</span> ObjectDoesNotExist<span class="token keyword">from</span> django<span class="token punctuation">.</span>conf <span class="token keyword">import</span> settings<span class="token keyword">import</span> json<span class="token keyword">class</span> <span class="token class-name">ShoppingCart</span><span class="token punctuation">(</span>APIView<span class="token punctuation">)</span><span class="token punctuation">:</span>    authentication_classes <span class="token operator">=</span> <span class="token punctuation">[</span>YcAuth<span class="token punctuation">]</span>    conn <span class="token operator">=</span> get_redis_connection<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">post</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        向购物车中添加商品        :param request:        :param args:        :param kwargs:        :return:        """</span>        ret <span class="token operator">=</span> BaseResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 在这里获得用户的课程ID与价格策略ID</span>            course_id <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            policy_id <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'policy_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 2. 获取专题课信息</span>            course <span class="token operator">=</span> models<span class="token punctuation">.</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>get<span class="token punctuation">(</span>id<span class="token operator">=</span>course_id<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 3.获取课程相关的所有价格策略</span>            price_policy_list <span class="token operator">=</span> course<span class="token punctuation">.</span>price_policy<span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span>            price_policy_dict <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token punctuation">}</span>            <span class="token keyword">for</span> item <span class="token keyword">in</span> price_policy_list<span class="token punctuation">:</span>                price_policy_dict<span class="token punctuation">[</span>item<span class="token punctuation">.</span>id<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"period"</span><span class="token punctuation">:</span> item<span class="token punctuation">.</span>valid_period<span class="token punctuation">,</span>                    <span class="token string">"period_display"</span><span class="token punctuation">:</span> item<span class="token punctuation">.</span>get_valid_period_display<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"price"</span><span class="token punctuation">:</span> item<span class="token punctuation">.</span>price                <span class="token punctuation">}</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>price_policy_dict<span class="token punctuation">)</span>            <span class="token keyword">if</span> policy_id <span class="token operator">not</span> <span class="token keyword">in</span> price_policy_dict<span class="token punctuation">:</span>                <span class="token keyword">raise</span> PricePolicyInvalid<span class="token punctuation">(</span><span class="token string">'价格策略不合法'</span><span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 5. 将购物信息添加到redis中</span>            <span class="token comment" spellcheck="true"># self.conn</span>            <span class="token comment" spellcheck="true"># car_key = "luffy_shopping_car_%s_%s"</span>            car_key <span class="token operator">=</span> settings<span class="token punctuation">.</span>SHOPPING_CART_KEY <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> course_id<span class="token punctuation">,</span><span class="token punctuation">)</span>            car_dict <span class="token operator">=</span> <span class="token punctuation">{</span>                <span class="token string">'title'</span><span class="token punctuation">:</span> course<span class="token punctuation">.</span>name<span class="token punctuation">,</span>                <span class="token string">'img'</span><span class="token punctuation">:</span> course<span class="token punctuation">.</span>course_img<span class="token punctuation">,</span>                <span class="token string">'default_policy'</span><span class="token punctuation">:</span> policy_id<span class="token punctuation">,</span>                <span class="token string">'policy'</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>dumps<span class="token punctuation">(</span>price_policy_dict<span class="token punctuation">)</span>            <span class="token punctuation">}</span>            <span class="token comment" spellcheck="true"># conn = get_redis_connection("default")</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hmset<span class="token punctuation">(</span>car_key<span class="token punctuation">,</span> car_dict<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'添加成功'</span>        <span class="token keyword">except</span> PricePolicyInvalid <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">2001</span>            ret<span class="token punctuation">.</span>error <span class="token operator">=</span> e<span class="token punctuation">.</span>msg        <span class="token keyword">except</span> ObjectDoesNotExist <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token number">2002</span>            ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">'课程不存在'</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1001</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">'获取购物车数据失败'</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">delete</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> BaseResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            course_id_list <span class="token operator">=</span> request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'courseids'</span><span class="token punctuation">)</span>            key_list <span class="token operator">=</span> <span class="token punctuation">[</span>settings<span class="token punctuation">.</span>SHOPPING_CART_KEY <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> course_id<span class="token punctuation">,</span><span class="token punctuation">)</span> <span class="token keyword">for</span> course_id <span class="token keyword">in</span> course_id_list<span class="token punctuation">]</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>delete<span class="token punctuation">(</span><span class="token operator">*</span>key_list<span class="token punctuation">)</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1002</span>            ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">"删除失败"</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">patch</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        ret <span class="token operator">=</span> BaseResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            course_id <span class="token operator">=</span> int<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'course_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            policy_id <span class="token operator">=</span> str<span class="token punctuation">(</span>request<span class="token punctuation">.</span>data<span class="token punctuation">.</span>get<span class="token punctuation">(</span><span class="token string">'policy_id'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            key <span class="token operator">=</span> settings<span class="token punctuation">.</span>SHOPPING_CART_KEY <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> course_id<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token operator">not</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>exists<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1002</span>                ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">"购物车中不存在此课程"</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 3. redis中获取所有的价格策略</span>            <span class="token comment" spellcheck="true"># 请注意这里对redis里的数据进行读取的操作</span>            policy_dict <span class="token operator">=</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>str<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'policy'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> encoding<span class="token operator">=</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> policy_id <span class="token operator">not</span> <span class="token keyword">in</span> policy_dict<span class="token punctuation">:</span>                ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1003</span>                ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">"价格策略不合法"</span>                <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>            self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hset<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'default_policy'</span><span class="token punctuation">,</span> policy_id<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> <span class="token string">"修改成功"</span>        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">2003</span>            ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">'修改数据失败'</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span>    <span class="token keyword">def</span> <span class="token function">get</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> <span class="token operator">*</span>args<span class="token punctuation">,</span> <span class="token operator">**</span>kwargs<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        查看购物车中所有的商品        :param request:        :param args:        :param kwargs:        :return:        """</span>        ret <span class="token operator">=</span> BaseResponse<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            key_match <span class="token operator">=</span> settings<span class="token punctuation">.</span>SHOPPING_CART_KEY <span class="token operator">%</span> <span class="token punctuation">(</span>request<span class="token punctuation">.</span>auth<span class="token punctuation">.</span>user_id<span class="token punctuation">,</span> <span class="token string">"*"</span><span class="token punctuation">)</span>            course_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> key <span class="token keyword">in</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>scan_iter<span class="token punctuation">(</span>key_match<span class="token punctuation">,</span> count<span class="token operator">=</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                info <span class="token operator">=</span> <span class="token punctuation">{</span>                    <span class="token string">"title"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'title'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"img"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'img'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"policy"</span><span class="token punctuation">:</span> json<span class="token punctuation">.</span>loads<span class="token punctuation">(</span>self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'policy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span>                    <span class="token string">"default_policy"</span><span class="token punctuation">:</span> self<span class="token punctuation">.</span>conn<span class="token punctuation">.</span>hget<span class="token punctuation">(</span>key<span class="token punctuation">,</span> <span class="token string">'default_policy'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'utf-8'</span><span class="token punctuation">)</span>                <span class="token punctuation">}</span>                course_list<span class="token punctuation">.</span>append<span class="token punctuation">(</span>info<span class="token punctuation">)</span>            ret<span class="token punctuation">.</span>data <span class="token operator">=</span> course_list        <span class="token keyword">except</span> Exception <span class="token keyword">as</span> e<span class="token punctuation">:</span>            ret<span class="token punctuation">.</span>code <span class="token operator">=</span> <span class="token number">1002</span>            ret<span class="token punctuation">.</span>error <span class="token operator">=</span> <span class="token string">"获取失败"</span>        <span class="token keyword">return</span> Response<span class="token punctuation">(</span>ret<span class="token punctuation">.</span>dict<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>在线教育——结算中心的实现</title>
      <link href="/2018/11/07/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E2%80%94%E2%80%94%E7%BB%93%E7%AE%97%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/11/07/%E5%9C%A8%E7%BA%BF%E6%95%99%E8%82%B2%E2%80%94%E2%80%94%E7%BB%93%E7%AE%97%E4%B8%AD%E5%BF%83%E7%9A%84%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>依赖软件：Django、redis</p><a id="more"></a><p>redis数据库中的数据结构：</p><ul><li>以字典形式进行存储</li><li>“shopping_car_用户ID_课程ID”作为标识key</li><li>“payment_global_coupon_用户ID”用来保存用户所持有的全场券</li></ul><pre class="line-numbers language-json"><code class="language-json">redis = <span class="token punctuation">{</span>    payment_1_2<span class="token operator">:</span><span class="token punctuation">{</span>        course_id<span class="token operator">:</span><span class="token number">2</span><span class="token punctuation">,</span>        'title'<span class="token operator">:</span> 'CRM客户关系管理系统实战开发-专题'<span class="token punctuation">,</span>         'img'<span class="token operator">:</span> 'CRM.jpg'<span class="token punctuation">,</span> 'policy_id'<span class="token operator">:</span> '<span class="token number">4</span>'<span class="token punctuation">,</span>         'coupon'<span class="token operator">:</span> <span class="token punctuation">{</span><span class="token punctuation">}</span><span class="token punctuation">,</span>         'default_coupon'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         'period'<span class="token operator">:</span> <span class="token number">210</span><span class="token punctuation">,</span> 'period_display'<span class="token operator">:</span> '<span class="token number">12</span>个月'<span class="token punctuation">,</span> 'price'<span class="token operator">:</span> <span class="token number">122.0</span><span class="token punctuation">}</span><span class="token punctuation">,</span>     <span class="token punctuation">}</span><span class="token punctuation">,</span>    payment_1_1<span class="token operator">:</span><span class="token punctuation">{</span>        course_id<span class="token operator">:</span><span class="token number">1</span><span class="token punctuation">,</span>        'title'<span class="token operator">:</span> '爬虫开发-专题'<span class="token punctuation">,</span>         'img'<span class="token operator">:</span> '爬虫开发-专题.jpg'<span class="token punctuation">,</span>         'policy_id'<span class="token operator">:</span> '<span class="token number">2</span>'<span class="token punctuation">,</span>         'coupon'<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token number">4</span><span class="token operator">:</span> <span class="token punctuation">{</span>'coupon_type'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span> 'coupon_display'<span class="token operator">:</span> '立减券'<span class="token punctuation">,</span> 'money_equivalent_value'<span class="token operator">:</span> <span class="token number">40</span><span class="token punctuation">}</span><span class="token punctuation">,</span>             <span class="token number">6</span><span class="token operator">:</span> <span class="token punctuation">{</span>'coupon_type'<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 'coupon_display'<span class="token operator">:</span> '满减券'<span class="token punctuation">,</span> 'money_equivalent_value'<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span> 'minimum_consume'<span class="token operator">:</span> <span class="token number">100</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         'default_coupon'<span class="token operator">:</span> <span class="token number">0</span><span class="token punctuation">,</span>         'period'<span class="token operator">:</span> <span class="token number">60</span><span class="token punctuation">,</span>         'period_display'<span class="token operator">:</span> '<span class="token number">2</span>个月'<span class="token punctuation">,</span>         'price'<span class="token operator">:</span> <span class="token number">599.0</span><span class="token punctuation">}</span>    <span class="token punctuation">}</span><span class="token punctuation">,</span>    payment_global_coupon_1<span class="token operator">:</span><span class="token punctuation">{</span>        'coupon'<span class="token operator">:</span> <span class="token punctuation">{</span>            <span class="token number">2</span><span class="token operator">:</span> <span class="token punctuation">{</span>'coupon_type'<span class="token operator">:</span> <span class="token number">1</span><span class="token punctuation">,</span> 'coupon_display'<span class="token operator">:</span> '满减券'<span class="token punctuation">,</span> 'money_equivalent_value'<span class="token operator">:</span> <span class="token number">200</span><span class="token punctuation">,</span> 'minimum_consume'<span class="token operator">:</span> <span class="token number">500</span><span class="token punctuation">}</span>        <span class="token punctuation">}</span><span class="token punctuation">,</span>         'default_coupon'<span class="token operator">:</span> <span class="token number">0</span>    <span class="token punctuation">}</span><span class="token punctuation">}</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> Django </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>我的面试笔记</title>
      <link href="/2018/11/02/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/"/>
      <url>/2018/11/02/%E6%88%91%E7%9A%84%E9%9D%A2%E8%AF%95%E7%AC%94%E8%AE%B0/</url>
      
        <content type="html"><![CDATA[<p>每天写一点，直到找到工作</p><a id="more"></a><h1 id="python基础"><a href="#python基础" class="headerlink" title="python基础"></a>python基础</h1><ol><li>为什么学习Python？</li></ol><h1 id="一、WEB框架"><a href="#一、WEB框架" class="headerlink" title="一、WEB框架"></a>一、WEB框架</h1><h2 id="1-请简述django请求生命周期"><a href="#1-请简述django请求生命周期" class="headerlink" title="1. 请简述django请求生命周期"></a>1. 请简述django请求生命周期</h2><ul><li>当用户在浏览器中输入url时,浏览器会生成请求头和请求体发给服务端</li><li>服务端的wsgiref模块接收用户请求并将请求进行初次封装</li><li>将请求交给Django的中间件</li><li>通过中间件之后将请求交给url,根据浏览器发送的不同url去匹配不同的视图函数</li><li>视图函数根据业务逻辑调用数据库获取相应的数据，然或根据模板渲染页面</li><li>视图函数将响应的页面依次通过中间件</li><li>到达wsgi，封装数据后反馈给客户端<br><img src="https://i.loli.net/2018/11/03/5bdc849e1d6d5.png" alt="wsgi.png"></li></ul><h2 id="2-什么wsgi"><a href="#2-什么wsgi" class="headerlink" title="2. 什么wsgi"></a>2. 什么wsgi</h2><p><strong>Web服务器网关接口</strong>（<strong>Python Web Server Gateway Interface</strong>，缩写为WSGI）是为<a href="https://zh.wikipedia.org/wiki/Python" target="_blank" rel="noopener">Python</a>语言定义的<a href="https://zh.wikipedia.org/wiki/%E7%B6%B2%E9%A0%81%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="noopener">Web服务器</a>和<a href="https://zh.wikipedia.org/wiki/%E7%BD%91%E7%BB%9C%E5%BA%94%E7%94%A8%E7%A8%8B%E5%BA%8F" target="_blank" rel="noopener">Web应用程序</a>或<a href="https://zh.wikipedia.org/wiki/Web%E5%BA%94%E7%94%A8%E6%A1%86%E6%9E%B6" target="_blank" rel="noopener">框架</a>之间的一种简单而通用的<a href="https://zh.wikipedia.org/wiki/%E4%BB%8B%E9%9D%A2_(%E7%A8%8B%E5%BC%8F%E8%A8%AD%E8%A8%88" target="_blank" rel="noopener">接口</a>)。自从WSGI被开发出来以后，许多其它语言中也出现了类似接口。</p><p>WSGI区分为两个部分：一为“<a href="https://zh.wikipedia.org/wiki/%E4%BC%BA%E6%9C%8D%E5%99%A8" target="_blank" rel="noopener">服务器</a>”或“网关”，另一为“应用程序”或“应用框架”。在处理一个WSGI请求时，服务器会为应用程序提供环境信息及一个回调函数（Callback Function）。当应用程序完成处理请求后，透过前述的回调函数，将结果回传给服务器。</p><p>所谓的 <em>WSGI 中间件</em>同时实现了API的两方，因此可以在WSGI服务器和WSGI应用之间起调解作用：从Web服务器的角度来说，中间件扮演应用程序，而从应用程序的角度来说，中间件扮演服务器。“中间件”组件可以执行以下功能：</p><ul><li>重写<a href="https://zh.wikipedia.org/wiki/%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F" target="_blank" rel="noopener">环境变量</a>后，根据目标<a href="https://zh.wikipedia.org/wiki/%E7%BB%9F%E4%B8%80%E8%B5%84%E6%BA%90%E5%AE%9A%E4%BD%8D%E7%AC%A6" target="_blank" rel="noopener">URL</a>，将请求消息路由到不同的应用对象。</li><li>允许在一个<a href="https://zh.wikipedia.org/wiki/%E8%A1%8C%E7%A8%8B" target="_blank" rel="noopener">进程</a>中同时运行多个应用程序或应用框架。</li><li><a href="https://zh.wikipedia.org/wiki/%E8%B4%9F%E8%BD%BD%E5%9D%87%E8%A1%A1" target="_blank" rel="noopener">负载均衡</a>和远程处理，通过在<a href="https://zh.wikipedia.org/wiki/%E8%AE%A1%E7%AE%97%E6%9C%BA%E7%BD%91%E7%BB%9C" target="_blank" rel="noopener">网络</a>上转发请求和响应消息。</li><li>进行内容后处理，例如应用<a href="https://zh.wikipedia.org/wiki/XSLT" target="_blank" rel="noopener">XSLT</a>样式表。</li></ul><p><strong>实现该协议的模块：</strong></p><ul><li>wsgiref</li><li>werkzurg</li><li>uwsig</li></ul><h2 id="3-视图的玩法"><a href="#3-视图的玩法" class="headerlink" title="3.视图的玩法"></a>3.视图的玩法</h2><p>FBV——url —— 函数</p><p>CBV——url —— view</p><h2 id="4-RESTful规范"><a href="#4-RESTful规范" class="headerlink" title="4.RESTful规范"></a>4.RESTful规范</h2><blockquote><p>什么是RESTful架构：</p><p>　　（1）每一个URI代表一种资源；</p><p>　　（2）客户端和服务器之间，传递这种资源的某种表现层；</p><p>　　（3）客户端通过四个HTTP动词，对服务器端资源进行操作，实现”表现层状态转化”。</p></blockquote><h2 id="5-django-rest-framework框架"><a href="#5-django-rest-framework框架" class="headerlink" title="5.django rest framework框架"></a>5.django rest framework框架</h2><p><strong>1. 路由</strong></p><ul><li>可以通过as_view传参数，根据请求方式不同执行相应的方法</li><li>可以在url中设置一个结尾，类似于： .json </li></ul><p><strong>2. 视图</strong></p><ul><li>帮助开发者提供了一些类，并在类中提供了多个方法以供我们使用</li></ul><p><strong>3. 版本</strong></p><ul><li>在url中设置version参数，用户请求时候传入参数。在request.version中获取版本，根据版本不同做不同处理</li></ul><p><strong>4. 认证</strong><br>写一个类并注册到认证类，在类的的authticate方法中编写认证逻辑。</p><ul><li>认证成功（user,auth）</li><li>raise AuthticateFaild(….)</li><li>None </li></ul><p><strong>5. 权限</strong><br>写一个类并注册到权限类，在类的的has_permission方法中编写认证逻辑。</p><ul><li>True </li><li>False </li></ul><p><strong>6. 频率限制</strong><br>写一个类并注册到频率类，在类的的 allow_request/wait 方法中编写认证逻辑。</p><pre class="line-numbers language-python"><code class="language-python">    allow_request         <span class="token boolean">True</span>          <span class="token boolean">False</span>  如果返回<span class="token boolean">False</span>，那么就要执行wait<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><strong>7. 解析器</strong></p><ul><li><p>根据ContentType请求头，选择不同解析器对 请求体中的数据进行解析。</p></li><li><p>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:url-formendo…. \r\n\r\nuser=alex&amp;age=123</p></li><li>POST /index/ http1.1.\r\nhost:11.11.11.11\r\nContent-Type:application/json\r\n\r\n{….}</li></ul><p><strong>8. 分页</strong> </p><ul><li>对从数据库中获取到的数据进行分页处理: SQL -&gt; limit offset <ul><li>根据页码：<a href="http://www.luffycity.com/api/v1/student/?page=1&amp;size=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=1&amp;size=10</a></li><li>根据索引：<a href="http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?offset=60&amp;limit=10</a></li><li>根据加密：<a href="http://www.luffycity.com/api/v1/student/?page=erd8" target="_blank" rel="noopener">http://www.luffycity.com/api/v1/student/?page=erd8</a></li></ul></li></ul><hr><h2 id="6-页码越大速度越慢，为什么以及如何解决？"><a href="#6-页码越大速度越慢，为什么以及如何解决？" class="headerlink" title="6. 页码越大速度越慢，为什么以及如何解决？"></a>6. 页码越大速度越慢，为什么以及如何解决？</h2><p>原因：页码越大向后需要扫描的行数越多，因为每次都是从0开始扫描。<br>解决：</p><pre><code>- 限制显示的页数- 记录当前页数据ID最大值和最小值，再次分页时，根据ID现行筛选，然后再分页。</code></pre><h2 id="7-三次握手与四次挥手"><a href="#7-三次握手与四次挥手" class="headerlink" title="7. 三次握手与四次挥手"></a>7. 三次握手与四次挥手</h2><p>答案详解：<a href="https://www.cnblogs.com/huang-yc/p/9859216.html" target="_blank" rel="noopener">TCP握手与挥手</a></p><h2 id="8-简述什么是FBV和CBV"><a href="#8-简述什么是FBV和CBV" class="headerlink" title="8.简述什么是FBV和CBV"></a>8.简述什么是FBV和CBV</h2><p>FBV（function base views） ——在视图里使用函数处理请求。<br>CBV（class base views） ——在视图里使用类处理请求。</p><p>其实没有本质的区别</p><p>Python是一个面向对象的编程语言，如果只用函数来开发，有很多面向对象的优点就错失了（继承、封装、多态）。所以Django在后来加入了Class-Based-View。可以让我们用类写View。这样做的优点主要下面两种：</p><p>提高了代码的复用性，可以使用面向对象的技术，比如Mixin（多继承）<br>可以用不同的函数针对不同的HTTP方法处理，而不是通过很多if判断，提高代码可读性</p><h2 id="9-谈一谈你对ORM的理解"><a href="#9-谈一谈你对ORM的理解" class="headerlink" title="9.谈一谈你对ORM的理解"></a>9.谈一谈你对ORM的理解</h2><pre><code>ORM是“对象-关系-映射”的简称。MVC或者MVC框架中包括一个重要的部分，就是ORM，它实现了数据模型与数据库的解耦，即数据模型的设计不需要依赖于特定的数据库，通过简单的配置就可以轻松更换数据库，这极大的减轻了开发人员的工作量，不需要面对因数据库变更而导致的无效劳动</code></pre><h1 id="二、-项目相关："><a href="#二、-项目相关：" class="headerlink" title="二、 项目相关："></a>二、 项目相关：</h1><h2 id="1-请讲一下你做的在线商城的表结构"><a href="#1-请讲一下你做的在线商城的表结构" class="headerlink" title="1. 请讲一下你做的在线商城的表结构"></a>1. 请讲一下你做的在线商城的表结构</h2><ul><li>课程（13表）<ul><li>课程大类</li><li>课程子类</li><li>学位课<ul><li>讲师</li><li>奖学金</li></ul></li><li>专题课（学位课模块表）</li><li>价格策略(contenttype)</li><li>课程详细(o2o -&gt; 水平分表)</li><li>常见问题</li><li>课程大纲</li><li>章节</li><li>课时</li><li>作业 </li></ul></li><li>深科技（4+2）<ul><li>用户表</li><li>用户token</li><li>文章来源</li><li>文章表</li><li>通用评论表</li><li>通用收藏表</li></ul></li></ul><h2 id="2-支付宝功能"><a href="#2-支付宝功能" class="headerlink" title="2. 支付宝功能"></a>2. 支付宝功能</h2><ul><li>加密方式：rsa</li><li>公钥私钥：<ul><li>商户私钥<ul><li>支付宝公钥</li></ul></li></ul></li><li>支付成功后，断电宕机<ul><li>成功：return HttpResponse(‘success’)</li></ul></li></ul><h2 id="3-数据库页数越大速度越慢，如何解决"><a href="#3-数据库页数越大速度越慢，如何解决" class="headerlink" title="3. 数据库页数越大速度越慢，如何解决"></a>3. 数据库页数越大速度越慢，如何解决</h2><ul><li>限制页数</li><li>记录当前页最大ID、最小ID</li><li>错误答案：<ul><li>扫描索引表</li><li>再去数据库表中获取数据</li></ul></li></ul><h2 id="4-redis是什么？"><a href="#4-redis是什么？" class="headerlink" title="4. redis是什么？"></a>4. redis是什么？</h2><p>用于操作内存的软件。</p><ul><li>可以做持久化：<ul><li>AOF</li><li>RDB</li></ul></li><li><p>相当于是大字典</p></li><li><p>单进程单线程</p></li></ul><h1 id="三、-Django"><a href="#三、-Django" class="headerlink" title="三、 Django"></a>三、 Django</h1><h2 id="1-讲述一些ORM操作"><a href="#1-讲述一些ORM操作" class="headerlink" title="1. 讲述一些ORM操作"></a>1. 讲述一些ORM操作</h2><ul><li><p>select_related,连表操作，相当于主动做join</p></li><li><p>prefeth_related,多次单表操作，先查询想要的数据，然后构造条件,如：id=[1,2,3]，再次查询其他表根据id做条件。</p></li><li><p>only</p></li><li><p>defer</p></li><li><p>F </p></li><li><p>Q </p></li><li><p>通过ORM写偏原生SQL：</p></li></ul><ol><li>extra</li></ol><pre class="line-numbers language-python"><code class="language-python">Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'new_id'</span><span class="token punctuation">:</span> <span class="token string">"select col from sometable where othercol > %s"</span><span class="token punctuation">}</span><span class="token punctuation">,</span> select_params<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'headline=%s'</span><span class="token punctuation">]</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'Lennon'</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>where<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">"foo='a' OR bar = 'a'"</span><span class="token punctuation">,</span> <span class="token string">"baz = 'a'"</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Entry<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>extra<span class="token punctuation">(</span>select<span class="token operator">=</span><span class="token punctuation">{</span><span class="token string">'new_id'</span><span class="token punctuation">:</span> <span class="token string">"select id from tb where id > %s"</span><span class="token punctuation">}</span><span class="token punctuation">,</span>select_params<span class="token operator">=</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token punctuation">,</span> order_by<span class="token operator">=</span><span class="token punctuation">[</span><span class="token string">'-nid'</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="2"><li>raw</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 执行原生SQL</span>models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'select * from userinfo'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 如果SQL是其他表时，必须将名字设置为当前UserInfo对象的主键列名</span>models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'select id as nid from 其他表'</span><span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 为原生SQL设置参数</span>models<span class="token punctuation">.</span>UserInfo<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'select id as nid from userinfo where nid>%s'</span><span class="token punctuation">,</span> params<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">12</span><span class="token punctuation">,</span><span class="token punctuation">]</span><span class="token punctuation">)</span>name_map <span class="token operator">=</span> <span class="token punctuation">{</span><span class="token string">'first'</span><span class="token punctuation">:</span> <span class="token string">'first_name'</span><span class="token punctuation">,</span> <span class="token string">'last'</span><span class="token punctuation">:</span> <span class="token string">'last_name'</span><span class="token punctuation">,</span> <span class="token string">'bd'</span><span class="token punctuation">:</span> <span class="token string">'birth_date'</span><span class="token punctuation">,</span> <span class="token string">'pk'</span><span class="token punctuation">:</span> <span class="token string">'id'</span><span class="token punctuation">}</span>Person<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>raw<span class="token punctuation">(</span><span class="token string">'SELECT * FROM some_other_table'</span><span class="token punctuation">,</span> translations<span class="token operator">=</span>name_map<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><ol start="3"><li>原生SQL</li></ol><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">from</span> django<span class="token punctuation">.</span>db <span class="token keyword">import</span> connection<span class="token punctuation">,</span> connectionscursor <span class="token operator">=</span> connection<span class="token punctuation">.</span>cursor<span class="token punctuation">(</span><span class="token punctuation">)</span>  <span class="token comment" spellcheck="true"># cursor = connections['default'].cursor()</span>cursor<span class="token punctuation">.</span>execute<span class="token punctuation">(</span><span class="token triple-quoted-string string">"""SELECT * from auth_user where id = %s"""</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>row <span class="token operator">=</span> cursor<span class="token punctuation">.</span>fetchone<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token comment" spellcheck="true"># fetchall()/fetchmany(..)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><ol start="5"><li>选择数据库</li></ol><pre class="line-numbers language-python"><code class="language-python">queryset <span class="token operator">=</span> models<span class="token punctuation">.</span>Course<span class="token punctuation">.</span>objects<span class="token punctuation">.</span>using<span class="token punctuation">(</span><span class="token string">'default'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>all<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h1 id="？、其他"><a href="#？、其他" class="headerlink" title="？、其他"></a>？、其他</h1><h2 id="1-git的作用是什么"><a href="#1-git的作用是什么" class="headerlink" title="1. git的作用是什么"></a>1. git的作用是什么</h2><p>进行版本控制，实现协同开发</p><h2 id="2-git命令与意义"><a href="#2-git命令与意义" class="headerlink" title="2. git命令与意义"></a>2. git命令与意义</h2><ul><li>git init </li><li>git add </li><li>git status </li><li>git commit </li><li>git log </li><li>git reflog </li><li>git reset –hard</li><li>git checkout </li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python基础算法实现</title>
      <link href="/2018/10/29/python%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/"/>
      <url>/2018/10/29/python%E5%9F%BA%E7%A1%80%E7%AE%97%E6%B3%95%E5%AE%9E%E7%8E%B0/</url>
      
        <content type="html"><![CDATA[<p>本篇主要实现九(八)大排序算法，分别是冒泡排序，插入排序，选择排序，希尔排序，归并排序，快速排序，堆排序,计数排序。希望大家回顾知识的时候也能从我的这篇文章得到帮助。</p><a id="more"></a><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><p>十种常见排序算法可以分为两大类：</p><ol><li>非线性时间比较类排序：通过比较来决定元素间的相对次序，由于其时间复杂度不能突破O(nlogn)，因此称为非线性时间比较类排序。</li><li>线性时间非比较类排序：不通过比较来决定元素间的相对次序，它可以突破基于比较排序的时间下界，以线性时间运行，因此称为线性时间非比较类排序。</li></ol><p><strong>基础定义</strong></p><ul><li>稳定：如果a原本在b前面，而a=b，排序之后a仍然在b的前面。</li><li>不稳定：如果a原本在b的前面，而a=b，排序之后 a 可能会出现在 b 的后面。</li><li>时间复杂度：对排序数据的总的操作次数。反映当n变化时，操作次数呈现什么规律。</li><li>空间复杂度：是指算法在计算机内执行时所需存储空间的度量，它也是数据规模n的函数。</li></ul><p><strong>图示</strong><br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014194820700-1435466222.png" alt=""></p><p><strong>为了防止误导读者，本文所有概念性内容均截取自对应Wiki。</strong></p><h2 id="冒泡排序"><a href="#冒泡排序" class="headerlink" title="冒泡排序"></a>冒泡排序</h2><p><strong>原理</strong></p><p>冒泡排序(Bubble Sort)是一种简单的排序算法。它重复地走访过要排序的数列，一次比较两个元素，如果他们的顺序错误就把他们交换过来。走访数列的工作是重复地进行直到没有再需要交换，也就是说该数列已经排序完成。这个算法的名字由来是因为越小的元素会经由交换慢慢“浮”到数列的顶端。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014185452443-1800879816.gif" alt=""></p><p><strong>步骤</strong></p><p>冒泡排序算法的运作如下：</p><ol><li>比较相邻的元素。如果第一个比第二个大，就交换他们两个。</li><li>对每一对相邻元素作同样的工作，从开始第一对到结尾的最后一对。这步做完后，最后的元素会是最大的数。</li><li>针对所有的元素重复以上的步骤，除了最后一个。</li><li>持续每次对越来越少的元素重复上面的步骤，直到没有任何一对数字需要比较。</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 第一级遍历</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 第二级遍历</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 交换两者数据，这里没用temp是因为python 特性元组。</span>                list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>这种排序其实还可以稍微优化一下，添加一个标记，在排序已完成时，停止排序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">bubble_sort_flag</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> range<span class="token punctuation">(</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 标志位</span>        flag <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> length <span class="token operator">-</span> index<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">></span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span>                flag <span class="token operator">=</span> <span class="token boolean">False</span>        <span class="token keyword">if</span> flag<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 没有发生交换，直接返回list</span>            <span class="token keyword">return</span> list    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="选择排序"><a href="#选择排序" class="headerlink" title="选择排序"></a>选择排序</h2><p><strong>原理</strong></p><p>选择排序（Selection sort）是一种简单直观的排序算法。它的工作原理大致是将后面的元素最小元素一个个取出然后按顺序放置。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014185807987-1057233489.gif" alt=""></p><p><strong>步骤</strong></p><ol><li>在未排序序列中找到最小（大）元素，存放到排序序列的起始位置，</li><li>再从剩余未排序元素中继续寻找最小（大）元素，然后放到已排序序列的末尾。</li><li>重复第二步，直到所有元素均排序完毕。</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">selection_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n<span class="token operator">=</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range <span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        min <span class="token operator">=</span> i        <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token operator">&lt;</span>list<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">:</span>                min<span class="token operator">=</span>j                list<span class="token punctuation">[</span>min<span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">=</span>list<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span>list<span class="token punctuation">[</span>min<span class="token punctuation">]</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="插入排序"><a href="#插入排序" class="headerlink" title="插入排序"></a>插入排序</h2><p><strong>原理</strong></p><p>插入排序（Insertion Sort）是一种简单直观的排序算法。它的工作原理是通过构建有序序列，对于未排序数据，在已排序序列中从后向前扫描，找到相应位置并插入。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190107085-1652380825.gif" alt=""></p><p><strong>步骤</strong></p><ol><li>从第一个元素开始，该元素可以认为已经被排序</li><li>取出下一个元素，在已经排序的元素序列中从后向前扫描</li><li>如果该元素（已排序）大于新元素，将该元素移到下一位置</li><li>重复步骤3，直到找到已排序的元素小于或者等于新元素的位置</li><li>将新元素插入到该位置后</li><li>重复步骤2~5</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">insert_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 后一个元素和前一个元素比较</span>        <span class="token comment" spellcheck="true"># 如果比前一个小</span>        <span class="token keyword">if</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;</span> list<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将这个数取出</span>            temp <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token comment" spellcheck="true"># 保存下标</span>            index <span class="token operator">=</span> i            <span class="token comment" spellcheck="true"># 从后往前依次比较每个元素</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> range<span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token comment" spellcheck="true"># 和比取出元素大的元素交换</span>                <span class="token keyword">if</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>                    list<span class="token punctuation">[</span>j <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j<span class="token punctuation">]</span>                    index <span class="token operator">=</span> j                <span class="token keyword">else</span><span class="token punctuation">:</span>                    <span class="token keyword">break</span>            <span class="token comment" spellcheck="true"># 插入元素</span>            list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> temp    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="希尔排序"><a href="#希尔排序" class="headerlink" title="希尔排序"></a>希尔排序</h2><p><strong>原理</strong></p><p>希尔排序，也称递减增量排序算法，是插入排序的一种更高效的改进版本。希尔排序是非稳定排序算法。<br>希尔排序是基于插入排序的以下两点性质而提出改进方法的：<br>插入排序在对几乎已经排好序的数据操作时，效率高，即可以达到线性排序的效率<br>但插入排序一般来说是低效的，因为插入排序每次只能将数据移动一位。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190225518-1370369504.gif" alt=""></p><p><strong>步骤</strong></p><p>每次以一定步长(就是跳过等距的数)进行排序，直至步长为1.</p><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">shell_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 初始步长</span>    gap <span class="token operator">=</span> n <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">while</span> gap <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> range<span class="token punctuation">(</span>gap<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 每个步长进行插入排序</span>            temp <span class="token operator">=</span> list<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            j <span class="token operator">=</span> i            <span class="token comment" spellcheck="true"># 插入排序</span>            <span class="token keyword">while</span> j <span class="token operator">>=</span> gap <span class="token operator">and</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span> <span class="token operator">></span> temp<span class="token punctuation">:</span>                list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>j <span class="token operator">-</span> gap<span class="token punctuation">]</span>                j <span class="token operator">-=</span> gap            list<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> temp        <span class="token comment" spellcheck="true"># 得到新的步长</span>        gap <span class="token operator">=</span> gap <span class="token operator">//</span> <span class="token number">2</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><blockquote><p>步长使用的是Donald Shell的建议，另外步长还可以使用Sedgewick提出的(1, 5, 19, 41, 109,…)。<br>也可以使用<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%2596%2590%25E6%25B3%25A2%25E9%2582%25A3%25E5%25A5%2591%25E6%2595%25B0%25E5%2588%2597" target="_blank" rel="noopener">斐波那契数列</a>除去0和1将剩余的数以黄金分区比的两倍的幂进行运算得到的数列。</p></blockquote><h2 id="归并排序"><a href="#归并排序" class="headerlink" title="归并排序"></a>归并排序</h2><p><strong>原理</strong></p><p>归并操作(归并算法)，指的是将两个已经排序的序列合并成一个序列的操作。归并排序算法依赖归并操作。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190406955-1250220054.gif" alt=""></p><p><strong>步骤</strong></p><p>1.迭代法</p><ol><li>申请空间，使其大小为两个已经排序序列之和，该空间用来存放合并后的序列</li><li>设定两个指针，最初位置分别为两个已经排序序列的起始位置<br> 3.比较两个指针所指向的元素，选择相对小的元素放入到合并空间，并移动指针到下一位置</li><li>重复步骤3直到某一指针到达序列尾</li><li>将另一序列剩下的所有元素直接复制到合并序列尾</li></ol><p><strong>递归法</strong></p><p>假设序列共有n个元素：</p><ol><li>将序列每相邻两个数字进行归并操作，形成 {\displaystyle floor(n/2)} floor(n/2)个序列，排序后每个序列包含两个元素</li><li>将上述序列再次归并，形成 {\displaystyle floor(n/4)} floor(n/4)个序列，每个序列包含四个元素</li><li>重复步骤2，直到所有元素排序完毕</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 递归法</span><span class="token keyword">def</span> <span class="token function">merge_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 认为长度不大于1的数列是有序的</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list    <span class="token comment" spellcheck="true"># 二分列表</span>    middle <span class="token operator">=</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span>    left <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>list<span class="token punctuation">[</span><span class="token punctuation">:</span>middle<span class="token punctuation">]</span><span class="token punctuation">)</span>    right <span class="token operator">=</span> merge_sort<span class="token punctuation">(</span>list<span class="token punctuation">[</span>middle<span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 最后一次合并</span>    <span class="token keyword">return</span> merge<span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token comment" spellcheck="true"># 合并</span><span class="token keyword">def</span> <span class="token function">merge</span><span class="token punctuation">(</span>left<span class="token punctuation">,</span> right<span class="token punctuation">)</span><span class="token punctuation">:</span>    l<span class="token punctuation">,</span>r<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    result<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> l<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>left<span class="token punctuation">)</span> <span class="token operator">and</span> r<span class="token operator">&lt;</span>len<span class="token punctuation">(</span>right<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> left<span class="token punctuation">[</span>l<span class="token punctuation">]</span> <span class="token operator">&lt;</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>left<span class="token punctuation">[</span>l<span class="token punctuation">]</span><span class="token punctuation">)</span>            l<span class="token operator">+=</span><span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span>right<span class="token punctuation">[</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            r <span class="token operator">+=</span><span class="token number">1</span>        reslut <span class="token operator">+=</span>left<span class="token punctuation">[</span>l<span class="token punctuation">:</span><span class="token punctuation">]</span>        result<span class="token operator">+=</span>right<span class="token punctuation">[</span>r<span class="token punctuation">:</span><span class="token punctuation">]</span>                    <span class="token keyword">return</span> result<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>鄙人不才，不知归并排序的迭代法如何用Python实现，望指教。</p><h2 id="快速排序"><a href="#快速排序" class="headerlink" title="快速排序"></a>快速排序</h2><p><strong>原理</strong></p><p>快速排序使用分治法（Divide and conquer）策略来把一个序列（list）分为两个子序列（sub-lists）。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190611263-753990372.gif" alt=""></p><p><strong>步骤</strong></p><ol><li>从数列中挑出一个元素，称为”基准”（pivot），</li><li>重新排序数列，所有元素比基准值小的摆放在基准前面，所有元素比基准值大的摆在基准的后面（相同的数可以到任一边）。在这个分区结束之后，该基准就处于数列的中间位置。这个称为分区（partition）操作。</li><li>递归地（recursive）把小于基准值元素的子数列和大于基准值元素的子数列排序。</li></ol><p><strong>代码</strong></p><p>普通版</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quick_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    less <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    pivotList <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    more <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment" spellcheck="true"># 递归出口</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> list    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment" spellcheck="true"># 将第一个值做为基准</span>        pivot <span class="token operator">=</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> list<span class="token punctuation">:</span>            <span class="token comment" spellcheck="true"># 将比急转小的值放到less数列</span>            <span class="token keyword">if</span> i <span class="token operator">&lt;</span> pivot<span class="token punctuation">:</span>                less<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将比基准打的值放到more数列</span>            <span class="token keyword">elif</span> i <span class="token operator">></span> pivot<span class="token punctuation">:</span>                more<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token comment" spellcheck="true"># 将和基准相同的值保存在基准数列</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>                pivotList<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token comment" spellcheck="true"># 对less数列和more数列继续进行排序</span>        less <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>less<span class="token punctuation">)</span>        more <span class="token operator">=</span> quick_sort<span class="token punctuation">(</span>more<span class="token punctuation">)</span>        <span class="token keyword">return</span> less <span class="token operator">+</span> pivotList <span class="token operator">+</span> more<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>分而治之的思想实现：</p><p>下面这段代码出自《算法图解》传说中的三行实现python快速排序。</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">qsort</span><span class="token punctuation">(</span>arr<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> len<span class="token punctuation">(</span>arr<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> arr    <span class="token keyword">else</span><span class="token punctuation">:</span>        pivot <span class="token operator">=</span> arr<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        less <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> pivot<span class="token punctuation">]</span>        greater <span class="token operator">=</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> arr<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">>=</span> pivot<span class="token punctuation">]</span>        <span class="token keyword">return</span> qsort<span class="token punctuation">(</span>less<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>pivot<span class="token punctuation">]</span> <span class="token operator">+</span> qsort<span class="token punctuation">(</span>greater<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>一行语法糖版本:</p><pre class="line-numbers language-python"><code class="language-python">qs <span class="token operator">=</span> <span class="token keyword">lambda</span> xs <span class="token punctuation">:</span> <span class="token punctuation">(</span> <span class="token punctuation">(</span>len<span class="token punctuation">(</span>xs<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> <span class="token number">1</span> <span class="token operator">and</span> <span class="token punctuation">[</span>xs<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">or</span> <span class="token punctuation">[</span> qs<span class="token punctuation">(</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> xs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">&lt;</span> xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">[</span>xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">+</span> qs<span class="token punctuation">(</span> <span class="token punctuation">[</span>x <span class="token keyword">for</span> x <span class="token keyword">in</span> xs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span> <span class="token keyword">if</span> x <span class="token operator">>=</span> xs<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token punctuation">)</span> <span class="token punctuation">]</span> <span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>是不是感受到了Python的魅力？</p><h2 id="堆排序"><a href="#堆排序" class="headerlink" title="堆排序"></a>堆排序</h2><p><strong>原理</strong></p><p>堆排序（Heapsort）是指利用堆这种数据结构所设计的一种排序算法。堆积是一个近似完全二叉树的结构，并同时满足堆积的性质：即子结点的键值或索引总是小于（或者大于）它的父节点。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190700059-194955464.gif" alt=""></p><p><strong>步骤</strong></p><ol><li>创建最大堆:将堆所有数据重新排序，使其成为最大堆</li><li>最大堆调整:作用是保持最大堆的性质，是创建最大堆的核心子程序</li><li>堆排序:移除位在第一个数据的根节点，并做最大堆调整的递归运算</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">heap_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment" spellcheck="true"># 创建最大堆</span>    <span class="token keyword">for</span> start <span class="token keyword">in</span> range<span class="token punctuation">(</span><span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        sift_down<span class="token punctuation">(</span>list<span class="token punctuation">,</span> start<span class="token punctuation">,</span> len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 堆排序</span>    <span class="token keyword">for</span> end <span class="token keyword">in</span> range<span class="token punctuation">(</span>len<span class="token punctuation">(</span>list<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span>end<span class="token punctuation">]</span> <span class="token operator">=</span> list<span class="token punctuation">[</span>end<span class="token punctuation">]</span><span class="token punctuation">,</span> list<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        sift_down<span class="token punctuation">(</span>list<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> end <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> list<span class="token comment" spellcheck="true"># 最大堆调整</span><span class="token keyword">def</span> <span class="token function">sift_down</span><span class="token punctuation">(</span>lst<span class="token punctuation">,</span> start<span class="token punctuation">,</span> end<span class="token punctuation">)</span><span class="token punctuation">:</span>    root <span class="token operator">=</span> start    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        child <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> root <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> child <span class="token operator">></span> end<span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">if</span> child <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">&lt;=</span> end <span class="token operator">and</span> lst<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lst<span class="token punctuation">[</span>child <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            child <span class="token operator">+=</span> <span class="token number">1</span>        <span class="token keyword">if</span> lst<span class="token punctuation">[</span>root<span class="token punctuation">]</span> <span class="token operator">&lt;</span> lst<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">:</span>            lst<span class="token punctuation">[</span>root<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>child<span class="token punctuation">]</span> <span class="token operator">=</span> lst<span class="token punctuation">[</span>child<span class="token punctuation">]</span><span class="token punctuation">,</span> lst<span class="token punctuation">[</span>root<span class="token punctuation">]</span>            root <span class="token operator">=</span> child        <span class="token keyword">else</span><span class="token punctuation">:</span>            <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="计数排序"><a href="#计数排序" class="headerlink" title="计数排序"></a>计数排序</h2><p><strong>原理</strong></p><p>当输入的元素是n个0到k之间的整数时，它的运行时间是Θ(n + k)。计数排序不是比较排序，排序的速度快于任何比较排序算法。</p><p>由于用来计数的数组C的长度取决于待排序数组中数据的范围（等于待排序数组的最大值与最小值的差加上1），这使得计数排序对于数据范围很大的数组，需要大量时间和内存。例如：计数排序是用来排序0到100之间的数字的最好的算法，但是它不适合按字母顺序排序人名。但是，计数排序可以用在基数排序算法中，能够更有效的排序数据范围很大的数组。<br><img src="https://img2018.cnblogs.com/blog/1356841/201810/1356841-20181014190748857-1567575212.gif" alt=""></p><p><strong>步骤</strong></p><ol><li>找出待排序的数组中最大和最小的元素</li><li>统计数组中每个值为i的元素出现的次数，存入数组 C 的第 i 项</li><li>对所有的计数累加（从C中的第一个元素开始，每一项和前一项相加）</li><li>反向填充目标数组：将每个元素i放在新数组的第C(i)项，每放一个元素就将C(i)减去1</li></ol><p><strong>代码</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">count_sort</span><span class="token punctuation">(</span>list<span class="token punctuation">)</span><span class="token punctuation">:</span>    min <span class="token operator">=</span> <span class="token number">2147483647</span>    max <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 取得最大值和最小值</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> list<span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">&lt;</span> min<span class="token punctuation">:</span>            min <span class="token operator">=</span> x        <span class="token keyword">if</span> x <span class="token operator">></span> max<span class="token punctuation">:</span>            max <span class="token operator">=</span> x    <span class="token comment" spellcheck="true"># 创建数组C</span>    count <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token punctuation">(</span>max <span class="token operator">-</span> min <span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> index <span class="token keyword">in</span> list<span class="token punctuation">:</span>        count<span class="token punctuation">[</span>index <span class="token operator">-</span> min<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span>    index <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment" spellcheck="true"># 填值</span>    <span class="token keyword">for</span> a <span class="token keyword">in</span> range<span class="token punctuation">(</span>max <span class="token operator">-</span> min<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> c <span class="token keyword">in</span> range<span class="token punctuation">(</span>count<span class="token punctuation">[</span>a<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            list<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> a <span class="token operator">+</span> min            index <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> list<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="第九种排序"><a href="#第九种排序" class="headerlink" title="第九种排序"></a>第九种排序</h2><p>None？<br>当然不会<br>自然就是系统自带的</p><pre class="line-numbers language-python"><code class="language-python">list<span class="token punctuation">.</span>sort<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><h2 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h2><ul><li>维基百科: <a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%2586%2592%25E6%25B3%25A1%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">冒泡排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E9%2580%2589%25E6%258B%25A9%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">选择排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E6%258F%2592%25E5%2585%25A5%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">插入排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25B8%258C%25E5%25B0%2594%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">希尔排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25BD%2592%25E5%25B9%25B6%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">归并排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25BF%25AB%25E9%2580%259F%25E6%258E%2592%25E5%25BA%258F%23.E5.8E.9F.E5.9C.B0.EF.BC.88in-place.EF.BC.89.E5.88.86.E5.89.B2.E7.9A.84.E7.89.88.E6.9C.AC" target="_blank" rel="noopener">快速排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E5%25A0%2586%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">堆排序</a>、<a href="https://link.zhihu.com/?target=https%3A//zh.wikipedia.org/wiki/%25E8%25AE%25A1%25E6%2595%25B0%25E6%258E%2592%25E5%25BA%258F" target="_blank" rel="noopener">计数排序</a></li><li>[Python Cookbook</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析跨域请求</title>
      <link href="/2018/10/26/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2018/10/26/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做项目的时候遇到了一些跨域问题，虽然网上对于跨域的问题分享还挺多的。不过当我实际遇到的时候还是有点懵。趁项目刚上线完，写篇文章总结下。</p><a id="more"></a><h3 id="造成跨域的原因"><a href="#造成跨域的原因" class="headerlink" title="造成跨域的原因"></a>造成跨域的原因</h3><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种</p><ul><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</li></ul><blockquote><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p></blockquote><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p>了解完跨域之后，想必大家都会有这么一个思考，为什么要有跨域的限制，浏览器这么做是出于何种原因呢。其实仔细想一想就会明白，跨域限制主要是为了安全考虑。</p><p>AJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：</p><ol><li>用户登录了自己的银行页面 <code>http://mybank.com</code>，<code>http://mybank.com</code>向用户的cookie中添加用户标识。</li><li>用户浏览了恶意页面 <code>http://evil.com</code>。执行了页面中的恶意AJAX请求代码。</li><li><code>http://evil.com</code>向<code>http://mybank.com</code>发起AJAX HTTP请求，请求会默认把<code>http://mybank.com</code>对应cookie也同时发送过去。</li><li>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</li><li>而且由于Ajax在后台执行，用户无法感知这一过程。</li></ol><p>DOM同源策略也一样，如果iframe之间可以跨域访问，可以这样攻击：</p><ol><li>做一个假网站，里面用iframe嵌套一个银行网站 <code>http://mybank.com</code>。</li><li>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li><li>这时如果用户输入账号密码，我们的主网站可以跨域访问到<code>http://mybank.com</code>的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击。</li></ol><p>所以说有了跨域跨域限制之后，我们才能更安全的上网了。</p><h3 id="跨域的解决方式"><a href="#跨域的解决方式" class="headerlink" title="跨域的解决方式"></a>跨域的解决方式</h3><h4 id="跨域资源共享（CORS"><a href="#跨域资源共享（CORS" class="headerlink" title="跨域资源共享（CORS)"></a>跨域资源共享（CORS)</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>对于这个方式，阮一峰老师总结的文章特别好，希望深入了解的可以看一下<code>http://www.ruanyifeng.com/blog/2016/04/cors.html</code>。</p><p>通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。</p><p>实现的基础是JavaScript不能够操作HTTP Header。某些浏览器插件实际上是具有这个能力的。</p><p>服务器端在HTTP的响应头中加入（页面层次的控制模式）：</p><p><strong><em>Access-Control-Allow-Origin: example.com</em></strong><br><strong><em>Access-Control-Request-Method: GET, POST</em></strong><br><strong><em>Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin</em></strong></p><p><strong><em>Access-Control-Expose-Headers: Content-Range</em></strong></p><p><strong><em>Access-Control-Max-Age: 3600</em></strong></p><p>多个域名之间用逗号分隔，表示对所示域名提供跨域访问权限。”*”表示允许所有域名的跨域访问。</p><p><strong>客户端可以有两种行为：</strong></p><ol><li><p>发送OPTIONS请求，请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。</p></li><li><p>直接发送请求，然后检查response的Access-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。</p></li></ol><p>本质上服务端的response内容已经到达本地，JavaScript决定是否要去读取。</p><p>这里我就简单的说一说大体流程。</p><ol><li>对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>唯一需要注意的是，我们需要设置我们的xhr属性<code>withCredentials</code>为true，不然的话，cookie是带不过去的哦，设置： <code>xhr.withCredentials = true</code>;</li><li>对于服务器端，需要在 response header中设置如下两个字段:<br><code>Access-Control-Allow-Origin: http://www.yourhost.com</code><br><code>Access-Control-Allow-Credentials:true</code><br>这样，我们就可以跨域请求接口了。</li></ol><p>在django的实际项目中,跨域用CORS技术构建一个中间件，来解决跨域问题：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CORSMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        解决跨域问题        :param request:        :param response:        :return:        """</span>        <span class="token comment" spellcheck="true"># 添加响应头</span>        <span class="token comment" spellcheck="true"># 允许你的域名来获取我的数据</span>        response<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"*"</span>        <span class="token comment" spellcheck="true"># 允许你携带Content-Type请求头</span>        <span class="token comment" spellcheck="true"># response['Access-Control-Allow-Headers'] = "Content-Type"</span>        <span class="token comment" spellcheck="true"># 允许你发送DELETE,PUT</span>        <span class="token comment" spellcheck="true"># response['Access-Control-Allow-Methods'] = "DELETE,PUT"</span>        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jsonp实现跨域"><a href="#jsonp实现跨域" class="headerlink" title="jsonp实现跨域"></a>jsonp实现跨域</h4><p>基本原理就是通过动态创建script标签,然后利用src属性进行跨域。<br>这么说比较模糊，我们来看个例子:</p><pre><code>&lt;script&gt;//定义一个fun函数function fun(data) {     console.log(data); } // 创建一个脚本，并且告诉后端回调函数名叫fun var body= document.getElementsByTagName(&#39;body&#39;)[0]; var script= document.createElement(&#39;script&#39;); script.type= &#39;text/javascript&#39;; script.src= &#39;demo.js?callback=fun&#39;; body.appendChild(script); &lt;/script&gt;</code></pre><p>返回的js脚本，直接会执行。所以就执行了事先定义好的fun函数了，并且把数据传入了进来。</p><pre><code>fun({&quot;name&quot;:&quot;name&quot;})</code></pre><p>当然，这个只是一个原理演示，实际情况下，我们需要动态创建这个fun函数，并且在数据返回的时候销毁它。</p><p>因为在实际使用的时候，我们用的各种ajax库，基本都包含了jsonp的封装，不过我们还是要知道一下原理，不然就不知道为什么jsonp不能发post请求了~</p><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><blockquote><p>服务器代理是万能的。</p></blockquote><h4 id="document-domain来跨子域"><a href="#document-domain来跨子域" class="headerlink" title="document.domain来跨子域"></a>document.domain来跨子域</h4><p>对于主域名相同，而子域名不同的情况，可以使用document.domain来跨域<br>这种方式非常适用于iframe跨域的情况，直接看例子吧<br>比如a页面地址为 <code>a.yourhost.com</code> b页面为 <code>b.yourhost.com</code>。<br>这样就可以通过分别给两个页面设置 <code>document.domain = yourhost.com</code> 来实现跨域。<br>之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。</p><h4 id="使用window-name进行跨域"><a href="#使用window-name进行跨域" class="headerlink" title="使用window.name进行跨域"></a>使用window.name进行跨域</h4><p>window.name跨域同样是受到同源策略限制，父框架和子框架的src必须指向统一域名。window.name的优势在于，name的值在不同的页面(或者不同的域名)，加载后仍然存在，除非你显示的更改。并且支持的长度达到2M.</p><p>代码如下：</p><pre><code>//a页面的代码&lt;script type=&quot;text/javascript&quot;&gt;    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    var state = 0;    iframe.onload = function() {      if(state === 1) {          var data = iframe.contentWindow.name;          console.log(data);          iframe.contentWindow.document.write(&#39;&#39;);          iframe.contentWindow.close();          document.body.removeChild(iframe);      } else if(state === 0) {          state = 1;          iframe.contentWindow.location =           &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;      }    };    document.body.appendChild(iframe);&lt;/script&gt;</code></pre><pre><code>//b页面代码&lt;script type=&quot;text/javascript&quot;&gt;    window.name = &quot;hello&quot;;&lt;/script&gt;</code></pre><h4 id="window-location-hash跨域"><a href="#window-location-hash跨域" class="headerlink" title="window.location.hash跨域"></a>window.location.hash跨域</h4><p>location.hash方式跨域，是子框架具有修改父框架src的hash值，通过这个属性进行传递数据，且更改hash值，页面不会刷新。但是传递的数据的字节数是有限的。</p><blockquote><p>注意：父子框架受同源策略的限制</p></blockquote><p>代码如下:</p><pre><code>//a页面的代码&lt;script type=&quot;text/javascript&quot;&gt;    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    var state = 0;    iframe.onload = function() {      if(state === 1) {          var data = window.location.hash;          console.log(data);          iframe.contentWindow.document.write(&#39;&#39;);          iframe.contentWindow.close();          document.body.removeChild(iframe);      } else if(state === 0) {          state = 1;          iframe.contentWindow.location =           &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;      }    };    document.body.appendChild(iframe);&lt;/script&gt;//b页面代码&lt;script type=&quot;text/javascript&quot;&gt;    parent.location.hash = &quot;world&quot;;&lt;/script&gt;</code></pre><h4 id="window-top"><a href="#window-top" class="headerlink" title="window.top"></a>window.top</h4><p>window.top方法可以访问最顶层的window对象，可以取到最顶层window对象的属性和方法。这样子框架就可以操作父页面的交互了。window.parent可以得到父框架的window对象。</p><p>代码如下：</p><pre><code>//a页面代码&lt;script type=&quot;text/javascript&quot;&gt;    function funa(){        console.log(&quot;a页面的方法&quot;);    }    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    iframe.src = &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;    document.body.appendChild(iframe);&lt;/script&gt;//b页面的代码&lt;script type=&quot;text/javascript&quot;&gt;console.log(window.top.funa());function funb(){  console.log(&quot;b页面的方法&quot;);}iframe = document.createElement(&#39;iframe&#39;);iframe.style.display = &#39;none&#39;;iframe.src = &#39;http://m.zhuanzhuan.58.com:8887/c.html&#39;;document.body.appendChild(iframe);&lt;/script&gt;//c页面的代码&lt;script type=&quot;text/javascript&quot;&gt;  console.log(window.parent.funb());&lt;/script&gt;</code></pre><h4 id="使用postMessage实现页面之间通信"><a href="#使用postMessage实现页面之间通信" class="headerlink" title="使用postMessage实现页面之间通信"></a>使用postMessage实现页面之间通信</h4><p>信息传递除了客户端与服务器之前的传递，还存在以下几个问题：</p><ul><li>页面和新开的窗口的数据交互。</li><li>多窗口之间的数据交互。</li><li>页面与所嵌套的iframe之间的信息传递。</li></ul><p>window.postMessage是一个HTML5的api，允许两个窗口之间进行跨域发送消息。这个应该就是以后解决dom跨域通用方法了，具体可以参照MDN。</p><blockquote><p>补充： 其实还有一些方法，比如window.name和location.hash。就很适用于iframe的跨域，不过iframe用的比较少了，所以这些方法也就有点过时了。</p></blockquote><p>这些就是我对跨域的了解了，实际情况下，一般用cors，jsonp等常见方法就可以了。不过遇到了一些非常规情况，我们还是需要知道有更多的方法可以选择的</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python虚拟环境--virtualenv</title>
      <link href="/2018/10/26/pythonenv/"/>
      <url>/2018/10/26/pythonenv/</url>
      
        <content type="html"><![CDATA[<h2 id="1-virtualenv"><a href="#1-virtualenv" class="headerlink" title="1. virtualenv"></a>1. virtualenv</h2><p>　　virtualenv 是一个创建隔绝的Python环境的工具。virtualenv创建一个包含所有必要的可执行文件的文件夹，用来使用Python工程所需的包。<br><a id="more"></a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><pre><code>pip install virtualenv</code></pre><h3 id="1-2基本使用"><a href="#1-2基本使用" class="headerlink" title="1.2基本使用"></a>1.2基本使用</h3><ol><li>为一个工程创建一个虚拟环境：</li></ol><pre><code>$ cd my_project_dir$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义</code></pre><p><code>virtualenv venv</code> 将会在当前的目录中创建一个文件夹，包含了Python可执行文件，以及 <code>pip</code> 库的一份拷贝，这样就能安装其他包了。虚拟环境的名字（此例中是 <code>venv</code> ）可以是任意的；若省略名字将会把文件均放在当前目录。</p><p>　　在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 <code>venv</code> 的文件中。</p><p>　　你可以选择使用一个Python解释器：</p><pre><code>$ virtualenv -p /usr/bin/python2.7 venv　　　　# -p参数指定Python解释器程序路径</code></pre><p>　　这将会使用 <code>/usr/bin/python2.7</code> 中的Python解释器。</p><ol><li>要开始使用虚拟环境，其需要被激活：</li></ol><pre><code>$ source venv/bin/activate　　　</code></pre><p><code>从现在起，任何你使用pip安装的包将会放在 venv</code> 文件夹中，与全局安装的Python隔绝开。</p><p>像平常一样安装包，比如：</p><pre><code>$ pip install requests</code></pre><ol><li>如果你在虚拟环境中暂时完成了工作，则可以停用它：</li></ol><pre><code>$ . venv/bin/deactivate</code></pre><p>这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。</p><p>要删除一个虚拟环境，只需删除它的文件夹。（执行 <code>rm -rf venv</code> ）。</p><p>这里virtualenv 有些不便，因为virtual的启动、停止脚本都在特定文件夹，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。</p><h2 id="2-virtualenvwrapper"><a href="#2-virtualenvwrapper" class="headerlink" title="2. virtualenvwrapper"></a>2. virtualenvwrapper</h2><p>　　鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。</p><h3 id="2-1-安装virtualenvwrapper"><a href="#2-1-安装virtualenvwrapper" class="headerlink" title="2.1 安装virtualenvwrapper"></a>2.1 安装virtualenvwrapper</h3><p>(确保virtualenv已安装)</p><pre><code>pip install virtualenvwrapperpip install virtualenvwrapper-win　　#Windows使用该命令</code></pre><p>安装完成后，在~/.bashrc写入以下内容</p><pre><code>export WORKON_HOME=~/Envssource /usr/local/bin/virtualenvwrapper.sh　　</code></pre><p>第一行：<strong>virtualenvwrapper</strong>存放虚拟环境目录</p><p>第二行：<strong>virtrualenvwrapper</strong>会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p><pre><code>source ~/.bashrc　　　　#读入配置文件，立即生效</code></pre><p>　</p><h3 id="2-2-virtualenvwrapper基本使用"><a href="#2-2-virtualenvwrapper基本使用" class="headerlink" title="2.2 virtualenvwrapper基本使用"></a>2.2 virtualenvwrapper基本使用</h3><ol><li>创建虚拟环境——<strong>mkvirtualenv</strong></li></ol><pre><code>mkvirtualenv venv　　　</code></pre><p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。</p><p>若想指定python版本，可通过”–python”指定python解释器</p><pre><code>mkvirtualenv --python=/usr/local/python3.5.3/bin/python venv</code></pre><ol start="2"><li>基本命令 　</li></ol><p>　　查看当前的虚拟环境目录</p><pre><code>[root@localhost ~]# workonpy2py3</code></pre><p>　　切换到虚拟环境</p><pre><code>[root@localhost ~]# workon py3(py3) [root@localhost ~]# </code></pre><p>　　退出虚拟环境</p><pre><code>(py3) [root@localhost ~]# deactivate[root@localhost ~]# </code></pre><p>　　删除虚拟环境</p><pre><code>rmvirtualenv venv</code></pre><blockquote><p>本文参考链接：<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析Python日志重复输出问题</title>
      <link href="/2018/10/17/logging/"/>
      <url>/2018/10/17/logging/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/868097/pexels-photo-868097.jpeg?cs=srgb&amp;dl=adventure-backpack-blue-mountains-868097.jpg&amp;fm=jpg" alt=""></p><a id="more"></a><h2 id="问题起源："><a href="#问题起源：" class="headerlink" title="问题起源："></a>问题起源：</h2><p>​    在学习了python的函数式编程后，又接触到了logging这样一个强大的日志模块。为了减少重复代码，应该不少同学和我一样便迫不及待的写了一个自己的日志函数，比如下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment" spellcheck="true"># 这里为了便于理解，简单的展示了一个输出到屏幕的日志函数</span><span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数写好了，看起来似乎也没有问题，我们来运行一下！</p><p>结果如下：</p><blockquote><p>2018-06-21 13:06:37,569 - mysql.log - ERROR - run one<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three</p></blockquote><p>日志居然重复输出了，且数量递增。</p><hr><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><ul><li><p>实际上<code>logger = logging.getLogger(&#39;mysql.log&#39;)</code>在执行时，没有每次生成一个新的logger，而是先检查内存中是否存在一个叫做‘mysql.log’的logger对象，存在则取出，不存在则新建。</p></li><li><p>实例化的logger对象具有‘handlers’这样一个属性来存储 Handler，代码演示如下：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每次被调用后打印出logger的handlers列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>[]<br>2018-06-21 13:26:14,059 - mysql.log - ERROR - run one<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;, &lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three</stderr></stderr></stderr></p></blockquote><ol><li><code>logger.handlers</code>最初是一个空列表，执行‘logger.addHandler(ch)’添加一个‘StreamHandler’，输出一条日志</li><li>在第二次被调用时，<code>logger.handlers</code>已经存在一个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个‘StreamHandler’，此时的logger有两个‘StreamHandler’，输出两条重复的日志</li><li>在第三次被调用时，<code>logger.handlers</code>已经存在两个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个，此时的logger有三个‘StreamHandler’，输出三条重复的日志</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-改名换姓"><a href="#1-改名换姓" class="headerlink" title="1.改名换姓"></a>1.改名换姓</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment" spellcheck="true"># 为日志函数添加一个name，每次调用时传入不同的日志名</span><span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token string">'log1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'log2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'log3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>2018-06-21 13:40:51,685 - log1 - ERROR - run one<br>2018-06-21 13:40:51,685 - log2 - ERROR - run two<br>2018-06-21 13:40:51,685 - log3 - ERROR - run three</p></blockquote><h3 id="2-及时清理（logger-handlers-clear）"><a href="#2-及时清理（logger-handlers-clear）" class="headerlink" title="2.及时清理（logger.handlers.clear）"></a>2.及时清理（logger.handlers.clear）</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每次被调用后，清空已经存在handler</span>    logger<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps：removeHandler方法（兼容性较差）</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这种写法下的可以使用removeHandler方法(logger.handlers.clear也可以使用在这种写法的函数内)</span><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在使用完ch后从移除Handler</span>    logger<span class="token punctuation">.</span>removeHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###3.用前判断</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断logger是否已经添加过handler，是则直接返回logger对象，否则执行handler设定以及addHandler(ch)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> logger<span class="token punctuation">.</span>handlers<span class="token punctuation">:</span>        ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>        fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>        ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    第一次遇到日志重复输出问题，那时还没有学习到面向对象编程的内容，当时并没有真正理解logging模块。学习完面向对象编程后，回过头来再思考这些问题有了豁然开朗的感觉。</p><p>​        比如起初对<code>logging.getLogger</code>的实际原理不是很理解，在学习了面向对象编程中的hasattr、getattr、setattr这样一些方法后就恍然大悟了。所以诸君如果现在还是对logging模块不太理解，不妨先不纠结于这些细节，继续学下去。</p><p>​    知识面扩充后，曾经的一些难题自然就会迎刃而解：）</p><hr><blockquote><p>参考内容：</p><p>luffycity : <a href="https://www.luffycity.com/home" target="_blank" rel="noopener">https://www.luffycity.com/home</a></p><p><a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a></p><p><a href="https://blog.csdn.net/huilan_same" target="_blank" rel="noopener">huilan_same</a> ：<a href="https://blog.csdn.net/huilan_same/article/details/51858817" target="_blank" rel="noopener">https://blog.csdn.net/huilan_same/article/details/51858817</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES基础学习</title>
      <link href="/2018/10/17/ES6/"/>
      <url>/2018/10/17/ES6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是ECMAScript"><a href="#1-什么是ECMAScript" class="headerlink" title="1. 什么是ECMAScript"></a>1. 什么是ECMAScript</h2><blockquote><p>ECMAScript是一种由<a href="https://baike.baidu.com/item/Ecma%E5%9B%BD%E9%99%85" target="_blank" rel="noopener">Ecma国际</a>（前身为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A/2052072" target="_blank" rel="noopener">欧洲计算机制造商协会</a>,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">程序设计语言</a>。这种语言在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">万维网</a>上应用广泛，它往往被称为<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a>或<a href="https://baike.baidu.com/item/JScript" target="_blank" rel="noopener">JScript</a>，所以它可以理解为是javascript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。<br><a id="more"></a></p></blockquote><h3 id="ECMAScript-与-JavaScript"><a href="#ECMAScript-与-JavaScript" class="headerlink" title="ECMAScript 与 JavaScript"></a>ECMAScript 与 JavaScript</h3><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><h2 id="2-什么是ES6"><a href="#2-什么是ES6" class="headerlink" title="2. 什么是ES6"></a>2. 什么是ES6</h2><p><strong>ES6</strong>是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。</p><p>ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。</p><p>尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p><h2 id="3-ES6语法"><a href="#3-ES6语法" class="headerlink" title="3. ES6语法"></a>3. ES6语法</h2><h3 id="3-1-let命令"><a href="#3-1-let命令" class="headerlink" title="3.1 let命令"></a>3.1 let命令</h3><h4 id="3-1-1-基础用法"><a href="#3-1-1-基础用法" class="headerlink" title="3.1.1 基础用法"></a>3.1.1 基础用法</h4><p>es6新增了 let 命令，用来声明变量。它的用法类似于 var ，但是所声明的变量，只在let命令所在的代码块内有效。</p><pre><code>{  let a = 10;  var b = 1;}a // ReferenceError: a is not defined.b // 1</code></pre><p>上面代码在代码块之中，分别用 let 和 var 声明了两个变量。然后在代码块之外调用这两个变量，结果 let 声明的变量报错， var 声明的变量返回了正确的值。这表明， let 声明的变量只在它所在的代码块有效</p><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p><pre><code>for (let i = 0; i &lt; 10; i++) {  // ...}console.log(i);// ReferenceError: i is not defined</code></pre><p>上面代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><pre><code>var a = [];for (var i = 0; i &lt; 10; i++) {  a[i] = function () {    console.log(i);  };}a[6](); // 10</code></pre><p>上面代码中，变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p><pre><code>var a = [];for (let i = 0; i &lt; 10; i++) {  a[i] = function () {    console.log(i);  };}a[6](); // 6</code></pre><p>上面代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><pre><code>for (let i = 0; i &lt; 3; i++) {  let i = &#39;abc&#39;;  console.log(i);}// abc// abc// abc</code></pre><p>上面代码正确运行，输出了 3 次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><h4 id="3-1-2-不存在变量提升"><a href="#3-1-2-不存在变量提升" class="headerlink" title="3.1.2 不存在变量提升"></a>3.1.2 不存在变量提升</h4><p><code>var</code>命令会发生”变量提升“现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><pre><code>// var 的情况console.log(foo); // 输出undefinedvar foo = 2;// let 的情况console.log(bar); // 报错ReferenceErrorlet bar = 2;</code></pre><p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><h4 id="3-1-3-为什么需要块级作用域？"><a href="#3-1-3-为什么需要块级作用域？" class="headerlink" title="3.1.3 为什么需要块级作用域？"></a>3.1.3 为什么需要块级作用域？</h4><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p> 第一种场景，内层变量可能会覆盖外层变量。</p><pre><code>var tmp = new Date();function f() {  console.log(tmp);  if (false) {    var tmp = &#39;hello world&#39;;  }}f(); // undefined</code></pre><p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><pre><code>var s = &#39;hello&#39;;for (var i = 0; i &lt; s.length; i++) {  console.log(s[i]);}console.log(i); // 5</code></pre><p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h4 id="3-1-4-不允许重复声明"><a href="#3-1-4-不允许重复声明" class="headerlink" title="3.1.4 不允许重复声明"></a>3.1.4 不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre><code>// 报错function func() {  let a = 10;  var a = 1;}// 报错function func() {  let a = 10;  let a = 1;}</code></pre><p>因此，不能在函数内部重新声明参数。</p><pre><code>function func(arg) {  let arg; // 报错}function func(arg) {  {    let arg; // 不报错  }}</code></pre><h3 id="3-2-const命令"><a href="#3-2-const命令" class="headerlink" title="3.2 const命令"></a>3.2 const命令</h3><h4 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h4><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><pre><code>const PI = 3.1415;PI // 3.1415PI = 3;// TypeError: Assignment to constant variable.</code></pre><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre><code>const foo;// SyntaxError: Missing initializer in const declaration</code></pre><p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><pre><code>if (true) {  const MAX = 5;}MAX // Uncaught ReferenceError: MAX is not defined</code></pre><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><pre><code>if (true) {  console.log(MAX); // ReferenceError  const MAX = 5;}</code></pre><p>上面代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><pre><code>var message = &quot;Hello!&quot;;let age = 25;// 以下两行都会报错const message = &quot;Goodbye!&quot;;const age = 30;</code></pre><h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><p>传统的JavaScript语言，输出模板通常是这样的写的。</p><pre><code>$(&#39;#result&#39;).append(  &#39;There are &lt;b&gt;&#39; + basket.count + &#39;&lt;/b&gt; &#39; +  &#39;items in your basket, &#39; +  &#39;&lt;em&gt;&#39; + basket.onSale +  &#39;&lt;/em&gt; are on sale!&#39;);</code></pre><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><pre><code> $(&#39;#result&#39;).append(`   There are &lt;b&gt;${basket.count}&lt;/b&gt; items    in your basket, &lt;em&gt;${basket.onSale}&lt;/em&gt;   are on sale! `);</code></pre><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p><pre><code>// 普通字符串`In JavaScript &#39;\n&#39; is a line-feed.`// 多行字符串`In JavaScript this is not legal.`console.log(`string text line 1string text line 2`);// 字符串中嵌入变量let name = &quot;Bob&quot;, time = &quot;today&quot;;`Hello ${name}, how are you ${time}?`</code></pre><p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><pre><code>let greeting = `\`Yo\` World!`;</code></pre><p>输入结果：<code>Yo</code> World!</p><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><pre><code>$(&#39;#list&#39;).html(`&lt;ul&gt;  &lt;li&gt;first&lt;/li&gt;  &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;`);</code></pre><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p>阮一峰：<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/let</a></p><p>维基百科： <a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/ECMAScript</a></p><p>百度百科：<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/17/hello-world/"/>
      <url>/2018/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
