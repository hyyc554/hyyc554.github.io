<?xml version="1.0" encoding="utf-8"?>
<search> 
  
    
    <entry>
      <title>浅析跨域请求</title>
      <link href="/2018/10/26/%E8%B7%A8%E5%9F%9F/"/>
      <url>/2018/10/26/%E8%B7%A8%E5%9F%9F/</url>
      
        <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言</h3><p>最近做项目的时候遇到了一些跨域问题，虽然网上对于跨域的问题分享还挺多的。不过当我实际遇到的时候还是有点懵。趁项目刚上线完，写篇文章总结下。</p><a id="more"></a><h3 id="造成跨域的原因"><a href="#造成跨域的原因" class="headerlink" title="造成跨域的原因"></a>造成跨域的原因</h3><p>浏览器的同源策略会导致跨域，这里同源策略又分为以下两种</p><ul><li>DOM同源策略：禁止对不同源页面DOM进行操作。这里主要场景是iframe跨域的情况，不同域名的iframe是限制互相访问的。</li><li>XmlHttpRequest同源策略：禁止使用XHR对象向不同源的服务器地址发起HTTP请求。</li></ul><blockquote><p>只要协议、域名、端口有任何一个不同，都被当作是不同的域，之间的请求就是跨域操作。</p></blockquote><h3 id="为什么要有跨域限制"><a href="#为什么要有跨域限制" class="headerlink" title="为什么要有跨域限制"></a>为什么要有跨域限制</h3><p>了解完跨域之后，想必大家都会有这么一个思考，为什么要有跨域的限制，浏览器这么做是出于何种原因呢。其实仔细想一想就会明白，跨域限制主要是为了安全考虑。</p><p>AJAX同源策略主要用来防止CSRF攻击。如果没有AJAX同源策略，相当危险，我们发起的每一次HTTP请求都会带上请求地址对应的cookie，那么可以做如下攻击：</p><ol><li>用户登录了自己的银行页面 <code>http://mybank.com</code>，<code>http://mybank.com</code>向用户的cookie中添加用户标识。</li><li>用户浏览了恶意页面 <code>http://evil.com</code>。执行了页面中的恶意AJAX请求代码。</li><li><code>http://evil.com</code>向<code>http://mybank.com</code>发起AJAX HTTP请求，请求会默认把<code>http://mybank.com</code>对应cookie也同时发送过去。</li><li>银行页面从发送的cookie中提取用户标识，验证用户无误，response中返回请求数据。此时数据就泄露了。</li><li>而且由于Ajax在后台执行，用户无法感知这一过程。</li></ol><p>DOM同源策略也一样，如果iframe之间可以跨域访问，可以这样攻击：</p><ol><li>做一个假网站，里面用iframe嵌套一个银行网站 <code>http://mybank.com</code>。</li><li>把iframe宽高啥的调整到页面全部，这样用户进来除了域名，别的部分和银行的网站没有任何差别。</li><li>这时如果用户输入账号密码，我们的主网站可以跨域访问到<code>http://mybank.com</code>的dom节点，就可以拿到用户的输入了，那么就完成了一次攻击。</li></ol><p>所以说有了跨域跨域限制之后，我们才能更安全的上网了。</p><h3 id="跨域的解决方式"><a href="#跨域的解决方式" class="headerlink" title="跨域的解决方式"></a>跨域的解决方式</h3><h4 id="跨域资源共享（CORS"><a href="#跨域资源共享（CORS" class="headerlink" title="跨域资源共享（CORS)"></a>跨域资源共享（CORS)</h4><p>CORS是一个W3C标准，全称是”跨域资源共享”（Cross-origin resource sharing）。<br>对于这个方式，阮一峰老师总结的文章特别好，希望深入了解的可以看一下<code>http://www.ruanyifeng.com/blog/2016/04/cors.html</code>。</p><p>通过在HTTP Header中加入扩展字段，服务器在相应网页头部加入字段表示允许访问的domain和HTTP method，客户端检查自己的域是否在允许列表中，决定是否处理响应。</p><p>实现的基础是JavaScript不能够操作HTTP Header。某些浏览器插件实际上是具有这个能力的。</p><p>服务器端在HTTP的响应头中加入（页面层次的控制模式）：</p><p><strong><em>Access-Control-Allow-Origin: example.com</em></strong><br><strong><em>Access-Control-Request-Method: GET, POST</em></strong><br><strong><em>Access-Control-Allow-Headers: Content-Type, Authorization, Accept, Range, Origin</em></strong></p><p><strong><em>Access-Control-Expose-Headers: Content-Range</em></strong></p><p><strong><em>Access-Control-Max-Age: 3600</em></strong></p><p>多个域名之间用逗号分隔，表示对所示域名提供跨域访问权限。”*”表示允许所有域名的跨域访问。</p><p><strong>客户端可以有两种行为：</strong></p><ol><li><p>发送OPTIONS请求，请求Access-Control信息。如果自己的域名在允许的访问列表中，则发送真正的请求，否则放弃请求发送。</p></li><li><p>直接发送请求，然后检查response的Access-Control信息，如果自己的域名在允许的访问列表中，则读取response body，否则放弃。</p></li></ol><p>本质上服务端的response内容已经到达本地，JavaScript决定是否要去读取。</p><p>这里我就简单的说一说大体流程。</p><ol><li>对于客户端，我们还是正常使用xhr对象发送ajax请求。<br>唯一需要注意的是，我们需要设置我们的xhr属性<code>withCredentials</code>为true，不然的话，cookie是带不过去的哦，设置： <code>xhr.withCredentials = true</code>;</li><li>对于服务器端，需要在 response header中设置如下两个字段:<br><code>Access-Control-Allow-Origin: http://www.yourhost.com</code><br><code>Access-Control-Allow-Credentials:true</code><br>这样，我们就可以跨域请求接口了。</li></ol><p>在django的实际项目中,跨域用CORS技术构建一个中间件，来解决跨域问题：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">CORSMiddleware</span><span class="token punctuation">(</span>MiddlewareMixin<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">process_response</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> request<span class="token punctuation">,</span> response<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token triple-quoted-string string">"""        解决跨域问题        :param request:        :param response:        :return:        """</span>        <span class="token comment" spellcheck="true"># 添加响应头</span>        <span class="token comment" spellcheck="true"># 允许你的域名来获取我的数据</span>        response<span class="token punctuation">[</span><span class="token string">'Access-Control-Allow-Origin'</span><span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token string">"*"</span>        <span class="token comment" spellcheck="true"># 允许你携带Content-Type请求头</span>        <span class="token comment" spellcheck="true"># response['Access-Control-Allow-Headers'] = "Content-Type"</span>        <span class="token comment" spellcheck="true"># 允许你发送DELETE,PUT</span>        <span class="token comment" spellcheck="true"># response['Access-Control-Allow-Methods'] = "DELETE,PUT"</span>        <span class="token keyword">return</span> response<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="jsonp实现跨域"><a href="#jsonp实现跨域" class="headerlink" title="jsonp实现跨域"></a>jsonp实现跨域</h4><p>基本原理就是通过动态创建script标签,然后利用src属性进行跨域。<br>这么说比较模糊，我们来看个例子:</p><pre><code>&lt;script&gt;//定义一个fun函数function fun(data) {     console.log(data); } // 创建一个脚本，并且告诉后端回调函数名叫fun var body= document.getElementsByTagName(&#39;body&#39;)[0]; var script= document.createElement(&#39;script&#39;); script.type= &#39;text/javascript&#39;; script.src= &#39;demo.js?callback=fun&#39;; body.appendChild(script); &lt;/script&gt;</code></pre><p>返回的js脚本，直接会执行。所以就执行了事先定义好的fun函数了，并且把数据传入了进来。</p><pre><code>fun({&quot;name&quot;:&quot;name&quot;})</code></pre><p>当然，这个只是一个原理演示，实际情况下，我们需要动态创建这个fun函数，并且在数据返回的时候销毁它。</p><p>因为在实际使用的时候，我们用的各种ajax库，基本都包含了jsonp的封装，不过我们还是要知道一下原理，不然就不知道为什么jsonp不能发post请求了~</p><h4 id="服务器代理"><a href="#服务器代理" class="headerlink" title="服务器代理"></a>服务器代理</h4><p>浏览器有跨域限制，但是服务器不存在跨域问题，所以可以由服务器请求所要域的资源再返回给客户端。</p><blockquote><p>服务器代理是万能的。</p></blockquote><h4 id="document-domain来跨子域"><a href="#document-domain来跨子域" class="headerlink" title="document.domain来跨子域"></a>document.domain来跨子域</h4><p>对于主域名相同，而子域名不同的情况，可以使用document.domain来跨域<br>这种方式非常适用于iframe跨域的情况，直接看例子吧<br>比如a页面地址为 <code>a.yourhost.com</code> b页面为 <code>b.yourhost.com</code>。<br>这样就可以通过分别给两个页面设置 <code>document.domain = yourhost.com</code> 来实现跨域。<br>之后，就可以通过 parent 或者 window[‘iframename’]等方式去拿到iframe的window对象了。</p><h4 id="使用window-name进行跨域"><a href="#使用window-name进行跨域" class="headerlink" title="使用window.name进行跨域"></a>使用window.name进行跨域</h4><p>window.name跨域同样是受到同源策略限制，父框架和子框架的src必须指向统一域名。window.name的优势在于，name的值在不同的页面(或者不同的域名)，加载后仍然存在，除非你显示的更改。并且支持的长度达到2M.</p><p>代码如下：</p><pre><code>//a页面的代码&lt;script type=&quot;text/javascript&quot;&gt;    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    var state = 0;    iframe.onload = function() {      if(state === 1) {          var data = iframe.contentWindow.name;          console.log(data);          iframe.contentWindow.document.write(&#39;&#39;);          iframe.contentWindow.close();          document.body.removeChild(iframe);      } else if(state === 0) {          state = 1;          iframe.contentWindow.location =           &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;      }    };    document.body.appendChild(iframe);&lt;/script&gt;</code></pre><pre><code>//b页面代码&lt;script type=&quot;text/javascript&quot;&gt;    window.name = &quot;hello&quot;;&lt;/script&gt;</code></pre><h4 id="window-location-hash跨域"><a href="#window-location-hash跨域" class="headerlink" title="window.location.hash跨域"></a>window.location.hash跨域</h4><p>location.hash方式跨域，是子框架具有修改父框架src的hash值，通过这个属性进行传递数据，且更改hash值，页面不会刷新。但是传递的数据的字节数是有限的。</p><blockquote><p>注意：父子框架受同源策略的限制</p></blockquote><p>代码如下:</p><pre><code>//a页面的代码&lt;script type=&quot;text/javascript&quot;&gt;    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    var state = 0;    iframe.onload = function() {      if(state === 1) {          var data = window.location.hash;          console.log(data);          iframe.contentWindow.document.write(&#39;&#39;);          iframe.contentWindow.close();          document.body.removeChild(iframe);      } else if(state === 0) {          state = 1;          iframe.contentWindow.location =           &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;      }    };    document.body.appendChild(iframe);&lt;/script&gt;//b页面代码&lt;script type=&quot;text/javascript&quot;&gt;    parent.location.hash = &quot;world&quot;;&lt;/script&gt;</code></pre><h4 id="window-top"><a href="#window-top" class="headerlink" title="window.top"></a>window.top</h4><p>window.top方法可以访问最顶层的window对象，可以取到最顶层window对象的属性和方法。这样子框架就可以操作父页面的交互了。window.parent可以得到父框架的window对象。</p><p>代码如下：</p><pre><code>//a页面代码&lt;script type=&quot;text/javascript&quot;&gt;    function funa(){        console.log(&quot;a页面的方法&quot;);    }    iframe = document.createElement(&#39;iframe&#39;);    iframe.style.display = &#39;none&#39;;    iframe.src = &#39;http://m.zhuanzhuan.58.com:8887/b.html&#39;;    document.body.appendChild(iframe);&lt;/script&gt;//b页面的代码&lt;script type=&quot;text/javascript&quot;&gt;console.log(window.top.funa());function funb(){  console.log(&quot;b页面的方法&quot;);}iframe = document.createElement(&#39;iframe&#39;);iframe.style.display = &#39;none&#39;;iframe.src = &#39;http://m.zhuanzhuan.58.com:8887/c.html&#39;;document.body.appendChild(iframe);&lt;/script&gt;//c页面的代码&lt;script type=&quot;text/javascript&quot;&gt;  console.log(window.parent.funb());&lt;/script&gt;</code></pre><h4 id="使用postMessage实现页面之间通信"><a href="#使用postMessage实现页面之间通信" class="headerlink" title="使用postMessage实现页面之间通信"></a>使用postMessage实现页面之间通信</h4><p>信息传递除了客户端与服务器之前的传递，还存在以下几个问题：</p><ul><li>页面和新开的窗口的数据交互。</li><li>多窗口之间的数据交互。</li><li>页面与所嵌套的iframe之间的信息传递。</li></ul><p>window.postMessage是一个HTML5的api，允许两个窗口之间进行跨域发送消息。这个应该就是以后解决dom跨域通用方法了，具体可以参照MDN。</p><blockquote><p>补充： 其实还有一些方法，比如window.name和location.hash。就很适用于iframe的跨域，不过iframe用的比较少了，所以这些方法也就有点过时了。</p></blockquote><p>这些就是我对跨域的了解了，实际情况下，一般用cors，jsonp等常见方法就可以了。不过遇到了一些非常规情况，我们还是需要知道有更多的方法可以选择的</p>]]></content>
      
      
      
        <tags>
            
            <tag> HTTP </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>python虚拟环境--virtualenv</title>
      <link href="/2018/10/26/pythonenv/"/>
      <url>/2018/10/26/pythonenv/</url>
      
        <content type="html"><![CDATA[<h2 id="1-virtualenv"><a href="#1-virtualenv" class="headerlink" title="1. virtualenv"></a>1. virtualenv</h2><p>　　virtualenv 是一个创建隔绝的Python环境的工具。virtualenv创建一个包含所有必要的可执行文件的文件夹，用来使用Python工程所需的包。<br><a id="more"></a></p><h3 id="1-1-安装"><a href="#1-1-安装" class="headerlink" title="1.1 安装"></a>1.1 安装</h3><pre><code>pip install virtualenv</code></pre><h3 id="1-2基本使用"><a href="#1-2基本使用" class="headerlink" title="1.2基本使用"></a>1.2基本使用</h3><ol><li>为一个工程创建一个虚拟环境：</li></ol><pre><code>$ cd my_project_dir$ virtualenv venv　　#venv为虚拟环境目录名，目录名自定义</code></pre><p><code>virtualenv venv</code> 将会在当前的目录中创建一个文件夹，包含了Python可执行文件，以及 <code>pip</code> 库的一份拷贝，这样就能安装其他包了。虚拟环境的名字（此例中是 <code>venv</code> ）可以是任意的；若省略名字将会把文件均放在当前目录。</p><p>　　在任何你运行命令的目录中，这会创建Python的拷贝，并将之放在叫做 <code>venv</code> 的文件中。</p><p>　　你可以选择使用一个Python解释器：</p><pre><code>$ virtualenv -p /usr/bin/python2.7 venv　　　　# -p参数指定Python解释器程序路径</code></pre><p>　　这将会使用 <code>/usr/bin/python2.7</code> 中的Python解释器。</p><ol><li>要开始使用虚拟环境，其需要被激活：</li></ol><pre><code>$ source venv/bin/activate　　　</code></pre><p><code>从现在起，任何你使用pip安装的包将会放在 venv</code> 文件夹中，与全局安装的Python隔绝开。</p><p>像平常一样安装包，比如：</p><pre><code>$ pip install requests</code></pre><ol><li>如果你在虚拟环境中暂时完成了工作，则可以停用它：</li></ol><pre><code>$ . venv/bin/deactivate</code></pre><p>这将会回到系统默认的Python解释器，包括已安装的库也会回到默认的。</p><p>要删除一个虚拟环境，只需删除它的文件夹。（执行 <code>rm -rf venv</code> ）。</p><p>这里virtualenv 有些不便，因为virtual的启动、停止脚本都在特定文件夹，可能一段时间后，你可能会有很多个虚拟环境散落在系统各处，你可能忘记它们的名字或者位置。</p><h2 id="2-virtualenvwrapper"><a href="#2-virtualenvwrapper" class="headerlink" title="2. virtualenvwrapper"></a>2. virtualenvwrapper</h2><p>　　鉴于virtualenv不便于对虚拟环境集中管理，所以推荐直接使用virtualenvwrapper。 virtualenvwrapper提供了一系列命令使得和虚拟环境工作变得便利。它把你所有的虚拟环境都放在一个地方。</p><h3 id="2-1-安装virtualenvwrapper"><a href="#2-1-安装virtualenvwrapper" class="headerlink" title="2.1 安装virtualenvwrapper"></a>2.1 安装virtualenvwrapper</h3><p>(确保virtualenv已安装)</p><pre><code>pip install virtualenvwrapperpip install virtualenvwrapper-win　　#Windows使用该命令</code></pre><p>安装完成后，在~/.bashrc写入以下内容</p><pre><code>export WORKON_HOME=~/Envssource /usr/local/bin/virtualenvwrapper.sh　　</code></pre><p>第一行：<strong>virtualenvwrapper</strong>存放虚拟环境目录</p><p>第二行：<strong>virtrualenvwrapper</strong>会安装到python的bin目录下，所以该路径是python安装目录下bin/virtualenvwrapper.sh</p><pre><code>source ~/.bashrc　　　　#读入配置文件，立即生效</code></pre><p>　</p><h3 id="2-2-virtualenvwrapper基本使用"><a href="#2-2-virtualenvwrapper基本使用" class="headerlink" title="2.2 virtualenvwrapper基本使用"></a>2.2 virtualenvwrapper基本使用</h3><ol><li>创建虚拟环境——<strong>mkvirtualenv</strong></li></ol><pre><code>mkvirtualenv venv　　　</code></pre><p>这样会在WORKON_HOME变量指定的目录下新建名为venv的虚拟环境。</p><p>若想指定python版本，可通过”–python”指定python解释器</p><pre><code>mkvirtualenv --python=/usr/local/python3.5.3/bin/python venv</code></pre><ol start="2"><li>基本命令 　</li></ol><p>　　查看当前的虚拟环境目录</p><pre><code>[root@localhost ~]# workonpy2py3</code></pre><p>　　切换到虚拟环境</p><pre><code>[root@localhost ~]# workon py3(py3) [root@localhost ~]# </code></pre><p>　　退出虚拟环境</p><pre><code>(py3) [root@localhost ~]# deactivate[root@localhost ~]# </code></pre><p>　　删除虚拟环境</p><pre><code>rmvirtualenv venv</code></pre><blockquote><p>本文参考链接：<a href="http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html" target="_blank" rel="noopener">http://pythonguidecn.readthedocs.io/zh/latest/dev/virtualenvs.html</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>浅析Python日志重复输出问题</title>
      <link href="/2018/10/17/logging/"/>
      <url>/2018/10/17/logging/</url>
      
        <content type="html"><![CDATA[<p><img src="https://images.pexels.com/photos/868097/pexels-photo-868097.jpeg?cs=srgb&amp;dl=adventure-backpack-blue-mountains-868097.jpg&amp;fm=jpg" alt=""></p><a id="more"></a><h2 id="问题起源："><a href="#问题起源：" class="headerlink" title="问题起源："></a>问题起源：</h2><p>​    在学习了python的函数式编程后，又接触到了logging这样一个强大的日志模块。为了减少重复代码，应该不少同学和我一样便迫不及待的写了一个自己的日志函数，比如下面这样：</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment" spellcheck="true"># 这里为了便于理解，简单的展示了一个输出到屏幕的日志函数</span><span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>函数写好了，看起来似乎也没有问题，我们来运行一下！</p><p>结果如下：</p><blockquote><p>2018-06-21 13:06:37,569 - mysql.log - ERROR - run one<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run two<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three<br>2018-06-21 13:06:37,569 - mysql.log - ERROR - run three</p></blockquote><p>日志居然重复输出了，且数量递增。</p><hr><h2 id="问题解析"><a href="#问题解析" class="headerlink" title="问题解析"></a>问题解析</h2><ul><li><p>实际上<code>logger = logging.getLogger(&#39;mysql.log&#39;)</code>在执行时，没有每次生成一个新的logger，而是先检查内存中是否存在一个叫做‘mysql.log’的logger对象，存在则取出，不存在则新建。</p></li><li><p>实例化的logger对象具有‘handlers’这样一个属性来存储 Handler，代码演示如下：</p></li></ul><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每次被调用后打印出logger的handlers列表</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>logger<span class="token punctuation">.</span>handlers<span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>[]<br>2018-06-21 13:26:14,059 - mysql.log - ERROR - run one<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run two<br>[&lt;StreamHandler \<stderr> (ERROR)&gt;, &lt;StreamHandler \<stderr> (ERROR)&gt;]<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three<br>2018-06-21 13:26:14,060 - mysql.log - ERROR - run three</stderr></stderr></stderr></p></blockquote><ol><li><code>logger.handlers</code>最初是一个空列表，执行‘logger.addHandler(ch)’添加一个‘StreamHandler’，输出一条日志</li><li>在第二次被调用时，<code>logger.handlers</code>已经存在一个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个‘StreamHandler’，此时的logger有两个‘StreamHandler’，输出两条重复的日志</li><li>在第三次被调用时，<code>logger.handlers</code>已经存在两个‘StreamHandler’，再次执行‘logger.addHandler(ch)’就会再次添加一个，此时的logger有三个‘StreamHandler’，输出三条重复的日志</li></ol><h2 id="解决办法"><a href="#解决办法" class="headerlink" title="解决办法"></a>解决办法</h2><h3 id="1-改名换姓"><a href="#1-改名换姓" class="headerlink" title="1.改名换姓"></a>1.改名换姓</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token comment" spellcheck="true"># 为日志函数添加一个name，每次调用时传入不同的日志名</span><span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span>name<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span>name<span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token string">'log1'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'log2'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'log3'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>运行结果：</p><blockquote><p>2018-06-21 13:40:51,685 - log1 - ERROR - run one<br>2018-06-21 13:40:51,685 - log2 - ERROR - run two<br>2018-06-21 13:40:51,685 - log3 - ERROR - run three</p></blockquote><h3 id="2-及时清理（logger-handlers-clear）"><a href="#2-及时清理（logger-handlers-clear）" class="headerlink" title="2.及时清理（logger.handlers.clear）"></a>2.及时清理（logger.handlers.clear）</h3><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 每次被调用后，清空已经存在handler</span>    logger<span class="token punctuation">.</span>handlers<span class="token punctuation">.</span>clear<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><strong>ps：removeHandler方法（兼容性较差）</strong></p><pre class="line-numbers language-python"><code class="language-python"><span class="token comment" spellcheck="true"># 这种写法下的可以使用removeHandler方法(logger.handlers.clear也可以使用在这种写法的函数内)</span><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>    fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>    ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    logger<span class="token punctuation">.</span>error<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 在使用完ch后从移除Handler</span>    logger<span class="token punctuation">.</span>removeHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>###3.用前判断</p><pre class="line-numbers language-python"><code class="language-python"><span class="token keyword">import</span> logging<span class="token keyword">def</span> <span class="token function">my_log</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    logger <span class="token operator">=</span> logging<span class="token punctuation">.</span>getLogger<span class="token punctuation">(</span><span class="token string">'mysql.log'</span><span class="token punctuation">)</span>    <span class="token comment" spellcheck="true"># 判断logger是否已经添加过handler，是则直接返回logger对象，否则执行handler设定以及addHandler(ch)</span>    <span class="token keyword">if</span> <span class="token operator">not</span> logger<span class="token punctuation">.</span>handlers<span class="token punctuation">:</span>        ch <span class="token operator">=</span> logging<span class="token punctuation">.</span>StreamHandler<span class="token punctuation">(</span><span class="token punctuation">)</span>        ch<span class="token punctuation">.</span>setLevel<span class="token punctuation">(</span>logging<span class="token punctuation">.</span>ERROR<span class="token punctuation">)</span>        fmt <span class="token operator">=</span> logging<span class="token punctuation">.</span>Formatter<span class="token punctuation">(</span><span class="token string">'%(asctime)s - %(name)s - %(levelname)s - %(message)s'</span><span class="token punctuation">)</span>        ch<span class="token punctuation">.</span>setFormatter<span class="token punctuation">(</span>fmt<span class="token punctuation">)</span>        logger<span class="token punctuation">.</span>addHandler<span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">return</span> loggermy_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run one'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run two'</span><span class="token punctuation">)</span>my_log<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>error<span class="token punctuation">(</span><span class="token string">'run three'</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h2><p>​    第一次遇到日志重复输出问题，那时还没有学习到面向对象编程的内容，当时并没有真正理解logging模块。学习完面向对象编程后，回过头来再思考这些问题有了豁然开朗的感觉。</p><p>​        比如起初对<code>logging.getLogger</code>的实际原理不是很理解，在学习了面向对象编程中的hasattr、getattr、setattr这样一些方法后就恍然大悟了。所以诸君如果现在还是对logging模块不太理解，不妨先不纠结于这些细节，继续学下去。</p><p>​    知识面扩充后，曾经的一些难题自然就会迎刃而解：）</p><hr><blockquote><p>参考内容：</p><p>luffycity : <a href="https://www.luffycity.com/home" target="_blank" rel="noopener">https://www.luffycity.com/home</a></p><p><a href="https://docs.python.org/3/library/index.html" target="_blank" rel="noopener">The Python Standard Library</a></p><p><a href="https://blog.csdn.net/huilan_same" target="_blank" rel="noopener">huilan_same</a> ：<a href="https://blog.csdn.net/huilan_same/article/details/51858817" target="_blank" rel="noopener">https://blog.csdn.net/huilan_same/article/details/51858817</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> python </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>ES基础学习</title>
      <link href="/2018/10/17/ES6/"/>
      <url>/2018/10/17/ES6/</url>
      
        <content type="html"><![CDATA[<h2 id="1-什么是ECMAScript"><a href="#1-什么是ECMAScript" class="headerlink" title="1. 什么是ECMAScript"></a>1. 什么是ECMAScript</h2><blockquote><p>ECMAScript是一种由<a href="https://baike.baidu.com/item/Ecma%E5%9B%BD%E9%99%85" target="_blank" rel="noopener">Ecma国际</a>（前身为<a href="https://baike.baidu.com/item/%E6%AC%A7%E6%B4%B2%E8%AE%A1%E7%AE%97%E6%9C%BA%E5%88%B6%E9%80%A0%E5%95%86%E5%8D%8F%E4%BC%9A/2052072" target="_blank" rel="noopener">欧洲计算机制造商协会</a>,英文名称是European Computer Manufacturers Association）通过ECMA-262标准化的脚本<a href="https://baike.baidu.com/item/%E7%A8%8B%E5%BA%8F%E8%AE%BE%E8%AE%A1%E8%AF%AD%E8%A8%80" target="_blank" rel="noopener">程序设计语言</a>。这种语言在<a href="https://baike.baidu.com/item/%E4%B8%87%E7%BB%B4%E7%BD%91" target="_blank" rel="noopener">万维网</a>上应用广泛，它往往被称为<a href="https://baike.baidu.com/item/JavaScript" target="_blank" rel="noopener">JavaScript</a>或<a href="https://baike.baidu.com/item/JScript" target="_blank" rel="noopener">JScript</a>，所以它可以理解为是javascript的一个标准,但实际上后两者是ECMA-262标准的实现和扩展。<br><a id="more"></a></p></blockquote><h3 id="ECMAScript-与-JavaScript"><a href="#ECMAScript-与-JavaScript" class="headerlink" title="ECMAScript 与 JavaScript"></a>ECMAScript 与 JavaScript</h3><p>一个常见的问题是，ECMAScript 和 JavaScript 到底是什么关系？</p><p>要讲清楚这个问题，需要回顾历史。1996 年 11 月，JavaScript 的创造者 Netscape 公司，决定将 JavaScript 提交给标准化组织 ECMA，希望这种语言能够成为国际标准。次年，ECMA 发布 262 号标准文件（ECMA-262）的第一版，规定了浏览器脚本语言的标准，并将这种语言称为 ECMAScript，这个版本就是 1.0 版。</p><p>该标准从一开始就是针对 JavaScript 语言制定的，但是之所以不叫 JavaScript，有两个原因。一是商标，Java 是 Sun 公司的商标，根据授权协议，只有 Netscape 公司可以合法地使用 JavaScript 这个名字，且 JavaScript 本身也已经被 Netscape 公司注册为商标。二是想体现这门语言的制定者是 ECMA，不是 Netscape，这样有利于保证这门语言的开放性和中立性。</p><p>因此，ECMAScript 和 JavaScript 的关系是，前者是后者的规格，后者是前者的一种实现（另外的 ECMAScript 方言还有 Jscript 和 ActionScript）。日常场合，这两个词是可以互换的。</p><h2 id="2-什么是ES6"><a href="#2-什么是ES6" class="headerlink" title="2. 什么是ES6"></a>2. 什么是ES6</h2><p><strong>ES6</strong>是继ES5之后的一次主要改进，语言规范由ES5.1时代的245页扩充至600页。</p><p>ES6增添了许多必要的特性，例如：模块和类，以及一些实用特性，例如Maps、Sets、Promises、生成器（Generators）等。</p><p>尽管ES6做了大量的更新，但是它依旧完全向后兼容以前的版本，标准化委员会决定避免由不兼容版本语言导致的“web体验破碎”。结果是，所有老代码都可以正常运行，整个过渡也显得更为平滑，但随之而来的问题是，开发者们抱怨了多年的老问题依然存在。</p><h2 id="3-ES6语法"><a href="#3-ES6语法" class="headerlink" title="3. ES6语法"></a>3. ES6语法</h2><h3 id="3-1-let命令"><a href="#3-1-let命令" class="headerlink" title="3.1 let命令"></a>3.1 let命令</h3><h4 id="3-1-1-基础用法"><a href="#3-1-1-基础用法" class="headerlink" title="3.1.1 基础用法"></a>3.1.1 基础用法</h4><p>es6新增了 let 命令，用来声明变量。它的用法类似于 var ，但是所声明的变量，只在let命令所在的代码块内有效。</p><pre><code>{  let a = 10;  var b = 1;}a // ReferenceError: a is not defined.b // 1</code></pre><p>上面代码在代码块之中，分别用 let 和 var 声明了两个变量。然后在代码块之外调用这两个变量，结果 let 声明的变量报错， var 声明的变量返回了正确的值。这表明， let 声明的变量只在它所在的代码块有效</p><p><code>for</code>循环的计数器，就很合适使用<code>let</code>命令。</p><pre><code>for (let i = 0; i &lt; 10; i++) {  // ...}console.log(i);// ReferenceError: i is not defined</code></pre><p>上面代码中，计数器<code>i</code>只在<code>for</code>循环体内有效，在循环体外引用就会报错。</p><p>下面的代码如果使用<code>var</code>，最后输出的是<code>10</code>。</p><pre><code>var a = [];for (var i = 0; i &lt; 10; i++) {  a[i] = function () {    console.log(i);  };}a[6](); // 10</code></pre><p>上面代码中，变量<code>i</code>是<code>var</code>命令声明的，在全局范围内都有效，所以全局只有一个变量<code>i</code>。每一次循环，变量<code>i</code>的值都会发生改变，而循环内被赋给数组<code>a</code>的函数内部的<code>console.log(i)</code>，里面的<code>i</code>指向的就是全局的<code>i</code>。也就是说，所有数组<code>a</code>的成员里面的<code>i</code>，指向的都是同一个<code>i</code>，导致运行时输出的是最后一轮的<code>i</code>的值，也就是 10。</p><p>如果使用<code>let</code>，声明的变量仅在块级作用域内有效，最后输出的是 6。</p><pre><code>var a = [];for (let i = 0; i &lt; 10; i++) {  a[i] = function () {    console.log(i);  };}a[6](); // 6</code></pre><p>上面代码中，变量<code>i</code>是<code>let</code>声明的，当前的<code>i</code>只在本轮循环有效，所以每一次循环的<code>i</code>其实都是一个新的变量，所以最后输出的是<code>6</code>。你可能会问，如果每一轮循环的变量<code>i</code>都是重新声明的，那它怎么知道上一轮循环的值，从而计算出本轮循环的值？这是因为 JavaScript 引擎内部会记住上一轮循环的值，初始化本轮的变量<code>i</code>时，就在上一轮循环的基础上进行计算。</p><p>另外，<code>for</code>循环还有一个特别之处，就是设置循环变量的那部分是一个父作用域，而循环体内部是一个单独的子作用域。</p><pre><code>for (let i = 0; i &lt; 3; i++) {  let i = &#39;abc&#39;;  console.log(i);}// abc// abc// abc</code></pre><p>上面代码正确运行，输出了 3 次<code>abc</code>。这表明函数内部的变量<code>i</code>与循环变量<code>i</code>不在同一个作用域，有各自单独的作用域。</p><h4 id="3-1-2-不存在变量提升"><a href="#3-1-2-不存在变量提升" class="headerlink" title="3.1.2 不存在变量提升"></a>3.1.2 不存在变量提升</h4><p><code>var</code>命令会发生”变量提升“现象，即变量可以在声明之前使用，值为<code>undefined</code>。这种现象多多少少是有些奇怪的，按照一般的逻辑，变量应该在声明语句之后才可以使用。</p><p>为了纠正这种现象，<code>let</code>命令改变了语法行为，它所声明的变量一定要在声明后使用，否则报错。</p><pre><code>// var 的情况console.log(foo); // 输出undefinedvar foo = 2;// let 的情况console.log(bar); // 报错ReferenceErrorlet bar = 2;</code></pre><p>上面代码中，变量<code>foo</code>用<code>var</code>命令声明，会发生变量提升，即脚本开始运行时，变量<code>foo</code>已经存在了，但是没有值，所以会输出<code>undefined</code>。变量<code>bar</code>用<code>let</code>命令声明，不会发生变量提升。这表示在声明它之前，变量<code>bar</code>是不存在的，这时如果用到它，就会抛出一个错误。</p><h4 id="3-1-3-为什么需要块级作用域？"><a href="#3-1-3-为什么需要块级作用域？" class="headerlink" title="3.1.3 为什么需要块级作用域？"></a>3.1.3 为什么需要块级作用域？</h4><p>ES5 只有全局作用域和函数作用域，没有块级作用域，这带来很多不合理的场景。</p><p> 第一种场景，内层变量可能会覆盖外层变量。</p><pre><code>var tmp = new Date();function f() {  console.log(tmp);  if (false) {    var tmp = &#39;hello world&#39;;  }}f(); // undefined</code></pre><p>上面代码的原意是，<code>if</code>代码块的外部使用外层的<code>tmp</code>变量，内部使用内层的<code>tmp</code>变量。但是，函数<code>f</code>执行后，输出结果为<code>undefined</code>，原因在于变量提升，导致内层的<code>tmp</code>变量覆盖了外层的<code>tmp</code>变量。</p><p>第二种场景，用来计数的循环变量泄露为全局变量。</p><pre><code>var s = &#39;hello&#39;;for (var i = 0; i &lt; s.length; i++) {  console.log(s[i]);}console.log(i); // 5</code></pre><p>上面代码中，变量<code>i</code>只用来控制循环，但是循环结束后，它并没有消失，泄露成了全局变量。</p><h4 id="3-1-4-不允许重复声明"><a href="#3-1-4-不允许重复声明" class="headerlink" title="3.1.4 不允许重复声明"></a>3.1.4 不允许重复声明</h4><p><code>let</code>不允许在相同作用域内，重复声明同一个变量。</p><pre><code>// 报错function func() {  let a = 10;  var a = 1;}// 报错function func() {  let a = 10;  let a = 1;}</code></pre><p>因此，不能在函数内部重新声明参数。</p><pre><code>function func(arg) {  let arg; // 报错}function func(arg) {  {    let arg; // 不报错  }}</code></pre><h3 id="3-2-const命令"><a href="#3-2-const命令" class="headerlink" title="3.2 const命令"></a>3.2 const命令</h3><h4 id="3-2-1-基本用法"><a href="#3-2-1-基本用法" class="headerlink" title="3.2.1 基本用法"></a>3.2.1 基本用法</h4><p><code>const</code>声明一个只读的常量。一旦声明，常量的值就不能改变。</p><pre><code>const PI = 3.1415;PI // 3.1415PI = 3;// TypeError: Assignment to constant variable.</code></pre><p>上面代码表明改变常量的值会报错。</p><p><code>const</code>声明的变量不得改变值，这意味着，<code>const</code>一旦声明变量，就必须立即初始化，不能留到以后赋值。</p><pre><code>const foo;// SyntaxError: Missing initializer in const declaration</code></pre><p>上面代码表示，对于<code>const</code>来说，只声明不赋值，就会报错。</p><p><code>const</code>的作用域与<code>let</code>命令相同：只在声明所在的块级作用域内有效。</p><pre><code>if (true) {  const MAX = 5;}MAX // Uncaught ReferenceError: MAX is not defined</code></pre><p><code>const</code>命令声明的常量也是不提升，同样存在暂时性死区，只能在声明的位置后面使用。</p><pre><code>if (true) {  console.log(MAX); // ReferenceError  const MAX = 5;}</code></pre><p>上面代码在常量<code>MAX</code>声明之前就调用，结果报错。</p><p><code>const</code>声明的常量，也与<code>let</code>一样不可重复声明。</p><pre><code>var message = &quot;Hello!&quot;;let age = 25;// 以下两行都会报错const message = &quot;Goodbye!&quot;;const age = 30;</code></pre><h3 id="3-3-模板字符串"><a href="#3-3-模板字符串" class="headerlink" title="3.3 模板字符串"></a>3.3 模板字符串</h3><p>传统的JavaScript语言，输出模板通常是这样的写的。</p><pre><code>$(&#39;#result&#39;).append(  &#39;There are &lt;b&gt;&#39; + basket.count + &#39;&lt;/b&gt; &#39; +  &#39;items in your basket, &#39; +  &#39;&lt;em&gt;&#39; + basket.onSale +  &#39;&lt;/em&gt; are on sale!&#39;);</code></pre><p>上面这种写法相当繁琐不方便，ES6 引入了模板字符串解决这个问题。</p><pre><code> $(&#39;#result&#39;).append(`   There are &lt;b&gt;${basket.count}&lt;/b&gt; items    in your basket, &lt;em&gt;${basket.onSale}&lt;/em&gt;   are on sale! `);</code></pre><p>模板字符串（template string）是增强版的字符串，用反引号（`）标识。它可以当作普通字符串使用，也可以用来定义多行字符串，或者在字符串中嵌入变量</p><pre><code>// 普通字符串`In JavaScript &#39;\n&#39; is a line-feed.`// 多行字符串`In JavaScript this is not legal.`console.log(`string text line 1string text line 2`);// 字符串中嵌入变量let name = &quot;Bob&quot;, time = &quot;today&quot;;`Hello ${name}, how are you ${time}?`</code></pre><p>上面代码中的模板字符串，都是用反引号表示。如果在模板字符串中需要使用反引号，则前面要用反斜杠转义。</p><pre><code>let greeting = `\`Yo\` World!`;</code></pre><p>输入结果：<code>Yo</code> World!</p><p>如果使用模板字符串表示多行字符串，所有的空格和缩进都会被保留在输出之中。</p><pre><code>$(&#39;#list&#39;).html(`&lt;ul&gt;  &lt;li&gt;first&lt;/li&gt;  &lt;li&gt;second&lt;/li&gt;&lt;/ul&gt;`);</code></pre><h2 id="参考资料："><a href="#参考资料：" class="headerlink" title="参考资料："></a>参考资料：</h2><blockquote><p>阮一峰：<a href="http://es6.ruanyifeng.com/#docs/let" target="_blank" rel="noopener">http://es6.ruanyifeng.com/#docs/let</a></p><p>维基百科： <a href="https://zh.wikipedia.org/wiki/ECMAScript" target="_blank" rel="noopener">https://zh.wikipedia.org/wiki/ECMAScript</a></p><p>百度百科：<a href="https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin" target="_blank" rel="noopener">https://baike.baidu.com/item/ECMAScript/1889420?fr=aladdin</a></p></blockquote>]]></content>
      
      
      
        <tags>
            
            <tag> 前端 </tag>
            
        </tags>
      
    </entry>
    
    <entry>
      <title>Hello World</title>
      <link href="/2018/10/17/hello-world/"/>
      <url>/2018/10/17/hello-world/</url>
      
        <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo new <span class="token string">"My New Post"</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo server<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><a id="more"></a><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo generate<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><pre class="line-numbers language-bash"><code class="language-bash">$ hexo deploy<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
      
      
      
    </entry>
    
  
  
    
    <entry>
      <title>categories</title>
      <link href="/categories/index.html"/>
      <url>/categories/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
    <entry>
      <title>tags</title>
      <link href="/tags/index.html"/>
      <url>/tags/index.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
    </entry>
    
  
</search>
